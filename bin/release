#!/usr/bin/env node

var path = require('path');
var util = require('util');

var CoreUtil = require('oae-release-tools').CoreUtil;
var PackageUtil = require('oae-release-tools').PackageUtil;
var ReleaseUtil = require('oae-release-tools').ReleaseUtil;


//////////////////////
// HANDLE ARGUMENTS //
//////////////////////

var argv = require('optimist')
    .usage('Usage: $0 [-s] [-p] -r <remote repository> -v <release version>')

    .alias('h', 'help')
    .describe('h', 'Show this help information')

    .alias('s', 'skip-tests')
    .describe('s', 'Skip the unit tests in the release process')

    .alias('p', 'package')
    .describe('p', 'Generate a package tarball (tar.gz) of the tag')

    .alias('r', 'remote')
    .describe('r', 'The remote repository to push the release commits into (e.g., origin)')
    .demand('r')

    .alias('v', 'version')
    .describe('v', 'Which version to release (e.g., 0.4.1)')
    .demand('v')

    .argv;

// Display the help if requested
if (argv.h) {
    require('optimist').showHelp();
    return process.exit(0);
}


/////////////////////
// PERFORM RELEASE //
/////////////////////

var packageJsonPath = path.resolve('package.json');
var packageDest = 'dist';
var remoteName = argv.r;
var version = argv.v;

// Ensure everything is OK to do a release
ReleaseUtil.validateRelease(remoteName, 3);

// If they specified to package after the tag, verify everything is OK to package before doing anything
if (argv.p) {
    PackageUtil.validatePackage(packageDest, 3);
}

// Load and validate the package.json
var packageJson = CoreUtil.loadPackageJson(packageJsonPath, '3akai-ux', 4);

// Ensure our target version is a valid jump from where we are
ReleaseUtil.validateTargetVersion(packageJson, argv.v, remoteName, 5);

// Optionally, run the tests right now
if (!argv.s) {
    CoreUtil.runUnitTests(6);
} else {
    CoreUtil.logWarn('Skipping unit tests because of -s parameter');
}

// Bump the version in package.json to the target version
ReleaseUtil.bumpPackageJsonVersion(packageJsonPath, packageJson.version, argv.v, 7);

// Commit the version change and tag the release
ReleaseUtil.gitCommitVersionAndTag(argv.v, remoteName, 8);

// Optionally package up the release on the tag
if (argv.p || argv.u) {
    var packageCmd = 'bin/package -s';

    // Pass along the upload argument if specified
    if (argv.u) {
        packageCmd += 'u';
    }

    // Skip the tests and just use the version from package.json
    CoreUtil.exec(packageCmd, 'Error distributing the release', 9, true);
}

CoreUtil.logSuccess('Successfully released 3akai-ux '.text + argv.v.white + ' to the remote repository '.text + remoteName.white);
