#!/usr/bin/env node

var path = require('path');
var util = require('util');

var CoreUtil = require('oae-release-tools').CoreUtil;
var PackageUtil = require('oae-release-tools').PackageUtil;


//////////////////////
// HANDLE ARGUMENTS //
//////////////////////

var argv = require('optimist')
    .usage('Usage: $0 [-s] [-u] [--upload-bucket=<bucket name>] [--upload-region=<region name>] [-v <force ui version>]')

    .alias('h', 'help')
    .describe('h', 'Show this help information')

    .alias('v', 'ui-version')
    .describe('v', 'The version of the UI that we are packaging. If not specified, it will be derived from the 3akai-ux version in package.json and git describe')

    .alias('s', 'skip-tests')
    .describe('s', 'Skip the unit tests in the packaging process')

    .alias('c', 'cdn')
    .describe('c', 'The URL of the CDN that will be used')

    .alias('u', 'upload')
    .describe('u', 'Upload the package and checksum to Amazon S3')

    .describe('upload-bucket', 'The Amazon S3 bucket to which to upload the packaged release files')
    .default('upload-bucket', 'oae-releases-travis')

    .describe('upload-region', 'The Amazon S3 region to which to upload the packaged release files')
    .default('upload-region', 'eu-west-1')

    .argv;

// Display the help if requested
if (argv.h) {
    require('optimist').showHelp();
    return process.exit(0);
}


///////////////////////
// PERFORM PACKAGING //
///////////////////////

// Gather system information so we know what system we built on
var systemInfo = CoreUtil.getSystemInfo();
var packageJsonPath = path.resolve('package.json');

// Ensure the target directory doesn't exist yet
var srcDir = 'target';
PackageUtil.validatePackage(srcDir, 3);

// Load and validate the package.json
var packageJson = CoreUtil.loadPackageJson(packageJsonPath, '3akai-ux', 4);

if (!argv.s) {
    CoreUtil.runUnitTests(6);
} else {
    CoreUtil.logWarn('Skipping unit tests because of -s parameter');
}

// Get the url of the CDN, if any
var cdn = argv.c || '';

// Find the 3akai-ux version. If not specified explicitly in the command with a -v parameter, it will be derived
// using a combination of the package.json version and the closest matching tag using git describe
var uiVersion = argv.v || CoreUtil.gitVersion(packageJson.version, 7);

CoreUtil.logSuccess('Resolved UI version to be '.text + uiVersion.white);

// Loudly optimize the UI into the target directory
var cmd = util.format('CDN_URL="%s" node_modules/.bin/grunt', cdn);
CoreUtil.exec(cmd, 'Error during the grunt optimization stage', 8, true);
CoreUtil.logSuccess('Successfully optimized the UI files into the '.text + 'target'.white + ' directory'.text);

// Save the system info into the 3akai-ux target directory. This will tell us at least what version we are
PackageUtil.saveBuildInfo(srcDir, uiVersion, systemInfo, 9);

// Package the source directory into a tarball
var packageFilename = util.format('3akai-ux-%s', uiVersion);
var packageResult = PackageUtil.packageRelease(srcDir, '.', packageFilename, 10);
var checksumResult = PackageUtil.checksumPackage(packageResult.packagePath, 11);

if (argv.u) {
    CoreUtil.exec(util.format('bin/upload -b "%s" -p "%s" -c "%s" -r "%s"', argv['upload-bucket'], packageResult.packagePath, checksumResult.checksumPath, argv['upload-region']), 'Failed to upload release artifacts to Amazon S3', 12, true);
}
