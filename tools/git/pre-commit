#!/bin/sh
#
# A hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#

if git rev-parse --verify HEAD >/dev/null 2>&1
then
    against=HEAD
else
    # Initial commit: diff against an empty tree object
    against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi

# If you want to allow non-ascii filenames set this variable to true.
allownonascii=$(git config hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ascii filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
    # Note that the use of brackets around a tr range is ok here, (it's
    # even required, for portability to Solaris 10's /usr/bin/tr), since
    # the square bracket bytes happen to fall in the designated range.
    test $(git diff --cached --name-only --diff-filter=A -z $against |
      LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
    echo "Error: Attempt to add a non-ascii file name."
    echo
    echo "This can cause problems if you want to work"
    echo "with people on other platforms."
    echo
    echo "To be portable it is advisable to rename the file ..."
    echo
    echo "If you know what you are doing you can disable this"
    echo "check using:"
    echo
    echo "  git config hooks.allownonascii true"
    echo
    exit 1
fi

# If there are whitespace errors, print the offending file names and fail.
if ! git diff-index --check --cached $against --
then
  exit $?
fi

# 3akai-UI code style

git diff-index -p -M --cached -U0 $against -- | ruby -e '
    # Add new rules here, format is { ".ext" => { /regex/ => "message" } }
    rules = {
        ".js" => {
            /[^=!]==[^=]/ => "Use \"===\" or \"!==\" instead of \"==\" and \"!=\"",
            /^\s*\{/ => "Put opening braces on the same line as the statement",
            /[^=!]==[^=]/ => "Use \"===\" instead of \"==\"",
            /!=[^=]/ => "Use \"!==\" instead of \"!=\"",
            /^\s*const\s/ => "Use \"var <ALLCAPS>\" instead of \"const\"",
            /(\$|jQuery)\S*\.(live|die|bind|unbind|delegate|undelegate)\(/ => "Use \".on()\" and \".off()\" to attach event handlers",
            /\.prototype\./ => "Do not extend prototypes",
            /^\s*function\s/ => "Use \"var <functionName> = function() {\"",
            /new\s+(Object|Array|Number|String|Boolean)\s*\(/ => "Use literal notation",
            /(^|\s)(Object\.(freeze|preventExtensions|seal)|(eval|with))(\s|$|\()/ => "Evil",
            /^[^'\'']*"/ => "Use single quotes",
            /"[^'\'']*$/ => "Use single quotes",
            /(^|\s)typeof(\s|$)/ => "Use jquery or underscore for type checking",
            /(\s{2}|[^ (])\{/ => "Put exactly one space before opening braces",
            /\sconsole\./ => "Please don't add console.log statements",
            /^\s*var.*,$/ => "Do not comma separate variable definitions",
            /^\s*var[^$]*=\s*(jQuery|\$)[^.]+(\s|$)/ => "Prefix jQuery vars with $"
        },
        :comment => {
            ".js" => /^\s*(\/\/|\/\*|\*)/
        }
    }
    $found_bad = 0
    $filename = ""
    $reported_filename = ""
    $lineno = 0
    def bad_line(why, line)
        if $found_bad == 0
            warn "*"
            warn "* You can skip this test with \"git commit --no-verify\""
            warn "* You have some suspicious patch lines: "
            warn "*"
            $found_bad = 1
        end
        if $reported_filename != $filename
            warn "* In #{$filename}"
            $reported_filename = $filename
        end
        warn "* #{why} (line #{$lineno})"
        warn "#{$filename}:#{$lineno}: #{line}"
    end
    ext = nil
    ARGF.each do |line|
        if line =~ /^diff --git a\/(.*) b\/\1$/
            $filename = $1
            ext = File.extname($filename)
            next
        end
        if line =~ /^@@ -\S+ \+(\d+)/
            $lineno = $1.to_i - 1
            next
        end
        if line.sub!(/^\+/, "")
            $lineno += 1
            line.chomp!()
            if rules[ext]
                if (rules[:comment] && rules[:comment][ext] && line !~ rules[:comment][ext])
                    rules[ext].each do |regex, msg|
                        if line =~ regex
                            bad_line(msg, line)
                        end
                    end
                end
            end
        end
    end
    exit($found_bad)
'
