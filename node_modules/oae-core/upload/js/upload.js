/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

define(['jquery', 'oae.core', 'jquery.fileupload', 'jquery.iframe-transport', 'jquery.jeditable'], function($, oae) {

    return function(uid) {

        //////////////////////
        // WIDGET VARIABLES //
        //////////////////////

        // The widget container
        var $rootel = $('#' + uid);

        // Keeps track of the selected files to upload
        var selectedFiles = [];
        var selectedFilesSize = 0;

        // Keeps track of the selected visibility for the files to upload. By default, the visibility will be the configured default
        var visibility = oae.api.config.getValue('oae-content', 'visibility', 'files');

        // Generate a widget ID for the new instance of the `setpermissions` widget. This widget ID
        // will be used in the event communication between this widget and the `setpermissions` widget.
        var setPermissionsId = oae.api.util.generateId();

        // IE9 and below don't support XHR file uploads and we fall back to iframe transport
        var useIframeTransport = !$.support.xhrFileUpload && !$.support.xhrFormDataFileUpload;

        // Keeps track of the current context (group or user)
        var contextData = null;


        ///////////////
        // UTILITIES //
        ///////////////

        /**
         * Resets the state of the widget when the modal dialog has been closed
         */
        var reset = function() {
            // Unbind the setpermissions handler
            $(document).off('oae.setpermissions.changed.' + setPermissionsId);

            // Reset the content visibility
            visibility = oae.api.config.getValue('oae-content', 'visibility', 'files');
            $('#upload-permissions-container', $rootel).html('');

            // Reset the selected Files list and total size
            selectedFiles = [];
            selectedFilesSize = 0;

            // Reset the fileupload form
            $('form', $rootel)[0].reset();

            // Hide all steps
            $('#upload-modal .modal-body > div', $rootel).hide();

            // Show the first step
            $('#upload-modal .modal-body > div:first-child', $rootel).show();
            $('#upload-modal > .modal-footer', $rootel).show();

            // Reset controls
            $('#upload-upload', $rootel).hide();
            $('#upload-upload', $rootel).prop('disabled', false);
            $('#upload-permissions', $rootel).hide();
            $('#upload-change-permissions', $rootel).prop('disabled', false);

            // Reset the progress bar
            $('.progress', $rootel).hide();
            updateProgress(0);

            // Remove the focus style on the Browse button
            $('#upload-browse-button', $rootel).removeClass('oae-focus');
        };

        /**
         * Adds selected files to the list of files to upload. Filters out folders and size 0 files
         *
         * @param  {Object}   data   The data object containing information on the files that are selected for upload
         */
        var addToSelected = function(data) {
            $.each(data.files, function(index, file) {
                // Avoid uploading folders and size 0 files
                // IE9 does not support XHR uploads and less metadata is available when a file is selected
                var validFile = false;
                if (useIframeTransport) {
                    if (file.name) {
                        validFile = true;
                    }
                } else {
                    if (file.size > 0 && file.name) {
                        validFile = true;
                        selectedFilesSize += file.size;
                    }
                }
                if (validFile) {
                    var contentObj = {
                        'displayName': file.name,
                        'description': '',
                        'file': file,
                        'type': 'file'
                    };
                    // Add the file to the queue
                    selectedFiles.push(contentObj);
                }
            });
        };

        /**
         * Updates the progress indicator
         *
         * @param  {Number}   progress   Number between 0 and 100 indicating the upload progress
         */
        var updateProgress = function(progress) {
            $('.bar', $rootel).css('width', progress + '%');
        };

        /**
         * Saves the edited file name to the corresponding item in the array of selected files
         *
         * @param  {String}   value     The new value for the item
         * @return {String}             The value to show in the editable field after editing completed
         */
        var editableSubmitted = function(value) {
            value = $.trim(value);
            var prevValue = this.revert;
            var $listItem = $(this).parents('li.oae-list-item');
            // If no name has been entered, we fall back to the previous value
            if (!value) {
                return prevValue;
            } else {
                var fileIndex = $('#upload-selected-container li').index($listItem);
                selectedFiles[fileIndex].displayName = value;
                return value;
            }
        };

        /**
         * Shows a success or failure notification when the upload has completed.
         *
         * @param  {Number}   errCount   The number of errors that occurred during the upload
         */
        var showCompleteNotification = function(errCount) {
            // Render and show the notification
            var notificationTitle = oae.api.util.template().render($('#upload-notification-title-template', $rootel), {
                'context': contextData,
                'errCount': errCount,
                'files': selectedFiles
            });

            var notificationBody = oae.api.util.template().render($('#upload-notification-body-template', $rootel), {
                'context': contextData,
                'errCount': errCount,
                'files': selectedFiles
            });

            oae.api.util.notification(notificationTitle, notificationBody, errCount ? 'error' : 'success');

            // Hide the modal when there are no upload errors
            if (!errCount) {
                $('#upload-modal', $rootel).modal('hide');
            }
        };


        /////////////////////
        // VIEW MANAGEMENT //
        /////////////////////

        /**
         * When files are dropped onto an element that's deisgnated as a drop zone, we skip the first step of
         * selecting files and proceed with showing the files that were dropped
         *
         * @param  {Object}    dropData    The data received from dropping files onto the container
         */
        var showDropped = function(dropData) {
            // Since we already have the selected files we skip to the next step
            setUpUploadField();

            // Add the dropped files to the fileupload field
            $('#upload-input', $rootel).fileupload('add', dropData.files);

            // Add the selected files to the internal list of selected files
            addToSelected(dropData.data);

            // Render the selected list
            renderSelected();
        };

        /**
         * Shows the drop zone with browse button
         */
        var showDropzone = function() {
            $('#upload-dropzone', $rootel).show();
        };

        /**
         * Shows the permissions widget to allow for updates in visiblity and members
         */
        var showPermissions = function() {
            // Hide all containers
            $('#upload-modal .modal-body > div', $rootel).hide();
            $('#upload-modal > .modal-footer', $rootel).hide();
            // Show the permissions container
            $('#upload-modal .modal-body > div#upload-permissions-container', $rootel).show();
            $('#upload-upload', $rootel).hide();
        };

        /**
         * Shows an overview of the selected files
         */
        var showOverview = function() {
            // Hide all containers
            $('#upload-modal .modal-body > div', $rootel).hide();
            // Show the overview container
            $('#upload-modal > .modal-footer', $rootel).show();
            $('#upload-modal .modal-body > div#upload-overview-container', $rootel).show();
            $('#upload-permissions', $rootel).show();
            $('#upload-upload', $rootel).show();
        };

        /**
         * Renders a list of the selected files to upload
         */
        var renderSelected = function() {
            oae.api.util.template().render('#upload-selected-template', {'files': selectedFiles}, $('#upload-selected-container', $rootel));

            // Initiate the widget that will deal with permission management
            setUpSetPermissions();

            // Give focus to the first item in the list
            $('#upload-selected-container li:first-child', $rootel).focus();

            // Hide the spinning icon with jQuery (https://github.com/FortAwesome/Font-Awesome/issues/729)
            $('#upload-selected-container li .icon-spinner', $rootel).hide();

            // Apply jEditable for inline editing of file names
            $('.jeditable-field', $rootel).editable(editableSubmitted, {
                'onblur': 'submit',
                'select' : true
            });

            // Apply jQuery Tooltip to the file title field to show that the fields are editable
            $('[rel="tooltip"]', $rootel).tooltip();
        };


        ////////////////////
        // INITIALIZATION //
        ////////////////////

        /**
         * Reset the widget when the modal dialog is closed
         */
        var setUpReset = function() {
            $('#upload-modal').on('hidden', function(ev) {
                // Bootstrap will send out a `hidden` event when certain components are destroyed.
                // We can only reset the widget when the modal is closed though.
                // e.g. `$('[rel="tooltip"]', $rootel).tooltip('destroy');`
                if ($(ev.target).hasClass('modal')) {
                    reset();
                }
            });
        };

        /**
         * Load the `setpermissions` widget into this widget. That widget will take care of permission
         * management (visibility + sharing) of the selected files
         */
        var setUpSetPermissions = function() {
            // Remove the previous `setpermissions` widget
            var $setPermissionsContainer = $('#upload-permissions-container', $rootel);
            $setPermissionsContainer.html('');

            // Event that will be triggered when permission changes have been made in the `setpermissions` widget.
            $(document).on('oae.setpermissions.changed.' + setPermissionsId, function(ev, data) {
                // Update visibility for files
                visibility = data.visibility;

                // Get an array of the viewer ids. We can filter out the current user
                // as he will be automatically added to the files as a manager
                var viewers = _.pluck(data.viewers, 'id');
                viewers = _.without(viewers, oae.data.me.id);

                // If the context of the page is a group context and files will be shared with the group, we
                // set a flag that will be used to determine which notification to show upon completion
                contextData.addedToGroupContext = _.contains(viewers, contextData.id);

                // Update the members of the selected files
                $.each(selectedFiles, function(index, file) {
                    file.viewers = viewers;
                });

                // Render the summary of permissions and members
                $('#upload-permissions-summary', $rootel).html(data.summary);
                // Switch back to the overview
                showOverview();
            });

            // Event that will be triggered when permission changes have been cancelled
            $(document).on('oae.setpermissions.cancel.' + setPermissionsId, showOverview);

            // Load the `setpermissions` widget into its container
            oae.api.widget.insertWidget('setpermissions', setPermissionsId, $setPermissionsContainer, false, {
                'count': selectedFiles.length,
                'type': 'file',
                'visibility': visibility
            });
        };

        /**
         * Removes a selected file from the list and resets the widget when no files remain
         */
        var setUpDelete = function() {
            $rootel.on('click', '.upload-trash', function(ev) {
                // Get the index of the list item
                var $listItem = $(this).parents('li.oae-list-item');
                var fileIndex = $('#upload-selected-container li', $rootel).index($listItem);
                // Subtract the size of the file from the total
                selectedFilesSize -= selectedFiles[fileIndex].file.size;
                // This corresponds to the array from which we'll remove the selected file
                selectedFiles.splice(fileIndex, 1);
                // Also remove it from the UI
                $listItem.fadeOut(250, function() {
                    $listItem.remove();
                    // If there are no files left reset the widget
                    if (!selectedFiles.length) {
                        reset();
                        setUpUploadField();
                    }
                });
            });
        };

        /**
         * Initlializes the jQuery fileupload plugin on the upload form
         */
        var setUpUploadField = function() {
            // Used to hold the size of the file being uploaded.
            var prevFile = false;
            // A progress event can be fired multiple times for the same file depending on the size of the file
            // We make the distinction between files in the events by looking at the size of the file in the event
            // If the size of prevFile is equal to the size of totalPrevFile that means that the event is still handling the same file
            // Usage is described in the `progress` handler below
            var totalPrevFile = 0;
            var totalUploaded = 0;

            var fileuploadOptions = {
                'url': '/api/content/create',
                'dropZone': $('#upload-dropzone', $rootel),
                'forceIframeTransport': useIframeTransport,
                'replaceFileInput': false,
                // Drop is fired when a user drops files on the dropzone
                'drop': function(ev, data) {
                    addToSelected(data);
                    showOverview();
                    renderSelected();
                },
                'add': function() {/* Overriding `add` to avoid submitting the files on selection */},
                // Change is fired when a user browses for files
                'change': function(ev, data) {
                    addToSelected(data);
                    showOverview();
                    renderSelected();
                },
                'progress': function(ev, data) {
                    // The progress event can be sent out multiple times during the same file upload depending on the size of the file.
                    // If the 'prevFile' variable is false, fill it up with the size of the first file that is uploaded
                    // This check will only be true on the first progress event of the first file that's uploaded
                    if (!prevFile) {
                        prevFile = data.total;
                    }

                    // If the size of the previous file event is the same as the size of the current file event
                    // it's assumed that this is the same file. In that case the 'loaded' is not added to the total loaded size
                    if (prevFile === data.total) {
                        totalPrevFile = data.loaded;
                    // If the size is not the same it's assumed the plugin is handling a different file
                    // and the size of the previous file is added to the total of all files
                    } else {
                        totalUploaded += prevFile;
                        prevFile = data.total;
                        totalPrevFile = data.loaded;
                    }

                    // Update the progress bar
                    updateProgress(((totalUploaded + totalPrevFile) / selectedFilesSize) * 100);
                }
            };

            $('#upload-input', $rootel).fileupload(fileuploadOptions);
        };

        /**
         * Handles the file uploads and progress indication when the upload has been kicked off.
         */
        var setUpUploadHandling = function() {
            $('#upload-upload', $rootel).on('click', function() {
                var done = 0;
                var errCount = 0;

                // If we need an iframe for the upload, progress will probably not be supported.
                if (!useIframeTransport) {
                    // Show the progress bar when the upload starts
                    $('.progress', $rootel).show();
                }

                // Disable editing on upload
                $('#upload-upload', $rootel).prop('disabled', true);
                $('.upload-trash', $rootel).prop('disabled', true);
                $('#upload-change-permissions', $rootel).prop('disabled', true);
                $('.jeditable-field', $rootel).editable('destroy');
                $('[rel="tooltip"]', $rootel).tooltip('destroy');

                // Lock the modal so it cannot be closed during upload
                $('#upload-modal', $rootel).modal('lock');

                /**
                 * Upload the actual files. Progress is shown for each individual file and
                 * the progress bar is updated after each file upload.
                 *
                 * @param  {Number}    index    The index of the file that's currently being uploaded
                 */
                var upload = function(index) {
                    var file = selectedFiles[index];
                    if (file) {
                        var $listItem = $($('#upload-selected-container li', $rootel)[index]);
                        var $spinner = $listItem.find('.icon-spinner');
                        var $ok = $listItem.find('.icon-ok');
                        var $warning = $listItem.find('.icon-warning-sign');

                        // Add focus to the list element so the browser scrolls
                        $listItem.focus();
                        $spinner.show();

                        oae.api.content.createFile(file.displayName, file.description, visibility, $('#upload-input', $rootel), file.file, [], file.viewers, function(error, data) {
                            $spinner.hide();
                            if (!error) {
                                $ok.show();
                                // Update the file object with the profile path of the content
                                file.profilePath = data.profilePath;
                            } else {
                                $warning.show();
                                // Update the error count
                                errCount++;
                            }

                            done++;
                            if (done !== selectedFiles.length) {
                                upload(done);
                            } else {
                                $(window).trigger('done.addcontent.oae');
                                // Unlock the modal
                                $('#upload-modal', $rootel).modal('unlock');
                                // If we need an iframe for the upload, progress will probably not be supported.
                                if (!useIframeTransport) {
                                    updateProgress(100);
                                }
                                showCompleteNotification(errCount);
                            }
                        });
                    }
                };

                upload(0);
            });
        };

        /**
         * Initializes the upload modal dialog
         */
        var setUpUploadModal = function() {
            $(document).on('click', '.oae-trigger-upload', function() {
                $('#upload-modal', $rootel).modal({
                    'backdrop': 'static'
                });
                showDropzone();
                setUpUploadField();
            });

            // Defined `oae-dnd-upload` dropzones will trigger the `oae-trigger-upload` event when files
            // have been dropped. This is caught by the upload widget which shows the modal dialog and
            // renders the files into a list.
            $(document).on('oae.trigger.upload', function(ev, data) {
                $('#upload-modal', $rootel).modal({
                    'backdrop': 'static'
                });
                showOverview();
                showDropped(data);
            });

            // Binds the 'change' button that shows the setpermissions widget
            $('#upload-change-permissions', $rootel).on('click', function() {
                showPermissions();
            });

            // Receive the context information and cache it
            $(document).on('oae.context.send.upload', function(ev, ctx) {
                contextData = ctx;
            });

            // Request the context information
            $(document).trigger('oae.context.get', 'upload');
        };

        setUpReset();
        setUpUploadHandling();
        setUpUploadModal();
        setUpDelete();

    };
});
