/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

define(['jquery', 'oae.core', 'jquery.fileupload', 'jquery.iframe-transport', 'jquery.jeditable'], function($, oae) {

    return function(uid, showSettings) {

        var $rootel = $('#' + uid);

        // Keeps track of the selected files to upload
        var selectedFiles = [];
        var selectedFilesSize = 0;

        // If the widget was initialized because of a drag and drop event this will be filled with data
        var dropData = false;

        /**
         * Resets the state of the widget when the modal dialog has been closed
         */
        var doReset = function() {
            // Trigger an abort event to cancel ongoing uploads
            $('#upload-input').trigger('oae.upload.abort');

            // Destroy the fileupload instance
            $('#upload-input').fileupload('destroy');

            // Unbind the drag and drop shown handler
            $('#upload-container').off('shown');

            // Reset the selected Files list and total size
            selectedFiles = [];
            selectedFilesSize = 0;
            dropData = false;

            // Hide all steps
            $('.modal-body > div', $rootel).hide();

            // Show the first step
            $('.modal-body > div[data-step="1"]', $rootel).show();

            // Reset buttons
            $('#upload-doupload', $rootel).hide();
            $('#upload-doupload').removeAttr('disabled');
            $('#upload-finish').hide();
            $('#upload-visibility', $rootel).hide();

            // Reset the progress bar
            $('.progress', $rootel).hide();
            $('.bar', $rootel).css('width', '0%');
        };

        /**
         * Binds and executes the widget reset function when the modal dialog is closed
         */
        var initReset = function() {
            $('#upload-container').on('hidden', function(ev) {
                if ($(ev.target).hasClass('oae-modal')) {
                    doReset();
                }
            });
        };

        /**
         * Triggers the necessary changes when members of the files to be uploaded have been changed.
         */
        var initShareChanged = function() {
            $(document).on('oae-trigger-setpermissionsshared', function(ev, data) {
                $.each(selectedFiles, function(index, file) {
                    file.viewers = data.viewers;
                });
            });
        };

        /**
         * Triggers the necessary changes when permissions for the files to be uploaded have been changed.
         */
        var initPermissionsChanged = function() {
            $(document).on('oae-trigger-setpermissionschanged', function(ev, data) {
                $.each(selectedFiles, function(index, file) {
                    file.visibility = data.visibility;
                });
            });
        };

        /**
         * The widget guides the user through several steps before uploading the selected files.
         * This function shows the next step in the widget
         */
        var nextStep = function() {
            // Check which step we completed and calculate the current and next step
            var completedStep = parseInt($('.modal-body > div:visible', $rootel).attr('data-step'));
            var currentStep = completedStep + 1;
            var nextStep = currentStep + 1;

            // Hide all steps
            $('.modal-body > div', $rootel).hide();

            // Show the current step
            $('.modal-body > div[data-step="' + currentStep + '"]', $rootel).show();

            // Check if there is a next step or if we should start uploading files
            if (!$('.modal-body > div[data-step="' + nextStep + '"]', $rootel).length) {
                $('#upload-visibility', $rootel).show();
                $('#upload-doupload', $rootel).show();
                $(document).trigger('oae-trigger-setpermissions', {
                    'viewers': [],
                    'visibility': oae.api.config.getValue('oae-content', 'visibility', 'files'),
                    'target': $('#upload-permissions-container', $rootel)
                });
            }
        };

        /**
         * Renders a list of the selected files to upload
         */
        var renderSelected = function() {
            oae.api.util.template().render('#upload-selected-template', {'files': selectedFiles}, $('#upload-selected-container'));

            /**
             * Saves the edited file name to the appropriate item in the Array of selected files
             * @param   {String}   value   The new value for the item
             * @return  {String}   value   The value to show in the editable field after editing completed
             */
            var editableSubmitted = function(value) {
                var prevValue = this.revert;
                var $listItemContainer = $($(this).parents('.oae-listitem'));
                if (!value) {
                    return prevValue;
                } else {
                    $.each(selectedFiles, function(index, file) {
                        if (file.displayName === prevValue) {
                            $listItemContainer.attr('data-name', value);
                            $listItemContainer.find('.btn.upload-trash-selected').attr('data-name', value);
                            file.displayName = value;
                        }
                    });
                    return value;
                }
            };

            // Apply jEditable for inline editing of file names
            $('.jeditable-field').editable(editableSubmitted, {
                'onblur': 'submit'
            });

            // Apply jQuery Tooltip
            $('[rel="tooltip"]', $rootel).tooltip();
        };

        /**
         * Removes a selected file from the list and resets the widget when no files remain
         */
        var initDeleteFromSelected = function() {
            $rootel.on('click', '.upload-trash-selected', function(ev) {
                var toTrash = $(this).attr('data-name');
                $.each(selectedFiles, function(index, file) {
                    if (file.displayName === toTrash) {
                        selectedFiles.splice(index, 1);
                        $(ev.target).parents('.oae-list-item').remove();
                        if (!selectedFiles.length) {
                            doReset();
                            initUpload();
                        }
                        return false;
                    }
                });
            });
        };

        /**
         * Adds selected files to the list of files to upload. Filters out folders and size 0 files
         * @param  {Object}   data   The data object containing information on the files that are selected for upload
         */
        var addToSelected = function(data) {
            $.each(data.files, function(index, file) {
                // Avoid uploading folders and size 0 files
                if (file.size > 0) {
                    selectedFilesSize += file.size;
                    var contentObj = {
                        'displayName': file.name,
                        'description': '',
                        'visibility': oae.api.config.getValue('oae-content', 'visibility', 'files'),
                        'file': file,
                        'type': 'file'
                    };
                    // Add the file to the queue
                    selectedFiles.push(contentObj);
                }
            });
        };

        /**
         * Updates the progress indicator
         * @param  {Number}   progress   Number between 0 and 100 indicating the upload progress
         */
        var updateProgress = function(progress) {
            $('.bar', $rootel).css('width', progress + '%');
        };

        /**
         * Initializes the file upload plugin
         */
        var initUpload = function() {
            var prevFile = false;
            var totalPrevFile = 0;
            var totalUploaded = 0;

            var fileuploadOptions = {
                'url': '/api/content/create',
                'dropZone': $('#upload-dropzone', $rootel),
                'drop': function(ev, data) {
                    console.log(data);
                    addToSelected(data);
                    renderSelected();
                    nextStep();
                },
                'add': function (ev, data) {/* Overriding `add` to avoid submitting the files on selection */},
                'change': function(ev, data) {
                    addToSelected(data);
                    renderSelected();
                    nextStep();
                },
                'progress': function(ev, data) {
                    // The progress event can be sent out multiple times during the same file upload
                    // depending on the size of the file.
                    // If the 'prevFile' variable is false, fill it up with the size of the first file that is uploaded
                    if (!prevFile) {
                        prevFile = data.total;
                    }

                    // If the size of the previous file event is the same as the size of the current file event
                    // it's assumed that this is the same file. In that case the 'loaded' is not added to the total loaded size
                    if (prevFile === data.total) {
                        totalPrevFile = data.loaded;
                    // If the size is not the same it's assumed the plugin is handling a different file
                    // and the size of the previous file is added to the total of all files
                    } else {
                        totalUploaded += prevFile;
                        prevFile = data.total;
                        totalPrevFile = data.loaded;
                    }

                    // Update the progress bar
                    updateProgress(((totalUploaded + totalPrevFile) / selectedFilesSize) * 100);
                }
            };

            $('#upload-input').fileupload(fileuploadOptions);

            $('#upload-doupload').off('click').on('click', function() {
                var done = 0;

                $('.progress', $rootel).show();
                $('#upload-doupload').attr('disabled', 'disabled');
                $('.upload-trash-selected').attr('disabled', 'disabled');
                $('#upload-permissions-container *').attr('disabled', 'disabled');

                var doUpload = function(file) {
                    if (file) {
                        $('div[data-name="' + file.displayName + '"] .icon-spinner', $rootel).show();
                        oae.api.content.createFile(file.displayName, file.description, file.visibility, $('#upload-input'), file.file, [], file.viewers, function(error, data) {
                            $('div[data-name="' + file.displayName + '"] .icon-spinner', $rootel).hide();
                            if (!error) {
                                $('div[data-name="' + file.displayName + '"] .icon-ok', $rootel).show();
                            } else {
                                $('div[data-name="' + file.displayName + '"] .icon-warning-sign', $rootel).show();
                            }

                            done++;
                            if (done !== selectedFiles.length) {
                                doUpload(selectedFiles[done]);
                            } else {
                                $(window).trigger('done.addcontent.oae');
                                $('#upload-doupload').hide();
                                $('#upload-finish').show();
                                updateProgress(100);
                            }
                        });
                    }
                };

                doUpload(selectedFiles[0]);
            });
        };

        /**
         * Initializes the upload modal dialog
         */
        var initUploadModal = function() {
            $(document).on('click', '.oae-trigger-upload', function() {
                $('#upload-container').modal({
                    'backdrop': 'static'
                });
                initUpload();
            });

            $(document).on('oae-trigger-dnd', function(ev, data) {
                dropData = data;

                $('#upload-container').modal({
                    'backdrop': 'static'
                });

                $('#upload-container').on('shown', function() {
                    // Since we already have the selected files we skip to the next step
                    initUpload();
                    nextStep();

                    // Add the dropped files to the fileupload field
                    $('#upload-input').fileupload('add', dropData.files);

                    // Add the selected files to the internal list of selected files
                    addToSelected(dropData.data);

                    // Render the selected list
                    renderSelected();
                });
            });
        };

        initReset();
        initUploadModal();
        initDeleteFromSelected();
        initPermissionsChanged();
        initShareChanged();

    };
});
