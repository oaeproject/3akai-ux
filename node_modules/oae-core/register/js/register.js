/*!
 * Copyright 2013 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

define(['jquery', 'underscore', 'oae.core', '//www.google.com/recaptcha/api/js/recaptcha_ajax.js'], function($, _, oae) {

    return function(uid, showSettings) {

        // The widget container
        var $rootel = $('#' + uid);

        // Check whether or not the register form should show a recaptcha challenge
        var recaptchaEnabled = oae.api.config.getValue('oae-principals', 'recaptcha', 'enabled');

        /**
         * Set up a reCaptcha container that will used to verify
         * that the current user is a real human
         */
        var setUpReCaptcha = function() {
            if (recaptchaEnabled) {
                var captchaContainer = $('#register-captcha-container', $rootel)[0];
                Recaptcha.create(oae.api.config.getValue('oae-principals', 'recaptcha', 'publicKey'), captchaContainer, {theme: 'clean'});
            }
        };

        /**
         * Show a validation message for reCaptcha
         */
        var showRecaptchaError = function() {
            // Set the aria attributes on the main recaptcha input field
            $('#recaptcha_response_field', $rootel).attr({
                'aria-invalid': 'true',
                'aria-describedby': 'register-captcha-error'
            });
            $('#register-captcha', $rootel).addClass('error');
            $('#register-captcha-error', $rootel).show();
        };

        /**
         * Hide the reCaptcha validation message
         */
        var hideRecaptchaError = function() {
            // Remove the aria attributes on the main recaptcha input field
            $('#recaptcha-response-field', $rootel).removeAttr('aria-invalid aria-describedby');
            $('#register-captcha-error', $rootel).hide();
            $('#register-captcha', $rootel).removeClass('error');
        };

        /**
         * Set up the check that verifies whether or not the entered username is still availble. This will
         * be done every time the user changes the username
         */
        var setUpUsernameCheck = function() {
            // Keep track of the previously entered username, so we don't send
            // unneccesary requests when the username hasn't actually changed
            var previousUsername = '';

            $('#register-username', $rootel).on('keyup blur', function() {
                var username = $.trim($(this).val());
                if (previousUsername !== username) {
                    previousUsername = username;
                    // Make sure that the username is acceptable
                    if (username.length > 2 && username.indexOf(' ') === -1) {
                        isUserNameAvailable(username, function(available) {
                            // Show the available icon if the username is available, otherwise show the unavailable icon
                            if (available) {
                                $('#register-username-available', $rootel).removeClass('icon-remove').addClass('icon-ok');
                            } else {
                                $('#register-username-available', $rootel).removeClass('icon-ok').addClass('icon-remove');
                            }
                        });
                    } else {
                        $('#register-username-available', $rootel).removeClass('icon-ok').addClass('icon-remove');
                    }
                }
            });
        };

        /**
         * Verify whether or not the entered username already exists as a login id on the
         * current tenant. This will happen synchronously when it is part of the form
         * validation
         *
         * @param  {String}     username                The username we want to check the existence of
         * @param  {Function}   [callback]              Standard callback function.
         * @param  {Boolean}    [callback.available]    Whether or not the username is available
         * @return {Boolean}                            When no callback is provided, this function will be synchronous and will return whether or not the username is available
         */
        var isUserNameAvailable = function(username, callback) {
            // We check if the userid is still available on the current tenant.
            // We expect a 200 if it already exists and a 404 if it doesn't exist yet.
            var available = false;
            $.ajax({
                url: '/api/auth/exists/' + username,
                async: callback ? true : false,
                success: function() {
                    // The username already exists
                    if (callback) {
                        callback(false);
                    }
                },
                error: function(xhr, textStatus, thrownError) {
                    // The username is still available
                    if (callback) {
                        callback(true);
                    } else {
                        available = true;
                    }
                }
            });
            return available;
        };

        /**
         * Set up the validation on the register form, including the error messages
         */
        setUpValidation = function() {
            var validateOpts = {
                'rules': {
                    'username': {
                        'minlength': 3,
                        'nospaces': true,
                        'validchars': true,
                        'validusername': true
                    },
                    'password': {
                        'minlength': 6
                    },
                    'password_repeat': {
                        'equalTo': '#register-password'
                    }
                },
                'messages': {
                    'firstName': oae.api.i18n.translate('__MSG__PLEASE_ENTER_YOUR_FIRST_NAME__', 'register'),
                    'lastName': oae.api.i18n.translate('__MSG__PLEASE_ENTER_YOUR_LAST_NAME__', 'register'),
                    'email': {
                        'required': oae.api.i18n.translate('__MSG__PLEASE_ENTER_A_VALID_EMAIL_ADDRESS__', 'register'),
                        'email': oae.api.i18n.translate('__MSG__THIS_IS_AN_INVALID_EMAIL_ADDRESS__', 'register')
                    },
                    'username': {
                        'required': oae.api.i18n.translate('__MSG__PLEASE_ENTER_YOUR_USERNAME__'),
                        'minlength': oae.api.i18n.translate('__MSG__THE_USERNAME_SHOULD_BE_AT_LEAST_THREE_CHARACTERS_LONG__', 'register'),
                        'nospaces': oae.api.i18n.translate('__MSG__THE_USERNAME_SHOULDNT_CONTAIN_SPACES__', 'register')
                    },
                    'password': {
                        'required': oae.api.i18n.translate('__MSG__PLEASE_ENTER_YOUR_PASSWORD__'),
                        'minlength': oae.api.i18n.translate('__MSG__YOUR_PASSWORD_SHOULD_BE_AT_LEAST_SIX_CHARACTERS_LONG__')
                    },
                    'password_repeat': {
                        'required': oae.api.i18n.translate('__MSG__PLEASE_REPEAT_YOUR_PASSWORD__'),
                        'passwordmatch': oae.api.i18n.translate('__MSG__THIS_PASSWORD_DOES_NOT_MATCH_THE_FIRST_ONE__')
                    }
                },
                'methods': {
                    'validusername': {
                        'method': function(value, element) {
                            return this.optional(element) || isUserNameAvailable($.trim(value));
                        },
                        'text': oae.api.i18n.translate('__MSG__THIS_USERNAME_HAS_ALREADY_BEEN_TAKEN__', 'register')
                    },
                    'validchars': {
                        'method': function(value, element) {
                            return this.optional(element) || !(/[\<\>\\\/{}\[\]!@#\$%^&\*,:]+/i.test(value));
                        },
                        'text': oae.api.i18n.translate('__MSG__CREATE_ACCOUNT_INVALIDCHAR__', 'register')
                    }
                },
                'submitHandler': createUser
            };
            oae.api.util.validation().validate($('#register-form', $rootel), validateOpts);
        };

        /**
         * Create the new user. This will be called after validation has succeeded
         */
        var createUser = function() {
            // Hide the recaptcha validation
            hideRecaptchaError();

            // Get the form values
            var values = $('#register-form').serializeObject();
            // Collect the recaptcha values
            if (recaptchaEnabled) {
                values['recaptchaChallenge'] = Recaptcha.get_challenge();
                values['recaptchaResponse'] = Recaptcha.get_response();
            }

            // Disable the register button during creation, so it can't be clicked multiple times
            $('button, input', $rootel).prop('disabled', true);

            // Create the user
            var displayName = values.firstName + ' ' + values.lastName;
            var additionalOptions = {
                'email': values.email
            };
            oae.api.user.createUser(values.username, values.password, displayName, additionalOptions, values.recaptchaChallenge, values.recaptchaResponse, function(err, createdUser) {
                if (!err) {
                    oae.api.authentication.login(values.username, values.password, function() {
                        // Relocate to the user home space
                        window.location = '/me';
                    });
                } else {
                    // Refresh recaptcha
                    if (recaptchaEnabled) {
                        Recaptcha.reload();
                        showRecaptchaError();
                    }
                    // Unlock the register button again
                    $('button, input', $rootel).prop('disabled', false);
                }
            });
        };

        /**
         * Initialize the register modal dialog
         */
        var initRegister = function() {
            $(document).on('click', '.oae-trigger-register', function() {
                // Trigger the modal dialog
                $('#register-modal', $rootel).modal();
                $('#register-modal', $rootel).on('shown', function () {
                    // Set focus to the group name field
                    $('#register-firstname', $rootel).focus();
                });
            });
        };

        initRegister();
        setUpReCaptcha();
        setUpValidation();
        setUpUsernameCheck();

    };
});
