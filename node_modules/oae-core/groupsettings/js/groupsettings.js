/*!
 * Copyright 2013 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

// load the master sakai object to access all Sakai OAE API methods
require(['jquery', 'sakai/sakai.api.core'], function($, sakai) {

    /**
     * @name sakai.groupsettings
     *
     * @class groupsettings
     *
     * @description
     * WIDGET DESCRIPTION
     *
     * @version 0.0.1
     * @param {String} tuid Unique id of the widget
     * @param {Boolean} showSettings Show the settings of the widget or not
     */
    sakai_global.groupsettings = function(tuid, showSettings) {

        /////////////////////////////
        // Configuration variables //
        /////////////////////////////
        var $rootel = $('#' + tuid);

        // Data Items in the Form
        var groupsettingsTitle = '#groupsettings_title';
        var groupsettingsDescription = '#groupsettings_description';
        var groupsettingsTags =  '#groupsettings_tags';
        var $groupsettingsTags = false;
        var groupsettingsCanBeFoundIn = '#groupsettings_can_be_found_in';
        var groupsettingsMembership = '#groupsettings_membership';

        // Page Structure Elements
        var $groupsettingsContainer = $('#groupsettings_container', $rootel);
        var $groupsettingsDialog = $('.groupsettings_dialog', $rootel);
        var $groupsettingsForm = $('#groupsettings_form', $rootel);
        var $groupsettingsApplyButton = $('#groupsettings_apply_button');

        var visibility = '',
            worldId = '';

        var showWarning = function() {
            var newVisibility = $(groupsettingsCanBeFoundIn);
            var newVisibilityVal = $.trim(newVisibility.val());
            var oldVisibilityVal = sakai_global.group.groupData['sakai:group-visible'];
            var oldVisibilityIndex = parseInt(newVisibility.find('option[value="' + sakai_global.group.groupData['sakai:group-visible'] + '"]').attr('index'), 10);
            if (sakai_global.group.groupData['sakai:group-visible'] === newVisibilityVal || parseInt(newVisibility.prop('selectedIndex'), 10) > oldVisibilityIndex || newVisibilityVal === 'members-only' || oldVisibilityVal === 'public') {
                $groupsettingsForm.submit();
            } else {
                $('#groupsettings_warning_container_text').html(sakai.api.Util.TemplateRenderer('groupsettings_warning_container_text_template', {
                    'visibility': newVisibilityVal,
                    'group': sakai_global.group.groupData['sakai:group-title']
                }));

                sakai.api.Util.Modal.open('#groupsettings_warning_container');
            }
        };

        ////////////////////
        // Event Handlers //
        ////////////////////

        var handleSubmit = function(form) {
            $groupsettingsContainer.find('select, input').prop('disabled', true);
            var worldTitle = $.trim($(groupsettingsTitle).val());
            var worldDescription = $.trim($(groupsettingsDescription).val());
            var foundIn = $.trim($(groupsettingsCanBeFoundIn).val());
            var membership = $.trim($(groupsettingsMembership).val());

            var worldTags = sakai.api.Util.AutoSuggest.getTagsAndCategories( $groupsettingsTags, true );

            var worldData = {
                'sakai:group-title':  worldTitle,
                'sakai:group-description': worldDescription,
                'sakai:group-visible': foundIn,
                'sakai:group-joinable': membership
            };

            sakai.api.Groups.updateGroupProfile(worldId, worldData, worldTags, sakai_global.group.groupData, function( success ) {
                $groupsettingsContainer.find('select, input').prop('disabled', false);

                $(window).trigger('updatedTitle.groupsettings.sakai', worldTitle);
                sakai.api.Util.notification.show($('#groupsettings_success_title').html(), $('#groupsettings_success_body').html());
                sakai.api.Util.Modal.close($groupsettingsDialog);
                sakai.api.Util.Modal.close('#groupsettings_warning_container');
            });
        };

        var bindEvents = function(worldId) {
            $groupsettingsApplyButton.off('click').on('click', function() {
                showWarning();
            });
            $('#groupsettings_proceedandapply').off('click');
            $('#groupsettings_proceedandapply').on('click', function() {
                $groupsettingsForm.submit();
            });

            var validateOpts = {
                submitHandler: handleSubmit
            };
            // Initialize the validate plug-in
            sakai.api.Util.Forms.validate($groupsettingsForm, validateOpts, true);
        };

        /////////////////////////////
        // Initialization function //
        /////////////////////////////

        var renderWorldSettings = function() {
            var profile = sakai_global.group.groupData;
            $('#groupsettings_form_container').html(sakai.api.Util.TemplateRenderer('groupsettings_form_template',{
                'title': profile['sakai:group-title'],
                'description': profile['sakai:group-description'],
                'foundin': profile['sakai:group-visible'],
                'membership': profile['sakai:group-joinable']
            }));
            var initialTagsValue = profile[ 'sakai:tags' ] ? profile[ 'sakai:tags' ] : false;
            $groupsettingsTags = $( groupsettingsTags );
            sakai.api.Util.AutoSuggest.setupTagAndCategoryAutosuggest( $groupsettingsTags, null, $('.list_categories', $rootel), initialTagsValue );
        };

        /**
         * Initialization function DOCUMENTATION
         */
        var doInit = function(_worldId) {
            worldId = _worldId;
            renderWorldSettings();
            bindEvents();
            sakai.api.Util.Modal.setup($groupsettingsDialog, {
                modal: true,
                overlay: 20,
                toTop: true,
                zIndex: 3000
            });
            sakai.api.Util.Modal.setup('#groupsettings_warning_container', {
                modal: true,
                overlay: 20,
                toTop: true,
                zIndex: 4000
            });
            sakai.api.Util.Modal.open($groupsettingsDialog);
        };

        // run the initialization function when the widget object loads
        $(document).on('init.groupsettings.sakai', function(e, _worldId) {
            doInit(_worldId);
        });
    };

    // inform Sakai OAE that this widget has loaded and is ready to run
    sakai.api.Widgets.widgetLoader.informOnLoad('groupsettings');
});
