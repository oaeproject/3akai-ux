casper.test.begin('Widget - Notifications', function(test) {

    /**
     * Verify that the notifications can be opened
     */
    var verifyOpenNotifications = function() {
        casper.waitForSelector('.oae-trigger-notifications', function() {
            test.assertExists('.oae-trigger-notifications', 'The notifications trigger is present');
            casper.click('.oae-trigger-notifications');
            casper.waitForSelector('.popover #notifications-container', function() {
                test.assertExists('.popover #notifications-container', 'The notifications popover opens on click');
                test.assertExists('.popover #notifications-container .alert.alert-info.notifications-empty', 'the \'no notifications\' alert is shown when there are no notifications');
            });
        });
    };

    /**
     * Verifies the list of notifications is showing properly
     */
    var verifyNotificationsList = function() {
        casper.waitForSelector('.oae-trigger-notifications #topnavigation-notification-count', function() {
            test.assertExists('.oae-trigger-notifications #topnavigation-notification-count', 'The notification count is shown');
            test.assertSelectorHasText('.oae-trigger-notifications #topnavigation-notification-count', '3', 'The notification count reads \'3\'');
            casper.click('.oae-trigger-notifications');
            casper.waitForSelector('#notifications-container .oae-list', function() {
                test.assertEvalEquals(function() {
                    return $('#notifications-container .oae-list li.alert-info').length;
                }, 3, 'There are 3 unread notifications shown in the list');
                casper.click('.oae-trigger-notifications');
                test.assertNotVisible('.oae-trigger-notifications #topnavigation-notification-count', 'The notification count is removed after reading the list');
                casper.click('.oae-trigger-notifications');
                test.assertEvalEquals(function() {
                    return $('#notifications-container .oae-list li.alert-info').length;
                }, 0, 'There are no unread notifications shown in the list when reopening');
            });
        });
    };

    casper.start(configUtil().tenantUI, function() {
        // Make a user to test with
        var user1 = null;
        var user2 = null;
        userUtil().createUsers(2, function(users) {
            user1 = users[0];
            user2 = users[1];
        });

        // Log in with the created user
        casper.thenOpen(configUtil().tenantUI, function() {
            userUtil().doLogIn(user1.username, configUtil().defaultUserPassword);
        });

        // Verify that the terms and conditions modal can be opened
        casper.then(function() {
            casper.echo('Verify notifications popover', 'INFO');
            verifyOpenNotifications();
        });

        // Verify notification list
        casper.then(function() {
            casper.echo('Verify notifications list', 'INFO');
            // Upload a link as user1 and share it with user2
            contentUtil().createLink(null, [user2.id], null, function(link) {
                // Comment on the link to generate a notification for user2
                casper.thenEvaluate(function(id) {
                    require('oae.core').api.comment.createComment(id, 'content', 'Some comment.', null);
                }, link.id);

                // Change the privacy of the link to generate a notification for user2
                casper.thenEvaluate(function(id) {
                    require('oae.core').api.content.updateContent(id, {'visibility': 'loggedin'});
                }, link.id);

                // Log out as user1
                casper.then(function() {
                    userUtil().doLogOut();
                });

                // Log in as user2
                casper.then(function() {
                    casper.wait(configUtil().searchWaitTime, function() {
                        userUtil().doLogIn(user2.username, configUtil().defaultUserPassword);
                    });
                });

                // Verify notification list
                casper.then(verifyNotificationsList);
            });
        });

        // Log out at the end of the test
        casper.then(function() {
            userUtil().doLogOut();
        });
    });

    casper.run(function() {
        test.done();
    });
});
