/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

define(['jquery', 'underscore', 'oae/api/oae.core', 'jquery-plugins/imgareaselect/jquery.imgareaselect'], function($, _, oae) {

    return function(uid, showSettings) {

        //////////////////////
        // Config Variables //
        //////////////////////

        var picture = false;
        var ratio = 1;
        var imageareaobject;
        var id = null;
        var fullPicHeight = 300;
        var fullPicWidth = 325;

        // These values are just in case there are no css values specified.
        // If you want to change the size of a thumbnail please do this in the CSS.
        var thumbnailWidth = 100;
        var thumbnailHeight = 100;

        // The modal object we'll show.
        var modal = null;

        // The type of principal we're dealing with (user or group.)
        var type = 'user';
        var principalData = null;


        //////////////
        // CSS IDS  //
        //////////////

        var containerTrigger = '#changepic_container_trigger'; // This is the id that will trigger this widget.

        // others
        var selectContentArea = '#changepic_selectpicture';
        var container = '#changepic_container';
        var picForm = '#changepic_form';
        var picInput = '#profilepicture';
        var picInputError = '#changepic_nofile_error';
        var uploadProcessing = '#changepic_uploading';
        var uploadNewButtons = '#changepic_uploadnew_buttons';
        var uploadNewCancel = '#profile_upload_cancel';
        var pictureMeasurer = '#picture_measurer';
        var pictureMeasurerImage = '#picture_measurer_image';
        var saveNewSelection = '#save_new_selection';
        var fullPicture = '#changepic_fullpicture_img';
        var fullPictureSpan = '#changepic_fullpicture';
        var thumbnail = '#thumbnail_img';
        var thumbnailSpan = '#thumbnail';
        var thumbnailContainer = '#thumbnail_container';
        var picInputErrorClass = 'changepic_input_error';

        // An array with selectors pointing to images that need to be changed.
        var imagesToChange = ['.oae-entity-picture-image img'];


        ///////////////////
        // UTIL FUNCTIONS //
        ///////////////////

         /**
         * Hides and reset image select area
         */
        var hideSelectArea = function() {
            if (imageareaobject) {
                imageareaobject.setOptions({
                    'hide': true,
                    'disable': true
                });
                imageareaobject.update();
            }

            $(selectContentArea).hide();
            $(uploadNewCancel).show();
        };

         /**
         * Shows image select area
         */
        var showSelectArea = function() {
            $(uploadNewCancel).hide();
            $(selectContentArea).show();
        };

        /**
         * When the user has drawn a square this function will be called by imgAreaSelect.
         * This will draw the thumbnail by modifying it's css values.
         *
         * @param {Object} img    The thumbnail
         * @param {Object} selection The selection object from imgAreaSelect
         */
        var preview = function(img, selection) {
            // How much has the user scaled down the image?
            var scaleX = thumbnailWidth / (selection.width || 1);
            var scaleY = thumbnailHeight / (selection.height || 1);

            // Change the thumbnail according to the user his selection via CSS.
            $(thumbnail).css({
                'width': Math.round(scaleX * img.width) + 'px',
                'height': Math.round(scaleY * img.height) + 'px',
                'marginLeft': '-' + Math.round(scaleX * selection.x1) + 'px',
                'marginTop': '-' + Math.round(scaleY * selection.y1) + 'px'
            });
        };

        /**
         * Shows file input error
         */
        var showInputError = function() {
            $(picInputError).show();
            $(picInput).addClass(picInputErrorClass);
            if ($(selectContentArea + ':visible') && imageareaobject) {
                imageareaobject.update();
            }
        };

        /**
         * Hides file input error
         */
        var hideInputError = function() {
            $(picInputError).hide();
            $(picInput).removeClass(picInputErrorClass);
            if ($(selectContentArea + ':visible') && imageareaobject) {
                imageareaobject.update();
            }
        };

         /**
         * Empty upload field by resetting the form
         */
        var resetUploadField = function() {
            $(picForm)[0].reset();
            $(picForm).attr('action', '/api/' + type + '/' + id + '/picture');
            hideInputError();
            $(uploadProcessing).hide();
            $(uploadNewButtons).show();
            $('#profile_upload').attr('disabled', 'disabled');
        };

        // Add click event to all cancel buttons in the overlay
        // Since file upload form is reset every time overlay closes do this in init function
        $('#changepic_container .jqmClose').click(function() {
            resetUploadField();
        });

        /**
         * On changepic form submit, check that a file has been selected
         * and submit the form.
         */
        $('#profile_upload').off('click').on('click', function() {
            // validate args
            // file extension allow for image
            var extensionArray = ['.png', '.jpg', '.jpeg', '.gif', '.bmp'];
            // get file name
            var fileName = $(picInput).val();
            // get extension from the file name.
            var extension = fileName.slice(fileName.lastIndexOf('.')).toLowerCase();
            var allowSubmit = _.indexOf(extensionArray, extension) > -1;

            // if image format is acceptable
            if (allowSubmit) {
                // Hide the form.
                hideInputError();
                $(uploadNewButtons).hide();
                hideSelectArea();

                // Show a processing image.
                $(uploadProcessing).show();

                // Submit the form.
                $(picForm).ajaxForm({
                    'success': function(data) {
                        // We get the updated principal back from the API.
                        // Update the global me object.
                        if (type === 'user') {
                            oae.data.me.largePicture = data.largePicture;
                        }
                        doInit();
                    },
                    'error': function() {
                        showInputError();
                        return false;
                    }
                });
                $(picForm).submit();
            } else {
                // no input, show error
                showInputError();
            }
        });

        /**
         * Initialize function that will display the correct part of the form.
         */
        var doInit = function() {
            hideSelectArea();

            // If the image is freshly uploaded then reset the imageareaobject to reset all values on init
            if (!principalData.smallPicture) {
                imageareaobject = null;
            }

            // Get the preferred size for the thumbnail.
            var prefThumbWidth = parseInt($(thumbnailContainer).css('width').replace(/px/gi,''), 10);
            var prefThumbHeight = parseInt($(thumbnailContainer).css('height').replace(/px/gi,''), 10);

            // Make sure we don't have 0
            thumbnailWidth  = (prefThumbWidth > 0) ? prefThumbWidth : thumbnailWidth;
            thumbnailHeight  = (prefThumbHeight > 0) ? prefThumbHeight : thumbnailHeight;

            if (principalData.largePicture) {
                console.log('doInit: %s', principalData.largePicture);
                // Set the unvisible image to the full blown image.
                $(pictureMeasurer).html('<img src="' + principalData.largePicture +'" id="picture_measurer_image" />');

                // Check the current picture's size
                $(pictureMeasurerImage).on('load', function(ev) {
                    resetUploadField();

                    // Get the actual sizes
                    var realw = $(pictureMeasurerImage).width();
                    var realh = $(pictureMeasurerImage).height();

                    // Set the images
                    $(fullPictureSpan).html('<img alt="' + $('#changepic_fullpicture_alt').html() + '" id="changepic_fullpicture_img" src="' + principalData.largePicture + '" />');
                    $(thumbnailSpan).html('<img alt="' + $('#thumbnail_alt').html() + '" id="thumbnail_img" src="' + principalData.largePicture + '" />');

                    // Reset ratio
                    ratio = 1;

                    // fullPicWidth (500) and fullPicHeight (300) set in config variables
                    // Width < 500 ; Height < 300 => set the original height and width
                    if (realw < fullPicWidth && realh < fullPicHeight) {
                        $(fullPicture).width(realw);
                        $(fullPicture).height(realh);

                    // Width > 500 ; Height < 300 => Width = 500
                    } else if (realw > fullPicWidth && (realh / (realw / fullPicWidth) < fullPicHeight)) {
                        ratio = realw / fullPicWidth;
                        $(fullPicture).width(fullPicWidth);
                        $(fullPicture).height(Math.floor(realh / ratio));

                    // Width < 500 ; Height > 300 => Height = 300
                    } else if (realh > fullPicHeight && (realw / (realh / fullPicHeight) < fullPicWidth)) {
                        ratio = realh / fullPicHeight;
                        $(fullPicture).height(fullPicHeight);
                        $(fullPicture).width(Math.floor(realw / ratio));

                    // Width > 500 ; Height > 300
                    } else if (realh > fullPicHeight && (realw / (realh / fullPicHeight) > fullPicWidth)) {

                        var heightonchangedwidth = realh / (realw / fullPicWidth);
                        if (heightonchangedwidth > fullPicHeight) {
                            ratio = realh / fullPicHeight;
                            $(fullPicture).height(fullPicHeight);
                        } else {
                            ratio = realw / fullPicWidth;
                            $(fullPicture).width(fullPicWidth);
                        }
                    }

                    // The initial selection is the biggest possible square we can squeeze out of the picture.
                    var size = (realw > realh) ? realh : realw;
                    var startSelection = {
                        'x1': 0,
                        'y1': 0,
                        'x2': size,
                        'y2': size,
                        'width': size,
                        'height': size
                    };

                    // Set the imgAreaSelect to a function so we can access it later on
                    imageareaobject = $(fullPicture).imgAreaSelect({
                        'aspectRatio': '1:1',
                        'enable': true,
                        'show': true,
                        'instance': true,
                        'onInit': function() {
                            // Show a "preview" of the cropped image, if we crop the biggest square out of the big image.
                            preview($(pictureMeasurerImage)[0], startSelection);

                            // Make that selection
                            imageareaobject.setOptions({'show': true, 'enable': true});
                            imageareaobject.update();
                        },
                        'onSelectChange': preview
                    });
                    showSelectArea();
                });

                // if there is upload error show the error message
                $(pictureMeasurerImage).on('error', function() {
                    showInputError();
                });
            }
        };

        // Remove error notification when a new file is chosen
        $(picInput).on('change', function() {
            hideInputError();
            $('#profile_upload').removeAttr('disabled');
        });

        // This is the function that will be called when a user has cut out a selection
        // and saves it.
        $(saveNewSelection).click(function(ev) {
            var userSelection = imageareaobject.getSelection();
            cropPicture(userSelection);
        });

        /**
         * Crops the picture
         *
         * @param {Object} userSelection  The object that determines how the image should be cropped.
         * @param {Number} userSelection.x The top left x coordinate.
         * @param {Number} userSelection.y The top left x coordinate.
         * @param {Number} userSelection.width The size of the square that should be cropped out.
         */
        var cropPicture = function(userSelection) {
            // The parameters for the cropit service.
            var data = {
                'x': Math.floor(userSelection.x1 * ratio),
                'y': Math.floor(userSelection.y1 * ratio),
                'width': Math.floor(userSelection.width * ratio),
                'principalId': id
            };

            if (data.width === 0 || data.height === 0) {
                data.width = $(fullPicture).width();
                data.height = $(fullPicture).height();
                data.x = 0;
                data.y = 0;
            }

            // Post all of this to the server
            $.ajax({
                'url': '/api/crop',
                'type': 'POST',
                'data': data,
                success: function(data) {
                    // Update the global me object.
                    if (type === 'user') {
                        oae.data.me.smallPicture = data.smallPicture;
                        oae.data.me.mediumPicture = data.mediumPicture;
                    }

                    // Change all the pictures on the page.
                    for (var i = 0; i < imagesToChange.length; i++) {
                        $(imagesToChange[i]).attr('src', data.smallPicture);
                    }

                    // Hide the layover.
                    modal.close();
                },
                error: function(xhr, textStatus, thrownError) {
                    oae.api.util.showNotification(oae.api.i18n.translate('__MSG__AN_ERROR_HAS_OCCURRED__'), textStatus, 'error');
                }
            });

        };


        ////////////////////////////
        // jQuery Modal functions //
        ////////////////////////////

        /**
         * Hide the layover
         * @param {Object} hash the object that represents the layover
         */
        var hideArea = function(hash) {
            // Remove the selecting of an area on an image.
            if (imageareaobject) {
                imageareaobject.setOptions({
                    'hide': true,
                    'disable': true
                });
                imageareaobject.update();
            }

            hash.w.hide();
            hash.o.remove();
        };

        /**
         * Show the layover.
         * @param {Object} hash
         */
        var showArea = function(hash) {
            resetUploadField();
            doInit();
            hash.w.show();
        };

        modal = oae.api.util.modal(container, {
            'onHide': hideArea,
            'onShow': showArea
        });

        $(document).on('init.changepic.sakai', function(ev, data) {
            type = data.type;
            principalData = data.data;
            console.log('init.changepic.sakai');
            console.log(data);
            id = (type === 'user') ? principalData.userId : principalData.groupId;
            modal.open();
        });
    };
});
