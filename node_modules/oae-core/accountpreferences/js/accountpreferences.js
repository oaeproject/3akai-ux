/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

define(['jquery', 'oae.core'], function ($, oae) {

    return function (uid, showSettings) {

        /////////////////////////////
        // Configuration variables //
        /////////////////////////////

        // Classes
        var privacyContainer = '#accountpreferences-privacy-container';
        var passwordContainer = '#accountpreferences-password-container';
        var preferencesContainer = '#accountpreferences-preferences-container';

        var accountPreferencesPrivacyPublic = '#accountpreferences-privacy-public';
        var accountPreferencesPrivacyLoggedin = '#accountpreferences-privacy-loggedin';
        var accountPreferencesPrivacyPrivate = '#accountpreferences-privacy-private';

        var timezoneSelect = "select#accountpreferences-time-zone";
        var languageSelect = "select#accountpreferences-pass-language";

        var passwordForm = '#accountpreferences-password-change-form';

        var preferencesTabHasChanged = false;
        var privacyTabHasChanged = false;
        var passwordTabHasChanged = false;

        // PASSWORD TAB
        var currentPassword = '#accountpreferences-curr-pass';
        var newPassword = '#accountpreferences-new-pass';
        var retypePassword = '#accountpreferences-retype-pass';

        var timezones = ['Africa/Abidjan', 'Africa/Accra', 'Africa/Addis_Ababa', 'Africa/Algiers', 'Africa/Asmara', 'Africa/Asmera', 'Africa/Bamako', 'Africa/Bangui', 'Africa/Banjul', 'Africa/Bissau', 'Africa/Blantyre', 'Africa/Brazzaville', 'Africa/Bujumbura', 'Africa/Cairo', 'Africa/Casablanca', 'Africa/Ceuta', 'Africa/Conakry', 'Africa/Dakar', 'Africa/Dar_es_Salaam', 'Africa/Djibouti', 'Africa/Douala', 'Africa/El_Aaiun', 'Africa/Freetown', 'Africa/Gaborone', 'Africa/Harare', 'Africa/Johannesburg', 'Africa/Juba', 'Africa/Kampala', 'Africa/Khartoum', 'Africa/Kigali', 'Africa/Kinshasa', 'Africa/Lagos', 'Africa/Libreville', 'Africa/Lome', 'Africa/Luanda', 'Africa/Lubumbashi', 'Africa/Lusaka', 'Africa/Malabo', 'Africa/Maputo', 'Africa/Maseru', 'Africa/Mbabane', 'Africa/Mogadishu', 'Africa/Monrovia', 'Africa/Nairobi', 'Africa/Ndjamena', 'Africa/Niamey', 'Africa/Nouakchott', 'Africa/Ouagadougou', 'Africa/Porto-Novo', 'Africa/Sao_Tome', 'Africa/Timbuktu', 'Africa/Tripoli', 'Africa/Tunis', 'Africa/Windhoek', 'America/Adak', 'America/Anchorage', 'America/Anguilla', 'America/Antigua', 'America/Araguaina', 'America/Argentina/Buenos_Aires', 'America/Argentina/Catamarca', 'America/Argentina/ComodRivadavia', 'America/Argentina/Cordoba', 'America/Argentina/Jujuy', 'America/Argentina/La_Rioja', 'America/Argentina/Mendoza', 'America/Argentina/Rio_Gallegos', 'America/Argentina/Salta', 'America/Argentina/San_Juan', 'America/Argentina/San_Luis', 'America/Argentina/Tucuman', 'America/Argentina/Ushuaia', 'America/Aruba', 'America/Asuncion', 'America/Atikokan', 'America/Atka', 'America/Bahia', 'America/Bahia_Banderas', 'America/Barbados', 'America/Belem', 'America/Belize', 'America/Blanc-Sablon', 'America/Boa_Vista', 'America/Bogota', 'America/Boise', 'America/Buenos_Aires', 'America/Cambridge_Bay', 'America/Campo_Grande', 'America/Cancun', 'America/Caracas', 'America/Catamarca', 'America/Cayenne', 'America/Cayman', 'America/Chicago', 'America/Chihuahua', 'America/Coral_Harbour', 'America/Cordoba', 'America/Costa_Rica', 'America/Creston', 'America/Cuiaba', 'America/Curacao', 'America/Danmarkshavn', 'America/Dawson', 'America/Dawson_Creek', 'America/Denver', 'America/Detroit', 'America/Dominica', 'America/Edmonton', 'America/Eirunepe', 'America/El_Salvador', 'America/Ensenada', 'America/Fort_Wayne', 'America/Fortaleza', 'America/Glace_Bay', 'America/Godthab', 'America/Goose_Bay', 'America/Grand_Turk', 'America/Grenada', 'America/Guadeloupe', 'America/Guatemala', 'America/Guayaquil', 'America/Guyana', 'America/Halifax', 'America/Havana', 'America/Hermosillo', 'America/Indiana/Indianapolis', 'America/Indiana/Knox', 'America/Indiana/Marengo', 'America/Indiana/Petersburg', 'America/Indiana/Tell_City', 'America/Indiana/Vevay', 'America/Indiana/Vincennes', 'America/Indiana/Winamac', 'America/Indianapolis', 'America/Inuvik', 'America/Iqaluit', 'America/Jamaica', 'America/Jujuy', 'America/Juneau', 'America/Kentucky/Louisville', 'America/Kentucky/Monticello', 'America/Knox_IN', 'America/Kralendijk', 'America/La_Paz', 'America/Lima', 'America/Los_Angeles', 'America/Louisville', 'America/Lower_Princes', 'America/Maceio', 'America/Managua', 'America/Manaus', 'America/Marigot', 'America/Martinique', 'America/Matamoros', 'America/Mazatlan', 'America/Mendoza', 'America/Menominee', 'America/Merida', 'America/Metlakatla', 'America/Mexico_City', 'America/Miquelon', 'America/Moncton', 'America/Monterrey', 'America/Montevideo', 'America/Montreal', 'America/Montserrat', 'America/Nassau', 'America/New_York', 'America/Nipigon', 'America/Nome', 'America/Noronha', 'America/North_Dakota/Beulah', 'America/North_Dakota/Center', 'America/North_Dakota/New_Salem', 'America/Ojinaga', 'America/Panama', 'America/Pangnirtung', 'America/Paramaribo', 'America/Phoenix', 'America/Port-au-Prince', 'America/Port_of_Spain', 'America/Porto_Acre', 'America/Porto_Velho', 'America/Puerto_Rico', 'America/Rainy_River', 'America/Rankin_Inlet', 'America/Recife', 'America/Regina', 'America/Resolute', 'America/Rio_Branco', 'America/Rosario', 'America/Santa_Isabel', 'America/Santarem', 'America/Santiago', 'America/Santo_Domingo', 'America/Sao_Paulo', 'America/Scoresbysund', 'America/Shiprock', 'America/Sitka', 'America/St_Barthelemy', 'America/St_Johns', 'America/St_Kitts', 'America/St_Lucia', 'America/St_Thomas', 'America/St_Vincent', 'America/Swift_Current', 'America/Tegucigalpa', 'America/Thule', 'America/Thunder_Bay', 'America/Tijuana', 'America/Toronto', 'America/Tortola', 'America/Vancouver', 'America/Virgin', 'America/Whitehorse', 'America/Winnipeg', 'America/Yakutat', 'America/Yellowknife', 'Antarctica/Casey', 'Antarctica/Davis', 'Antarctica/DumontDUrville', 'Antarctica/Macquarie', 'Antarctica/Mawson', 'Antarctica/McMurdo', 'Antarctica/Palmer', 'Antarctica/Rothera', 'Antarctica/South_Pole', 'Antarctica/Syowa', 'Antarctica/Vostok', 'Arctic/Longyearbyen', 'Asia/Aden', 'Asia/Almaty', 'Asia/Amman', 'Asia/Anadyr', 'Asia/Aqtau', 'Asia/Aqtobe', 'Asia/Ashgabat', 'Asia/Ashkhabad', 'Asia/Baghdad', 'Asia/Bahrain', 'Asia/Baku', 'Asia/Bangkok', 'Asia/Beirut', 'Asia/Bishkek', 'Asia/Brunei', 'Asia/Calcutta', 'Asia/Choibalsan', 'Asia/Chongqing', 'Asia/Chungking', 'Asia/Colombo', 'Asia/Dacca', 'Asia/Damascus', 'Asia/Dhaka', 'Asia/Dili', 'Asia/Dubai', 'Asia/Dushanbe', 'Asia/Gaza', 'Asia/Harbin', 'Asia/Hebron', 'Asia/Ho_Chi_Minh', 'Asia/Hong_Kong', 'Asia/Hovd', 'Asia/Irkutsk', 'Asia/Istanbul', 'Asia/Jakarta', 'Asia/Jayapura', 'Asia/Jerusalem', 'Asia/Kabul', 'Asia/Kamchatka', 'Asia/Karachi', 'Asia/Kashgar', 'Asia/Kathmandu', 'Asia/Katmandu', 'Asia/Kolkata', 'Asia/Krasnoyarsk', 'Asia/Kuala_Lumpur', 'Asia/Kuching', 'Asia/Kuwait', 'Asia/Macao', 'Asia/Macau', 'Asia/Magadan', 'Asia/Makassar', 'Asia/Manila', 'Asia/Muscat', 'Asia/Nicosia', 'Asia/Novokuznetsk', 'Asia/Novosibirsk', 'Asia/Omsk', 'Asia/Oral', 'Asia/Phnom_Penh', 'Asia/Pontianak', 'Asia/Pyongyang', 'Asia/Qatar', 'Asia/Qyzylorda', 'Asia/Rangoon', 'Asia/Riyadh', 'Asia/Riyadh87', 'Asia/Riyadh88', 'Asia/Riyadh89', 'Asia/Saigon', 'Asia/Sakhalin', 'Asia/Samarkand', 'Asia/Seoul', 'Asia/Shanghai', 'Asia/Singapore', 'Asia/Taipei', 'Asia/Tashkent', 'Asia/Tbilisi', 'Asia/Tehran', 'Asia/Tel_Aviv', 'Asia/Thimbu', 'Asia/Thimphu', 'Asia/Tokyo', 'Asia/Ujung_Pandang', 'Asia/Ulaanbaatar', 'Asia/Ulan_Bator', 'Asia/Urumqi', 'Asia/Vientiane', 'Asia/Vladivostok', 'Asia/Yakutsk', 'Asia/Yekaterinburg', 'Asia/Yerevan', 'Atlantic/Azores', 'Atlantic/Bermuda', 'Atlantic/Canary', 'Atlantic/Cape_Verde', 'Atlantic/Faeroe', 'Atlantic/Faroe', 'Atlantic/Jan_Mayen', 'Atlantic/Madeira', 'Atlantic/Reykjavik', 'Atlantic/South_Georgia', 'Atlantic/St_Helena', 'Atlantic/Stanley', 'Australia/ACT', 'Australia/Adelaide', 'Australia/Brisbane', 'Australia/Broken_Hill', 'Australia/Canberra', 'Australia/Currie', 'Australia/Darwin', 'Australia/Eucla', 'Australia/Hobart', 'Australia/LHI', 'Australia/Lindeman', 'Australia/Lord_Howe', 'Australia/Melbourne', 'Australia/NSW', 'Australia/North', 'Australia/Perth', 'Australia/Queensland', 'Australia/South', 'Australia/Sydney', 'Australia/Tasmania', 'Australia/Victoria', 'Australia/West', 'Australia/Yancowinna', 'Brazil/Acre', 'Brazil/DeNoronha', 'Brazil/East', 'Brazil/West', 'Canada/Atlantic', 'Canada/Central', 'Canada/East-Saskatchewan', 'Canada/Eastern', 'Canada/Mountain', 'Canada/Newfoundland', 'Canada/Pacific', 'Canada/Saskatchewan', 'Canada/Yukon', 'Chile/Continental', 'Chile/EasterIsland', 'Europe/Amsterdam', 'Europe/Andorra', 'Europe/Athens', 'Europe/Belfast', 'Europe/Belgrade', 'Europe/Berlin', 'Europe/Bratislava', 'Europe/Brussels', 'Europe/Bucharest', 'Europe/Budapest', 'Europe/Chisinau', 'Europe/Copenhagen', 'Europe/Dublin', 'Europe/Gibraltar', 'Europe/Guernsey', 'Europe/Helsinki', 'Europe/Isle_of_Man', 'Europe/Istanbul', 'Europe/Jersey', 'Europe/Kaliningrad', 'Europe/Kiev', 'Europe/Lisbon', 'Europe/Ljubljana', 'Europe/London', 'Europe/Luxembourg', 'Europe/Madrid', 'Europe/Malta', 'Europe/Mariehamn', 'Europe/Minsk', 'Europe/Monaco', 'Europe/Moscow', 'Europe/Nicosia', 'Europe/Oslo', 'Europe/Paris', 'Europe/Podgorica', 'Europe/Prague', 'Europe/Riga', 'Europe/Rome', 'Europe/Samara', 'Europe/San_Marino', 'Europe/Sarajevo', 'Europe/Simferopol', 'Europe/Skopje', 'Europe/Sofia', 'Europe/Stockholm', 'Europe/Tallinn', 'Europe/Tirane', 'Europe/Tiraspol', 'Europe/Uzhgorod', 'Europe/Vaduz', 'Europe/Vatican', 'Europe/Vienna', 'Europe/Vilnius', 'Europe/Volgograd', 'Europe/Warsaw', 'Europe/Zagreb', 'Europe/Zaporozhye', 'Europe/Zurich', 'Indian/Antananarivo', 'Indian/Chagos', 'Indian/Christmas', 'Indian/Cocos', 'Indian/Comoro', 'Indian/Kerguelen', 'Indian/Mahe', 'Indian/Maldives', 'Indian/Mauritius', 'Indian/Mayotte', 'Indian/Reunion', 'Mexico/BajaNorte', 'Mexico/BajaSur', 'Mexico/General', 'Pacific/Apia', 'Pacific/Auckland', 'Pacific/Chatham', 'Pacific/Chuuk', 'Pacific/Easter', 'Pacific/Efate', 'Pacific/Enderbury', 'Pacific/Fakaofo', 'Pacific/Fiji', 'Pacific/Funafuti', 'Pacific/Galapagos', 'Pacific/Gambier', 'Pacific/Guadalcanal', 'Pacific/Guam', 'Pacific/Honolulu', 'Pacific/Johnston', 'Pacific/Kiritimati', 'Pacific/Kosrae', 'Pacific/Kwajalein', 'Pacific/Majuro', 'Pacific/Marquesas', 'Pacific/Midway', 'Pacific/Nauru', 'Pacific/Niue', 'Pacific/Norfolk', 'Pacific/Noumea', 'Pacific/Pago_Pago', 'Pacific/Palau', 'Pacific/Pitcairn', 'Pacific/Pohnpei', 'Pacific/Ponape', 'Pacific/Port_Moresby', 'Pacific/Rarotonga', 'Pacific/Saipan', 'Pacific/Samoa', 'Pacific/Tahiti', 'Pacific/Tarawa', 'Pacific/Tongatapu', 'Pacific/Truk', 'Pacific/Wake', 'Pacific/Wallis', 'Pacific/Yap', 'US/Alaska', 'US/Aleutian', 'US/Arizona', 'US/Central', 'US/East-Indiana', 'US/Eastern', 'US/Hawaii', 'US/Indiana-Starke', 'US/Michigan', 'US/Mountain', 'US/Pacific', 'US/Pacific-New', 'US/Samoa'];
        var languages = {   "es_ES" : "Español",
                            "zh_CN" : "中文",
                            "nl_NL" : "Nederlands",
                            "en_GB" : "English (United Kingdom)",
                            "en_US" : "English (United States)",
                            "ja_JP" : "日本語",
                            "ko_KR" : "한국어"};
        var currentUser = {"visibility": "", "locale": "", "timezone": ""};
        var userBeforeSave = oae.data.me;
        var validator = null;
        /**
         * Function : hidePasswordError 
         * Hide all password errors
         */
        var hidePasswordError = function () {
            $('#accountpreferences-section-password div.alert').each(function () {
                $(this).removeClass('alert');
            });
            $('#accountpreferences-section-password div.alert-error').each(function () {
                $(this).removeClass('alert-error');
            });
            $('#accountpreferences-section-password div.error').each(function () {
                $(this).removeClass('error');
            });
            $('#accountpreferences-section-password div.oae-error').each(function () {
                $(this).hide();
            });
            
            clearPasswordFields();
        };
        /**
         * Function : checkSaveButtonEnableDisable 
         * Check if each container is not been changed then is the save button disabled
         * If one container is been changed the save button enabled
         */
        var checkSaveButtonEnableDisable = function () {
            if (!preferencesTabHasChanged && !privacyTabHasChanged && !passwordTabHasChanged) {
                $('#accountpreferences-modal button[type=submit]').prop("disabled", true);
                $('#accountpreferences-modal button[type=submit]').addClass("disabled");
            } else {
                $('#accountpreferences-modal button[type=submit]').prop("disabled", false);
                $('#accountpreferences-modal button[type=submit]').removeClass("disabled");
            }
        };
        /**
         * Function : getLocale 
         * Returns the value of the current locale of the user
         * 
         * @return {String}     value of the current locale
         */
        var getLocale = function () {
            return currentUser.locale;
        };
        /**
         * Function : setLocale 
         * Set the value of the locale of a user, if nothing is in the value
         * the default value will be loaded and this value will be selected in the select
         * element on the page. 
         * 
         * @param  {String}     value           String with the locale
         */
        var setLocale = function (value) {
          if (value === undefined) {
                currentUser.locale = oae.data.me.locale.locale;
                $(languageSelect + ' option[value="' + currentUser.locale + '"]').attr('selected', true);
          } else {
                currentUser.locale = value;
          }
        };
        /**
         * Function : getTimezone 
         * Returns the value of the current timezone of the user
         * 
         * @return {String}     value of the current timezone
         */
        var getTimezone = function () {
            return currentUser.timezone;
        };
        /**
         * Function : setTimezone 
         * Set the value of the timezone of a user, if nothing is in the value
         * the default value will be loaded and this value will be selected in the select
         * element on the page. 
         * 
         * @param  {String}     value           String with the timezone
         */
        var setTimezone = function (value) {
            if (value === undefined) {
                currentUser.timezone = oae.data.me.timezone;
                $(timezoneSelect + ' option[value="' + currentUser.timezone + '"]').attr('selected', true);
            } else {
                currentUser.timezone = value;
            }
        };
        /**
         * Function : loadTimezones 
         * This function takes the values of the timezones array and puts them
         * into an select element
         */
        var loadTimezones = function () {
            $(timezoneSelect).empty();
            $.each(timezones, function (key, value) {
                $(timezoneSelect).append($("<option/>", {value: value, text: value}));
            });
        };
        /**
         * Function : savePreferencesSettings 
         * This function takes the values of the languages array and puts them
         * into a select element
         */
        var loadLanguages = function () {
            $(languageSelect).empty();
            $.each(languages, function (key, value) {
                $(languageSelect).append($("<option/>", {value: key, text: value}));
            });
        };
        /**
         * Function : getVisibility 
         * Returns the value of the current visibility of the user
         * 
         * @return {String}     value of the current visibility
         */
        var getVisibility = function () {
            return currentUser.visibility;
        };
        /**
         * Function : setVisibility 
         * Set the value of the visibility of a user, if nothing is in the value
         * the default value will be loaded and this value will be selected in the select
         * element on the page. 
         * 
         * @param  {String}     value           String with the locale
         */
        var setVisibility = function (value) {
            if (value === undefined) {
                currentUser.visibility = oae.data.me.visibility;
                switch (currentUser.visibility) {
                    case "public": 
                        $(accountPreferencesPrivacyPrivate).removeAttr('checked', 'checked');
                        $(accountPreferencesPrivacyLoggedin).removeAttr('checked', 'checked');
                        $(accountPreferencesPrivacyPublic).attr('checked', 'checked');
                        break;
                    case "private":
                        $(accountPreferencesPrivacyPublic).removeAttr('checked', 'checked');
                        $(accountPreferencesPrivacyLoggedin).removeAttr('checked', 'checked');
                        $(accountPreferencesPrivacyPrivate).attr('checked', 'checked');
                        break;
                    case "loggedin":
                        $(accountPreferencesPrivacyPublic).removeAttr('checked', 'checked');
                        $(accountPreferencesPrivacyPrivate).removeAttr('checked', 'checked');
                        $(accountPreferencesPrivacyLoggedin).attr('checked', 'checked');
                        break;
                }
            } else {
                currentUser.visibility = value;
            }
        };
        /**
         * Function : addChangeSaveEventListeners 
         * Adds for each element in the container an listener to know when a 
         * container has been changed.
         */
        var addChangeSaveEventListeners = function () {
            $(languageSelect).bind('change', function () {
                if (userBeforeSave.locale.locale !== $(languageSelect).val()) {
                    preferencesTabHasChanged = true;
                    setLocale($(languageSelect).val());
                } else {
                    preferencesTabHasChanged = false;
                }
                checkSaveButtonEnableDisable();
            });
            $(timezoneSelect).bind('change', function () {
                if (userBeforeSave.timezone !== $(timezoneSelect).val()) {
                    preferencesTabHasChanged = true;
                    setTimezone($(timezoneSelect).val());
                } else {
                    preferencesTabHasChanged = false;
                }
                checkSaveButtonEnableDisable();
            });
            $(accountPreferencesPrivacyPublic).bind('change', function () {
                if (userBeforeSave.visibility !== "public") {
                    privacyTabHasChanged = true;
                    setVisibility("public");
                } else {
                    privacyTabHasChanged = false;
                }
                checkSaveButtonEnableDisable();
            });
            $(accountPreferencesPrivacyLoggedin).bind('change', function () {
                if (userBeforeSave.visibility !== "loggedin") {
                    privacyTabHasChanged = true;
                    setVisibility("loggedin");
                } else {
                    privacyTabHasChanged = false;
                }
                checkSaveButtonEnableDisable();
            });
            $(accountPreferencesPrivacyPrivate).bind('change', function () {
                if (userBeforeSave.visibility !== "private") {
                    privacyTabHasChanged = true;
                    setVisibility("private");
                } else {
                    privacyTabHasChanged = false;
                }
                checkSaveButtonEnableDisable();
            });
            $(currentPassword).bind('input', function () {
                passwordTabHasChanged = true;
                checkSaveButtonEnableDisable();
            });
            $(newPassword).bind('input', function () {
                passwordTabHasChanged = true;
                checkSaveButtonEnableDisable();
            });
            $(retypePassword).bind('input', function () {
                passwordTabHasChanged = true;
                checkSaveButtonEnableDisable();
            });
        };
        /**
         * Function : clearPasswordFields 
         * This function clears the field of the passwords
         */
        var clearPasswordFields = function () {
            $(currentPassword).val("");
            $(newPassword).val("");
            $(retypePassword).val("");
        };
        /**
         * Function : savePreferencesSettings 
         * This function handles the saving of the preferences of a user.
         * If this function receives an null answer from the server then are
         * the preferences succesfully saved, otherwise there will be error messages
         * shown on the page.
         * 
         * @param  {Function}     callback           Callback function to call after receiving and managing the answer
         * @return {Boolean} true if saving was successful
         */
        var savePreferencesSettings = function (callback) {
            var data = {'timezone': getTimezone(), 'locale': getLocale() };
            oae.api.user.updateUser(data, function (success, data) {
                if (success === null) {
                    oae.api.util.notification(oae.api.i18n.translate('__MSG__PREFERENCES_CHANGED__', 'accountpreferences'), oae.api.i18n.translate('__MSG__PREFERENCES_CHANGED_BODY__', 'accountpreferences'),'success');
                    oae.data.me.locale.locale = getLocale();
                    oae.data.me.timezone = getTimezone();
                    window.setTimeout(function () {
                        document.location.reload();
                    }, 1000);
                    preferencesTabHasChanged = false;
                    callback();
                    return true;
                }
                if (success !== null) {
                    oae.api.util.notification(oae.api.i18n.translate('__MSG__CHANGING_PREFERENCES_FAILED__', 'accountpreferences'), oae.api.i18n.translate('__MSG__CHANGING_PREFERENCES_FAILED_BODY__', 'accountpreferences'),'error');
                    return false;
                }
            });
        };
        /**
         * Function : savePrivacySettings 
         * This function handles the saving of the privacy settings of a user.
         * If this function receives an null answer from the server then are
         * the privacy settings succesfully saved, otherwise there will be error messages
         * shown on the page.
         * 
         * @param  {Function}     callback           Callback function to call after receiving and managing the answer
         * @return {Boolean} true if saving was successful
         */
        var savePrivacySettings = function (callback) {
            var data = {'visibility': getVisibility() };
            oae.api.user.updateUser(data, function (success, data) {
                if (success === null) {
                    oae.api.util.notification(oae.api.i18n.translate('__MSG__PRIVACY_CHANGED__', 'accountpreferences'), oae.api.i18n.translate('__MSG__PRIVACY_CHANGED_BODY__', 'accountpreferences'),'success');
                    privacyTabHasChanged = false;
                    oae.data.me.visibility = getVisibility();
                    callback();
                    return true;
                }
                if (success !== null) {
                    oae.api.util.notification(oae.api.i18n.translate('__MSG__CHANGING_PRIVACY_FAILED__', 'accountpreferences'), oae.api.i18n.translate('__MSG__CHANGING_PRIVACY_FAILED_BODY__', 'accountpreferences'),'error');
                    return false;
                }
            });
        };
        /**
         * Function : savePasswordSettings 
         * This function handles the saving of a password of a user.
         * The values will be validated before this function is called.
         * If this function receives an null answer from the server then is
         * the password succesfully saved, otherwise there will be error messages
         * shown on the page.
         * 
         * @param  {Function}     callback           Callback function to call after receiving and managing the answer
         * @return {Boolean} true if saving was successful
         */
        var savePasswordSettings = function (callback) {
            var currentPass = $(currentPassword).val();
            var newPass1 = $(newPassword).val();
            var newPass2 = $(retypePassword).val();

            oae.api.authentication.changePassword(currentPass, newPass1, function (success, message) {
                if (success === null) {
                    oae.api.util.notification(oae.api.i18n.translate('__MSG__PASSWORD_CHANGED__', 'accountpreferences'), oae.api.i18n.translate('__MSG__PASSWORD_CHANGED_BODY__', 'accountpreferences'),'success');
                    clearPasswordFields();
                    passwordTabHasChanged = false;
                    $(passwordForm).resetForm();
                    callback();
                    return true;
                }
                if (success !== null) {
                    oae.api.util.notification(oae.api.i18n.translate('__MSG__CHANGING_PASSWORD_FAILED__', 'accountpreferences'), oae.api.i18n.translate('__MSG__CHANGING_PASSWORD_FAILED_BODY__', 'accountpreferences'),'error');
                    return false;
                }
            });
        };
        /**
         * Function : saveUserSettings 
         * This function handles the saving of all the changed values.
         * If one of the saving procedures is beeing interupted the function
         * will stop and exit.
         */
        var saveUserSettings = function () {
            if (passwordTabHasChanged) {
                $('#accountpreferences-tabs a[href="#accountpreferences-password-container"]').tab('show');
                if ($(passwordForm).valid()) {
                    if (!savePasswordSettings(saveUserSettings)) {
                        return false;
                    }
                } else {
                    return false;
                }
            }
            if (preferencesTabHasChanged) {
                if (!savePreferencesSettings(saveUserSettings)) {
                    $('#accountpreferences-tabs a[href="#accountpreferences-preferences-container"]').tab('show');
                    return false;
                }
            }
            if (privacyTabHasChanged) {
                if (!savePrivacySettings(saveUserSettings)) {
                    $('#accountpreferences-tabs a[href="#accountpreferences-privacy-container"]').tab('show');
                    return false;
                }
            }
            checkSaveButtonEnableDisable();
        };
        /**
         * Function : initValidation
         * Initialize the validation
         * Add custom rules for validation
         * Add the messages that will be visible if a validation fails
         * Set the class and element of an error message (setDefaults)
         * Add the validation for the password form
         */
        var initValidation = function () {
            var validateOpts = {
                rules: {
                    'accountpreferences-curr-pass': {
                        required: true,
                        minlength: 4
                    },
                    'accountpreferences-new-pass': {
                        required: true,
                        minlength: 4
                    },
                    'accountpreferences-retype-pass': {
                        required: true,
                        minlength: 4,
                        equalTo: '#accountpreferences-new-pass'
                    }
                },
                messages: {
                    'accountpreferences-curr-pass': {
                        required: oae.api.i18n.translate('__MSG__PASSWORD_IS_REQUIRED__', 'accountpreferences'),
                        minlength: oae.api.i18n.translate('__MSG__YOUR_PASSWORD_SHOULD_BE_AT_LEAST_FOUR_CHARACTERS_LONG__')
                    },
                    'accountpreferences-new-pass': {
                        required: oae.api.i18n.translate('__MSG__PASSWORD_IS_REQUIRED__', 'accountpreferences'),
                        minlength: oae.api.i18n.translate('__MSG__YOUR_PASSWORD_SHOULD_BE_AT_LEAST_FOUR_CHARACTERS_LONG__')
                    },
                    'accountpreferences-retype-pass': {
                        required: oae.api.i18n.translate('__MSG__PASSWORD_IS_REQUIRED__', 'accountpreferences'),
                        minlength: oae.api.i18n.translate('__MSG__YOUR_PASSWORD_SHOULD_BE_AT_LEAST_FOUR_CHARACTERS_LONG__'),
                        equalTo: oae.api.i18n.translate('__MSG__NEW_PASSWORDS_ARENT_EQUAL__')
                    }
                }
            };
            oae.api.util.validation().validate($(passwordForm), validateOpts);
        };
        /**
         * Function : loadUserSettings 
         * Load all the settings of the current user
         */
        var loadUserSettings = function () {
            hidePasswordError();
            clearPasswordFields();
            loadTimezones();
            loadLanguages();
            setVisibility();
            setLocale();
            setTimezone();
            passwordTabHasChanged = false;
            privacyTabHasChanged = false;
            preferencesTabHasChanged = false;
            checkSaveButtonEnableDisable();
        };
        /*
         * Initialize function for the widget
         * 
         */
        var doInit = function () {
            initValidation();
            loadUserSettings();
            $(document).on('click', '.oae-trigger-accountpreferences', function() {
                // Trigger the modal dialog
                $('#accountpreferences-modal').modal();
                loadUserSettings();
                $('#accountpreferences-tabs a[href="#accountpreferences-preferences-container"]').tab('show');
                oae.api.util.template().render('#accountpreferences-privacy-template', {
                    'visibility': oae.data.me.visibility }, '#accountpreferences-section-privacy');
                addChangeSaveEventListeners();
            });
            $('#accountpreferences-tabs a').click(function (e) {
                e.preventDefault();
                $(this).tab('show');
            })
            $('#accountpreferences-modal button[type=submit]').on('click', saveUserSettings);
            $('#accountpreferences-modal button[type=submit]').prop("disabled", true);
            $('#accountpreferences-modal button[type=submit]').addClass("disabled");   
        };
        doInit();
    };
});
