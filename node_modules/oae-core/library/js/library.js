/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

define(['jquery', 'oae.core'], function($, oae) {

    return function(uid, showSettings, widgetData) {

        var $rootel = $('#' + uid);

        // Variable that will be used to keep track of the current infinite scroll instance
        var infinityScroll = false;

        /**
         * Show the empty list message when no results are found. This function will
         * be called by the infinite scroll plugin.
         */
        var handleEmptyResultList = function() {
            oae.api.util.template().render($('#library-noresults-template'), null, $('.oae-list', $rootel));
        };

        /**
         * Initialize a new infinite scroll container that fetches a user's memberships. 
         * This will detect when a search is happening and will change the endpoint 
         * accordingly.
         */
        var getLibrary = function() {
            // Disable the previous infinite scroll
            if (infinityScroll) {
                infinityScroll.kill();
            }

            // Detect whether or not we need to do a search
            var query = $.bbq.getState('q');
            $('.search-query', $rootel).val(query);

            var url = '/api/content/library/' + widgetData.principalId;
            if (query) {
                url = '/api/search/library/' + widgetData.principalId;
            }

            // Set up the infinite scroll for the list of search results
            infinityScroll = $('.oae-list', $rootel).infiniteScroll(url, {
                'limit': 12,
                'q': query
            }, '#library-template', {
                'postProcessor': function(data) {
                    // Let the template know whether or not the current list
                    // is a main list or a search list, as different paging
                    // keys need to be provided for each
                    data.isSearch = query ? true : false;
                    return data;
                },
                'emptyListProcessor': handleEmptyResultList
            });
        };

        /**
         * If the current user is an anonymous user, we disable the toggle that displays
         * the different list item actions.
         */
        var setUpAnon = function() {
            if (oae.data.me.anon) {
                $('.oae-list-options-toggle', $rootel).attr('disabled', 'disabled');
            }
        };

        /**
         * Initiate a search with the search query entered by the user. An empty
         * search will just show the normal list.
         */
        var search = function() {
            $.bbq.pushState({'q': $('.search-query', $(this)).val()});
            getLibrary();
            // Avoid that the search form is being submitted
            return false;
        };

        /**
         * Add the different event bindings
         */
        var addBinding = function() {
            // Set up search event
            $rootel.on('submit', '#library-search-form', search);
            // Listen to the event that indicates that new content has been added.
            // In that case, we reload the library.
            $(window).on('done.addcontent.oae', getLibrary);
        };

        addBinding();
        setUpAnon();
        getLibrary();

    };
});
