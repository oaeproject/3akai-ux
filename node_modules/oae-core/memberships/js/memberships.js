/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

define(['jquery', 'oae.core', 'jquery.history'], function($, oae) {

    return function(uid, showSettings, widgetData) {

        var $rootel = $('#' + uid);

        // Variable that will be used to keep track of the current infinite scroll instance
        var infinityScroll = false;

        /**
         * Initialize a new infinite scroll container that fetches a user's memberships.
         * This will detect when a search is happening and will change the endpoint
         * accordingly.
         */
        var getMemberships = function() {
            // Disable the previous infinite scroll
            if (infinityScroll) {
                infinityScroll.kill();
            }

            // Detect whether or not we need to do a search by checking if
            // the History.js state has a query parameter
            var query = History.getState().data.query;
            $('#memberships-search-query', $rootel).val(query);

             // Set up the list actions
            var initialContent = null;
            if (widgetData.canManage && !query) {
                initialContent = oae.api.util.template().render($('#memberships-list-actions-template', $rootel));
            }

            var url = '/api/user/' + widgetData.context.id + '/memberships';
            if (query) {
                url = '/api/search/memberships-library/' + widgetData.context.id;
            }

            // Set up the infinite scroll instance
            infinityScroll = $('.oae-list', $rootel).infiniteScroll(url, {
                'limit': 12,
                'q': query
            }, '#memberships-template', {
                'initialContent': initialContent,
                'postProcessor': function(data) {
                    // Let the template know whether or not the current list
                    // is a main list or a search list, as different paging
                    // keys need to be provided for each
                    data.query = query;
                    data.canManage = widgetData.canManage;
                    return data;
                },
                'emptyListProcessor': function() {
                    oae.api.util.template().render($('#memberships-noresults-template', $rootel), {
                        'query': query
                    }, $('.oae-list', $rootel));
                }
            });
        };

        /**
         * If the current user is an anonymous user, we disable the toggle that displays
         * the different list item actions. If the user is logged in, we render the list of
         * available action based on whether or not the user can manage this list.
         */
        var setUpListOptions = function() {
            if (oae.data.me.anon) {
                $('.oae-list-options-toggle', $rootel).prop('disabled', true);
            } else {
                oae.api.util.template().render($('#memberships-list-options-actions-template', $rootel), {
                    'widgetData': widgetData
                }, $('.oae-list-options-actions', $rootel));
            }
        };

        /**
         * Initiate a search with the search query entered by the user. An empty
         * search will just show the normal list.
         */
        var search = function() {
            var query = $('#memberships-search-query', $(this)).val();
            // Push the new query to a new History.js state. We make sure to take the
            // existing state data parameters with us and construct a new URL based on
            // the existing base URL, allowing for page refreshing and bookmarking.
            var newState = $.extend({}, History.getState().data, {
                'query': query
            });
            History.pushState(newState, null, $.url().attr('path') + '?q=' + oae.api.util.security().encodeForURL(query));
            // Avoid that the search form is being submitted
            return false;
        };

        /**
         * Add the different event bindings
         */
        var addBinding = function() {
            // Set up search event
            $rootel.on('submit', '#memberships-search-form', search);
            // Listen to History.js state changes
            $(window).on('statechange', function() {
                // Only re-load the memberships list when the widget is currently visible
                if ($rootel.is(':visible')) {
                    getMemberships();
                }
            });
            // Listen to the event that indicates that groups have been left.
            // In that case, we reload the memberships.
            $(window).on('oae.leavegroup.done', getMemberships);
        };

        addBinding();
        setUpListOptions();
        getMemberships();

    };
});
