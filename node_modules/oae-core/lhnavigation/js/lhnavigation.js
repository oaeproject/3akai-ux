/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

define(['jquery', 'oae.core'], function($, oae) {

    return function(uid) {

        var $rootel = $('#' + uid);

        // Variable that will be used to keep track of the provided page structure
        var lhNavigationStructure = null;

        /**
         * Render a newly selected page. We first deselect the previously selected page, and then put an active
         * marker on the newly selected page in the navigation. Next, the page content associated to that is shown
         * (if it has been rendered previously) or rendered.
         * 
         * @param  {String}     [pageId]        Id of the page that should be rendered. If this is not provided, the ID will be derived from the current browser state
         */
        var renderPage = function(pageId) {
            // Remove the active indicator on the previously selected page
            $('#lhnavigation-navigation ul li', $rootel).removeClass('active');

            // Get the current page and select it. We use the pageId if it has been provided, 
            // otherwise we use the last element of the Browser state. This might contain a `#`
            // part as well, which needs to be stripped out first.
            if (!pageId) {
                var browserState = History.getState().hash.split('#')[0];
                pageId = browserState.split('/').pop();
            }
            var selectedPage = getPage(pageId);
            // Mark the selected page as active in the left hand navigation
            $('#lhnavigation-navigation ul li[data-id="' + selectedPage.id + '"]', $rootel).addClass('active');

            // Hide the current open page
            $('#lhnavigation-page > div', $rootel).hide();

            // Render the page's content. We first check if the page has been rendered before. If that's
            // the case, we just show it again. Otherwise, we render the page structure first and render
            // all of the widgets
            var $pageContainer = $('#lhnavigation-page', $rootel);
            var $cachedPage = $('div[data-id="' + selectedPage.id + '"]', $pageContainer);
            if ($cachedPage.length > 0) {
                $cachedPage.show();
            } else {
                $pageContainer.append(oae.api.util.template().render($('#lhnavigation-page-template'), selectedPage));
                // Collect the widget data into a format that is understood by the widget loader
                var widgetData = {};
                $.each(selectedPage.layout, function(columnIndex, column) {
                    $.each(column.widgets, function(widgetIndex, widget) {
                        if (widget.settings) {
                            widgetData['lhnavigation-page-' + widget.id] = widget.settings;
                        } 
                    })
                });
                // Render the widgets and pass in the widget data
                oae.api.widget.loadWidgets($pageContainer, false, widgetData);
            }
        };

        /**
         * Get the page with a given page id from the provided page structure.
         * 
         * @param  {String}     pageId      Id of the page we want to retrieve from the provided pagestructure
         * @return {Object}                 Object representing the page with the provided page id. If no page with the provided page id can be found, the first page will be returned
         */
        var getPage = function(pageId) {
            for (var i = 0; i < lhNavigationStructure.length; i++) {
                if (lhNavigationStructure[i].id === pageId) {
                    return lhNavigationStructure[i];
                }
            }
            // Return the first page if no page with the provided id can be found
            return lhNavigationStructure[0];
        };

        /**
         * Render the left hand navigation based on the structure that has been passed in
         * and start listening to click events for the different elements in there.
         * 
         * @param  {String}     baseUrl         The current page's base URL. The different page ids will be appended to this to generate the full URL of each page
         */
        var setUpNavigation = function(baseUrl) {
            // Render the navigation
            oae.api.util.template().render($('#lhnavigation-navigation-template'), {
                'items': lhNavigationStructure,
                'baseUrl': baseUrl
            }, $('#lhnavigation-navigation'));
            // Render the first page
            renderPage();

            // Bind the click event
            $rootel.on('click', '#lhnavigation-navigation ul li', function() {
                // Only push state when a link other than the active one has been clicked
                if (!$(this).hasClass('active')) {
                    // Get the selected page
                    var selectedPage = getPage($(this).attr('data-id'));
                    // Push the state and render the selected page
                    history.pushState(null, selectedPage.title, $('a', $(this)).attr('href'));
                    renderPage(selectedPage.id);
                }
                return false;
            });
        };

        /**
         * The statechange event will be triggered every time the browser back or forward button 
         * is pressed and state has been pushed (using the History API) already.
         */
        $(window).on('statechange', function() {
            renderPage()
        });

        /**
         * Mechanism used for widgets to pass in a page structure. We register a trigger event
         * that can be used by widgets to send out the pages that need to be rendered. In case
         * this widget isn't ready at the time when the supplying widget sends out its request,
         * we also send out a ready event, which allows for the supplying widget to resend its
         * data.
         */
        $(window).on('oae.trigger.lhnavigation', function(ev, lhNavigation, baseUrl) {
            lhNavigationStructure = lhNavigation;
            setUpNavigation(baseUrl);
        });
        $(window).trigger('oae.ready.lhnavigation');

    };
});
