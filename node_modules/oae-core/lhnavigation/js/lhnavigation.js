/*!
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

define(['jquery', 'oae.core', 'jquery.history'], function($, oae) {

    return function(uid) {

        var $rootel = $('#' + uid);

        // Variable that will be used to keep track of the provided page structure
        var lhNavigationStructure = null;

        /**
         * Render a newly selected page. We first deselect the previously selected page, and then put an active
         * marker on the newly selected page in the navigation. Next, the page content associated to that is shown
         * (if it has been rendered previously) or rendered.
         */
        var renderPage = function() {
            // Remove the active indicator on the previously selected page
            $('#lhnavigation-navigation ul li', $rootel).removeClass('active');

            // Get the current page from the History.js state and select it.
            var selectedPage = getPage(History.getState().data.page);
            // Mark the selected page as active in the left hand navigation
            $('#lhnavigation-navigation ul li[data-id="' + selectedPage.id + '"]', $rootel).addClass('active');

            // Hide the current open page
            $('#lhnavigation-page > div', $rootel).hide();

            // Render the page's content. We first check if the page has been rendered before. If that's
            // the case, we just show it again. Otherwise, we render the page structure first and render
            // all of the widgets
            var $pageContainer = $('#lhnavigation-page', $rootel);
            var $cachedPage = $('div[data-id="' + selectedPage.id + '"]', $pageContainer);
            if ($cachedPage.length > 0) {
                $cachedPage.show();
            } else {
                $pageContainer.append(oae.api.util.template().render($('#lhnavigation-page-template'), selectedPage));
                // Collect the widget data into a format that is understood by the widget loader
                var widgetData = {};
                $.each(selectedPage.layout, function(columnIndex, column) {
                    $.each(column.widgets, function(widgetIndex, widget) {
                        if (widget.settings) {
                            widgetData['lhnavigation-page-' + widget.id] = widget.settings;
                        }
                    });
                });
                // Render the widgets and pass in the widget data
                oae.api.widget.loadWidgets($pageContainer, false, widgetData);
            }
        };

        /**
         * Get the page with a given page id from the provided page structure.
         *
         * @param  {String}     pageId      Id of the page we want to retrieve from the provided pagestructure
         * @return {Object}                 Object representing the page with the provided page id. If no page with the provided page id can be found, the first page will be returned
         */
        var getPage = function(pageId) {
            for (var i = 0; i < lhNavigationStructure.length; i++) {
                if (lhNavigationStructure[i].id === pageId) {
                    return lhNavigationStructure[i];
                }
            }
            // Return the first page if no page with the provided id can be found
            return lhNavigationStructure[0];
        };

        /**
         * Render the left hand navigation based on the structure that has been passed in
         * and start listening to click events for the different elements in there.
         *
         * @param  {String}     baseUrl         The current page's base URL. The different page ids will be appended to this to generate the full URL of each page
         */
        var setUpNavigation = function(baseUrl) {
            // Render the navigation
            oae.api.util.template().render($('#lhnavigation-navigation-template'), {
                'items': lhNavigationStructure,
                'baseUrl': baseUrl
            }, $('#lhnavigation-navigation'));

            // Extract the currently selected page from the URL by parsing the URL fragment that's
            // inside of the current History.js hash. The expected URL structure is `/me/<pageId>[?q=foo]`.
            // This will only be executed when the page is loaded.
            var loadedUrl = $.url(History.getState().hash);

            var pageId = loadedUrl.segment().pop();
            var selectedPage = getPage(pageId);
            var query = loadedUrl.param().q;

            // When the page loads, the History.js state data object will either be empty (when having
            // followed a link or entering the URL directly) or will contain the previous state data when
            // refreshing the page. This is why we use the URL to determine the initial state. We want
            // to replace the initial state with all of the required state data for the requested URL so
            // we have the correct state data in all circumstances. Calling the `replaceState` function
            // will automatically trigger the statechange event, which will take care of the page rendering.
            // for the requested module. However, as the page can already have the History.js state data
            // when only doing a page refresh, we need to add a random number to make sure that History.js
            // recognizes this as a new state and triggers the `statechange` event.
            var data = {
                'page': pageId,
                '_': Math.random()
            };

            // Although the `title` and `url` field are optional, we need to enter them as IE9 simply doesn't
            // handle their absense very well. We cannot lose any parameters such as the `q` query string
            // parameter as IE9 is not able to recover it from its state.
            var title = selectedPage.title;
            var url = $.url(History.getState().hash).attr('path');
            if (query) {
                data.query = query;
                url += '?q=' + query;
            }

            // Replace the old state.
            History.replaceState(data, title, url);

            // Bind the click event
            $rootel.on('click', '#lhnavigation-navigation ul li', function(ev) {
                // Only push state when a link other than the active one has been clicked
                if (!$(this).hasClass('active')) {
                    var page = getPage($(this).attr('data-id'));
                    var data = {'page': page.id};
                    var title = page.title;
                    var url = $('a', $(this)).attr('href');
                    // Push the state and render the selected page
                    History.pushState(data, title, url);
                }
                ev.preventDefault();
            });
        };

        /**
         * The statechange event will be triggered every time the browser back or forward button
         * is pressed or state is pushed/replaced using History.js.
         */
        $(window).on('statechange', renderPage);

        /**
         * Mechanism used for widgets to pass in a page structure. We register a trigger event
         * that can be used by widgets to send out the pages that need to be rendered. In case
         * this widget isn't ready at the time when the supplying widget sends out its request,
         * we also send out a ready event, which allows for the supplying widget to resend its
         * data.
         */
        $(window).on('oae.trigger.lhnavigation', function(ev, lhNavigation, baseUrl) {
            lhNavigationStructure = lhNavigation;
            setUpNavigation(baseUrl);
        });
        $(window).trigger('oae.ready.lhnavigation');

    };
});
