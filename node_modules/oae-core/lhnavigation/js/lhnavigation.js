/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

// TODO: Remove this after lhnav + sakaidoc refactoring
var sakai_global = sakai_global || {};

define(['jquery', 'underscore', 'oae/api/oae.core'], function($, _, oae) {

    return function(uid, showSettings) {

        ///////////////////
        // CONFIGURATION //
        ///////////////////

        var $rootel = $('#' + uid);

        // Classes
        var navSelectedItemClass = 'lhnavigation_selected_item';
        var navHoverableItemClass = 'lhnavigation_hoverable_item';

        // Elements
        var navSelectedItemArrow = '.lhnavigation_selected_item_arrow';
        var navSelectedItem = '.lhnavigation_selected_item';

        ////////////////
        // DATA CACHE //
        ////////////////

        var privstructure = false;
        var pubstructure = false;
        var contextData = false;
        var infinityStructuresPulled = []; // Contains a list of all the pages which are already loaded

        var parametersToCarryOver = {};
        var sakaiDocsInStructure = {};
        var currentPageShown = {};


        //////////////////////////////
        // Rendering the navigation //
        //////////////////////////////

        var renderData = function() {
            calculateOrder();
            var lhnavHTML = oae.api.util.renderTemplate($('#lhnavigation_template'), {
                'private': privstructure,
                'public': pubstructure,
                'contextData': contextData,
                'parametersToCarryOver': parametersToCarryOver
            });
            $('#lhnavigation_container').attr('role', 'navigation')
                .attr('aria-label', oae.api.i18n.translate('LH_NAV_ARIA_LABEL', 'lhnavigation'))
                .html(lhnavHTML);
        };

        ////////////////////////////////////
        // Structure processing functions //
        ////////////////////////////////////

        /**
         * Given a path to a page in a structure, return the page
         *
         * @param {String} path The path to the page, ie. 'syllabus/week1'
         * @param {Object} structure The structure to find the path in, ie. pubstructure.items
         * @return {Object} the page
         */
        var getPage = function(path, structure) {
            if (path.indexOf('/') > -1) {
                structure = structure[path.split('/')[0]];
                path = path.substring(path.indexOf('/')+1);
                return getPage(path, structure);
            } else if (structure[path]) {
                return structure[path];
            } else {
                return null;
            }
        };

        var getPageCount = function(pagestructure, pageCount) {
            if (!pageCount) {
                pageCount = 0;
            }
            for (var tl in pagestructure) {
                if (pagestructure.hasOwnProperty(tl) && tl.substring(0, 1) !== '_') {
                    pageCount++;
                    if (pageCount >= 3) {
                        return 3;
                    }
                    pageCount = getPageCount(pagestructure[tl], pageCount);
                }
            }
            return pageCount;
        };

        var returnStructure = function(ref) {
            if (privstructure.pages[ref]) {
                return privstructure.pages[ref];
            } else if (pubstructure.pages[ref]) {
                return pubstructure.pages[ref];
            } else {
                return false;
            }
        };

        var getPageContent = function(ref, callback) {
            // Check whether a page has been loaded before
            if ($.inArray(ref, infinityStructuresPulled) === -1) {
                var toplevelref = ref.split('-')[0];
                var subpageref = ref.split('-')[1];

                if (toplevelref && subpageref) {
                    $.ajax({
                        url: '/p/' + toplevelref + '/' + subpageref + '.infinity.json',
                        cache: false,
                        dataType: 'json',
                        success: function(data) {
                            infinityStructuresPulled.push(ref);
                            sakai.api.Server.convertObjectToArray(data, null, null);
                            if (data && data.rows && data.rows.length) {
                                $.each(data.rows, function(index, row) {
                                    if (!$.isPlainObject(row)) {
                                        data.rows[index] = $.parseJSON(row);
                                    }
                                });
                            }
                            if (privstructure.pages.hasOwnProperty(toplevelref + '-_lastModified')) {
                                privstructure.pages[ref] = data;
                            } else {
                                pubstructure.pages[ref] = data;
                            }
                            callback();
                        }
                    });
                } else {
                    callback();
                }
            } else {
                callback();
            }
        };

        var includeChildCount = function(structure) {
            var childCount = 0;
            for (var level in structure) {
                if (level && level.substring(0,1) !== '_') {
                    childCount++;
                    structure[level] = includeChildCount(structure[level]);
                } else if (level && level === '_altTitle') {
                    structure[level] = structure[level].replace('${user}', sakai.api.User.getFirstName(contextData.profile, false));
                }
            }
            structure._childCount = childCount;
            return structure;
        };

        var finishProcessData = function(structure, data, callback) {
            // Include the childcounts for the pages
            structure.items = includeChildCount(structure.items);
            for (var page in data) {
                if (page.substring(0,9) !== 'structure' && page.substring(0,1) !== '_') {
                    structure.pages[page] = data[page];
                }
            }
            callback(structure);
        };

        var processData = function(data, docURL, callback) {
            var structure = {};
            structure.items = {};
            structure.pages = {};
            if (data['structure0']) {
                structure.items = data['structure0'];
                finishProcessData(structure, data, callback);
            } else {
                finishProcessData(structure, data, callback);
            }
        };

        ///////////////////
        // Page ordering //
        ///////////////////

        var getLowestOrderItem = function(items, alreadyAdded) {
            var ret = false,
                lowest = false;
            $.each(items, function(idx, item) {
                idx = ''+idx;
                // if it is a valid property to order
                if (idx.substring(0,1) !== '_' && item.hasOwnProperty('_order')) {
                    // and it is the lowest in the list and we haven't already ordered it
                    if ((lowest === false || item._order < lowest) && $.inArray(idx, alreadyAdded) === -1) {
                        lowest = item._order;
                        ret = [idx,item];
                    }
                }
            });
            return ret;
        };

        var orderItems = function(items) {
            var orderedItems = [],
                alreadyAdded = [],
                order = 0;
            if (items) {
                $.each(items, function(idx, item) {
                    var toAdd = getLowestOrderItem(items, alreadyAdded);
                    var itemToAdd = toAdd[1], itemID = toAdd[0];
                    if (toAdd) {
                        itemToAdd._order = order;
                        order++;
                        itemToAdd._id = itemID;
                        itemToAdd._elements = orderItems(itemToAdd);
                        orderedItems.push(itemToAdd);
                        alreadyAdded.push(itemID);
                    }
                });
            }
            return orderedItems;
        };

        var calculateOrder = function() {
            if (privstructure && privstructure.items) {
                privstructure.orderedItems = orderItems(privstructure.items);
            }
            if (pubstructure && pubstructure.items) {
                pubstructure.orderedItems = orderItems(pubstructure.items);
            }
        };

        //////////////////////////////
        // Rendering a content page //
        //////////////////////////////

        /**
         * Displays a page unavailable error message
         */
        var renderPageUnavailable = function() {
            unavailablePage = {
                'ref': false,
                'path': false,
                'content': {
                    'unavailablePage1': {
                        'htmlblock': {
                            'content': sakai.config.pageUnavailableContent
                        }
                    },
                    'rows': [{
                        'columns': [{
                            'elements': [{
                                'id': 'unavailablePage1',
                                'type': 'htmlblock'
                            }],
                            width: 1
                        }]
                    }]
                },
                'savePath': false,
                'pageSavePath': false,
                'saveRef': false,
                'canEdit': false,
                'nonEditable': false,
                '_lastModified': false,
                'autosave': false,
                'title': false
            };
            $(window).trigger('showpage.contentauthoring.sakai', [unavailablePage]);
        };

        var getFirstSelectablePage = function(structure) {
            var selected = false;
            if (structure.orderedItems) {
                for (var i = 0; i < structure.orderedItems.length; i++) {
                    if (structure.orderedItems[i]._canView !== false) {
                        if (structure.orderedItems[i]._childCount > 1) {
                            for (var ii = 0; ii < structure.orderedItems[i]._elements.length; ii++) {
                                selected = structure.orderedItems[i]._id + '/' + structure.orderedItems[i]._elements[ii]._id;
                                break;
                            }
                        } else {
                            selected = structure.orderedItems[i]._id;
                        }
                        break;
                    }
                }
            }
            return selected;
        };

        var getFirstSubPage = function(structure, selected) {
            for (var i = 0; i < structure.orderedItems.length; i++) {
                if (structure.orderedItems[i]._canView !== false && structure.orderedItems[i]._id === selected) {
                    for (var ii = 0; ii < structure.orderedItems[i]._elements.length; ii++) {
                        selected = structure.orderedItems[i]._id + '/' + structure.orderedItems[i]._elements[ii]._id;
                        break;
                    }
                }
            }
            return selected;
        };

        var checkPageExists = function(structure, selected) {
            var structureFoundIn = false;
            if (selected.indexOf('/') !== -1) {
                var splitted = selected.split('/');
                if (structure.items[splitted[0]] && structure.items[splitted[0]][splitted[1]]) {
                    structureFoundIn = structure;
                }
            } else {
                if (structure.items[selected]) {
                    structureFoundIn = structure;
                }
            }
            return structureFoundIn;
        };

        var selectPage = function() {
            if (contextData.forceOpenPage) {
                $.bbq.pushState({
                    'l': contextData.forceOpenPage
                }, 0);
                contextData.forceOpenPage = false;
            } else {
                var state = $.bbq.getState('l');
                var selected = state || false;
                var structureFoundIn = false;
                // Check whether this page exist and if we have permission to view
                if (selected) {
                    structureFoundIn = checkPageExists(privstructure, selected) || checkPageExists(pubstructure, selected);
                    if (!structureFoundIn) {
                        selected = false;
                    }
                }
                // If it exists, check whether it has more than 1 subpage
                if (selected && selected.indexOf('/') === -1) {
                    if (structureFoundIn.items[selected]._childCount > 1) {
                        selected = getFirstSubPage(structureFoundIn, selected);
                    }
                }
                // If no page is selected, select the first one from the nav
                if (!selected) {
                    selected = getFirstSelectablePage(privstructure) || getFirstSelectablePage(pubstructure);
                }
                if (selected) {
                    // update links in all menus with subnav with the selected page, so they wont trigger handleHashChange and cause weirdness
                    $('#lhnavigation_container').find('a.lhnavigation_toplevel_has_subnav').attr('href', '#l=' + selected);
                    // Select correct item
                    var menuitem = $('li[data-sakai-path=\'' + selected + '\']');
                    if (menuitem.length) {
                        if (selected.split('/').length > 1) {
                            var par = $('li[data-sakai-path=\'' + selected.split('/')[0] + '\']');
                            showHideSubnav(par, true);
                        }
                        var ref = menuitem.data('sakai-ref');
                        var savePath = menuitem.data('sakai-savepath') || false;
                        var pageSavePath = menuitem.data('sakai-pagesavepath') || false;
                        var canEdit = menuitem.data('sakai-submanage') || false;
                        var nonEditable = menuitem.data('sakai-noneditable') || false;
                        if (!menuitem.hasClass(navSelectedItemClass)) {
                            selectNavItem(menuitem, $(navSelectedItem));
                        }

                        getPageContent(ref, function() {
                            preparePageRender(ref, selected, savePath, pageSavePath, nonEditable, canEdit);
                        });

                        // set the page title
                        var pageTitle = '';
                        if (menuitem.hasClass('lhnavigation_subnav_item')) {
                            pageTitle += ' - ' + $.trim(menuitem.parents('.lhnavigation_menuitem').children('div').find('.lhnavigation_page_title_value').text());
                        }
                        pageTitle += ' - ' + $.trim(menuitem.find('.lhnavigation_page_title_value').text());
                    }
                } else {
                    renderPageUnavailable();
                }
            }
        };

        var preparePageRender = function(ref, path, savePath, pageSavePath, nonEditable, canEdit) {
            var content = returnStructure(ref);
            var pageContent = content ? content : sakai.config.defaultSakaiDocContent;
            var lastModified = content && content._lastModified ? content._lastModified : null;
            var autosave = content && content.autosave ? content.autosave : null;
            var pageTitle = $.trim($('.lhnavigation_selected_item .lhnavigation_page_title_value').text());
            var saveRef = ref;
            if (saveRef.indexOf('-') !== -1) {
                saveRef = saveRef.substring(saveRef.indexOf('-') + 1);
            }
            currentPageShown = {
                'ref': ref,
                'path': path,
                'content': pageContent,
                'savePath': savePath,
                'pageSavePath': pageSavePath,
                'saveRef': saveRef,
                'canEdit': canEdit,
                'nonEditable': nonEditable,
                '_lastModified': lastModified,
                'autosave': autosave,
                'title': pageTitle
            };
            $(window).trigger('showpage.contentauthoring.sakai', [currentPageShown]);
        };

        //////////////////////////////
        // Handle navigation clicks //
        //////////////////////////////

        var selectNavItem = function($clickedItem, $prevItem) {
            // Remove selected class from previous selected page
            $prevItem.removeClass(navSelectedItemClass);
            $prevItem.addClass(navHoverableItemClass);
            // Add selected class to currently selected page
            $clickedItem.removeClass(navHoverableItemClass);
            $clickedItem.addClass(navSelectedItemClass);
            // Open or close subnavigation if necessary
            showHideSubnav($clickedItem);
        };

        var processNavigationClick = function($el, ev) {
            // don't open if the click is a result of a sort operation
            var $elLI = $el.parent('li');
            if ($elLI.hasClass('lhnavigation_hassubnav') && !$(ev.target).hasClass('lhnavigation_selected_submenu_image')) {
                showHideSubnav($elLI);
            }
        };

        var showHideSubnav = function($el, forceOpen) {
            $el.children('.lhnavigation_selected_item_subnav').show();
            if ($el.hasClass('lhnavigation_hassubnav')) {
                if (!$el.children('ul:first').is(':visible') || forceOpen) {
                    $('.lhnavigation_has_subnav', $el).addClass('lhnavigation_has_subnav_opened');
                    $el.children('ul:first').show();
                } else {
                    $('.lhnavigation_has_subnav', $el).removeClass('lhnavigation_has_subnav_opened');
                    $el.children('ul:first').hide();
                }
            }
            $('.oae-page-column-right').css('min-height', $('.oae-page-column-left').height());
        };

        //////////////////////////////////////
        // Prepare the navigation to render //
        //////////////////////////////////////

        var renderNavigation = function(pubdata, privdata, cData) {
            contextData = cData;
            processData(privdata, cData.privurl, function(processedPriv) {
                privstructure = processedPriv;
                processData(pubdata, cData.puburl, function(processedPub) {
                    pubstructure = processedPub;
                    renderData();
                    if (sakai_global.contentauthoring && sakai_global.contentauthoring.ready) {
                        selectPage();
                    } else {
                        $(window).on('ready.contentauthoring.sakai', selectPage);
                    }
                    if (cData.parametersToCarryOver) {
                        parametersToCarryOver = cData.parametersToCarryOver;
                        addParametersToNavigation();
                    }
                });
            });
        };

        ////////////////////////////
        // Internal event binding //
        ////////////////////////////

        $rootel.on('click', '.lhnavigation_item_content', function(ev) {
            processNavigationClick($(this), ev);
        });

        // bind arrow keys for navigation
        $('.lhnavigation_menuitem a').on('keydown', function(ev) {
            var $el = $(this);
            if (ev.which === $.ui.keyCode.DOWN) {
                // check top level
                if ($el.hasClass('lhnavigation_toplevel')) {
                    // check if sub menu open
                    if ($el.parent().nextAll('ul:visible').length) {
                        // step into sub menu
                        $el.parent().nextAll('ul:visible').children('li:first').find('a').focus();
                        return false;
                    }
                    // check if next top level menu item
                    else if ($el.parents('li.lhnavigation_menuitem').nextAll('li:first').children('div').children('a').length) {
                        $el.parents('li.lhnavigation_menuitem').nextAll('li:first').children('div').children('a').focus();
                        return false;
                    }
                    // check if next menu structure
                    else if ($el.parents('.lhnavigation_menu_list').nextAll('div:first').children('li:first').children('div').children('a').length) {
                        $el.parents('.lhnavigation_menu_list').nextAll('div:first').children('li:first').children('div').children('a').focus();
                        return false;
                    }
                }
                // check sub level
                else if ($el.parents('.lhnavigation_subnav_item').length) {
                    // check if next sub menu item
                    if ($el.parents('.lhnavigation_subnav_item').nextAll('li:first').length) {
                        $el.parents('.lhnavigation_subnav_item').nextAll('li:first').find('a').focus();
                        return false;
                    }
                    // find next top level menu item
                    else if ($el.parents('li.lhnavigation_menuitem').nextAll('li:first').children('div').children('a').length) {
                        $el.parents('li.lhnavigation_menuitem').nextAll('li:first').children('div').children('a').focus();
                        return false;
                    }
                    // find next menu structure
                    else if ($el.parents('.lhnavigation_menu_list').nextAll('div:first').children('li:first').children('div').children('a').length) {
                        $el.parents('.lhnavigation_menu_list').nextAll('div:first').children('li:first').children('div').children('a').focus();
                        return false;
                    }
                }
            } else if (ev.which === $.ui.keyCode.UP) {
                // check top level
                if ($el.hasClass('lhnavigation_toplevel')) {
                    // check if previous menu has an open sub menu open
                    if ($el.parents('li.lhnavigation_menuitem').prevAll('li:first').children('ul:visible').length) {
                        // step into sub menu
                        $el.parents('li.lhnavigation_menuitem').prevAll('li:first').children('ul:visible').children('li:last').find('a').focus();
                        return false;
                    }
                    // check if next top level menu item
                    else if ($el.parents('li.lhnavigation_menuitem').prevAll('li:first').children('div').children('a').length) {
                        $el.parents('li.lhnavigation_menuitem').prevAll('li:first').children('div').children('a').focus();
                        return false;
                    }
                    // check if next menu structure
                    else if ($el.parents('.lhnavigation_menu_list').prevAll('div:first').children('li:last').length) {
                        // check if sub menu open
                        if ($el.parents('.lhnavigation_menu_list').prevAll('div:first').children('li:last').children('ul:visible').length) {
                            $el.parents('.lhnavigation_menu_list').prevAll('div:first').children('li:last').children('ul:visible').children('li:last').find('a').focus();
                            return false;
                        } else if ($el.parents('.lhnavigation_menu_list').prevAll('div:first').children('li:last').children('div').children('a').length) {
                            $el.parents('.lhnavigation_menu_list').prevAll('div:first').children('li:last').children('div').children('a').focus();
                            return false;
                        }
                    }
                }
                // check sub level
                else if ($el.parents('.lhnavigation_subnav_item').length) {
                    // check if previous sub menu item
                    if ($el.parents('.lhnavigation_subnav_item').prevAll('li:first').length) {
                        $el.parents('.lhnavigation_subnav_item').prevAll('li:first').find('a').focus();
                        return false;
                    }
                    // find parent top level menu item
                    else if ($el.parents('ul.lhnavigation_subnav').prev('div').children('a').length) {
                        $el.parents('ul.lhnavigation_subnav').prev('div').children('a').focus();
                        return false;
                    }
                }
            } else if (ev.which === $.ui.keyCode.RIGHT) {
                if ($el.siblings('.lhnavigation_has_subnav').length &&
                    !$el.siblings('.lhnavigation_has_subnav_opened').length) {
                    // open sub menu
                    $el.click();
                } else if ($el.siblings('.lhnavigation_selected_submenu').length) {
                    $el.siblings('.lhnavigation_selected_submenu').find('button').focus();
                }
            } else if (ev.which === $.ui.keyCode.LEFT &&
                $el.siblings('.lhnavigation_has_subnav_opened').length) {
                // close sub menu
                $el.click();
            }
        });

        // bind arrow keys for navigation to page options dropdown
        $rootel.on('keydown', '.lhnavigation_menuitem button', function(ev) {
            var $el = $(this);
            if (ev.which === $.ui.keyCode.LEFT && $el.parent().siblings('a').length) {
                $el.parent().siblings('a').focus();
            } else if (ev.which === $.ui.keyCode.DOWN) {
                $el.click();
            }
        });

        ////////////////////
        // Page selection //
        ////////////////////

        /**
         * Catch every menu item click and push the selected page's id to the
         * hash
         */
        $('#lhnavigation_container', $rootel).on('click', 'li', function() {
            var path = $(this).attr('data-sakai-path');
            if (path && !$(this).hasClass('lhnavigation_hassubnav')) {
                $.bbq.pushState({'l': path}, 0);
                return false;
            }
        });

        ////////////////////////////
        // External event binding //
        ////////////////////////////

        $(window).on('hashchanged.lhnavigation.oae', function(e, changed, deleted, all) {
            selectPage();
        });

        $(window).on('lhnav.init', function(e, pubdata, privdata, cData) {
            renderNavigation(pubdata, privdata, cData);
        });

        ///////////////////////
        // Widget has loaded //
        ///////////////////////

        $(window).trigger('lhnav.ready');

    };

});
