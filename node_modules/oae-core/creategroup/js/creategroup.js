/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

require(['jquery', 'sakai/sakai.api.core'], function($, sakai) {

    /**
     * @name sakai_global.creategroup
     *
     * @class creategroup
     *
     * @description
     * creategroup widget
     *
     * @version 0.0.1
     * @param {String} tuid Unique id of the widget
     * @param {Boolean} showSettings Show the settings of the widget or not
     */
    sakai_global.creategroup = function(tuid, showSettings, widgetData) {

    /////////////////////////////
    // Configuration variables //
    /////////////////////////////

    var $rootel = $('#' + tuid);

    // Containers
    var $creategroupContainer = $('#creategroup_container', $rootel);
    var $creategroupGroupMembersNoneAddedContainer = $('#creategroup_group_members_none_added_container', $rootel);
    var $creategroupMembersAddedContainer = $('#creategroup_group_members_added_container', $rootel);

    // Elements
    var $creategroupCancelCreateButton = $('#creategroup_cancel_create', $rootel);
    var $creategroupGroupTitle = $('#creategroup_title', $rootel);
    var $creategroupSuggestedURL = $('#creategroup_suggested_url', $rootel);
    var $creategroupGroupDescription = $('#creategroup_description', $rootel);
    var $creategroupGroupTags = $('#creategroup_tags', $rootel);
    var $creategroupSuggestedURLBase = $('#creategroup_suggested_url_base', $rootel);
    var $creategroupCanBeFoundIn = $('#creategroup_can_be_found_in', $rootel);
    var $creategroupGroupMembership = $('#creategroup_membership', $rootel);
    var $creategroupAddPeople = $('.creategroup_add_people', $rootel);
    var creategroupMembersMessage = '#creategroup_members_message';
    var $creategroup_members_message_template_unprocessed = $('#creategroup_members_message_template_unprocessed', $rootel);

    // Forms
    var $creategroupGroupForm = $('#creategroup_group_form', $rootel);

    // Templates
    var creategroupMembersSelectedTemplate = 'creategroup_group_members_selected_template';
    var creategroupMembersMessageTemplate = 'creategroup_members_message_template';

    var selectedUsers = [],
        currentTemplate = false,
        templatePath = false,
        translatedRoles = {};

    var renderShareMessage = function() {
        $(creategroupMembersMessage, $rootel).html(sakai.api.Util.TemplateRenderer(creategroupMembersMessageTemplate, {
            'creatorName' : sakai.api.User.getDisplayName(sakai.data.me.profile),
            'groupName' : sakai.api.Security.safeOutput($creategroupGroupTitle.val() || ''),
            'link': sakai.config.SakaiDomain + '/~' + sakai.api.Util.makeSafeURL($creategroupSuggestedURL.val() || '')
        }));
    };

    var getTranslatedRoles = function() {
        if (currentTemplate.roles) {
            var roles = [];
            $.each(currentTemplate.roles, function(i,role) {
                translatedRoles[role.id] = role.title;
            });
        }
    };

    var createUsersToAddObject = function() {
        var users = [];
        $.each(selectedUsers, function(index, item) {
            users.push({
                'name': item.name,
                'firstName': item.firstName || item.name,
                'userid': item.userid,
                'role': item.permission,
                'roleString': translatedRoles[item.permission]
            });
        });
        users.push({
            'name': sakai.api.User.getDisplayName(sakai.data.me.profile),
            'userid': sakai.data.me.userId,
            'role': currentTemplate.creatorRole,
            'roleString': translatedRoles[currentTemplate.creatorRole],
            'creator': true
        });
        return users;
    };

    var checkDefaultContentAdded = function(contentToAdd, count) {
        return !$.isArray(contentToAdd) || contentToAdd.length - 1 === count;
    };

    var setDefaultContent = function(groupid) {
        var contentToAdd = $.bbq.getState('contentToAdd');
        if (contentToAdd.length > 1 && !$.isArray(contentToAdd)) {
            contentToAdd = contentToAdd.split(',');
        }
        var count = 0;
        $.each(contentToAdd, function(i, contentId) {
            sakai.api.Content.addToLibrary(contentId, groupid, false, function(contentId, entityId) {
                if (checkDefaultContentAdded(contentToAdd, count)) {
                    window.location = '/~' + groupid;
                } else {
                    count++;
                }
            });
        });
    };

    /**
     * Create a simple group and execute the tagging and membership functions
     */
    var doCreateSimpleGroup = function() {
        sakai.api.Util.progressIndicator.showProgressIndicator(
            sakai.api.i18n.getValueForKey('CREATING_YOUR_GROUP', 'creategroup').replace(/\$\{type\}/, sakai.api.i18n.getValueForKey(currentTemplate.title)),
            sakai.api.i18n.getValueForKey('PROCESSING_GROUP', 'creategroup')
        );
        var grouptitle = $creategroupGroupTitle.val() || '';
        var groupdescription = $creategroupGroupDescription.val() || '';
        var groupid = sakai.api.Util.makeSafeURL($creategroupSuggestedURL.val(), '-');
        var grouptags = sakai.api.Util.AutoSuggest.getTagsAndCategories( $creategroupGroupTags, true );
        var users = createUsersToAddObject();
        var subject = sakai.api.i18n.getValueForKey('USER_HAS_ADDED_YOU_AS_A_ROLE_TO_THE_GROUP_GROUPNAME', 'creategroup').replace('<"Role">', '${role}');
        var body = $.trim($creategroup_members_message_template_unprocessed.text().replace('<"Role">', '${role}').replace('<"First Name">', '${firstName}'));
        var joinable = $creategroupGroupMembership.val();
        var visible = $creategroupCanBeFoundIn.val();
        sakai.api.Groups.createGroup(groupid, grouptitle, groupdescription, grouptags, users, joinable, visible, templatePath, subject, body, sakai.data.me, function(success, groupData, nameTaken) {
            if (success) {
                if ($.bbq.getState('contentToAdd')) {
                    setDefaultContent(groupid);
                } else {
                    window.location = '/~' + groupid;
                }
            } else {
                var errorMessage = sakai.api.i18n.getValueForKey('GROUP_NOT_SUCCESSFULLY_CREATED', 'creategroup').replace(/\$\{title\}/, grouptitle);
                if (groupData.errorMessage) {
                    errorMessage = errorMessage + sakai.api.i18n.getValueForKey(groupData.errorMessage, 'creategroup');
                }
                $creategroupContainer.find('select, input, textarea:not([class*="as-input"]), button').removeAttr('disabled');
                sakai.api.Util.progressIndicator.hideProgressIndicator();
                sakai.api.Util.notification.show(sakai.api.i18n.getValueForKey('AN_ERROR_OCCURRED', 'creategroup'),
                    errorMessage,
                    sakai.api.Util.notification.type.ERROR);
            }
        });
    };

    /**
     * Intialize the add people widget
     * @param {Boolean} openDialog Whether you want to open the dialog
     */
    var initializeAddPeople = function(openDialog) {
        $(document).trigger('init.managegroupmembers.sakai', {
            editingGroup: false,
            openDialog: openDialog
        });
    };

    /**
     * Add binding to the elements and validate the forms on submit
     */
    var addBinding = function() {
        var validateOpts = {
            'methods': {
                'uniquegroupname': {
                    'method': function(value, element) {
                        return !sakai.api.Groups.checkIfGroupExists(value);
                    },
                    'text': sakai.api.i18n.getValueForKey('THIS_GROUP_HAS_BEEN_TAKEN', 'creategroup')
                }
            },
            rules: {
                creategroup_title: {
                    maxlength: 255
                },
                creategroup_suggested_url: {
                    maxlength: 255
                }
            },
            submitHandler: function(form) {
                $creategroupContainer.find('select, input, textarea:not([class*="as-input"]), button').attr('disabled', 'disabled');
                doCreateSimpleGroup();
            }
        };
        // Initialize the validate plug-in
        sakai.api.Util.Forms.validate($creategroupGroupForm, validateOpts, true);
        sakai.api.Util.AutoSuggest.setupTagAndCategoryAutosuggest($creategroupGroupTags, null, $('.list_categories', $rootel));
        $creategroupGroupTitle.on('keyup', function() {
            var suggestedURL = sakai.api.Util.makeSafeURL($(this).val().toLowerCase(), '-');
            $creategroupSuggestedURL.val(suggestedURL);
            $creategroupSuggestedURLBase.attr('title', window.location.protocol + '//' + window.location.host + '/~' + suggestedURL);
            renderShareMessage();
        });

        $creategroupSuggestedURL.on('blur', function() {
            var suggestedURL = sakai.api.Util.makeSafeURL($(this).val(), '-');
            $creategroupSuggestedURL.val(suggestedURL);
            renderShareMessage();
        });

        $(document).on('click', '.creategroup_add_people', initializeAddPeople);

        // We also need to intialize the add people widget but not show the dialog
        // when there is a query parameter called 'members'
        if ($.bbq.getState('members')) {
            initializeAddPeople(false);
        }

    };

    /**
     * Initialize the create group widget
     */
    var doInit = function() {
        sakai.api.Groups.getTemplate(widgetData.category, widgetData.id, function(success, template, templates) {
            if (success) {
                currentTemplate = $.extend(true, {}, template);
                currentTemplate.roles = sakai.api.Groups.getRoles(currentTemplate, true);
                getTranslatedRoles();
                templatePath = '/var/templates/worlds/' + widgetData.category + '/' + widgetData.id;
                $('.creategroup_template_name', $rootel).text(sakai.api.i18n.getValueForKey(currentTemplate.title));
                if (widgetData.singleTemplate === true) {
                    $creategroupCancelCreateButton.hide();
                }
                $creategroupSuggestedURLBase.text(
                    sakai.api.Util.applyThreeDots(window.location.protocol + '//' + window.location.host + '/~', 105, {
                        'middledots': true
                    }, null, true)
                );
                $creategroupSuggestedURLBase.attr('title', window.location.protocol + '//' + window.location.host + '/~');

                var category = false;
                for (var i = 0; i < templates.length; i++) {
                    if (templates[i].id === widgetData.category) {
                        category = templates[i];
                        break;
                    }
                }
                var defaultaccess = currentTemplate.defaultaccess || sakai.config.Permissions.Groups.defaultaccess;
                var defaultjoin = currentTemplate.defaultjoin || sakai.config.Permissions.Groups.defaultjoin;

                $('#creategroup_can_be_found_in option[value="' + defaultaccess + '"]', $rootel).attr('selected', 'selected');
                $('#creategroup_membership option[value="' + defaultjoin + '"]', $rootel).attr('selected', 'selected');

                sakai_global.selecttemplate.currentTemplate = currentTemplate;

                $creategroupContainer.show();
                addBinding();
            } else {
                debug.error('Could not get the group template');
            }
        });
    };

    $creategroupCancelCreateButton.on('click', function() {
        $.bbq.pushState({'_r': Math.random()});
    });

    $(window).on('toadd.addpeople.sakai', function(ev, initTuid, users) {
        selectedUsers = $.extend(true, [], users);
        $creategroupMembersAddedContainer.html(sakai.api.Util.TemplateRenderer(creategroupMembersSelectedTemplate, {
            'users': selectedUsers,
            'roles': currentTemplate.roles,
            'sakai': sakai
        }));

        if (selectedUsers.length) {
            renderShareMessage();
            $creategroupGroupMembersNoneAddedContainer.hide();
            $creategroupMembersAddedContainer.show();
        } else {
            $creategroupGroupMembersNoneAddedContainer.show();
            $creategroupMembersAddedContainer.hide();
        }
    });

    doInit();

    };

    sakai.api.Widgets.widgetLoader.informOnLoad('creategroup');

});