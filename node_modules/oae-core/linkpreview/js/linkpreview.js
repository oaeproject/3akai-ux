/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

define(['jquery', 'oae.core', 'jquery.oembed'], function($, oae) {

    return function(uid, showSettings, widgetData) {

        // Cache the widget container
        var $rootel = $('#' + uid);

        /**
         * Whitelist the supported oEmbed providers
         *
         * @see http://oembed.com
         */
        var oEmbedProviders = {
            'blip': RegExp('blip\\.tv/.+'),
            'dailymotion': RegExp('dailymotion\\.com/.+'),
            'deviantart': RegExp('deviantart.com/.+'),
            'dribble': RegExp('dribbble.com/shots/.+'),
            'flickr': RegExp('flickr\\.com/photos/.+'),
            'hulu': RegExp('hulu\\.com/watch/.*'),
            'ifixit': RegExp('ifixit.com/.+'),
            'imgly': RegExp('img\\.ly/.+'),
            'instagram': RegExp('instagr\\.?am(\\.com)?/.+'),
            'pastebin': RegExp('pastebin\\.com/[\\S]{8}'),
            'pinterest': RegExp('pinterest.com/pin/.+'),
            'prezi': RegExp('prezi.com/.*'),
            'scribd': RegExp('scribd\\.com/.+'),
            'slideshare': RegExp('slideshare\\.net'),
            'soundcloud': RegExp('soundcloud.com/.+'),
            'speakerdeck': RegExp('speakerdeck.com/.+'),
            'ted': RegExp('ted.com/talks/.+'),
            'twitgoocom': RegExp('twitgoo\\.com/.+'),
            'twitpic': RegExp('twitpic.com/.+'),
            'vimeo': RegExp('vimeo\\.com/.+'),
            'youtube': RegExp('youtube\\.com/watch.+v=[\\w-]+&?')
        };

        /**
         * Override the default embed behavior for some of the supported oEmbed providers
         */
        var setUpCustomOEmbedProviders = function() {
            // Dribble
            $.fn.updateOEmbedProvider('dribbble', null, null, null, {
                'templateData' : function(data) {
                    return oae.api.util.template().render($('#linkpreview-image-template', $rootel), {
                        'img': data.image_url,
                        'linkProfile': widgetData
                    });
                }
            });

            // Img.ly
            $.fn.updateOEmbedProvider('img.ly', 'photo', ['img\\.ly/.+'],'//img.ly/show/large/$1', {
                'embedtag': {tag: 'img'}
            });

            // Twitgoo
            $.fn.updateOEmbedProvider('twitgoo.com', 'photo', ['twitgoo\\.com/.+'],'http://twitgoo.com/show/img/$1', {
                embedtag: {tag:'img'}
            });

            // TED, Twitpic
            $.fn.updateOEmbedProvider('opengraph', null, null, null, {
                yql: {
                    xpath: '//meta|//title|//link',
                    from: 'html',
                    datareturn: function(results) {
                        var embed = $('<p/>');
                        if (results['og:url'].match(oEmbedProviders.ted)) {
                            var url = results['og:url'].replace('www.', 'embed.');
                            embed.append(oae.api.util.template().render($('#linkpreview-iframe-template', $rootel), {'link': url}));
                        } else if (results['og:image']) {
                            // If we're looking at TwitPic, get the large picture instead of the thumbnail
                            if (results['og:site_name'] === 'TwitPic') {
                                results['og:image'] = results['og:image'].replace('thumb', 'large');
                            }
                            embed.append(oae.api.util.template().render($('#linkpreview-image-template', $rootel), {
                                'img': results['og:image'],
                                'linkProfile': widgetData
                            }));
                        }
                        return embed;
                    }
                }
            });
        };

        /**
         * In case the current link doesn't match any of the oEmbed providers, we try to embed the link as an iframe.
         * If the preview processor has marked the link as non-embeddable because of cross-domain embedding policies,
         * we try to show the preview image if available.
         */
        var renderDefaultPreview = function() {
            // The link does not allow embedding
            if (widgetData.previews.embeddable === false) {
                oae.api.util.template().render($('#linkpreview-default-template', $rootel), {'linkProfile': widgetData}, $('#linkpreview-container'), $rootel);
            // Embed the link as an iframe
            } else {
                oae.api.util.template().render($('#linkpreview-iframe-template', $rootel), {'link': widgetData.link}, $('#linkpreview-container'), $rootel);
            }
        };

        /**
         * Render the link preview using the oEmbed library.
         */
        var renderOEmbedPreview = function() {
            $('#linkpreview-container', $rootel).oembed(widgetData.link, {
                // Delete the arrow that collapses the container
                includeHandle: false,
                // Place the content into the container instead of creating a new div
                embedMethod: 'fill'
            });
        };

        /**
         * Decide whether or not to render the link preview using oEmbed or using the standard
         * iFrame embedding method.
         */
        var initPreview = function() {
            // Check the current link against the supported oEmbed providers
            var useOEmbed = false;
            $.each(oEmbedProviders, function(provider, regex) {
                if (regex.test(widgetData.link)) {
                    useOEmbed = true;
                    return false;
                }
            });

            if (useOEmbed) {
                renderOEmbedPreview();
            } else {
                renderDefaultPreview();
            }
        };

        setUpCustomOEmbedProviders();
        initPreview();

    };
});
