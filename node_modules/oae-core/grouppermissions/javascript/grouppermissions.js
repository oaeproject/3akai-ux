/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

define(['jquery', 'underscore', 'oae/api/oae.core', '/shared/vendor/js/jquery-plugins/jquery.autoSuggest.sakai-edited.js'], function($, _, oae) {
    return function(uid, showSettings) {

        var $rootel = $('#' + uid);

        /////////////////////////////
        // CONFIGURATION VARIABLES //
        /////////////////////////////

        var grouppermissionsSelectable = '.grouppermissions_selectable > input';
        var groupData = null;
        var groupPermissionsEditList = 'li.grouppermissions_edit';
        var grouppermissionsMemberPermissions = '.grouppermissions_member_permissions';
        var grouppermissionsShareMessageTemplate = 'grouppermissions_share_message_template';

        var $grouppermissionsMembersAutosuggest = false;
        var defaultPermissionPassed = false;
        var visibility = null;
        var visibilityindex = {
            'public': 1,
            'loggedin': 2,
            'private': 3
        };

        var permissionsModal = null;
        var warningModal = null;
        var infinityScroll = false;

        ////////////////////
        // UTIL FUNCTIONS //
        ////////////////////

        /**
         * Closes the widget overlay
         */
        var closeOverlay= function() {
            permissionsModal.close('#grouppermissions_container');
            warningModal.close('#grouppermissions_warning_container');
            $(window).trigger('done.grouppermissions.oae');
        };

        var getNewMembers = function() {
            // Get the values from autoSuggest, which is a comma separated list.
            var list = $('#grouppermissions_container input.as-values').val();

            // Clean out the list.
            return _.compact(list.split(','));
        };

        var saveMembers = function() {
            var newRoles = {};
            var hasChanges = false;

            // Check if we have new members.
            var newMembers = getNewMembers();
            var newRole = $('#grouppermissions_members_autosuggest_permissions').val();
            for (var i = 0; i < newMembers.length; i++) {
                newRoles[newMembers[i]] = newRole;
                hasChanges = true;
            }

            // Check if there are any updates to existing members.
            $('#grouppermissions_members_list li.oae-list-item').each(function(i, item) {
                var $item = $(item)
                var oldPermission = $item.attr('data-original-role');

                // Get the new permission, look at the drop down first,
                // However, if the list item has been hidden, that means the principal should be deleted.
                var newPermission = $('select', $item).val();
                if ($item.hasClass('oae-hidden')) {
                    newPermission = false
                }

                // Check if the visibility has changed.
                if (newPermission !== oldPermission) {
                    var principalId = $item.attr('data-id');
                    newRoles[principalId] = newPermission;
                    hasChanges = true;
                }
            });

            // If there are no new members, just close the overlay.
            if (!hasChanges) {
                closeOverlay();

            // If there are changes save them.
            } else {
                oae.api.group.setGroupMembers(groupData.id, newRoles, function(err) {
                    if (err) {
                        throw new Error('Could not update the members for this piece of group: ' + err.msg);
                    }

                    // We're done.
                    closeOverlay();
                });
            }

        };

        /**
         * Starts the saving process.
         * If the group visibility has changed, that will be saved first.
         * One completion of the group visibility save, the members will be saved.
         */
        var doSave = function() {
            var newVisibilityVal = $.trim($('#grouppermissions_see_container input:checked').val());
            var newJoinableVal = $.trim($('#grouppermissions_joinable_container select').val());
            // If the visibility setting has been changed, store that change first.
            if (newVisibilityVal !== groupData.visibility || newJoinableVal !== groupData.joinable) {
                oae.api.group.updateGroup(groupData.id, { 'visibility': newVisibilityVal, 'joinable': newJoinableVal }, function(err) {
                    if (err) {
                        throw new Error('Could not update the group metadata: ' + err.msg);
                    }

                    // Remember the new visiblity/joinable combo
                    groupData.visibility = newVisibilityVal;
                    groupData.joinable = newJoinableVal;

                    // Update the members
                    saveMembers();

                });
            // Otherwise can just save the membership changes.
            } else {
                saveMembers();
            }
        };

        /**
         * Shows a warning if the new visibility is more open than the old one.
         * Otherwise it will save the modal.
         */
        var showWarning = function() {
            var newVisibilityVal = $.trim($('#grouppermissions_see_container input:checked').val());
            if (visibility === newVisibilityVal || visibilityindex[newVisibilityVal] > visibilityindex[visibility]) {
                doSave();
            } else {
                $('#grouppermissions_warning_container_text').html(oae.api.util.renderTemplate('#grouppermissions_warning_container_text_template', {
                    'visibility': newVisibilityVal,
                    'group': groupData.name
                }));
                warningModal.open('#grouppermissions_warning_container');
            }
        };

        var setupAutoSuggest = function(page) {
            // TODO: We need a search that outputs both users and groups.
            $("#grouppermissions_members_autosuggest", $rootel).autoSuggest("/api/search/general/user/", {
                'selectedItemProp': "title",
                'searchObjProps': "title",
                'selectedValuesProp': 'id',
                'minChars': 2,
                'neverSubmit': true,
                'showResultListWhenNoMatch': true,
                'startText': oae.api.i18n.translate('__MSG__ENTER_NAME_HERE__'),
                'retrieveComplete': function(data) {
                    return data.results;
                },
                'selectionAdded': function(elem) {
                    $('#grouppermissions_members_autosuggest_permissions').removeAttr('disabled');
                },
                'selectionRemoved': function(elem) {
                    // We need to remove the element from the DOM explicitly.
                    elem.remove();

                    // If there are no other members in the list, we disable the visibility drop down.
                    var members = getNewMembers();
                    if (members.length === 0) {
                        $('#grouppermissions_members_autosuggest_permissions').attr('disabled', 'disabled');
                    }
                }
            });
        };

        ////////////////////
        // INITIALIZATION //
        ////////////////////

        /**
         * Render the default template when no results are found. This function will
         * be called by the infinite scroll plugin
         */
        var handleEmptyResultList = function() {
            oae.api.util.renderTemplate($('#grouppermissions_members_noresults_template'), null, $('.oae-list', $rootel));
        };

        /**
         * Add binding to various elements in the group permissions widget
         */
        var addBinding = function() {
            // Add some candy to the visibility settings.
            $('#grouppermissions_container').on('click', grouppermissionsSelectable, function() {
                $('#grouppermissions_see_container .oae-outer-shadow-container').addClass('grouppermissions_unselected_rbt');
                $(grouppermissionsSelectable).parent().removeClass('oae-outer-shadow-container');
                $(this).parent().addClass('oae-outer-shadow-container');
                $(this).parent().removeClass('grouppermissions_unselected_rbt');
            });

            // Deleting a member can be done by hiding his list item.
            // The save mechanism will pick it up correctly.
            $('#grouppermissions_container').on('click', '.oae-actions-delete', function(eventObject) {
                var $btn = $(eventObject.currentTarget);
                $btn.parents('.oae-list-item').addClass('oae-hidden');
            });

            // General modal save button
            $('#grouppermissions_container').on('click', '#grouppermissions_apply_permissions', showWarning);

            // Confirmation button click.
            $('#grouppermissions_warning_container').on('click', '#grouppermissions_proceedandapply', doSave);
        };

        /**
         * Show the group permissions overlay
         */
        var initializeOverlay = function() {
            permissionsModal = oae.api.util.modal('#grouppermissions_container', {
                'modal': true,
                'overlay': 20,
                'toTop': true,
                'zIndex': 11000
            });
            warningModal = oae.api.util.modal('#grouppermissions_warning_container', {
                'modal': true,
                'overlay': 20,
                'toTop': true,
                'zIndex': 12000
            });
            permissionsModal.open();
        };

        var renderContainer = function() {
            $('.grouppermissions_buttons').show();
            oae.api.util.renderTemplate('#grouppermissions_group_template', {
                'group': groupData,
                'title': groupData.name,
                'oae': oae,
                'defaultPermission': defaultPermissionPassed
            }, $('#grouppermissions_group_container'));


            // Set up the infinite scroll for the memberlist.
            infinityScroll = $('#grouppermissions_members_list', $rootel).infiniteScroll('/api/group/' + groupData.id + '/members', {
                'limit': 12,
                'scrollcontainer': '#grouppermissions_members_list'
            }, '#grouppermissions_members_template', {
                 'postProcessor': function(data, callback) {
                    return {'results': data};
                },
                'emptyListProcessor': handleEmptyResultList
            });

            // Setup autosuggestions.
            setupAutoSuggest();
        };

        /**
         * Initializes the group permission widget and invokes the overlay
         */
        var doInit = function() {
            // Render the main modal.
            renderContainer();

            $(window).off('ready.groupprofile.sakai', doInit);
            visibility = groupData.visibility;

            // By default, disable the dropdown next to the autosuggest field.
            // We'll enable it when a user/group has been selected.
            $('#grouppermissions_members_autosuggest_permissions').attr('disabled', 'disabled');

            // Show the overlay.
            initializeOverlay();

            // Scroll to the top.
            $('#grouppermissions_members_list').prop('scrollTop', $('#grouppermissions_members_list').prop('scrollHeight'));
        };

        $(document).on('init.grouppermissions.sakai', function(ev, data) {
            groupData = data.group;
            defaultPermissionPassed = data.newPermission || groupData.visibility;
            doInit();
        });

        addBinding();
    };
});
