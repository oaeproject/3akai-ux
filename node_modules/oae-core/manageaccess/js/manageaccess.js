/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

define(['jquery', 'oae.core', 'jquery.autosuggest'], function($, oae) {

    return function(uid) {

        //////////////////////
        // WIDGET VARIABLES //
        //////////////////////

        // The widget container
        var $rootel = $('#' + uid);

        // Caches the visibility of the context (e.g. group/content/discussion/...)
        var visibility = null;

        // Caches the member updates that need to be applied
        var membersUpdates = {};

        // Variable that will be used to keep track of the current infinite scroll instance
        var infinityScroll = null;

        // Caches the initialization data containing the context profile and the various strings
        var widgetData = null;


        //////////////////////
        // DATA PERSISTENCE //
        //////////////////////

        /**
         * Update the visibility in case it has been changed
         *
         * @param  {Function}       callback            Standard callback function
         * @param  {Object}         callback.err        Error object containing error code and error message
         */
        var saveVisibility = function(callback) {
            // Update the visibility if it has changed
            if (visibility !== widgetData.contextProfile.visibility) {
                widgetData.api.setVisibility(widgetData.contextProfile.id, {
                    'visibility': visibility
                }, callback);
            } else {
                callback();
            }
        };

        /**
         * Add, update or remove all of the modified members.
         *
         * @param  {Function}       callback            Standard callback function
         * @param  {Object}         callback.err        Error object containing error code and error message
         */
        var saveMembers = function(callback) {
            // Update the members if changes were made
            if (!$.isEmptyObject(membersUpdates)) {
                widgetData.api.setMembers(widgetData.contextProfile.id, membersUpdates, callback);
            } else {
                callback();
            }
        };

        /**
         * Save the visibility setting in case it has been changed and add/update/remove
         * all of the modified members, if any. A success notification will be shown if no errors
         * occurred, otherwise a failure notification will be shown.
         */
        var saveManageAccess = function() {
            // Update the visibility in case it has been changed
            saveVisibility(function(visibilityErr) {
                if (!visibilityErr) {
                    widgetData.contextProfile.visibility = visibility;
                }

                // Update the members
                saveMembers(function(membersErr) {
                    // Show a failure notification if the members or visibility could not be saved
                    if (visibilityErr || membersErr) {
                        oae.api.util.notification(widgetData.messages.accessNotUpdatedTitle, widgetData.messages.accessNotUpdatedBody, 'error');
                    // Show a success notification and close the dialog when the members and visibility have been updated
                    } else {
                        oae.api.util.notification(widgetData.messages.accessUpdatedTitle, widgetData.messages.accessUpdatedBody);
                        $(document).trigger('oae.manageaccess.done', widgetData.contextProfile);
                        $('#manageaccess-modal', $rootel).modal('hide');
                    }
                });
            });
        };

        /**
         * Checks if any values have changed and disables/enables the widget save button in the primary panel.
         */
        var enableDisableSave = function() {
            if (visibility === widgetData.contextProfile.visibility && $.isEmptyObject(membersUpdates)) {
                $('#manageaccess-overview-save', $rootel).prop('disabled', true);
            } else {
                $('#manageaccess-overview-save', $rootel).prop('disabled', false);
            }
        };


        ////////////////////////////
        // MEMBER INFINITE SCROLL //
        ////////////////////////////

        /**
         * Initialize a new infinite scroll container that fetches the members.
         */
        var getMembers = function() {
            // Disable the previous infinite scroll
            if (infinityScroll) {
                infinityScroll.kill();
            }

            var url = widgetData.api.getMembersURL;

            // Set up the infinite scroll instance
            infinityScroll = $('.oae-list', $rootel).infiniteScroll(url, {
                'limit': 8
            }, '#manageaccess-members-template', {
                'scrollContainer': $('#manageaccess-overview-shared', $rootel),
                'postProcessor': function(data) {
                    data.roles = widgetData.roles;
                    return data;
                }
            });
        };

        /**
         * Prepends members to the list that were selected through the autosuggest.
         *
         * @param  {Object[]}    autoSuggestMembers    Trimmed member object as used by the members feed containing all properties necessary to render a list item in the infinite scroll
         */
        var addNewMembers = function(autoSuggestMembers) {
            $.each(autoSuggestMembers, function(i, newMember) {
                membersUpdates[newMember.profile.id] = newMember.role;
            });

            infinityScroll.prependItems({'results': autoSuggestMembers});

            // Enable or disable the save button
            enableDisableSave();
        };

        /**
         * Removes a member from the list.
         */
        var deleteMember = function() {
            var principalId = $(this).attr('data-id');

            // Remove the list item
            infinityScroll.removeItems(principalId);

            // Mark the member as deleted
            membersUpdates[principalId] = false;

            // Enable or disable the save button
            enableDisableSave();
        };

        /**
         * Update the role of a member. This will only be persisted when the `Save` button is clicked.
         */
        var updateRole = function() {
            var principalId = $(this).attr('data-id');
            var selectedRole = $(this).val();

            membersUpdates[principalId] = selectedRole;

            // Enable or disable the save button
            enableDisableSave();
        };


        /////////////////
        // AUTOSUGGEST //
        /////////////////

        /**
         * Disable/enable the add button when an item has been added/removed from the autosuggest field.
         */
        var autoSuggestChanged = function() {
            $('#manageaccess-share-update', $rootel).prop('disabled', getAutosuggestSelection().length ? false : true);
        };

        /**
         * Initializes the autosuggest used for sharing with other users or groups.
         */
        var setUpAutoSuggest = function() {
            oae.api.util.autoSuggest().setup($('#manageaccess-share-autosuggest', $rootel), {
                'selectionChanged': autoSuggestChanged,
                'url': '/api/search/interact'
            }, null, function() {
                // Focus on the autosuggest field once it has been set up
                focusAutoSuggest();
            });
        };

        /**
         * Focus on the autosuggest field used for sharing with other users or groups after the
         * autosuggest component has finished initializing and after the modal dialog has finished
         * loading.
         */
        var focusAutoSuggest = function() {
            // Only focus the autosuggest field when the share panel is showing
            if ($('#manageaccess-share', $rootel).is(':visible')) {
                oae.api.util.autoSuggest().focus($rootel);
            }
        };

        /**
         * Get the principals that were selected in the autosuggest field.
         *
         * @return {Object[]}               Trimmed member object as used by the members feed containing all properties necessary to render a list item in the infinite scroll
         */
        var getAutosuggestSelection = function() {
            // Convert these into an object that reflects the members feed, using a `profile` property
            // for the principal profile and a `role` property for the new role
            var selectedItems = [];
            $.each(oae.api.util.autoSuggest().getSelection($rootel), function(index, selectedItem) {
                selectedItems.push({
                    'profile': selectedItem,
                    'role': $('#manageaccess-share-role', $rootel).val()
                });
            });
            return selectedItems;
        };


        /////////////////////
        // VIEW MANAGEMENT //
        /////////////////////

        /**
         * Shows a specified panel using the provided name.
         *
         * @param  {String}    panel    The name of the panel to show (i.e. 'overview', 'share', 'visibility')
         */
        var showPanel = function(panel) {
            // Show the container and footer
            $('.modal-body > div', $rootel).hide();
            $('#manageaccess-' + panel, $rootel).show();
            $('.modal-footer > div', $rootel).hide();
            $('#manageaccess-' + panel + '-footer', $rootel).show();
        };

        /**
         * Renders the visibility view.
         */
        var renderVisibility = function() {
            oae.api.util.template().render($('#manageaccess-visibility-template', $rootel), {
                'contextProfile': widgetData.contextProfile,
                'visibility': visibility,
                'messages': widgetData.messages
            }, $('#manageaccess-visibility', $rootel));
        };

        /**
         * Renders the add members view, including an autosuggest to add new members.
         */
        var renderShare = function() {
            oae.api.util.template().render($('#manageaccess-share-template', $rootel), {
                'contextProfile': widgetData.contextProfile,
                'roles': widgetData.roles
            }, $('#manageaccess-share', $rootel));

            setUpAutoSuggest();
        };

        /**
         * Renders the visibility settings overview.
         */
        var renderVisibilityOverview = function() {
            oae.api.util.template().render($('#manageaccess-overview-visibility-template', $rootel), {
                'contextProfile': widgetData.contextProfile,
                'visibility': visibility,
                'messages': widgetData.messages
            }, $('#manageaccess-overview-visibility-container', $rootel));
        };


        //////////////////////
        // DEINITIALIZATION //
        //////////////////////

        /**
         * Resets the widget to its initial state
         */
        var reset = function() {
            // Show the overview container and footer
            showPanel('overview');

            // Reset the members cache
            membersUpdates = {};

            // Disable the save button in overview
            $('#manageaccess-overview-save', $rootel).prop('disabled', true);
            // Disable the add button in the share view
            $('#manageaccess-share-update', $rootel).prop('disabled', true);
        };


        ////////////////////
        // INITIALIZATION //
        ////////////////////

        /**
         * Initializes the default state:
         * - Cache the context data
         * - Cache the current visibility setting
         * - Render the visibility overview
         * - Get and render the members
         *
         * @param  {Object}     ev                                      Standard event object coming from the `oae.context.send.manageaccess` or `oae.context.send.manageaccess-add` events.
         * @param  {Object}     data                                    The context data object
         * @param  {Object}     data.api                                The API functions to use for getting and saving data
         * @param  {String}     data.api.getMembersURL                  URL that should be used for the members infinite scroll
         * @param  {Function}   data.api.setMembers                     Function that should be executed when updating the members
         * @param  {Function}   data.api.setVisibility                  Function that should be executed when updating the visibility
         * @param  {Object}     data.contextProfile                     The context profile (e.g. group, content, discussion)
         * @param  {Object}     data.messages                           The translated messages to use inside of the widget
         * @param  {String}     data.messages.accessNotUpdatedBody      Translated body of the notification shown when the access can not be updated
         * @param  {String}     data.messages.accessNotUpdatedTitle     Translated title of the notification shown when the access can not be updated
         * @param  {String}     data.messages.accessUpdatedBody         Translated body of the notification shown when the access was successfully updated
         * @param  {String}     data.messages.accessUpdatedTitle        Translated title of the notification shown when the access was successfully updated
         * @param  {String}     data.messages.membersTitle              Translated title shown at the top of the members list
         * @param  {String}     data.messages.private                   Translated string used for the `private` visibility option
         * @param  {String}     data.messages.loggedin                  Translated string used for the `loggedin` visibility option
         * @param  {String}     data.messages.public                    Translated string used for the `public` visibility option
         * @param  {String}     data.messages.privateDescription        Translated description for the `private` visibility option in the visibility panel
         * @param  {String}     data.messages.loggedinDescription       Translated description for the `loggedin` visibility option in the visibility panel
         * @param  {String}     data.messages.publicDescription         Translated description for the `public` visibility option in the visibility panel
         * @param  {Object}     data.roles                              The available roles for members keyed by the role id where the values represent the translated role name
         */
        var initManageAccess = function(ev, data) {
            // Initialize the widget variables that cache context data
            widgetData = data;
            visibility = widgetData.contextProfile.visibility;

            // Show translated messages
            $('#manageaccess-overview-shared-title', $rootel).text(widgetData.messages.membersTitle);

            // Show the modal and render views
            $('#manageaccess-modal', $rootel).modal({
                'backdrop': 'static'
            });
            renderVisibilityOverview();
            getMembers();
        };

        /**
         * Sets up the manage access modal
         */
        var setUpManageAccessModal = function() {
            // Catches the click event on `oae-trigger-manageaccess` class elements
            // and shows the modal dialog.
            $(document).on('oae.trigger.manageaccess', initManageAccess);

            // Catches the `oae-trigger-manageaccess-add` click event, indicating the widget should go
            // straight into the share panel. Useful for adding new members.
            $(document).on('oae.trigger.manageaccess-add', function(ev, data) {
                initManageAccess(ev, data);
                showPanel('share');
                renderShare();
            });

            // In case the share panel is showing, focus on the autosuggest field after the modal has finished loading
            $('#manageaccess-modal', $rootel).on('shown', focusAutoSuggest);

            // Reset the widget when it is dismissed.
            $('#manageaccess-modal', $rootel).on('hidden', reset);
        };

        /**
         * Binds actions to various elements in the manageaccess widget
         */
        var addBinding = function() {
            // Render the visibility container when clicking 'change' in the visibility well
            $rootel.on('click', '#manageaccess-change-visibility', function() {
                renderVisibility();
                showPanel('visibility');
            });

            // Update the overview container when saving the visibility setting
            $rootel.on('click', '#manageaccess-visibility-save', function() {
                // Update the visibility in the cached visibility
                visibility = $('.oae-large-options-container input[type="radio"]:checked', $rootel).val();
                renderVisibilityOverview();
                showPanel('overview');
                // Enable or disable the save button
                enableDisableSave();
            });

            // Render the share container when clicking 'add more' at the bottom of the list of members
            $rootel.on('click', '#manageaccess-share-add-more', function() {
                showPanel('share');
                renderShare();
            });

            // Update the overview container when saving the autosuggest values
            $rootel.on('click', '#manageaccess-share-update', function() {
                addNewMembers(getAutosuggestSelection());
                showPanel('overview');
                // Disable the add button in the share view
                $('#manageaccess-share-update', $rootel).prop('disabled', true);
            });

            // Catch changes in the visibility radio group
            $rootel.on('change', '.oae-large-options-container input[type="radio"]', function() {
                $('.oae-large-options', $rootel).removeClass('checked');
                $(this).parents('.oae-large-options').addClass('checked');
            });

            // Delete a member from the list
            $rootel.on('click', '.oae-listitem-actions .close', deleteMember);

            // Update a member's role in the list
            $rootel.on('change', '.oae-listitem-actions select', updateRole);

            // Cancel the editing of visibility or members and go back to the overview
            $rootel.on('click', '.manageaccess-cancel', function() {
                showPanel('overview');
            });

            // Save the visibility and members
            $rootel.on('click', '#manageaccess-overview-save', saveManageAccess);
        };

        setUpManageAccessModal();
        addBinding();

    };
});
