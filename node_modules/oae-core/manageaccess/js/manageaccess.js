/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

define(['jquery', 'oae.core', 'jquery.autosuggest'], function($, oae) {

    return function(uid, showSettings) {


        //////////////////////
        // WIDGET VARIABLES //
        //////////////////////

        // The widget container
        var $rootel = $('#' + uid);

        // Caches the group profile
        var groupData = null;

        // Caches the visibility of the group
        var visibility = null;

        // Caches the members of the group
        var members = null;

        // Variable that will be used to keep track of the current infinite scroll instance
        var infinityScroll = null;


        //////////////////////
        // DATA PERSISTENCE //
        //////////////////////

        /**
         * Saves the visibility setting and shares the group with other members
         */
        var savemanageaccess = function() {
            oae.api.group.setGroupMembers(groupData.id, members, function(membersErr) {
                // Update the group visibility
                oae.api.group.updateGroup(groupData.id, {
                    'visibility': visibility
                }, function(visibilityErr) {
                    groupData.visibility = visibility;
                    // Show a failure notification if the members or visibility could not be saved
                    if (visibilityErr || membersErr) {
                        oae.api.util.notification(
                            oae.api.i18n.translate('__MSG__GROUP_ACCESS_NOT_UPDATED__', 'manageaccess'),
                            oae.api.i18n.translate('__MSG__THE_GROUP_ACCESS_COULD_NOT_BE_UPDATED__', 'manageaccess'),
                            'error'
                        );
                    // Show a success notification and close the dialog when the members and visibility have been updated
                    } else {
                        oae.api.util.notification(
                            oae.api.i18n.translate('__MSG__GROUP_ACCESS_UPDATED__', 'manageaccess'),
                            oae.api.i18n.translate('__MSG__GROUP_ACCESS_SUCCESSFULLY_UPDATED__', 'manageaccess')
                        );
                        $(document).trigger('done.manageaccess.oae');
                        $('#manageaccess-modal', $rootel).modal('hide');
                    }
                });
            });
        };


        ////////////////////////////
        // MEMBER INFINITE SCROLL //
        ////////////////////////////

        /**
         * Appends members to the list that were selected through the autosuggest.
         *
         * @param  {Object[]}    autoSuggestMembers    An array of objects containing the id and displayName of the principals to share with
         */
        var appendNewMembers = function(autoSuggestMembers) {
            $.each(autoSuggestMembers, function(i, newMember) {
                members[newMember.profile.id] = newMember.role;
            });

            infinityScroll.prependItems(autoSuggestMembers);
        };

        /**
         * Removes a member from the list and marks it as deleted in the cached group data.
         * When the group permissions are saved the data will be persisted.
         */
        var deleteMember = function() {
            var principalId = $(this).attr('data-id');

            // Remove the list item
            infinityScroll.removeItems(principalId);

            // Mark the member as deleted
            members[principalId] = false;
        };

        /**
         * Updates the role of a member.
         * When the group permissions are saved the data will be persisted.
         */
        var updateRole = function() {
            var principalId = $(this).attr('data-id');
            var selectedRole = $(this).val();

            members[principalId] = selectedRole;
        };

        /**
         * Retrieves the members of the group and initializes the infinite scroll plugin
         * that will take care of handling paging and rendering
         */
        var getMembers = function() {
            // Disable the previous infinite scroll
            if (infinityScroll) {
                infinityScroll.kill();
            }

            var url = '/api/group/' + groupData.id + '/members';

            // Set up the infinite scroll instance
            infinityScroll = $('.oae-list', $rootel).infiniteScroll(url, {
                'limit': 12
            }, '#manageaccess-members-template', {
                'postRenderer': function(data) {
                    members = members || {};
                    $.each(data.results, function(i, member) {
                        members[member.profile.id] = member.role;
                    });
                },
                'scrollContainer': $('#manageaccess-selected-container', $rootel)
            });
        };


        /////////////////
        // AUTOSUGGEST //
        /////////////////

        /**
         * Fired after changes in the autosuggest field happen and disables/enables
         * the add button when members where selected.
         */
        var autoSuggestChanged = function(a,b,c) {
            $('#manageaccess-share-update', $rootel).prop('disabled', getAutosuggestSelection().length ? false : true);
        };

        /**
         * Initializes the autosuggest used for sharing with other users or groups.
         * TODO: The Autosuggest initiation needs to be replaced by the API function once merged.
         */
        var setUpAutoSuggest = function() {
            // Initialize the autoSuggest field
            $('#manageaccess-share-autosuggest', $rootel).autoSuggest('/api/search/general', {
                'selectedItemProp': 'displayName',
                'searchObjProps': 'displayName',
                'selectedValuesProp': 'id',
                'extraParams': {
                    'resourceTypes': ['user', 'group']
                },
                'minChars': 3,
                'neverSubmit': true,
                'showResultListWhenNoMatch': true,
                'retrieveLimit': 5,
                'retrieveComplete': function(data) {
                    // TODO: Remove this once the API function for the autosuggest
                    // is in place. That will be taking care of potential XSS issues.
                    $.each(data.results, function(index, result) {
                        result.displayName = oae.api.util.security().encodeForHTML(result.displayName);
                    });
                    return data.results;
                },
                'selectionAdded': autoSuggestChanged,
                'selectionRemoved': function(el) {
                    el.remove();
                    autoSuggestChanged();
                }
            });
        };

        /**
         * Loops over the selected principals in the autosuggest field and returns them in an Array.
         *
         * @return {Object[]}   autoSuggestMembers   An array of objects containing the id and displayName of the principals to share with
         */
        var getAutosuggestSelection = function() {
            var autoSuggestMembers = [];
            $.each($rootel.find('.as-selections > li'), function(index, selection) {
                var id = $(selection).attr('data-value');
                // jQuery autosuggest will always prepare an empty item for the next item that needs to be
                // added to the list. Therefore, it is possible that an item in the list is empty
                if (id) {
                    var selectionData = $(selection).data().data;
                    autoSuggestMembers.push({
                        'profile': {
                            'displayName': selectionData && selectionData.displayName,
                            'id': id,
                            'picture': {
                                'medium': selectionData && selectionData.thumbnailUrl
                            },
                            'resourceType': selectionData && selectionData.resourceType,
                            'visibility': selectionData && selectionData.visibility
                        },
                        'role': $('#manageaccess-share-role', $rootel).val()
                    });
                }
            });
            return autoSuggestMembers;
        };


        /////////////////////
        // VIEW MANAGEMENT //
        /////////////////////

        /**
         * Shows the panel that allows for editing the visibility.
         */
        var showVisibility = function() {
            // Show the visibility container and footer
            $('.modal-body > div', $rootel).hide();
            $('#manageaccess-visibility', $rootel).show();
            $('.modal-footer > div', $rootel).hide();
            $('#manageaccess-visibility-footer', $rootel).show();
        };

        /**
         * Renders the visibility view of the group permissions.
         * Includes an autosuggest to select new members to add to the group.
         */
        var renderVisibility = function() {
            oae.api.util.template().render($('#manageaccess-visibility-template', $rootel), {
                'groupData': groupData,
                'visibility': visibility
            }, $('#manageaccess-visibility', $rootel));
        };

        /**
         * Shows the share panel where members can be added through an autosuggest field.
         * The role of the members can be chosen before adding them to the list of members.
         */
        var showShare = function() {
            // Show the share container and footer
            $('.modal-body > div', $rootel).hide();
            $('#manageaccess-share', $rootel).show();
            $('.modal-footer > div', $rootel).hide();
            $('#manageaccess-share-footer', $rootel).show();
        };

        /**
         * Renders the share view of the group permissions.
         * Includes an autosuggest to select new members to add to the group.
         */
        var renderShare = function() {
            oae.api.util.template().render($('#manageaccess-share-template', $rootel), {
                'groupData': groupData
            }, $('#manageaccess-share', $rootel));

            setUpAutoSuggest();
        };

        /**
         * Shows an overview of the visibility settings and members.
         */
        var showOverview = function() {
            // Show the overview container and footer
            $('.modal-body > div', $rootel).hide();
            $('#manageaccess-overview', $rootel).show();
            $('.modal-footer > div', $rootel).hide();
            $('#manageaccess-overview-footer', $rootel).show();
        };

        /**
         * Renders the visibility settings overview.
         */
        var renderVisibilityOverview = function() {
            oae.api.util.template().render($('#manageaccess-overview-visibility-template', $rootel), {
                'groupData': groupData,
                'visibility': visibility
            }, $('#manageaccess-overview-visibility-container', $rootel));
        };

        /**
         * Renders the general overview of the group permissions.
         * Includes group visibility and members.
         */
        var renderOverview = function() {
            renderVisibilityOverview();
        };


        //////////////////////
        // DEINITIALIZATION //
        //////////////////////

        /**
         * Resets the widget to its initial state
         */
        var reset = function() {
            // Show the overview container and footer
            $('.modal-body > div', $rootel).hide();
            $('#manageaccess-overview', $rootel).show();
            $('.modal-footer > div', $rootel).hide();
            $('#manageaccess-overview-footer', $rootel).show();
        };


        ////////////////////
        // INITIALIZATION //
        ////////////////////

        /**
         * Sets up the group permissions modal
         */
        var setUpModal = function() {
            // Catches the click event on `oae-trigger-manageaccess` class elements
            // and shows the modal dialog.
            $(document).on('click', '.oae-trigger-manageaccess', function() {
                $('#manageaccess-modal', $rootel).modal();
                $(document).trigger('oae.context.get', 'manageaccess');
            });

            // Catches the `oae.manageaccess.add` event indicating the widget should go
            // straight into the share panel. Useful for adding new members.
            $(document).on('oae.manageaccess.add', function() {
                $('#manageaccess-modal', $rootel).modal();
                $(document).trigger('oae.context.get', 'manageaccess-add');
            });

            // Receives the page context and initializes the widget into the overview panel.
            $(document).on('oae.context.send.manageaccess', function(ev, data) {
                groupData = data;
                visibility = data.visibility;
                renderOverview();
                getMembers();
            });

            // Receives the page context and initializes the widget into the share panel.
            $(document).on('oae.context.send.manageaccess-add', function(ev, data) {
                groupData = data;
                visibility = data.visibility;
                renderOverview();
                getMembers();
                renderShare();
                showShare();
            });

            // Reset the widget when it is dismissed.
            $('#manageaccess-modal', $rootel).on('hidden', reset);
        };

        /**
         * Binds actions to various elements in the group permissions widget
         */
        var addBinding = function() {
            // Render the visibility container when clicking 'change' in the visibility well
            $rootel.on('click', '#manageaccess-change-visibility', function() {
                renderVisibility();
                showVisibility();
            });

            // Update the overview container when saving the visibility setting
            $rootel.on('click', '#manageaccess-save-visibility', function() {
                // Update the visibility in the group data
                visibility = $('.oae-visibility-choice-container input[type="radio"]:checked', $rootel).val();
                renderVisibilityOverview();
                showOverview();
            });

            // Render the share container when clicking 'add more' at the bottom of the list of members
            $rootel.on('click', '#manageaccess-share-add-more', function() {
                renderShare();
                showShare();
            });

            // Update the overview container when saving the autosuggest values
            $rootel.on('click', '#manageaccess-share-update', function() {
                appendNewMembers(getAutosuggestSelection());
                showOverview();
            });

            // Catch changes in the visibility radio group
            $rootel.on('change', '.oae-visibility-choice-container input[type="radio"]', function() {
                $('.oae-visibility-choice', $rootel).removeClass('checked');
                $(this).parents('.oae-visibility-choice').addClass('checked');
            });

            // Delete a member from the list
            $rootel.on('click', '.oae-listitem-actions .close', deleteMember);

            // Update a member's role in the list
            $rootel.on('change', '.oae-listitem-actions select', updateRole);

            // Cancel the editing of visibility or members and go back to the overview
            $rootel.on('click', '.manageaccess-cancel', showOverview);

            // Save the visibility and members
            $rootel.on('click', '#manageaccess-save', savemanageaccess);
        };

        setUpModal();
        addBinding();
    };
});
