/*
 * Licensed to the Sakai Foundation (SF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The SF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 */

define(['jquery', 'oae.core', 'jquery.timeago'], function($, oae) {

    return function(uid, showSettings) {

        // Cache the widget container
        var $rootel = $('#' + uid);

        // Variable used to keep track of current content item
        var contentProfile = null;

        // Variable used to keep track of the current infinite scroll
        var infinityScroll = null;

        // Only show the comment box if the current user is logged in
        if (!oae.data.me.anon) {
            $('#contentcomments_new_comment_container', $rootel).show();

            // Add a picture if the user has one.
            if (oae.data.me.picture.medium) {
                $('#contentcomments_new_comment_container .contentcomments_entity_image', $rootel).attr('src', oae.data.me.picture.medium);
            }
        }

        /**
         * When a reply or comment is made the comment object is constructed added to the UI.
         *
         * @param {Object}     err        Error object containing error code and message
         * @param {Comment}    comment    The Comment object that was returned from the server when created
         */
        var constructAndAppendComment = function(err, comment) {
            // Top level comment
            if (!comment.replyTo) {
                $('#contentcomments_content_container', $rootel).prepend(oae.api.util.renderTemplate('#contentcomments_comment_template', {
                    'results': [comment],
                    'canManage': contentProfile.isManager
                }));
            // Reply on an existing comment
            } else {
                $('div[data-commentid="' + comment.replyTo + '"]').next().hide();
                $('div[data-commentid="' + comment.replyTo + '"] .contentcomments_reply_button').toggleClass('active');
                $('.contentcomments_comment_container[data-id="' + comment.replyTo + '"]', $rootel).after(oae.api.util.renderTemplate('#contentcomments_comment_template', {
                    'results': [comment],
                    'canManage': contentProfile.isManager
                }));
            }
        };

        /**
         * Marks a comment in the list as deleted without removing it from the list
         *
         * @param {Comment}    comment    The comment that was deleted
         */
        var markCommentAsDeleted = function(comment) {
            $('.contentcomments_comment_container[data-id="' + comment.commentId + '"]').replaceWith(oae.api.util.renderTemplate('#contentcomments_comment_template', {
                'results': [comment],
                'canManage': contentProfile.isManager
            }));
        };

        ///////////////////////
        // Comment functions //
        ///////////////////////

        /**
         * Bind all functionality related to creating a new top-levelcomment on the content item.
         */
         var setUpCreateComment = function() {
             // Creating top-level comments
             $rootel.on('click', '#contentcomments_post_comment', function() {
                var comment = $('#contentcomments_post_comment_body', $rootel).val();
                // Post the comment and re-render the results
                oae.api.content.createComment(contentProfile.id, comment, null, constructAndAppendComment);
                // Clear the comment field
                $('#contentcomments_post_comment_body', $rootel).val('');
            });
        };

        /**
         * Bind all reply related functionality. This will create a new reply on the selected comment.
         */
        var setUpReplyComment = function() {
            $rootel.on('click', '.contentcomments_reply_button', function() {
                $(this).toggleClass('active');
                $(this).parent().next().toggle();
            });

            $rootel.on('click', '.contentcomments_post_reply', function() {
                // Extract the data
                var $commentBox = $(this).prev().children(':first');
                var comment = $commentBox.val();
                var replyTo = $(this).attr('data-replyTo');
                // Hide the reply container
                $(this).parent().prev().children(':first').toggleClass('active');
                $(this).parent().toggle();
                // Reset the comment box
                $commentBox.val('');
                // Post the comment and insert the result
                oae.api.content.createComment(contentProfile.id, comment, replyTo, constructAndAppendComment);
            });
        };

        /**
         * Deletes a comment from the content item. An item that has been properly deleted, because it had no replies,
         * will be removed from the list. A deleted item that does have replies will remain available as `This comment
         * has been deleted`.
         */
        var setUpDeleteComment = function() {
            $rootel.on('click', '.contentcomments_delete_button', function() {
                var commentId = $(this).parents('li').attr('data-id');
                oae.api.content.deleteComment(contentProfile.id, commentId, function(err, softDeleted) {
                    if (err) {
                        throw new Error('Comment could not be deleted.');
                    }

                    if (softDeleted) {
                        markCommentAsDeleted(softDeleted);
                    } else {
                        infinityScroll.removeItems(commentId);
                    }
                });
            });
        };

        /**
         * Set up the infinite scroll for loading the comments on the current piece of content
         */
        var setUpInfiniteScroll = function() {
            contentProfile = sakai_global.contentProfile;
            // Clear the current infinite scroll
            if (infinityScroll) {
                infinityScroll.kill();
            }
            infinityScroll = $('#contentcomments_content_container', $rootel).infiniteScroll('/api/content/' + contentProfile.id + '/comments', null, $('#contentcomments_comment_template'), {
                'postProcessor': function(data) {
                    data.canManage = contentProfile.isManager;
                    return data;
                }
            });
        };

        setUpCreateComment();
        setUpReplyComment();
        setUpDeleteComment();

        // Check if the content profile information has already been retrieved
        // TODO: Remove this once we have a better way of sharing data
        if (sakai_global && sakai_global.contentProfile) {
            setUpInfiniteScroll();
        }
        $(window).on('ready.content.oae', setUpInfiniteScroll);

    };
});
