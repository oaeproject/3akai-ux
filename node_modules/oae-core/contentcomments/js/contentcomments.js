/*
 * Licensed to the Sakai Foundation (SF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The SF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 */

define(['jquery', 'oae.core', 'jquery.timeago'], function($, oae) {

    return function(uid, showSettings) {

        // Cache the widget container
        var $rootel = $('#' + uid);

        // Variable used to keep track of current content item
        var contentProfile = null;

        // Variable used to keep track of the current infinite scroll
        var infinityScroll = null;

        /**
         * When a reply or comment is made, the comment is added into the comments list.
         *
         * @param  {Object}     err        Error object containing error code and message
         * @param  {Comment}    comment    The Comment object representing the comment/reply that has been made
         */
        var renderComment = function(err, comment) {
            // Top level comment
            if (!comment.replyTo) {
                // Insert the comment at the beginning of the list after the new comment box
                $('#contentcomments-content-container li:first-child', $rootel).after(
                    oae.api.util.template().render('#contentcomments-comment-template', {
                        'results': [comment],
                        'canManage': contentProfile.isManager
                    })
                );
            // Reply on an existing comment
            } else {
                // Insert the reply after the comment it is a reply to
                $('li.media[data-id="' + comment.replyTo + '"]', $rootel).after(
                    oae.api.util.template().render('#contentcomments-comment-template', {
                        'results': [comment],
                        'canManage': contentProfile.isManager
                    })
                );
            }
            setUpValidation();
        };

        /**
         * Marks a comment in the list as deleted without removing it from the list. This is done when
         * the comment has at least one reply.
         *
         * @param  {Comment}    comment    The comment that was deleted
         */
        var markCommentAsDeleted = function(comment) {
            // Replace the deleted comment with a dummy placeholder that indicates there used to be a comment
            $('li.media[data-id="' + comment.commentId + '"]').replaceWith(
                oae.api.util.template().render('#contentcomments-comment-template', {
                    'results': [comment],
                    'canManage': contentProfile.isManager
                })
            );
        };

        /**
         * Bind all functionality related to creating a new top-level comment on the content item.
         *
         * @param  {Object}    form    The form DOM element passed in by the validation plugin
         */
         var createComment = function(form) {
            var $form = $(form);
            var comment = $.trim($form.find('textarea').val());
            // Post the comment and re-render the results
            oae.api.content.createComment(contentProfile.id, comment, null, renderComment);
            // Reset the form
            $form[0].reset();
            // Return false to prevent the default browser behavior
            return false;
        };

        /**
         * Reply to a comment. This will also reset and hide the reply form.
         *
         * @param  {Object}    form    The form DOM element passed in by the validation plugin
         */
        var createReply = function(form) {
            var $form = $(form);
            var replyTo = $form.attr('data-replyTo');
            var comment = $.trim($form.find('textarea').val());
            // Post the comment and re-render the results
            oae.api.content.createComment(contentProfile.id, comment, replyTo, renderComment);
            // Reset the form
            $form[0].reset();
            $form.parents('.contentcomments-reply-container').hide();
            // Return false to prevent the default browser behavior
            return false;
        };

        /**
         * Set up the validation on the comment and reply forms. We only initialize validation on the forms that haven't
         * been initialized yet. As jQuery.validate sets `novalidate="novalidate"` once a form has been initialized for
         * validation, we use this to find the forms that haven't been initialized.
         */
        var setUpValidation = function() {
            oae.api.util.validation().validate($('.contentcomments-new-comment-form[novalidate!="novalidate"]', $rootel), {
                'submitHandler': createComment
            });

            $('.contentcomments-new-reply-form[novalidate!="novalidate"]', $rootel).each(function(i, form) {
                oae.api.util.validation().validate($(form), {
                    'submitHandler': createReply
                });
            });
        };

        /**
         * Bind all reply related functionality.
         */
        var setUpReplyComment = function() {
            $rootel.on('click', '.contentcomments-reply-button', function() {
                // Show the reply container
                var $replyContainer = $(this).parent().siblings('.contentcomments-reply-container');
                $replyContainer.toggle();
                $replyContainer.find('textarea').focus();
            });
        };

        /**
         * Deletes a comment from the content item. An item that has been properly deleted, because it had no replies,
         * will be removed from the list. A deleted item that does have replies will remain available as `This comment
         * has been deleted`.
         */
        var setUpDeleteComment = function() {
            $rootel.on('click', '.contentcomments-delete-button', function() {
                var commentId = $(this).attr('data-id');
                oae.api.content.deleteComment(contentProfile.id, commentId, function(err, softDeleted) {
                    if (err) {
                        throw new Error('Comment could not be deleted.');
                    }

                    if (softDeleted) {
                        markCommentAsDeleted(softDeleted);
                    } else {
                        infinityScroll.removeItems(commentId);
                    }
                });
            });
        };

        /**
         * Prepends the textarea that allows creation of new top level comments to the list of comments if
         * the current user is logged in
         */
        var renderCreateNewComment = function() {
            if (!oae.data.me.anon) {
                $('#contentcomments-content-container').prepend(oae.api.util.template().render('#contentcomments-new-comment-template'));

                // Focuses the new comment field when the comment clip is clicked
                $(document).on('click', '.contentcomments-focus-new-comment', function() {
                    $('.contentcomments-new-comment-form textarea').focus();
                });
            }
        };

        /**
         * Initialize a new infinite scroll container that fetches the content comments.
         */
        var setUpInfiniteScroll = function() {
            // Kill the infinite scroll if there is one
            if (infinityScroll) {
                infinityScroll.kill();
            }

            // Set up the infinite scroll for comments
            infinityScroll = $('#contentcomments-content-container', $rootel).infiniteScroll('/api/content/' + contentProfile.id + '/comments', null, $('#contentcomments-comment-template'), {
                'postProcessor': function(data) {
                    data.canManage = contentProfile.isManager;
                    return data;
                },
                'postRenderer': setUpValidation
            });

            renderCreateNewComment();
            setUpReplyComment();
            setUpDeleteComment();
        };

        // Receive the content profile information and set up the infinite scroll for comments
        $(document).on('oae.context.send.contentcomments', function(ev, contentData) {
            contentProfile = contentData;
            setUpInfiniteScroll();
        });
        // Request the content profile information
        $(document).trigger('oae.context.get', 'contentcomments');

    };
});
