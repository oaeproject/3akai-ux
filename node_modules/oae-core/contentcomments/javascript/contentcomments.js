/*
 * Licensed to the Sakai Foundation (SF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The SF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 */
/*
 * Dependencies
 *
 * /dev/lib/misc/trimpath.template.js (TrimpathTemplates)
 * /dev/lib/jquery/plugins/jquery.pager.js (pager)
 */
/*global Config, $ */

define(['jquery', 'oae/api/oae.core', 'shared/vendor/js/jquery-plugins/jquery.timeago.js'], function($, oae) {

    return function(uid, showSettings) {


        /////////////////////////////
        // Configuration variables //
        /////////////////////////////

        var $rootel = $('#' + uid);


        ///////////////////////
        // Utility functions //
        ///////////////////////

        /**
         * Checks if the current user is a manager of the content
         *
         * @return {Boolean}    Returns true if the user is a manager of the content
         */
        var canManage = function() {
            // Check content permissions to see if user can manage content
            return false;
        };

        /**
         * Renders the paged comment items
         *
         * @param {Object}    commentData    Object containing comments as returned by the comment API
         */
        var renderComments = function(commentData) {
            $('.contentcomments_widget .contentcomments_content_container', $rootel).append(oae.api.util.renderTemplate('#contentcomments_comment_template', {
                comments: commentData.results,
                canManage: canManage(),
                oae: oae
            }));

            // Adjust paging button so it fetches next page on click
            if (!commentData.results[commentData.results.length - 1]) {
                return $('.contentcomments_read_more', $rootel).attr('disabled', 'disabled');
            }
            var nextPage = commentData.results[commentData.results.length - 1].created;
            $('.contentcomments_read_more', $rootel).attr('data-page', nextPage);
        };

        /**
         * When a reply or comment is made the comment object is constructed added to the UI.
         *
         * @param {Comment}    comment    The Comment object that was returned from the server when created
         */
        var constructAndAppendComment = function(comment) {
            if (!comment.replyTo) {
                $('.contentcomments_widget .contentcomments_content_container', $rootel).prepend(oae.api.util.renderTemplate('#contentcomments_comment_template', {
                    comments: {'results': comment},
                    canManage: canManage(),
                    oae: oae
                }));
            } else {
                $('div[data-commentid="' + comment.replyTo + '"]').next().hide();
                $('div[data-commentid="' + comment.replyTo + '"] .contentcomments_reply_button').toggleClass('active');
                $('.contentcomments_comment_container[data-commentId="' + comment.replyTo + '"]').after(oae.api.util.renderTemplate('#contentcomments_comment_template', {
                    comments: {'results': comment},
                    canManage: true,
                    oae: oae
                }));
            }
        };

        /**
         * Marks a comment in the list of comments as deleted
         *
         * @param {Comment}    comment    The comment that was deleted
         */
        var markCommentAsDeleted = function(comment) {
            $('.contentcomments_comment_container[data-commentId="' + comment.commentId + '"]').html(oae.api.util.renderTemplate('#contentcomments_comment_template', {
                comments: {'results': comment},
                canManage: canManage(),
                oae: oae
            }));
        };

        /**
         * Removes a comment from the list of comments
         *
         * @param {String}    commentId    The comment ID of the comment to be removed from the content
         */
        var removeCommentFromList = function(commentId) {
            $comment = $('.contentcomments_comment_container[data-commentId="' + commentId + '"]');
            $comment.hide('fast', function() {
                $comment.remove();
            });
        };

        ///////////////////////
        // Comment functions //
        ///////////////////////

        /**
         * Creates a new comment on the content item and calls the functionality that appends/prepends it to the list of comments in the UI.
         * TODO: Replace the hardcoded content ID with the content ID coming out of the content profile
         *
         * @param {String}    comment    The comment text that was created
         * @param {String}    replyTo    If the comment was a reply on another comment, this is the commentId of that comment
         * @param {String}    level      The level of the comment
         */
        var createComment = function(comment, replyTo, level) {
            oae.api.content.createComment('c:camtest:TeftBohhjqM', comment, replyTo, function(err, comment) {
                if (err) {
                    throw new Error('Comment could not be placed.');
                }
                constructAndAppendComment(comment);
            });
        };

        /**
         * Deletes a comment from the content item and calls the functionality that deletes it from the list of comments in the UI.
         * TODO: Replace the hardcoded content ID with the content ID coming out of the content profile
         *
         * @parm {String}    commentId    The ID of the comment to delete
         */
        var deleteComment = function(commentId) {
            oae.api.content.deleteComment('c:camtest:TeftBohhjqM', commentId, function(err, comment) {
                if (err) {
                    throw new Error('Comment could not be deleted.');
                }
                if (comment && comment.deleted) {
                    markCommentAsDeleted(comment);
                } else {
                    removeCommentFromList(commentId);
                }
            });
        };

        /**
         * Retrieves the paged list of comments.
         * TODO: Replace the hardcoded content ID with the content ID coming out of the content profile
         *
         * @param {String}    page    Indicates where to start paging
         *
         */
        var getComments = function(page) {
            oae.api.content.getComments('c:camtest:TeftBohhjqM', page, null, function(err, comments) {
                if (err) {
                    throw new Error('Comments could not be retrieved.');
                }
                renderComments(comments);
            });
        };


        //////////////////////////////
        // Initialization functions //
        //////////////////////////////

        /**
         * Binds various functions to elements in the content comments UI.
         */
        var addBinding = function() {
            // Paging
            $('.contentcomments_read_more', $rootel).on('click', function() {
                var nextPage = $(this).attr('data-page');
                getComments(nextPage);
            });

            // Post comment/reply
            $rootel.on('click', '.post_comment', function() {
                var replyTo = $(this).attr('data-replyTo');
                var level = parseInt($(this).attr('data-level')) || 0;
                var comment = $(this).next().val();
                createComment(comment, replyTo, level);
            });

            // Delete comment/reply
            $rootel.on('click', '.contentcomments_delete_button', function() {
                var commentId = $(this).parent().attr('data-commentid');
                deleteComment(commentId);
            });

            // Show reply form
            $rootel.on('click', '.contentcomments_reply_button', function() {
                $(this).toggleClass('active');
                $(this).parent().next().toggle();
            });
        };

        /**
         * Triggers the initialization of the content comments widget.
         */
        var doInit = function() {
            addBinding();
            getComments();
            $('.contentcomments_widget').show();
        };

        doInit();
    };
});
