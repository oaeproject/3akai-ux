/*!
 * Copyright 2013 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

define(['jquery', 'underscore', 'oae.core'], function($, _, oae) {

    return function(uid, showSettings, widgetData) {
        // The user ID for which we need to show/edit the profile.
        var user = widgetData.user;
        var userId = user.id;
        var displayName = user.displayName;

        // The section we'll be rendering.
        var sectionName = widgetData.sectionName || 'basic';

        var editing = false;
        var multiple = false;
        var sectionData = false;
        var allowUpdate = true;

        // TODO: Remove this.
        var profileConfig = {
            'basic': {
                'label': '__MSG__PROFILE_BASIC_LABEL__',
                'required': true,
                'display': true,
                'access': 'everybody',
                'modifyacl': false,
                'permission': 'anonymous',
                'order': 0,
                'elements': {
                    'displayName': {
                        'label': '__MSG__PROFILE_BASIC_PREFERREDNAME_LABEL__',
                        'required': false,
                        'display': true
                    },
                    'status': {
                        'label': '__MSG__PROFILE_BASIC_STATUS_LABEL__',
                        'required': false,
                        'display': false
                    },
                    'role': {
                        'label': '__MSG__PROFILE_BASIC_ROLE_LABEL__',
                        'required': false,
                        'display': true,
                        'type': 'select',
                        'select_elements': {
                            'academic_related_staff': '__MSG__PROFILE_BASIC_ROLE_ACADEMIC_RELATED_STAFF_LABEL__',
                            'academic_staff': '__MSG__PROFILE_BASIC_ROLE_ACADEMIC_STAFF_LABEL__',
                            'assistent_staff': '__MSG__PROFILE_BASIC_ROLE_ASSISTENT_STAFF_LABEL__',
                            'graduate_student': '__MSG__PROFILE_BASIC_ROLE_GRADUATE_STUDENT_LABEL__',
                            'undergraduate_student': '__MSG__PROFILE_BASIC_ROLE_UNDERGRADUATE_STUDENT_LABEL__',
                            'non_academic_staff': '__MSG__PROFILE_BASIC_ROLE_NON_ACADEMIC_STAFF_LABEL__',
                            'postgraduate_student': '__MSG__PROFILE_BASIC_ROLE_POSTGRADUATE_STUDENT_LABEL__',
                            'research_staff': '__MSG__PROFILE_BASIC_ROLE_RESEARCH_STAFF_LABEL__',
                            'other': '__MSG__PROFILE_BASIC_ROLE_OTHER_LABEL__'
                        }
                    },
                    'department': {
                        'label': '__MSG__PROFILE_BASIC_DEPARTMENT_LABEL__',
                        'required': false,
                        'display': true
                    },
                    'college': {
                        'label': '__MSG__PROFILE_BASIC_COLLEGE_LABEL__',
                        'required': false,
                        'display': true
                    }
                }
            },
            'aboutme': {
                'label': '__MSG__PROFILE_ABOUTME_LABEL__',
                'altLabel': '__MSG__PROFILE_ABOUTME_LABEL_OTHER__',
                'required': true,
                'display': true,
                'access': 'everybody',
                'modifyacl': true,
                'permission': 'anonymous',
                'order': 1,
                'elements': {
                    'aboutme': {
                        'label': '__MSG__PROFILE_ABOUTME_LABEL__',
                        'altLabel': '__MSG__PROFILE_ABOUTME_LABEL_OTHER__',
                        'required': false,
                        'display': true,
                        'type': 'textarea'
                    },
                    'academicinterests': {
                        'label': '__MSG__PROFILE_ABOUTME_ACADEMICINTERESTS_LABEL__',
                        'required': false,
                        'display': true,
                        'type': 'textarea'
                    },
                    'personalinterests': {
                        'label': '__MSG__PROFILE_ABOUTME_PERSONALINTERESTS_LABEL__',
                        'required': false,
                        'display': true,
                        'type': 'textarea'
                    },
                    'hobbies': {
                        'label': '__MSG__PROFILE_ABOUTME_HOBBIES_LABEL__',
                        'required': false,
                        'display': true
                    }
                }
            },
            'publications': {
                'label': '__MSG__PROFILE_PUBLICATIONS_LABEL__',
                'required': false,
                'display': true,
                'access': 'everybody',
                'modifyacl': true,
                'permission': 'anonymous',
                'multiple': true,
                'multipleLabel': '__MSG__PROFILE_PUBLICATION_LABEL__',
                'order': 2,
                //'template': 'profile_section_publications_template',
                'elements': {
                    'maintitle': {
                        'label': '__MSG__PROFILE_PUBLICATIONS_MAIN_TITLE__',
                        'required': true,
                        'display': true,
                        'example': '__MSG__PROFILE_PUBLICATIONS_MAIN_TITLE_EXAMPLE__'
                    },
                    'mainauthor': {
                        'label': '__MSG__PROFILE_PUBLICATIONS_MAIN_AUTHOR__',
                        'required': true,
                        'display': true
                    },
                    'coauthor': {
                        'label': '__MSG__PROFILE_PUBLICATIONS_CO_AUTHOR__',
                        'required': false,
                        'display': true,
                        'example': '__MSG__PROFILE_PUBLICATIONS_CO_AUTHOR_EXAMPLE__'
                    },
                    'publisher': {
                        'label': '__MSG__PROFILE_PUBLICATIONS_PUBLISHER__',
                        'required': true,
                        'display': true
                    },
                    'placeofpublication': {
                        'label': '__MSG__PROFILE_PUBLICATIONS_PLACE_OF_PUBLICATION__',
                        'required': true,
                        'display': true
                    },
                    'volumetitle': {
                        'label': '__MSG__PROFILE_PUBLICATIONS_VOLUME_TITLE__',
                        'required': false,
                        'display': true
                    },
                    'volumeinformation': {
                        'label': '__MSG__PROFILE_PUBLICATIONS_VOLUME_INFORMATION__',
                        'required': false,
                        'display': true,
                        'example': '__MSG__PROFILE_PUBLICATIONS_VOLUME_INFORMATION_EXAMPLE__'
                    },
                    'year': {
                        'label': '__MSG__PROFILE_PUBLICATIONS_YEAR__',
                        'required': true,
                        'display': true
                    },
                    'number': {
                        'label': '__MSG__PROFILE_PUBLICATIONS_NUMBER__',
                        'required': false,
                        'display': true
                    },
                    'series title': {
                        'label': '__MSG__PROFILE_PUBLICATIONS_SERIES_TITLE__',
                        'required': false,
                        'display': true
                    },
                    'url': {
                        'label': '__MSG__PROFILE_PUBLICATIONS_URL__',
                        'required': false,
                        'display': true,
                        'type': 'url',
                        'validation': 'appendhttp url'
                    }
                }
            }
        };




        ///////////////////
        // CSS Selectors //
        ///////////////////

        var $rootel = $( '#' + uid ),
            $displayprofilesection_container = $( '#displayprofilesection_container', $rootel ),
            $displayprofilesection_header = $( '#displayprofilesection_header', $rootel ),
            $displayprofilesection_header_template = $( '#displayprofilesection_header_template', $rootel ),
            $displayprofilesection_body = $( '#displayprofilesection_body', $rootel ),
            $displayprofilesection_body_template = $( '#displayprofilesection_body_template', $rootel ),
            $displayprofilesection_view_template = $( '#displayprofilesection_view_template', $rootel ),
            $displayprofilesection_edit_template = $( '#displayprofilesection_edit_template', $rootel ),
            $displayprofilesection_edit_multiple_template = $( '#displayprofilesection_edit_multiple_template', $rootel ),
            $displayprofilesection_view_multiple_template = $( '#displayprofilesection_view_multiple_template' , $rootel ),
            $displayprofilesection_view_no_results_template = $( '#displayprofilesection_view_no_results_template', $rootel ),
            $profile_message_form_successful = $( '#profile_message_form_successful', $rootel ),
            $profile_error_form_error_server = $( '#profile_error_form_error_server', $rootel ),
            $displayprofilesection_sections_multiple = false,
            $displayprofilesection_add_button = false,
            $form = false;



        /**
         * Enables the 'Update Profile' button when the user has changed their profile information.
         */
        var enableUpdate = function() {
            if (allowUpdate) {
                $('button.profile-section-save-button', $rootel).prop('disabled', false);
            }
        };

        /**
         * Shows a notification depending if saving the form was succesful or not.
         * @param  {Object} err  Error object. If this is null, the request was succesful.
         */
        var handleSave = function(err) {
            if (!err) {
                oae.api.util.notification('', $profile_message_form_successful.text(), 'info');
            } else {
                oae.api.util.notification('', $profile_error_form_error_server.text(), 'error');
                debug.error('The profile data couldn\'t be saved successfully');
            }
        };

        /**
         * Transform the form values from a multiple-assign section into a different data structure
         *
         * @param {Object}  values  Values object as returned by $form.serializeObject().
         */
        var getMultipleValues = function( values ) {
            var uniqueContainers = $( 'div.displayprofilesection_multiple_section' );
            var multipleValues = {};
            $.each( uniqueContainers, function( i, elt ) {
                multipleValues[ $( elt ).attr( 'id' ).replace( 'form_group_', '' ) ] = {
                    'order': i
                };
            });
            $.each( values, function( i, val ) {
                // Each ID is of format fieldtitle_formuniqueid
                var field = i.substring( 0, i.lastIndexOf( '_' ));
                var mvKey = i.substring( i.lastIndexOf( '_' ) + 1 );
                multipleValues[ mvKey ][ field ] = val;
            });
            values = multipleValues;
            return values;
        };

        /**
         * Saves the currently displayed form to the REST API.
         *
         * @param  {Boolean} overwrite Whether to overwrite the existing data or not. (Defaults to false.)
         */
        var saveValues = function(overwrite) {
            overwrite = overwrite || false;
            // Serialize the data from the form for saving
            var values = $form.serializeObject();
            if (multiple) {
                values = getMultipleValues(values);
            }

            // Store basic data on the user object rather than in a profile section.
            if (sectionName === 'basic') {
                oae.api.user.updateUser(values, handleSave);
            // Other sections can use the Profile API.
            } else {
                oae.api.profile.setSection(sectionName,  null, values, overwrite, handleSave);
            }

            // Disable the save button.
            $('button.profile-section-save-button', $rootel).prop('disabled', true);
            return false;
        };

        /**
         * Removes a sub section from a multi-section.
         * Both in the DOM as via the REST api.
         *
         * @param {String}  unique  An identifier for the subsection
         */
        var removeSubSection = function( unique ) {
            // Remove the section from the form.
            $('div#form_group_' + unique).remove();

            // Re-save the rest of the form.
            // We need to re-save the rest of the form as the profiles API is not smart enough to delete
            // values from profile sections.
            saveValues(true);

            // If we've removed all the profile sections we hide the save button.
            if ($('div.displayprofilesection_multiple_section').length === 0 ) {
                $('button.profile-section-save-button', $rootel).hide();
            }
        };

        /**
         * When a multi-section is displayed to the user, this method can be used to add a
         * new empty form to it.
         *
         * @param {Object}          sectionConfig   The config object that holds the fields configuration for this section.
         * @param {Element|String}  template        The jQuery element or string ID for the template that should be rendered.
         */
        var addEmptySection = function( sectionConfig, template ) {
            var unique = '' + Math.round( Math.random() * 1000000000 );
            var sectionHTML = oae.api.util.template().render( template, {
                'sectionName': sectionName,
                'sectionConfig': sectionConfig,
                'unique': unique,
                'order': $( 'div.displayprofilesection_multiple_section' ).length + 1,
                'data': {}
            });
            $displayprofilesection_sections_multiple.append( oae.api.i18n.translate( sectionHTML ) );
            $( 'button.profile-section-save-button', $rootel ).show();
            $( 'button#displayprofilesection_remove_link_' + unique, $rootel ).on( 'click', function() {
                removeSubSection( unique );
            });
        };

        /**
         * When a user has not yet filled in any data for a section, this can be used to render an "empty" section.
         */
        var renderEmptySection = function() {
            var messageKey = '__MSG__THIS_PERSON_HASNT_ADDED_INFORMATION__';
            var sectionKey = '__MSG__THIS_PERSON_HASNT_ADDED_' + sectionName.toUpperCase() + '__';
            if ( oae.api.i18n.translate( sectionKey, 'displayprofilesection') !== sectionKey ) {
                messageKey = sectionKey;
            }
            var emptyHTML = oae.api.util.template().render( $displayprofilesection_view_no_results_template, {
                'userId': userId,
                'displayName': displayName,
                'errorString': oae.api.i18n.translate( messageKey, 'displayprofilesection' ),
                'showMessage': !!oae.data.me.anon
            });
            $displayprofilesection_body.html( oae.api.i18n.translate( emptyHTML ) );
        };

        /**
         * Renders a section that can have multiple forms associated to it.
         * ex: Publications.
         *
         * @param {Element}     template        The jQuery element that holds the view/edit template.
         * @param {Object}      sectionConfig   The config that holds the fields for the current section.
         * @param {Object}      [data]          The data that is associated to this multi section.
         */
        var renderMultiSection = function( template, sectionConfig, data ) {
            multiple = true;
            var multiTemplate = editing ? $displayprofilesection_edit_multiple_template : $displayprofilesection_view_multiple_template;

            var multHTML = oae.api.util.template().render( multiTemplate, {
                'sectionName': sectionName,
                'sectionConfig': sectionConfig
            });
            $displayprofilesection_body.html( oae.api.i18n.translate( multHTML ) );

            // Grab the new container to render into
            $displayprofilesection_sections_multiple = $( '#displayprofilesection_sections_' + sectionName );
            if ( editing ) {
                $displayprofilesection_add_button = $( '#displayprofilesection_add_' + sectionName );
                $displayprofilesection_add_button.on('click', function() {
                    addEmptySection( sectionConfig, template );
                });
            }

            // If there is some data, render each section
            if (data) {
                // Stick the uid on each subsection
                var uids = _.keys(data);
                for (var i = 0; i < uids.length; i++) {
                    var uid = uids[i];
                    data[uid].uid = uid;
                }

                // Get an array of subsections sorted by their order.
                var subSections = _.values(data).sort(function(a, b) {
                    return b.order < a.order;
                });

                // Loop over each section, render the template and append it to the html.
                $.each( subSections, function( i, sectionData ) {
                    if ( $.isPlainObject( sectionData ) ) {
                        var sectionHTML = oae.api.util.template().render( template, {
                            'sectionConfig': sectionConfig,
                            'oae': oae,
                            'data': sectionData,
                            'unique': sectionData.uid,
                            'order': sectionData.order
                        });
                        $displayprofilesection_sections_multiple.append( oae.api.i18n.translate( sectionHTML ) );
                        if ( editing ) {
                            $( 'button#displayprofilesection_remove_link_' + sectionData.uid, $rootel ).on( 'click', function() {
                                removeSubSection( sectionData.uid );
                            });
                        }
                    }
                });
                // If we're editing and we have subsections visible on the page, show a save button.
                if (editing && subSections.length) {
                    $('button.profile-section-save-button', $rootel).show();

                // If we're not editing and we don't have any subsections, show the "no sections"-view.
                } else if (!editing && !subSections.length) {
                    renderEmptySection();

                // If we're not editing but we have sections, we need to hide the last divider.
                } else if (!editing) {
                    $('.displayprofilesection_multiple_sections hr:last').hide();
                }
            } else if (!editing) {
                renderEmptySection();
            }
        };

        /**
         * Renders a section.
         *
         * @param {Object}  err     An error object, if the error is a 404, that indicates this user has not filled in this section, we can continue processing.
         * @param {Object}  data    The section data.
         */
        var renderSection = function(err, data ) {
            if (err && err.code === 404) {
                // This section simply doesn't exist yet.
                data = false;
                err = false;
            }

            // The err will be reset if the profile section doesn't exist.
            if (!err) {
                var sectionConfig = profileConfig[ sectionName ];

                if ( sectionConfig ) {
                    var template = $displayprofilesection_view_template;
                    if ( editing ) {
                        template = $displayprofilesection_edit_template;
                    }

                    // Render header
                    var pageTitle = sectionConfig.label;
                    var headerHTML = oae.api.util.template().render( $displayprofilesection_header_template, {
                        'pageTitle': pageTitle
                    });
                    $displayprofilesection_header.html( oae.api.i18n.translate( headerHTML ) );

                    // If it is a multiple section, we have to render it with some love
                    if ( sectionConfig.multiple ) {
                        renderMultiSection( template, sectionConfig, data );

                    // Simple sections are fairly straightforward
                    } else {
                        // We show the data/form if we're in edit mode or if their is data to be shown.
                        if (editing || data) {
                            // Some elements have an alternate label.
                            // ie: 'About me' -> 'About Jack'
                            $.each(sectionConfig.elements, function(index, element) {
                                if (element.altLabel) {
                                    element.altLabel = oae.api.i18n.translate(sectionConfig.altLabel).replace('${user}', displayName);
                                }
                            });

                            // Render the simple form.
                            var bodyHTML = oae.api.util.template().render( template, {
                                'sectionName': sectionName,
                                'sectionConfig': sectionConfig,
                                'data': data,
                                'unique': false,
                                'oae': oae
                            });
                            $displayprofilesection_body.html( oae.api.i18n.translate( bodyHTML ) );

                        // If this user has no data and we're in view mode, we show an empty section.
                        } else {
                            renderEmptySection();
                        }
                    }

                    // When we're editing, we need to add some validation
                    if (editing) {
                        $form = $('#displayprofilesection_form_' + sectionName, $rootel);
                        var validateOpts = {
                            'submitHandler': saveValues,
                            'messages': {}
                        };
                        // Set the custom error messages per field
                        $.each(sectionConfig.elements, function(i, elt) {
                            if (elt.errorMessage) {
                                validateOpts.messages[i] = {
                                    'required': oae.api.i18n.translate(elt.errorMessage)
                                };
                            }
                        });
                        oae.api.util.validation().validate( $form, validateOpts );
                    }
                }
            }
        };

        // When the user modifies an input field, we enable the save button.
        $rootel.on('input change cut paste', function() {
            enableUpdate();
        });

        /**
         * Retrieves the data for the current section.
         *
         * @param {Function}    callback        The callback to pass the data to.
         * @param {Object}      callback.err    An error object (if any.)
         * @param {Object}      callback.data   The data for this section.
         */
        var getData = function(callback) {
            if (sectionName === 'basic') {
                user.extra = user.extra || {};
                user.extra.displayName = user.displayName;
                callback(null, user.extra);
            } else {
                oae.api.profile.getSection(userId, sectionName, callback);
            }
        };

        var init = function() {
            editing = userId && userId === oae.data.me.id;
            getData( renderSection );
        };

        init();
    };
});
