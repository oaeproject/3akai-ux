/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

define(['jquery', 'oae.core'], function($, oae) {

    return function(uid, showSettings, widgetData) {

        var $rootel = $('#' + uid);

        var infinityScroll = false;

        /**
         * Render the default template when no results are found. This function will
         * be called by the infinite scroll plugin
         */
        var handleEmptyResultList = function() {
            $('#participants_manage', $rootel).hide();
            oae.api.util.renderTemplate($('#participants_noresults_template'), null, $('.oae-list', $rootel));
        };

        /**
         * Kick off a search with a specific query. This function will
         * initiate an infinite scroll for each search
         */
        var getMembers = function() {
            // Disable the previous infinite scroll
            if (infinityScroll) {
                infinityScroll.kill();
            }

            var query = $.bbq.getState('q');
            $('#search_query', $rootel).val(query);

            var url = '/api/group/' + widgetData.principalId + '/members';
            var feedType = 'list';
            if (query) {
                url = '/api/search/members/'  + widgetData.principalId;
                feedType = 'search';
            }

            // Set up the infinite scroll for the list of results
            infinityScroll = $('.oae-list', $rootel).infiniteScroll(url, {
                'limit': 12,
                'q': $.bbq.getState('q')
            }, '#participants_list_template', {
                'postProcessor': function(data) {
                    if (widgetData.canManage) {
                        $('#participants_manage', $rootel).show();
                    }
                    return buildParticipantsModel(feedType, data);
                },
                'emptyListProcessor': handleEmptyResultList
            });
        };

        /**
         * Given a type of data-feed, convert it into the view model for the participants template. The model for the
         * participants list template should be as follows:
         *
         *  {
         *      'results': [
         *          {
         *              'participantId': <The ID of the participant object (user or group id) (required)>,
         *              'displayName': <The display name for the participant (required)>,
         *              'largePictureUrl': <A URL that can be referenced for a large picture of the participant (required)>,
         *              'mediumPictureUrl': <A URL that can be referenced for a medium picture of the participant (required)>,
         *              'smallPictureUrl': <A URL that can be referenced for a small picture of the participant (required)>,
         *              'role': <The role of the participant to the associated resource (optional)>
         *          },
         *          { ... }
         *      ]
         *  }
         *
         *  Note that while 'role' is currently not implemented due to lack of implementation in search feeds, ideally we
         *  could make that required.
         *
         * @param   {String}    feedType        The type of feed. One of 'search' or 'list'
         * @param   {Object}    data            The data from the feed result
         * @return  {Object}    result          The consolidated participants model result, as described in the summary
         */
        var buildParticipantsModel = function(feedType, data) {
            // We need to consolidate the members feed model and the members search model into a unified representation
            var newData = {'results': []};
            for (var i = 0; i < data.results.length; i++) {
                var p = data.results[i];
                if (feedType === 'list') {
                    newData.results.push({
                        'participantId': p.profile.id,
                        'resourceType': p.profile.resourceType,
                        'displayName': p.profile.displayName,
                        'largePictureUrl': p.profile.picture.large || '/ui/img/entities/' + p.profile.resourceType + '_icon_large.png',
                        'mediumPictureUrl': p.profile.picture.medium || '/ui/img/entities/' + p.profile.resourceType + '_icon_medium.png',
                        'smallPictureUrl': p.profile.picture.small || '/ui/img/entities/' + p.profile.resourceType + '_icon.png',
                        'role': p.role
                    });
                } else if (feedType === 'search') {
                    newData.results.push({
                        'participantId': p.id,
                        'displayName': p.displayName,
                        'resourceType': p.resourceType,
                        'profilePath': p.profile.profilePath,
                        'largePictureUrl': p.thumbnailUrl || '/ui/img/entities/' + resourceType + '_icon_large.png',
                        'mediumPictureUrl': p.thumbnailUrl || '/ui/img/entities/' + resourceType + '_icon_medium.png',
                        'smallPictureUrl': '/ui/img/entities/' + p.resourceType + '_icon.png'
                    });
                }
            }

            return newData;
        };

        var addBinding = function() {
            $(window).on('done.grouppermissions.oae', getMembers);

            $rootel.on('submit', '#participants_search_form', function() {
                $.bbq.pushState({'q': $('#search_query', $(this)).val()});
                getMembers();
                return false;
            });
        };

        var doInit = function() {
            addBinding();
            getMembers();
        };

        doInit();
    };
});
