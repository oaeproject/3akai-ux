/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

define(['jquery', 'oae.core'], function($, oae) {

    return function(uid, showSettings) {

        // Cache the widget container
        var $rootel = $('#' + uid);

        // Variable used to keep track of current context profile
        var contextProfile = null;

        // Variable used to keep track of the current infinite scroll
        var infinityScroll = null;

        /**
         * Show a notification when an error occurs
         *
         * @param  {Object}    params           Parameters to be used in the template
         * @param  {String}    params.type      The type of activity (comment or reply)
         * @param  {String}    params.target    The title of the content item
         */
        var showErrorNotification = function(params) {
            var notificationTitle = oae.api.util.template().render($('#comment-notification-title-template', $rootel), params);
            var notificationBody = oae.api.util.template().render($('#comment-notification-body-template', $rootel), params);
            oae.api.util.notification(notificationTitle, notificationBody, 'error');
        };

        /**
         * When a reply or comment is made, the comment is added into the comments list.
         *
         * @param  {Comment}    comment    The Comment object representing the comment/reply that has been made
         */
        var renderComment = function(comment) {
            // Top level comment
            if (!comment.replyTo) {
                // Insert the comment at the beginning of the list after the new comment box
                $('#comments-container li:first-child', $rootel).after(
                    oae.api.util.template().render('#comments-comment-template', {
                        'results': [comment],
                        'canManage': contextProfile.isManager
                    })
                );
            // Reply on an existing comment
            } else {
                // Insert the reply after the comment it is a reply to
                $('li.media[data-id="' + comment.replyTo + '"]', $rootel).after(
                    oae.api.util.template().render('#comments-comment-template', {
                        'results': [comment],
                        'canManage': contextProfile.isManager
                    })
                );
            }
            setUpValidation();
        };

        /**
         * Marks a comment in the list as deleted without removing it from the list. This is done when
         * the comment has at least one reply.
         *
         * @param  {Comment}    comment    The comment that was deleted
         */
        var markCommentAsDeleted = function(comment) {
            // Replace the deleted comment with a dummy placeholder that indicates there used to be a comment
            $('li.media[data-id="' + comment.created + '"]').replaceWith(
                oae.api.util.template().render('#comments-comment-template', {
                    'results': [comment],
                    'canManage': contextProfile.isManager
                })
            );
        };

        /**
         * Bind all functionality related to creating a new top-level comment.
         *
         * @param  {Object}    form    The form DOM element passed in by the validation plugin
         */
         var createComment = function(form) {
            var $form = $(form);
            var comment = $.trim($form.find('textarea').val());
            // Post the comment and re-render the results
            oae.api.comment.createComment(contextProfile.id, contextProfile.resourceType, comment, null, function(err, comment) {
                if (!err) {
                    renderComment(comment);
                } else {
                    var params = {'type': 'comment'};
                    showErrorNotification(params);
                }
            });
            // Reset the form
            $form[0].reset();
            // Return false to prevent the default browser behavior
            return false;
        };

        /**
         * Reply to a comment. This will also reset and hide the reply form.
         *
         * @param  {Object}    form    The form DOM element passed in by the validation plugin
         */
        var createReply = function(form) {
            var $form = $(form);
            var replyTo = $form.attr('data-replyTo');
            var comment = $.trim($form.find('textarea').val());
            // Post the comment and re-render the results
            oae.api.comment.createComment(contextProfile.id, contextProfile.resourceType, comment, replyTo, function(err, comment) {
                if (!err) {
                    renderComment(comment);
                } else {
                    var params = {'type': 'reply'};
                    showErrorNotification(params);
                }
            });
            // Reset the form
            $form[0].reset();
            $form.parents('.comments-reply-container').hide();
            // Return false to prevent the default browser behavior
            return false;
        };

        /**
         * Set up the validation on the comment and reply forms. We only initialize validation on the forms that haven't
         * been initialized yet. As jQuery.validate sets `novalidate="novalidate"` once a form has been initialized for
         * validation, we use this to find the forms that haven't been initialized.
         */
        var setUpValidation = function() {
            oae.api.util.validation().validate($('.comments-new-comment-form[novalidate!="novalidate"]', $rootel), {
                'submitHandler': createComment
            });

            $('.comments-new-reply-form[novalidate!="novalidate"]', $rootel).each(function(i, form) {
                oae.api.util.validation().validate($(form), {
                    'submitHandler': createReply
                });
            });
        };

        /**
         * Bind all reply related functionality.
         */
        var setUpReplyComment = function() {
            $rootel.on('click', '.comments-reply-button', function() {
                var $replyContainer = $(this).parent().siblings('.comments-reply-container');
                var $replyTextArea = $replyContainer.find('textarea');
                // IE10 has a problem where it treats the placeholder text as the textarea's
                // value. Therefore, we need to explicitly clear the value of the textarea to
                // make the placeholder behave like a placeholder.
                // @see https://github.com/oaeproject/3akai-ux/pull/2906
                $replyTextArea.val('');
                // Show the reply container
                $replyContainer.toggle();
                // Focus the input field
                $replyTextArea.focus();
            });
        };

        /**
         * Deletes a comment. An item that has been properly deleted, because it had no replies, will be removed from the
         * list. A deleted item that does have replies will remain available as `This comment has been deleted`.
         */
        var setUpDeleteComment = function() {
            $rootel.on('click', '.comments-delete-button', function() {
                var commentId = $(this).attr('data-id');
                oae.api.comment.deleteComment(contextProfile.id, contextProfile.resourceType, commentId, function(err, softDeleted) {
                    if (err) {
                        throw new Error('Comment could not be deleted.');
                    }

                    if (softDeleted) {
                        markCommentAsDeleted(softDeleted);
                    } else {
                        infinityScroll.removeItems(commentId);
                    }
                });
            });
        };

        /**
         * Prepends the textarea that allows creation of new top level comments to the list of comments if
         * the current user is logged in
         */
        var renderCreateNewComment = function() {
            if (!oae.data.me.anon) {
                $('#comments-container').prepend(oae.api.util.template().render('#comments-new-comment-template'));

                // Focuses the new comment field when the comment clip is clicked
                $(document).on('click', '.comments-focus-new-comment', function() {
                    $('.comments-new-comment-form textarea').focus();
                });
            }
        };

        /**
         * Subscribe to comment push notifications, allowing for comments that are made after the initial
         * pageload to be added to the list of comments.
         */
        var setUpPushNotifications = function() {
            oae.api.push.subscribe(contextProfile.id, 'message', contextProfile.signature, 'internal', false, function(activity) {
                // Only add new comments that weren't created by the current user
                if (activity.actor.id !== oae.data.me.id && (activity['oae:activityType'] === 'content-comment' || activity['oae:activityType'] === 'discussion-message')) {
                    // Insert the comment into the correct position of the comment list. When the new comment is not a reply to an
                    // existing comment, it is added to the top of the list. When the new comment is a reply to an existing comment,
                    // it is added below that comment
                    renderComment(activity.object);

                    // Show a notification about the comment, including a link to the comment
                    var notificationBody = oae.api.util.template().render($('#comments-new-comment-notifications-template', $rootel), {
                        'actorURL': activity.actor.profilePath,
                        'actor': activity.actor.displayName,
                        'commentURL': '#' + activity.object.threadKey
                    });
                    oae.api.util.notification(null, notificationBody, null, activity['oae:activityType'] + '#' + activity.published);
                }
            });
        };

        /**
         * Initialize a new infinite scroll container that fetches the comments.
         */
        var setUpInfiniteScroll = function() {
            // Remove the first item in the list in case the new comment textarea has already been added before
            $('#comments-container li:first-child').remove();

            // Render the new comment textarea
            renderCreateNewComment();

            // Kill the infinite scroll if there is one
            if (infinityScroll) {
                infinityScroll.kill();
            }

            var url = '/api/' + contextProfile.resourceType + '/' + contextProfile.id + '/messages';

            // Set up the infinite scroll for comments
            infinityScroll = $('#comments-container', $rootel).infiniteScroll(url, null, $('#comments-comment-template'), {
                'postProcessor': function(data) {
                    data.canManage = contextProfile.isManager;
                    return data;
                },
                'postRenderer': setUpValidation
            });

            setUpReplyComment();
            setUpDeleteComment();
        };

        // Receive the context's profile information and set up the infinite scroll for comments
        $(document).on('oae.context.send.comments', function(ev, contextData) {
            contextProfile = contextData;
            setUpInfiniteScroll();
            setUpPushNotifications();
        });
        // Request the context profile information
        $(document).trigger('oae.context.get', 'comments');

    };
});
