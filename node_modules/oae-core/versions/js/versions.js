/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

define(['jquery', 'oae.core', 'storyjs-embed'], function($, oae) {

    return function(uid) {

        // The widget container
        var $rootel = $('#' + uid);

        // Stores the timeline data in a format the plugin understands
        var timelineData = {};

        /**
         * Resets the widget to its initial state
         */
        var reset = function() {
            // Reset the timeline
            $('#versions-timeline').empty();
            // Unbind the context event
            $(document).off('oae.context.send');
        };

        /**
         * Initializes the timeline and populates it with the retrieved version data
         */
        var setUpTimeline = function() {
            // Create the timeline
            createStoryJS({
                'type': 'timeline',
                'width': '800',
                'height': '400',
                'source': timelineData,
                'embed_id': 'versions-timeline',
                'start_at_end': true
            });
        };

        /**
         * Parses the version data into a format that the timeline plugin understands
         *
         * @param  {Object[]}   versions   An array of version objects of a content item
         */
        var parseVersionsIntoTimeline = function(versions) {
            // Parse the date from the first version object
            var FirstCreationDate = new Date(parseInt(versions[0].created));
            var firstYear = FirstCreationDate.getFullYear();
            var firstMonth = FirstCreationDate.getMonth() + 1;
            var firstDay = FirstCreationDate.getDate();
            var firstHour = FirstCreationDate.getHours();
            var firstMinute = FirstCreationDate.getMinutes();
            var firstSecond = FirstCreationDate.getSeconds();

            timelineData = {
                'timeline': {
                    'headline': '',
                    'type':'default',
                    'text':'',
                    'startDate': firstYear + ',' + firstMonth + ',' + firstDay + ',' + firstHour + ',' + firstMinute + ',' + firstSecond,
                    'date': []
                }
            };

            $(versions).each(function(index, version) {
                // Parse the date from the version object
                var creationDate = new Date(parseInt(version.created));
                var year = creationDate.getFullYear();
                var month = creationDate.getMonth() + 1;
                var day = creationDate.getDate();
                var hour = creationDate.getHours();
                var minute = creationDate.getMinutes();
                var second = creationDate.getSeconds();

                // Translate the text for the buttons
                var i18nDownload = oae.api.i18n.translate('__MSG__DOWNLOAD__');
                var i18nRestore = oae.api.i18n.translate('__MSG__RESTORE__');

                // Construct the html for the restore/download buttons.
                // This could be done in a template but would be less performant.
                var dateButtons = '<a href="' + version.link + '" class="btn btn-primary">' + i18nDownload + '</a>';
                if (index !== 0) {
                    dateButtons += ' <button type="button" class="btn btn-primary versions-restore" data-revisionid="' + version.revisionId + '">' + i18nRestore + '</button>';
                }

                // Create the timeline object and push it in the array that will be rendered
                timelineData.timeline.date.push({
                    'startDate': year + ',' + month + ',' + day + ',' + hour + ',' + minute + ',' + second,
                    'endDate': year + ',' + month + ',' + day + ',' + hour + ',' + minute + ',' + second,
                    'headline': 'By ' + version.createdBy.displayName,
                    'text': dateButtons,
                    'asset': {
                        'media': '<img src=' + version.link + '/>',
                        'credit': '',
                        'caption': ''
                    },
                    'created': version.created // This is not used by the plugin but needed to do paging
                });
            });

            // Sets up the timeline with the data that was just prepared
            setUpTimeline();
        };

        /**
         * Restores the content to a previous version and shows a success or failure notification
         */
        var restoreVersion = function() {
            $.ajax({
                'url': '/api/content/' + contentContext.id + '/revisions/' + $(this).attr('data-revisionid') + '/restore',
                'type': 'POST',
                'success': function() {
                    // Hide the modal
                    $('#versions-modal').modal('hide');

                    // Show a failure notification
                    oae.api.util.notification(
                        oae.api.i18n.translate('__MSG__REVISION_RESTORED__', 'versions'),
                        oae.api.i18n.translate('__MSG__REVISION_IS_SUCCESSFULLY_RESTORED__', 'versions')
                    );

                    // Refresh the content profile
                    $(document).trigger('oae-contentprofile-refresh');
                },
                'error': function() {
                    // Hide the modal
                    $('#versions-modal').modal('hide');

                    // Show a failure notification
                    oae.api.util.notification(
                        oae.api.i18n.translate('__MSG__REVISION_NOT_RESTORED__', 'versions'),
                        oae.api.i18n.translate('__MSG__REVISION_CAN_NOT_BE_SUCCESSFULLY_RESTORED__', 'versions'),
                        'error'
                    );
                }
            });
        };

        /**
         * Retrieves the versions of the content item
         */
        var getVersions = function() {
            $.ajax({
                'url': '/api/content/' + contentContext.id + '/revisions?limit=25',
                'success': function(data) {
                    parseVersionsIntoTimeline(data);
                }
            });
        };

        /**
         * Sets up the modal dialog for the versions widget
         */
        var setUpVersionsModal = function() {
            // Bind the trigger that opens the widget
            $(document).on('click', '.oae-trigger-versions', function() {
                // Trigger the modal dialog
                $('#versions-modal').modal();
            });

            // Initialize the widget after the modal is shown to avoid rendering issues
            $('#versions-modal', $rootel).on('shown', function () {
                // Receive the content profile information and set up the fileupload plugin
                $(document).on('oae.context.send', function(ev, context) {
                    contentContext = context;
                    getVersions();
                });

                // Request the content profile information
                $(document).trigger('oae.context.get');
            });

            // Reset the widget when the modal closes
            $('#versions-modal', $rootel).on('hidden', reset);

            // Bind the buttons for restoring to an older version
            $rootel.on('click', '.versions-restore', restoreVersion);
        };

        setUpVersionsModal();
    };
});
