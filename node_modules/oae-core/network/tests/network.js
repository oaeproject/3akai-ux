/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

casper.test.begin('Widget - Network', function(test) {

    /**
     * Verify following a user
     */
    var verifyFollowingUser = function() {
        // Click open the user's me-clip
        casper.click('#user-clip-container .oae-clip-content > button');
        // Verify the follow button is present
        test.assertExists('#user-clip-container button.user-follow', 'Verify the `Follow` button is present');
        // Verify the user can be followed
        casper.click('#user-clip-container button.user-follow');
        casper.waitForSelector('#oae-notification-container .alert', function() {
            test.assertDoesntExist('#oae-notification-container .alert.alert-error', 'Verify a user can be followed');
            test.assertNotVisible('#user-clip-container button.user-follow', 'Verify follow button is removed after following a user');
        });
    };

    /**
     * Verify that the view mode can be changed through the list options
     */
    var verifyNetworkViewMode = function() {
        // Toggle the list options
        casper.click('.oae-list-header-toggle');
        // Verify compact list
        casper.click('#network-widget .oae-list-header-actions button[data-type="oae-list-compact"]');
        test.assertExists('.oae-list.oae-list-compact', 'Network can be switched to compact view');
        // Verify details list
        casper.click('#network-widget .oae-list-header-actions button[data-type="oae-list-details"]');
        test.assertExists('.oae-list.oae-list-details', 'Network can be switched to details view');
        // Switch back to grid view
        casper.click('#network-widget .oae-list-header-actions button[data-type="oae-list-grid"]');
        test.assertExists('.oae-list.oae-list-grid', 'Network can be switched to grid view');
    };

    /**
     * Verify that all the network elements are present
     */
    var verifyNetworkElements = function() {
        // Verify there is a dummy list item with action buttons
        test.assertExists('#network-widget #network-following .oae-list li:first-child', 'Initial dummy list item is present');
        // Verify dummy list item has a `Find people` button
        test.assertExists('#network-widget #network-following .oae-list li:first-child a[href="/search/?types=user"]', 'The first list item has a \'Find people\' link button');
        // Verify that the network widget has a follower and following tab
        test.assertExists('#network-widget .nav li.active a[href="#network-following"]', 'Verify following tab is present and active by default');
        test.assertExists('#network-widget .nav li a[href="#network-followers"]', 'Verify followers tab is present');
        // Verify switching to the followers tab
        casper.click('#network-widget .nav li a[href="#network-followers"]');
        test.assertExists('#network-widget .nav li.active a[href="#network-followers"]', 'Verify followers tab is active after click');
        // Verify there is no dummy list item on the followers tab but an alert instead
        test.assertDoesntExist('#network-widget #network-followers .oae-list li:first-child', 'Verify there is no initial dummy list item present in the followers tab');
        test.assertDoesntExist('#network-widget #network-followers .alert', 'Verify there is an alert when no followers are currently available');
        // Verify switching back to the following tab
        casper.click('#network-widget .nav li a[href="#network-following"]');
        test.assertExists('#network-widget .nav li.active a[href="#network-following"]', 'Verify following tab is active after click');
        // Verify `Find people` button shows the search page
        casper.click('#network-widget #network-following .oae-list li:first-child a[href="/search/?types=user"]');
        casper.waitForSelector('#search-clip-container', function() {
            test.assertExists('#search-clip-container', 'The search people page can be triggered from the dummy list item');
            casper.thenOpen(configUtil().tenantUI + '/me/network', function() {
                casper.waitForSelector('#network-widget .oae-list.oae-list-grid li', function() {
                    // Verify list options are there
                    test.assertExists('#network-widget .oae-list-header-actions', 'The list options are present');
                    // Verify list options contain a checkbox that selects all
                    test.assertExists('#network-widget .oae-list-header-actions input[type="checkbox"]', 'The \'Select all\' checkbox is present in the list options');
                    // Verify list options contain a `unfollow` button
                    test.assertExists('#network-widget .oae-list-header-actions .oae-trigger-unfollow', 'The `Stop following` button is present in the list options');
                    // Verify list options contain a switch view button
                    test.assertExists('#network-widget .oae-list-header-actions button[data-type="oae-list-compact"]', 'The \'Compact\' list view button is present');
                    test.assertExists('#network-widget .oae-list-header-actions button[data-type="oae-list-details"]', 'The \'Details\' list view button is present');
                    test.assertExists('#network-widget .oae-list-header-actions button[data-type="oae-list-grid"]', 'The \'Grid\' list view button is present');
                    // Verify list options contain a search field
                    test.assertExists('#network-widget .oae-list-header-search .oae-list-header-search-query', 'The search box is present');
                });
            });
        });
    };

    /**
     * Verify that the network can be searched
     */
    var verifyNetworkSearch = function(user) {
        // Search for something that doesn't match any results
        casper.fill('form.form-search', {
            'search-query': '---'
        }, false);
        casper.click('form.form-search button[type="submit"]');
        // Verify that no results come back and a message is shown
        casper.waitForSelector('.oae-list .alert-info', function() {
            test.assertExists('.oae-list .alert-info', 'No results are returned for non-matching search and a message is shown');
            // Wait 2 seconds before triggering new search
            casper.wait(configUtil().searchWaitTime, function() {
                // Search which should return 1 result
                casper.fill('form.form-search', {
                    'search-query': user.displayName
                }, false);
                casper.click('form.form-search button[type="submit"]');
                // Verify one search result comes back
                casper.waitForSelector('.oae-list li', function() {
                    test.assertExists('.oae-list li', '1 result is returned for \'' + user.displayName + '\'');
                    test.assertSelectorHasText('.oae-list li .oae-tile-metadata a', user.displayName, 'The returned user has the name \'' + user.displayName + '\'');
                    // Reset the form
                    casper.fill('form.form-search', {
                        'search-query': ''
                    }, false);
                    casper.click('form.form-search button[type="submit"]');
                });
            });
        });
    };

    casper.start(configUtil().tenantUI, function() {
        // Create a couple of users to test with
        var user1 = null;
        var user2 = null;
        var user3 = null;
        userUtil().createUsers(3, function(users) {
            user1 = users[0];
            user2 = users[1];
            user3 = users[2];
        });

        // Login with that user
        casper.then(function() {
            userUtil().doLogIn(user1.username, configUtil().defaultUserPassword);
        });

        casper.thenOpen(configUtil().tenantUI + '/me/network', function() {
            casper.then(function() {
                casper.echo('Verify network elements', 'INFO');
                casper.waitForSelector('#network-widget .oae-list.oae-list-grid li', verifyNetworkElements);
            });

            casper.then(function() {
                casper.echo('Verify network view modes', 'INFO');
                verifyNetworkViewMode();
            });

            casper.then(function() {
                casper.echo('Verify following a user', 'INFO');
                // User1 follows user 2
                followUtil().follow(user2.id, function() {
                    // Log out as user 1
                    userUtil().doLogOut();
                    casper.then(function() {
                        // Log in as user 2
                        userUtil().doLogIn(user2.username, configUtil().defaultUserPassword);
                        casper.then(function() {
                            // User2 follows user 1
                            followUtil().follow(user1.id, function() {
                                casper.thenOpen(configUtil().tenantUI + user3.profilePath, function() {
                                    casper.waitForSelector('#user-clip-container h1', verifyFollowingUser);
                                });
                            });
                        });
                    });
                });
            });

            casper.thenOpen(configUtil().tenantUI + '/me/network', function() {
                casper.echo('Verify network search', 'INFO');
                casper.waitForSelector('#network-widget .oae-list.oae-list-grid li', function() {
                    casper.wait(configUtil().searchWaitTime, function() {
                        verifyNetworkSearch(user1);
                    });
                });
            });
        });

        // Log out at the end of the test
        casper.then(function() {
            userUtil().doLogOut();
        });
    });

    casper.run(function() {
        test.done();
    });
});
