/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

define(['jquery', 'oae.core', 'jquery.fileupload', 'jquery.iframe-transport'], function($, oae) {

    return function(uid, showSettings) {

        // The widget container
        var $rootel = $('#' + uid);

        // Keeps track of the selected file to send to the upload API
        var selectedFile = {};

        // IE9 and below don't support XHR file uploads and we fall back to iframe transport
        var useIframeTransport = !$.support.xhrFileUpload && !$.support.xhrFormDataFileUpload;

        /**
         * Resets the upload new version widget
         */
        var reset = function() {
            // Disable the upload button
            $('#uploadnewversion-upload').attr('disabled', 'disabled');

            // If we need an iframe for the upload, progress will probably not be supported.
            if (!useIframeTransport) {
                // Reset the progress bar
                $('.progress', $rootel).hide();
                $('.bar', $rootel).css('width', '0%');
            }
        };

        /**
         * Updates the progress indicator
         *
         * @param  {Number}   progress   Number between 0 and 100 indicating the upload progress
         */
        var updateProgress = function(progress) {
            $('.bar', $rootel).css('width', progress + '%');
        };

        /**
         * Checks if the user selected/dropped an acceptable file.
         *
         * @param   {Object}     file    The file that was selected by the user
         * @return  {Boolean}            returns `true` if an acceptable file (has name and size) was selected, returns `false` otherwise
         */
        var checkValidFile = function(file) {
            if (useIframeTransport) {
                if (file.name) {
                    return true;
                }
            } else {
                if (file.size > 0 && file.name) {
                    return true;
                }
            }
            return false;
        };

        /**
         * Sets up the single file upload field for uploading a new version.
         *
         * @param  {Object}    ev         The `oae.context.send` event
         * @param  {Object}    context    The content profile data
         */
        var setUpNewVersionInput = function(ev, context) {
            var fileuploadOptions = {
                'url': '/api/content/' + context.id + '/newversion',
                'replaceFileInput': false,
                'forceIframeTransport': useIframeTransport,
                'add': function() {/* Overriding `add` to avoid submitting the file on selection */},
                'drop': function(ev, data) {
                    if (checkValidFile(data.files[0])) {
                        selectedFile = data.files[0];
                        $('#uploadnewversion-upload').removeAttr('disabled');
                    }
                },
                'change': function(ev, data) {
                    if (checkValidFile(data.files[0])) {
                        selectedFile = data.files[0];
                        $('#uploadnewversion-upload').removeAttr('disabled');
                    }
                },
                'progress': function(ev, data) {
                    // If we need an iframe for the upload, progress will probably not be supported.
                    if (!useIframeTransport) {
                        // Update the progress bar
                        updateProgress((data.loaded / data.total) * 100);
                    }
                }
            };

            $('#uploadnewversion-input', $rootel).fileupload(fileuploadOptions);
        };

        /**
         * Disables controls, initiates the upload of the new version and closes the dialog when complete.
         */
        var uploadNewVersion = function() {
            // Disable the upload button
            $('#uploadnewversion-upload').attr('disabled', 'disabled');

            // If we need an iframe for the upload, progress will probably not be supported.
            if (!useIframeTransport) {
                // Show the progress bar
                $('.progress', $rootel).show();
            }

            // Upload the new version and hide the dialog on completion
            oae.api.content.createNewVersion($('#uploadnewversion-input', $rootel), selectedFile, function(error) {
                $(document).trigger('oae-uploadnewversion-complete');
                // If we need an iframe for the upload, progress will probably not be supported.
                if (!useIframeTransport) {
                    updateProgress(100);
                }
                // Hide the modal
                $('#uploadnewversion-modal').modal('hide');
            });
        };

        /**
         * Initializes the upload new version modal dialog
         */
        var initUploadNewVersionModal = function() {
            $(document).on('click', '.oae-trigger-uploadnewversion', function() {
                // Show the modal
                $('#uploadnewversion-modal', $rootel).modal({
                    'backdrop': 'static'
                });

                // Request the content profile information
                $(document).trigger('oae.context.get');
            });

            // Receive the content profile information and set up the fileupload plugin
            $(document).on('oae.context.send', setUpNewVersionInput);

            // Set focus to the browse button when the modal is fully visible
            $('#uploadnewversion-modal', $rootel).on('shown', function () {
                $('#uploadnewversion-input').focus();
            });

            // Reset the widget when it's fully hidden
            $('#uploadnewversion-modal', $rootel).on('hidden', function(ev) {
                reset();
            });

            // Start the upload of the new version
            $('#uploadnewversion-upload').on('click', uploadNewVersion);
        };

        initUploadNewVersionModal();

    };
});
