/*!
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

define(['require', 'jquery', 'oae.core', 'underscore'], function(require, $, oae, _) {

    return function(uid, showSettings, widgetData) {

        // Cache the widget container
        var $rootel = $('#' + uid);
        
        // This function dynamically loads more pages as you scroll through the pdf
        
        $.fn.infiniteScrollPDF = function(){
            // Define the container in which this function works
            // Since this function only gets called when a pdf is loaded we can just hardcode it
            var $container = $('#page-container', $rootel);
        
            // If you lower the threshold you will need to scroll down more before the next page loads
            
            var threshold = 200;
            
            // Variable that keeps track of the page where on
            
            var currPage = 0;
            
            // A variable to check if the timeout is active
            var inTimeOut = false;
            
            // Keep checking if something new has to be loaded in
            var startInfiniteScrolling = function() {
                 $container.scroll(checkLoadNext);
            };
            
            // Check if the next page should be loaded. This is determined by the amount of space till the bottom of the container
            var checkLoadNext = function(){
                var pixelsRemainingUntilBottom = $container.prop('scrollHeight') - $container.height() - $container.scrollTop();
                if (pixelsRemainingUntilBottom <= threshold) {
                    addPage();
                }
            };

            // Dynamically call a page with ajax and append it to the already existing pages
            var addPage = function(){
                var pageId = 'p-' + currPage.toString()
                // Check if the function is about to load a none existing page or in a time out
                if (currPage < widgetData.previews.pageCount && !inTimeOut){
                    inTimeOut=true;
                    currPage++;
                    // Create a div for the page to be stored in.
                    // This is not realy a neccesity but it makes it easier to find things when looking in the generated source.
                    
                    $container.append('<div id=annotator-' + currPage.toString() + '><div id=page-' + currPage.toString() + '></div></div>');
                    $.ajax({
                        'url':'/api/content/' + widgetData.id + '/revisions/' + widgetData.latestRevisionId + '/previews/page.' + currPage + '.html?signature=' + widgetData.signature.signature + '&expires=' + widgetData.signature.expires + '&lastmodified=' + widgetData.signature.lastModified ,
                        'dataType':'text',
                        'success':function(data){
                            // First put the retrieved html in the div after that open the new annotator
                            $('#page-' + currPage.toString(), $rootel).append(data);
                            var content = $('#annotator-' + currPage.toString()).annotator();
                            content.annotator('addPlugin', 'Store', {
                                // The endpoint of the store on your server.
                                prefix: '/api/',
                                
                                urls: {
                                    // These are the default URLs.
                                    create:  'annotations/' + widgetData.latestRevisionId + '/' + pageId,
                                    read:    'annotations/' + widgetData.latestRevisionId + '/' + pageId  + '/:id',
                                    update:  'annotations/' + widgetData.latestRevisionId + '/' + pageId  + '/:id',
                                    destroy: 'annotations/' + widgetData.latestRevisionId + '/:id',
                                    search:  'search'
                                }
                            });
                        },
                        'error':function(err){
                            console.log(err);
                        }
                    });
                    // A small wait too not trigger new loads to quickly, After the time out check if where not still to close to the bottom
                    setTimeout(function(){
                        inTimeOut=false;
                        checkLoadNext();
                    },1000);
                }
            };
            checkLoadNext();
            startInfiniteScrolling();
        };

        /////////////////////
        // DEFAULT PREVIEW //
        /////////////////////

        // Variable that will keep track of the interval used to check for a finished content preview generation
        var contentPreviewInterval = false;

        /**
         * Render the default preview for all files that don't have a particular in-line preview
         */
        var renderDefault = function() {
            // If the preview status is pending, we show a "Generating" message and 
            // re-check every minute whether or not the preview has finished generating.
            // If so, we show the generated preview     
            if (widgetData.previews && widgetData.previews.status === 'pending') {
                oae.api.util.template().render($('#filepreview-default-pending-template', $rootel), {'content': widgetData}, $('#filepreview-container', $rootel));
                contentPreviewInterval = setInterval(checkContentPreview, 60000);
            } else {
                oae.api.util.template().render($('#filepreview-default-template', $rootel), {'content': widgetData}, $('#filepreview-container', $rootel));
            }
        };

        /**
         * Check whether or not the content preview status has changed from 'pending' to finished.
         * Once preview processing has finished, we trigger an event that will cause the content
         * profile to refresh.
         */
        var checkContentPreview = function() {
            oae.api.content.getContent(widgetData.id, function(err, contentObj) {
                if (err) {
                    clearInterval(contentPreviewInterval);
                } else if (contentObj.previews && contentObj.previews.status !== 'pending') {
                    clearInterval(contentPreviewInterval);
                    $(document).trigger('oae.content.update', contentObj);
                }
            });
        };


        /////////////////////
        // IMAGE PREVIEW //
        /////////////////////

        /**
         * Render an image preview by embedding the image into the document
         */
        var renderImagePreview = function() {
            oae.api.util.template().render($('#filepreview-image-template', $rootel), {'content': widgetData}, $('#filepreview-container', $rootel));
        };


        //////////////////////
        // DOCUMENT PREVIEW //
        //////////////////////

        /**
         * Shows the first 3 pages of a pdf, if there are less then 3 pages it shows as many as possible.
         * This function also includes all the JS and CSS wich are required for pdf2htmlEX and annotator to work.
         */
        var renderDocumentPreview = function() {
            // Require the js scripting for annotator.
            require(['http://assets.annotateit.org/annotator/v1.2.7/annotator-full.min.js'],function(){ 
                //include all the CSS wich is created by pdf2htmlEX to display the renderd html properly.
                $('head').append('<link rel="stylesheet" href="/api/content/' + widgetData.id + '/revisions/' + widgetData.latestRevisionId + '/previews/base.css?signature=' + widgetData.signature.signature + '&expires=' + widgetData.signature.expires + '&lastmodified=' + widgetData.signature.lastModified + '"/>'); 
                $('head').append('<link rel="stylesheet" href="/api/content/' + widgetData.id + '/revisions/' + widgetData.latestRevisionId + '/previews/fancy.css?signature=' + widgetData.signature.signature + '&expires=' + widgetData.signature.expires + '&lastmodified=' + widgetData.signature.lastModified + '"/>');
                $('head').append('<link rel="stylesheet" href="/api/content/' + widgetData.id + '/revisions/' + widgetData.latestRevisionId + '/previews/lines.css?signature=' + widgetData.signature.signature + '&expires=' + widgetData.signature.expires + '&lastmodified=' + widgetData.signature.lastModified + '"/>');
                $('head').append('<link rel="stylesheet" href="http://assets.annotateit.org/annotator/v1.2.5/annotator.min.css"/>');
                oae.api.util.template().render($('#filepreview-document-template', $rootel), {}, $('#filepreview-container', $rootel));
                $('#page-container',$rootel).infiniteScrollPDF($('#page-container', $rootel));
            });
        };


        /////////////////////////
        // VIDEO/SOUND PREVIEW //
        /////////////////////////

        /**
         * Render a video preview using Flowplayer
         */
        var renderVideoPreview = function() {
            // Only load the flowplayer when we are looking at an actual video
            require(['flowplayer'], function() {
                oae.api.util.template().render($('#filepreview-video-template', $rootel), {'content': widgetData}, $('#filepreview-container', $rootel));
                $('#filepreview-video', $rootel).flowplayer();
            });
        };


        ////////////////////
        // INITIALISATION //
        ////////////////////

        /**
         * Render the file's preview based on its type
         */
        var initFilePreview = function() {
            // Image preview
            if (widgetData.mime.substring(0, 6) === 'image/') {
                renderImagePreview();
            // Display PDFs, Office files, etc
            } else if (widgetData.previews && widgetData.previews.pageCount) {
                renderDocumentPreview();
            // Video preview
            } else if (widgetData.mime.substring(0, 6) === 'video/') {
                renderVideoPreview();
            // Default preview
            } else {
                renderDefault();
            }
        };

        initFilePreview();

    };
});
