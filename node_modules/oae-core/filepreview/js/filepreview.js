/*!
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

define(['require', 'jquery', 'oae.core', 'underscore', 'oae.api.util', 'oae.api.i18n'], function(require, $, oae, _, oaeUtil, oaeI18n) {

    return function(uid, showSettings, widgetData) {

        // Cache the widget container
        var $rootel = $('#' + uid);
        
        //this function dynamicly loads more pages as you scroll trough the pdf.
        
        $.fn.infiniteScrollPDF = function() {
            //Define the container in wich this function works. 
            //Since this function only gets called when a pdf is loaded we can just hardcode it.
            var $container = $('#page-container', $rootel);
        
            //If you lower the treshold you will need to scroll down more before the next page loads.
            
            var threshold = 200;
            
            //Variable that keeps track off the page where on.
            //Since we load in 3 pages by default we need to set it to 3.
            
            var currPage = 3;
            
            //A variable to check if the timeout is active.
            var inTimeOut = false;
            
            //Keep checking if something new has to be loaded in.
            var startInfiniteScrolling = function() {
                 $container.scroll(checkLoadNext);
            };
            
            //Check if the next page should be loaded. This is determined by the amount of space till the bottom of the container.
            var checkLoadNext = function(){
                var pixelsRemainingUntilBottom = $container.prop('scrollHeight') - $container.height() - $container.scrollTop();
                if (pixelsRemainingUntilBottom <= threshold) {
                    add_page();
                }
            }                        
            jQuery( function($){$('#page-container').annotator();});

            //Dynamicly call a page with ajax and append it to the already existing pages.
            var add_page = function(){
                //check if the function is about to load a none existing page or in a time out
                if (currPage < widgetData.previews.pageCount && !inTimeOut){
                    inTimeOut=true;
                    currPage++;
                    //Create a div for the page to be stored in.
                    //This is not realy a necesaty but it makes it easier to find things when looking in the generated source.
                    $container.append('<div id=page-' + currPage.toString() + '></div>');
                    $.ajax({
                        'url':'/api/content/' + widgetData.id + '/revisions/' + widgetData.latestRevisionId + '/previews/page.' + currPage + '.html?signature=' + widgetData.signature.signature + '&expires=' + widgetData.signature.expires + '&lastmodified=' + widgetData.signature.lastModified ,
                        'dataType':'text',
                        'success':function(data){
                            //first put the retrieved html in the div after that open the new annotator
                            $('#page-' + currPage.toString(), $rootel).append(data);    
                        },
                        'error':function(err){
                            console.log(err);
                        }
                    });
                    //a small wait to not trigger new loads to quickly.
                    setTimeout(function(){
                        inTimeOut=false;
                    },100);
                }
            };
            startInfiniteScrolling();
        };

        /////////////////////
        // DEFAULT PREVIEW //
        /////////////////////

        // Variable that will keep track of the interval used to check for a finished content preview generation
        var contentPreviewInterval = false;

        /**
         * Render the default preview for all files that don't have a particular in-line preview
         */
        var renderDefault = function() {
            // If the preview status is pending, we show a "Generating" message and 
            // re-check every minute whether or not the preview has finished generating.
            // If so, we show the generated preview
                        
            if (widgetData.previews && widgetData.previews.status === 'pending') {
                oae.api.util.template().render($('#filepreview-default-pending-template', $rootel), {'content': widgetData}, $('#filepreview-container', $rootel));
                contentPreviewInterval = setInterval(checkContentPreview, 60000);
            } else {
                oae.api.util.template().render($('#filepreview-default-template', $rootel), {'content': widgetData}, $('#filepreview-container', $rootel));
            }
        };

        /**
         * Check whether or not the content preview status has changed from 'pending' to finished.
         * Once preview processing has finished, we trigger an event that will cause the content
         * profile to refresh.
         */
        
        var checkContentPreview = function() {
            oae.api.content.getContent(widgetData.id, function(err, contentObj) {
                if (err) {
                    clearInterval(contentPreviewInterval);
                } else if (contentObj.previews && contentObj.previews.status !== 'pending') {
                    clearInterval(contentPreviewInterval);
                    $(document).trigger('oae.content.update', contentObj);
                }
            });
        };


        /////////////////////
        // IMAGE PREVIEW //
        /////////////////////

        /**
         * Render an image preview by embedding the image into the document
         */
        var renderImagePreview = function() {
            oae.api.util.template().render($('#filepreview-image-template', $rootel), {'content': widgetData}, $('#filepreview-container', $rootel));
        };

        //////////////////////
        // DOCUMENT PREVIEW //
        //////////////////////
        
        /**
         * This function renders the first pages of the PDF and initilize Anotator and pdf2htmlEX.
         * It was made a seperate function to clean up the code a bit
         * @param{string}                       data1                       The data that should be used to render page 1
         * @param{string}                       data2                       The data that should be used to render page 2
         * @param{string}                       data3                       The data that should be used to render page 3 
         */
        
        var renderPages = function(data1, data2, data3){
            oae.api.util.template().render($('#filepreview-document-template', $rootel), {'page1': data1, 'page2': data2, 'page3': data3}, $('#filepreview-container', $rootel));
            jQuery( function($){$('#anotation-container').annotator();});
            $('#page-container',$rootel).infiniteScrollPDF($('#page-container', $rootel));
        };

        /**
         * Shows the first 3 pages of a pdf, if there are less then 3 pages it shows as many as possible.
         * This function also includes all the JS and CSS wich are required for pdf2htmlEX and annotator to work.
         */
        var renderDocumentPreview = function() {
            //Initilieze the data to be shown with defeault value's. All of these get overwritten by the pages loaded in with ajax.
            var data1 = 'Error empty file.';
            var data2 = '';
            var data3 = '';
            require(['/api/content/' + widgetData.id + '/revisions/' + widgetData.latestRevisionId + '/previews/jquery.js?signature=' + widgetData.signature.signature + '&expires=' + widgetData.signature.expires + '&lastmodified=' + widgetData.signature.lastModified], function(){
                require(['/api/content/' + widgetData.id + '/revisions/' + widgetData.latestRevisionId + '/previews/pdf2htmlEX.js?signature=' + widgetData.signature.signature + '&expires=' + widgetData.signature.expires + '&lastmodified=' + widgetData.signature.lastModified], function(){
                    require(['http://assets.annotateit.org/annotator/v1.2.5/annotator-full.min.js'],function(){ 
                        $('head').append('<link rel="stylesheet" href="/api/content/' + widgetData.id + '/revisions/' + widgetData.latestRevisionId + '/previews/base.css?signature=' + widgetData.signature.signature + '&expires=' + widgetData.signature.expires + '&lastmodified=' + widgetData.signature.lastModified + '"/>'); 
                        $('head').append('<link rel="stylesheet" href="/api/content/' + widgetData.id + '/revisions/' + widgetData.latestRevisionId + '/previews/fancy.css?signature=' + widgetData.signature.signature + '&expires=' + widgetData.signature.expires + '&lastmodified=' + widgetData.signature.lastModified + '"/>');
                        $('head').append('<link rel="stylesheet" href="/api/content/' + widgetData.id + '/revisions/' + widgetData.latestRevisionId + '/previews/lines.css?signature=' + widgetData.signature.signature + '&expires=' + widgetData.signature.expires + '&lastmodified=' + widgetData.signature.lastModified + '"/>');
                        $('head').append('<link rel="stylesheet" href="http://assets.annotateit.org/annotator/v1.2.5/annotator.min.css"/>');
                        //Start checking the number of pages and load in to a maximum of 3 pages with ajax requests.
                        //If a page does not exist use the default value to render it.
                        if(widgetData.previews.pageCount >= 1 ){
                            $.ajax({
                                'url':'/api/content/' + widgetData.id + '/revisions/' + widgetData.latestRevisionId + '/previews/page.1.html?signature=' + widgetData.signature.signature + '&expires=' + widgetData.signature.expires + '&lastmodified=' + widgetData.signature.lastModified ,
                                'dataType':'text',
                                'success': function(data1){
                                    //check if there is a page 2 and if so load it in.
                                    if(widgetData.previews.pageCount >= 2){
                                        $.ajax({
                                            'url':'/api/content/' + widgetData.id + '/revisions/' + widgetData.latestRevisionId + '/previews/page.2.html?signature=' + widgetData.signature.signature + '&expires=' + widgetData.signature.expires + '&lastmodified=' + widgetData.signature.lastModified ,
                                            'dataType':'text',
                                            'success': function(data2){
                                                //Check if there is a page 3 and if so load it in.
                                                if(widgetData.previews.pageCount >= 3){
                                                    $.ajax({
                                                        'url':'/api/content/' + widgetData.id + '/revisions/' + widgetData.latestRevisionId + '/previews/page.3.html?signature=' + widgetData.signature.signature + '&expires=' + widgetData.signature.expires + '&lastmodified=' + widgetData.signature.lastModified ,
                                                        'dataType':'text',
                                                        'success': function(data3){
                                                            renderPages(data1, data2, data3);
                                                        }
                                                    });
                                                }else{
                                                    renderPages(data1, data2, data3);
                                                }
                                            }
                                        });
                                    }else{
                                        renderPages(data1, data2, data3);
                                    }
                                }
                            });
                        }else{
                            renderPages(data1, data2, data3);
                        }
                    });
                });
            });
        };


        /////////////////////////
        // VIDEO/SOUND PREVIEW //
        /////////////////////////

        /**
         * Render a video preview using Flowplayer
         */
        var renderVideoPreview = function() {
            // Only load the flowplayer when we are looking at an actual video
            require(['flowplayer'], function() {
                oae.api.util.template().render($('#filepreview-video-template', $rootel), {'content': widgetData}, $('#filepreview-container', $rootel));
                $('#filepreview-video', $rootel).flowplayer();
            });
        };


        ////////////////////
        // INITIALISATION //
        ////////////////////

        /**
         * Render the file's preview based on its type
         */
        var initFilePreview = function() {
            // Image preview
            if (widgetData.mime.substring(0, 6) === 'image/') {
                renderImagePreview();
            // Display PDFs, Office files, 
            } else if (widgetData.previews && widgetData.previews.pageCount) {
                renderDocumentPreview();
            // Video preview
            } else if (widgetData.mime.substring(0, 6) === 'video/') {
                renderVideoPreview();
            // Default preview
            } else {
                renderDefault();
            }
        };

        initFilePreview();

    };
});
