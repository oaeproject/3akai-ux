/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

define(['jquery', 'oae.core', 'jquery.autoSuggest'], function($, oae) {

    return function(uid, showSettings) {

        // The widget container
        var $rootel = $('#' + uid);

        /**
         * Fires an event to let other widgets know that the permission change has been aborted.
         */
        var cancelPermissionsChange = function() {
            $(document).trigger('oae.setpermissions.cancel');
        };

        /**
         * Loops over the selected principals in the autosuggest field and returns them in an Array.
         *
         * @return  {Object[]}   viewers   An array of objects containing the id and displayName of the principal to share with
         */
        var getAutosuggestSelection = function() {
            var viewers = [];
            $.each($rootel.find('.as-selections > li'), function(index, selection) {
                var id = $(selection).attr('data-value');
                var displayName = $(selection).data().data && $(selection).data().data.displayName;
                if (id) {
                    viewers.push({
                        'id': id,
                        'displayName': displayName
                    });
                }
            });
            return viewers;
        };

        /**
         * Translates and returns the i18n key associated to the type that is being handled by the setpermissions widget.
         *
         * @param   {String}   type    The type of the items handled by the widget (either 'file' or 'link')
         * @param   {Number}   count   The number of items that are handled by the widget
         * @return  {String}           Returns the translated string associated to the type of items handled by the widget (e.g. `links` or `file`)
         */
        var getTypei18n = function(type, count) {
            if (count > 1) {
                switch(type) {
                    case 'file':
                        return oae.api.i18n.translate('__MSG__FILE_PLURAL__', 'setpermissions');
                    case 'link':
                        return oae.api.i18n.translate('__MSG__LINK_PLURAL__', 'setpermissions');
                }
            } else {
                switch(type) {
                    case 'file':
                        return oae.api.i18n.translate('__MSG__FILE_SINGULAR__', 'setpermissions');
                    case 'link':
                        return oae.api.i18n.translate('__MSG__LINK_SINGULAR__', 'setpermissions');
                }
            }
        };

        /**
         * Triggers an event when changes have been made to the visibility settings.
         */
        var savePermissionsChange = function() {
            var viewers = getAutosuggestSelection();
            var visibility = $('#setpermissions-container input[type="radio"]:checked', $rootel).val();
            // Let other widgets know that the permissions have changed
            $(document).trigger('oae.setpermissions.changed', {
                'visibility': visibility,
                'viewers': viewers,
                'summary': oae.api.util.template().render('#setpermissions-summary-template', {
                    'count': defaultData.count,
                    'type': getTypei18n(defaultData.type, defaultData.count),
                    'visibility': visibility,
                    'viewers': viewers
                })
            });
        };

        /**
         * Initializes the autosuggest used for sharing with other users or groups.
         * TODO: The Autosuggest initiation needs to be replaced by the API function once merged.
         *
         * @param  {Object}   context   The context of the page the user is on
         */
        var setUpAutoSuggest = function(context) {
            var preFillData = {};
            if (context) {
                // TODO: Remove the XSS escaping once the API function for the autosuggest
                // is in place. That will be taking care of potential XSS issues.
                preFillData = [{
                    'displayName': oae.api.util.security().encodeForHTML(context.displayName),
                    'id': context.id
                }];
            }

            $('#setpermissions-share', $rootel).autoSuggest('/api/search/general', {
                'selectedItemProp': 'displayName',
                'searchObjProps': 'displayName',
                'selectedValuesProp': 'id',
                'preFill': preFillData,
                'extraParams': {
                    'resourceTypes': ['user', 'group']
                },
                'minChars': 3,
                'neverSubmit': true,
                'showResultListWhenNoMatch': true,
                'retrieveComplete': function(data) {
                    // TODO: Remove this once the API function for the autosuggest
                    // is in place. That will be taking care of potential XSS issues.
                    $.each(data.results, function(index, result) {
                        result.displayName = oae.api.util.security().encodeForHTML(result.displayName);
                    });
                    return data.results;
                }
            });
        };

        /**
         * Initializes the setpermissions widget.
         */
        var setUpSetPermissionsModal = function() {
            $(document).on('oae.trigger.setpermissions', function(ev, data) {
                defaultData = data;

                // Move the $rootel HTML to the widget calling setpermissions
                var html = $rootel.html();
                $rootel.remove();
                $(data.target).html('<div id="' + uid + '">' + html + '</div>');

                // Reinitialize $rootel in its new container
                $rootel = $('#' + uid);

                // Render the setpermissions template
                oae.api.util.template().render('#setpermissions-template', data, '#setpermissions-container');

                $('#setpermissions-savepermissions', $rootel).on('click', savePermissionsChange);
                $('#setpermissions-cancelpermissions', $rootel).on('click', cancelPermissionsChange);

                // Trigger and bind an event that will ask for the context of the widget
                $(document).on('oae.context.send', function(ev, data) {
                    setUpAutoSuggest(data);

                    var defaultViewers = [];
                    if (data && data.id) {
                        // TODO: Remove the escaping once the API function for the autosuggest
                        // is in place. That will be taking care of potential XSS issues.
                        defaultViewers.push({
                            'displayName': oae.api.util.security().encodeForHTML(data.displayName),
                            'id': data.id
                        });
                    }

                    // Immediately trigger the changed event to give other widgets the chance of rendering the default permission settings
                    $(document).trigger('oae.setpermissions.changed', {
                        'visibility': defaultData.visibility,
                        'viewers': defaultViewers,
                        'summary': oae.api.util.template().render('#setpermissions-summary-template', {
                            'count': defaultData.count,
                            'type': getTypei18n(defaultData.type, defaultData.count),
                            'visibility': $('#setpermissions-container input[type="radio"]:checked', $rootel).val(),
                            'viewers': defaultViewers
                        })
                    });
                });
                $(document).trigger('oae.context.get');
            });
        };

        setUpSetPermissionsModal();

    };
});
