/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

define(['jquery', 'underscore', 'oae.core', 'jquery.autoSuggest'], function($, _, oae) {

    return function(uid, showSettings) {

        var $rootel = $('#' + uid);

        /**
         * Triggers an event when changes have been made to the visibility settings
         */
        var initPermissionsChange = function() {
            $rootel.off('change').on('change', '#setpermissions-container input[type="radio"]', function() {
                // Add visual styling to the permission setting that's checked
                $('.setpermissions-large-permission.well', $rootel).removeClass('checked');
                $(this).parents('.setpermissions-large-permission.well').addClass('checked');

                // Let other widgets know that the permissions have changed
                $(document).trigger('oae-trigger-setpermissionschanged', {
                    'visibility': $(this).val()
                });
            });
        };

        /**
         * Initializes the autosuggest used for sharing with other users or groups
         * @param  {Object}   context   The context of the page the user is on
         */
        var initAutoSuggest = function(context) {
            var preFillData = {};
            if (context) {
                preFillData = [{
                    'displayName': context.displayName,
                    'id': context.id
                }];
            }

            $('#setpermissions-share', $rootel).autoSuggest('/api/search/general', {
                'selectedItemProp': 'displayName',
                'searchObjProps': 'displayName',
                'selectedValuesProp': 'id',
                'preFill': preFillData,
                'extraParams': {
                    'resourceTypes': ['user', 'group']
                },
                'minChars': 3,
                'neverSubmit': true,
                'showResultListWhenNoMatch': true,
                'retrieveComplete': function(data) {
                    return data.results;
                },
                'selectionAdded': function(data) {
                    var viewers = [];
                    $.each($rootel.find('.as-selections > li'), function(index, selection) {
                        var viewer = $(selection).attr('data-value');
                        if (viewer) {
                            viewers.push(viewer);
                        }
                    });
                    $(document).trigger('oae-trigger-setpermissionsshared', {
                        'viewers': viewers
                    });
                }
            });
        };

        /**
         * Initializes the setpermissions widget
         */
        var initSetPermissionsModal = function() {
            $(document).on('oae-trigger-setpermissions', function(ev, data) {
                // Determine which view mode to render.
                if (!data.view) {
                    data.view = 'compact';
                }

                // Move the $rootel HTML to the widget calling setpermissions
                var html = $rootel.html();
                $rootel.remove();
                $(data.target).html('<div id="' + uid + '">' + html + '</div>');

                // Reinitialize $rootel in its new container
                $rootel = $('#' + uid);

                // Render the setpermissions template
                oae.api.util.template().render('#setpermissions-template', data, '#setpermissions-container');

                // Initialize the functionality attached to autosuggest and permission settings
                initPermissionsChange();

                if (data.view !== 'large') {
                    // Trigger and bind an event that will ask for the context of the widget
                    $(document).on('oae-trigger-receivecontext', function(ev, data) {
                        initAutoSuggest(data);
                    });
                    $(document).trigger('oae-trigger-requestcontext');
                }
            });
        };

        initSetPermissionsModal();

    };
});
