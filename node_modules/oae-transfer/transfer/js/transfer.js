/*!
 * Copyright 2017 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

define(['jquery', 'oae.core'], function ($, oae) {

    return function (uid) {

        // The widget container
        var $rootel = $('#' + uid);

        // Holds the current state of the user profile as it is updated
        var profile = _.extend({}, oae.data.me);

        /**
         * Show the main panel
         */
        var showMainPanel = function() {    
            $('#transfer-modal', $rootel).modal({
                'backdrop': 'static'
            });

            $('#transfer-tab-container', $rootel).show();
            $('#transfer-tab-generateCode', $rootel).addClass('active');
            $('#transfer-tab-makeTransfer', $rootel).removeClass('active');
            $('#transfer-makeTranfer-container', $rootel).addClass('active');
            $('#transfer-makeTranfer-container', $rootel).hide();
            $('#transfer-generateCode-container', $rootel).addClass('active');
            $('#transfer-generateCode-container', $rootel).show();

            renderTransferPanel();
        };

        /**
         * Render the edit "transfer" panel 
         */
        var renderTransferPanel = function() {
            // Render the form elements
            // Check if the tenant alow his users to make transfer 
            allowTransfer = oae.api.config.getValue('oae-transfer', 'allow', 'transfer');
            // Get the TTL (lifetime) of the transfer to informe the user
            timeTransfer = oae.api.config.getValue('oae-transfer', 'lifetime', 'value');

            oae.api.util.template().render($('#transfer-generateCode-template', $rootel), {
                'allowTransfer': allowTransfer,
                'timeTransfer': timeTransfer
            }, $('#transfer-generateCode-container', $rootel));
            oae.api.util.template().render($('#transfer-makeTranfer-template', $rootel), {}, $('#transfer-makeTranfer-container', $rootel));

            // Look at if the user has already created a transfer, if yes, show the transfer code
            showCodeIfTransferCreated();

            $('#generateCode-form', $rootel).on(oae.api.util.getFormChangeEventNames(), function() {
                if(oae.api.util.validation().isValidEmail($('#user-autosuggest').val())) {
                    $('#generateCode-form button[type="submit"]', $rootel).prop('disabled', false);
                }
                else{
                    $('#generateCode-form button[type="submit"]', $rootel).prop('disabled', true);
                }                
            });

            $('#makeTransfer-form', $rootel).on(oae.api.util.getFormChangeEventNames(), function() {
                if($('#code').val().length == 20 && oae.api.util.validation().isValidEmail($('#user-originalEmail').val())) {
                    $('#makeTransfer-form button[type="submit"]', $rootel).prop('disabled', false);
                }
                else{
                    $('#makeTransfer-form button[type="submit"]', $rootel).prop('disabled', true);
                }                
            });
        };

        /**
         * Reset the widget to its original state when the modal dialog is opened and closed.
         * Ideally this would only be necessary when the modal is hidden, but IE10+ fires `input`
         * events while Bootstrap is rendering the modal, and those events can "undo" parts of the
         * reset. Hooking into the `shown` event provides the chance to compensate.
         */
        var setUpReset = function() {
            $('form', $rootel).each(function(i, form) {
                // Reset the form
                form.reset();
                // Clear the validation messages from the form
                oae.api.util.validation().clear(form);
            });

            // Deactivate all the tabs and tab panels
            $('#transfer-tab-container ul li', $rootel).removeClass('active');
            $('form', $rootel).removeClass('active');

            // Enable the form
            $('#transfer-form *', $rootel).prop('disabled', false);
            $('#transfer-form button[type="submit"]', $rootel).prop('disabled', true);
        };

        /**
         * Apply the tabs listeners 
         */
        var setUpModalListeners = function() {
            // Show main panel
            $(document).on('click', '.oae-trigger-transfer', showMainPanel);

            // Switch panel
            $(document).on('click', '#transfer-tab-generateCode', function() {
                $('#transfer-generateCode-container', $rootel).show();
                $('#transfer-makeTranfer-container', $rootel).hide();
            });
            $(document).on('click', '#transfer-tab-makeTransfer', function() {
                $('#transfer-makeTranfer-container', $rootel).show();
                $('#transfer-generateCode-container', $rootel).hide();
            });
        };

        /**
         * Close the transfer modal
         */
        var closeModal = function() {
            $('#transfer-modal', $rootel).modal('hide');
        };

        /**
         * Bind all the action listeners needed for the user to interact with the "transfer" panel in
         */
        var bindTransferListeners = function() {

            // When the user valide the form to generate the code
            $rootel.on('click', '#transfer-generateCode-btn', function(e) {
                // Avoid the reload
                e.preventDefault();
                createTransfer(function(err) {
                    // To be sure that we wait the insert of transfer before trying to make a get on it
                    setTimeout(function() {
                        showCodeIfTransferCreated();
                    }, 100);
                    // Avoid default form submit behavior
                    return false;
                });
            });

            // When the user valide the for do make a transfer
            $rootel.on('click', '#transfer-makeTransfer-btn', function(e) {
                // Avoid the reload
                e.preventDefault();
                makeTransfer(function(err) {
                    // To be sure that we wait the insert of transfer before trying to make a get on it
                    setTimeout(function() {
                        closeModal();
                    }, 100);
                    // Avoid default form submit behavior
                    return false;
                });
            });

            // When the user click on cancel transfer
            $rootel.on('click', '#transfer-code-cancel-transfer-btn', function() {
                deleteTransfer(function(err) {
                    // Avoid default form submit behavior
                    return false;
                });
            });
        };

        // Access to API

        /**
        * When the user click on validate in the generate code panel
        */
        var createTransfer = function(callback) {
            // Get alls necessary data            
            var originalEmail = profile.email;
            var originalUserId = profile.id;
            var targetEmail = $.trim($('#user-autosuggest', $rootel).val());

            if(targetEmail === originalEmail) {
                oae.api.util.notification(
                    oae.api.i18n.translate('__MSG__TRANSFER_CREATION_FAILED__'),
                    oae.api.i18n.translate('__MSG__YOUR_TRANSFER_IS_NOT_CREATED_SAME_EMAIL__', 'preferences'),
                    'error'
                );
                return callback(null);
            } else { 
                oae.api.transfer.createTransfer(originalEmail, targetEmail, originalUserId, function(err, data) {
                    if(!err) {
                        // Show a success notification
                        oae.api.util.notification(
                            oae.api.i18n.translate('__MSG__TRANSFER_CREATED__', 'preferences'),
                            oae.api.i18n.translate('__MSG__YOUR_TRANSFER_IS_CREATED__', 'preferences')
                        );
                    } else {
                        console.log(err)
                        // Show a generic failure notification
                        oae.api.util.notification(
                            oae.api.i18n.translate('__MSG__TRANSFER_CREATION_FAILED__'),
                            oae.api.i18n.translate('__MSG__YOUR_TRANSFER_IS_NOT_CREATED__', 'preferences'),
                            'error'
                        );
                    }
                }); 
                return callback(null);
            }
        };

        /**
        * Verify the user have already start a procedure of transfer
        */
        var showCodeIfTransferCreated = function() {
            oae.api.transfer.getTransferById(profile.id, function(err, data) {
                if(!data) {
                    $("#alreadyGenerate-form").hide();
                    $("#generateCode-form").show();
                } else {
                    $("#code-container h3").html(data.code);
                    $("#alreadyGenerate-form").show();
                    $("#generateCode-form").hide();
                }
            });
        };

        /**
        * Make the transfer
        */
        var makeTransfer = function(callback) {
            // Get alls necessary data            
            var targetEmail = profile.email;
            var code = $.trim($('#code', $rootel).val());
            var originalEmail = $.trim($('#user-originalEmail', $rootel).val());
            var targetUserId = profile.id;

            oae.api.transfer.makeTransfer(originalEmail, code, targetEmail, targetUserId, function(err, data) {
                if(!err) {
                    //closeModal();
                    // Show a success notification
                    oae.api.util.notification(
                        oae.api.i18n.translate('__MSG__TRANSFER_SUCCESSED__', 'preferences'),
                        oae.api.i18n.translate('__MSG__YOUR_TRANSFER_SUCCESSED__', 'preferences')
                    );
                } else {
                    // Show a generic failure notification
                    oae.api.util.notification(
                        oae.api.i18n.translate('__MSG__TRANSFER_FAILED__'),
                        oae.api.i18n.translate(err.msg + '.', 'preferences'),
                        'error'
                    );
                }
            }); 
            return callback(null);
        };

        /**
        * Delete the transfer from the database
        */
        var deleteTransfer = function(callback) {
            // Get alls necessary data            
            var originalEmail = profile.email;
            var code = $("#code-generated").text();
            var originalUserId = profile.id;

            oae.api.transfer.deleteTransfer(originalEmail, code, originalUserId, function(err, data) {
                if(!err) {
                    // reloadPanel
                    showCodeIfTransferCreated();
                    // Show a success notification
                    oae.api.util.notification(
                        oae.api.i18n.translate('__MSG__TRANSFER_DELETED__', 'preferences'),
                        oae.api.i18n.translate('__MSG__YOUR_TRANSFER_HAS_BEEN_DELETED__', 'preferences')
                    );
                } else {
                    // Show a generic failure notification
                    oae.api.util.notification(
                        oae.api.i18n.translate('__MSG__TRANSFER_DELETE_FAILED__'),
                        oae.api.i18n.translate('__MSG__YOUR_TRANSFER_DELETE_HAS_FAILED__', 'preferences'),
                        'error'
                    );
                }
            }); 
            return callback(null);
        };

        setUpReset();
        setUpModalListeners();
        bindTransferListeners();
    };
});
