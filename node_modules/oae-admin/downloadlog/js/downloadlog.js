/*!
 * Copyright 2018 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

define(['jquery', 'oae.core'], function($, oae) {

    return function(uid, showSettings) {

        // The widget container
        var $rootel = $('#' + uid);

        // Variable that keeps track of the current tenant context
        var currentContext = null;

        /**
         * Bind all the action listeners needed for the user to interact with the "download" panel in
         */
        var bindListeners = function() {
            // When the user valide the form, download file
            $rootel.on('click', '#submit-download-btn', function(e) {
                // Avoid the reload
                e.preventDefault();
                downloadLog(function(err) {
                    setTimeout(function() {
                        closeModal();
                    }, 100);
                    // Avoid default form submit behavior
                    return false;
                });
            });

            // When the user click on cancel
            $rootel.on('click', '#cancel-download-btn', function() {
                // Avoid default form submit behavior
                return false;
            });
        };

        /**
         * Download log
         */
        var downloadLog = function(callback) {
            // Get the form values
            var values = $('#downloadlog-form').serializeObject();
            var numberMonth = 0;
            var tenantAlias = currentContext.alias;

            // Disable the `download log` button during creation, so it can't be clicked multiple times
            $('button, input', $rootel).prop('disabled', true);

            // Get checkbox values
            var lastConnection = $('#download-log:checked').val();
            var creationDate = $('#download-creation-log:checked').val();
            var date = new Date();
            date = date.toString().split(' ').join('-');

            // If the admin wants the last connection of each user
            if (lastConnection) {
                if (values.months) {
                    numberMonth = values.months;
                } 
                oae.api.admin.getUsersDateLog(numberMonth, tenantAlias, 'auth', function(err, log) {

                    if (err) {

                        // Define error message    
                        var errorMessage = '';

                        if (err.code === 401) {
                            errorMessage = '__MSG__GET_FAIL_NOT_ALLOWED__';
                        } else if (err.code === 402) {
                            errorMessage = '__MSG__GET_FAIL_NO_USERS__';
                        } else {
                            errorMessage = '__MSG__GET_FAIL_CONTENT__';
                        }

                        // Show an error notification
                        oae.api.util.notification(
                            oae.api.i18n.translate('__MSG__GET_FAIL__', 'downloadlog'),
                            oae.api.i18n.translate(errorMessage, 'downloadlog'),
                        'error');
                    } else {
                        // Show an error notification
                        oae.api.util.notification(
                            oae.api.i18n.translate('__MSG__GET_SUCCESS__', 'downloadlog'),
                            oae.api.i18n.translate('__MSG__GET_SUCCESS_CONTENT__', 'downloadlog')
                        );
                        downloadCSV(log, 'logs_date-last-login_' + date + '.csv');
                    }
                });
            }
            // If the admin wants the creation date of each user
            if (creationDate) {
                oae.api.admin.getUsersDateLog(null, tenantAlias, 'created', function(err, log) {
                    if (err) {
                        // Show an error notification
                        oae.api.util.notification(
                            oae.api.i18n.translate('__MSG__GET_FAIL__', 'downloadlog'),
                            oae.api.i18n.translate('__MSG__GET_FAIL_CONTENT__', 'downloadlog'),
                        'error');
                    } else {
                        // Show an error notification
                        oae.api.util.notification(
                            oae.api.i18n.translate('__MSG__GET_SUCCESS__', 'downloadlog'),
                            oae.api.i18n.translate('__MSG__GET_SUCCESS_CONTENT__', 'downloadlog')
                        );
                        downloadCSV(log, 'logs_date-creation_' + date + '.csv');
                    }
                });
            }
            return callback(null);
        };

        /**
         * Close the modal
         */
        var closeModal = function() {
            $('#downloadlog-modal', $rootel).modal('hide');
        };

        /**
         * Download logins file 
         *
         * @param  {Object}     data            Data to download
         * @param  {String}     fileName        File name
         */
        var downloadCSV = function(data, fileName) {
            var element = document.createElement('a');
            element.setAttribute('href', 'data:text/csv;charset=utf-8,' + encodeURIComponent(data));
            element.setAttribute('download', fileName);

            element.style.display = 'none';
            document.body.appendChild(element);

            element.click();

            document.body.removeChild(element);
        };

        /**
         * Initialize the `download log` modal dialog
         */
        var initDownloadLog = function() {
            // Disable input and submit button
            $('#download-log-input').prop('disabled', true);
            $('#submit-download-btn').prop('disabled', true);

            $(document).on('oae.trigger.downloadlog', function(event, data) {
                currentContext = data.context;
                // Trigger the modal dialog
                $('#downloadlog-modal', $rootel).modal({
                    'backdrop': 'static'
                });
            });

            $('#downloadlog-modal').on('hidden.bs.modal', function() {
                // Reset the form
                $('button, input', $rootel).prop('disabled', false);
                var $form = $('#downloadlog-form', $rootel);
                $form[0].reset();
                oae.api.util.validation().clear($form);
            });

            // Set focus to the first name field
            $('#downloadlog-modal', $rootel).on('shown.bs.modal', function () {
                $('#download-creation-log', $rootel).focus();
            });

            // enable input if checkbox is checked
            $("#download-log").change(function() {
                if (this.checked) {
                    $('#download-log-input').prop('disabled', false);
                    $('#download-log-input', $rootel).focus();
                } else {
                    $('#download-log-input').prop('disabled', true);
                }
            });

            $('#download-log, #download-creation-log').change(function() {
                var $check1  = $('#download-creation-log').is(':checked');
                var $check2  = $('#download-log').is(':checked');

                if ($check1 || $check2) {
                    $('#submit-download-btn').prop('disabled', false);
                } else {
                    $('#submit-download-btn').prop('disabled', true);
                }
            });
        };

        bindListeners();
        initDownloadLog();

    };
});
