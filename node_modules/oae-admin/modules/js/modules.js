/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

define(['jquery', 'oae.core', 'jquery.jeditable'], function($, oae) {

    return function(uid, showSettings, widgetData) {

        // The widget container
        var $rootel = $('#' + uid);

        // The schema for the configuration
        var schema = [];

        // Convert the configuration schema to an array as we can't sort a dictionary
        $.each(widgetData.configurationSchema, function(moduleName, module) {
            schema.push({'module': module, 'moduleName': moduleName});
        });

        // Sort the array based on the module title
        schema.sort(function(a, b) {
            if (a.module.title > b.module.title) {
                return 1;
            }
            if (a.module.title < b.module.title) {
                return -1;
            }
            return 0;
        });

        /**
         * Create appropriate API URL root for admin or tenant
         */
        var getApiUrl = function() {
            var url = '/api/config';
            // Tenant and global servers do not need the tenantId to be specified in the URL
            // If a tenant server is accessed through the global server the tenantId needs to be specified
            if (widgetData.context.isTenantOnGlobalAdminServer) {
                url += '/' + widgetData.context.alias;
            }
            return url;
        };

        /**
         * Render the available configuration modules and their configured values
         */
        var renderModules = function() {
            oae.api.util.template().render($('#modules-template', $rootel), {
                'schema': schema,
                'configuration': widgetData.configuration,
                'context': widgetData.context,
                'languages': widgetData.configurationSchema['oae-principals'].user.elements.defaultLanguage.list
            }, $('#modules-container', $rootel));
        };

        /**
         * Update a single module in the DOM
         */
        var updateRenderedModule = function(module) {
            // Render the modules template outside of the DOM
            var modulesHtml = oae.api.util.template().render($('#modules-template', $rootel), {
                'schema': schema,
                'configuration': widgetData.configuration,
                'context': widgetData.context,
                'languages': widgetData.configurationSchema['oae-principals'].user.elements.defaultLanguage.list
            });
            // Strip out leading whitespace
            modulesHtml = modulesHtml.substring(modulesHtml.indexOf('<'));
            // Find the updated module
            var $moduleHtml = $(modulesHtml).find('form[data-module="' + module + '"]');
            // Replace it in the DOM
            $('form[data-module="' + module + '"]', $rootel).replaceWith($moduleHtml);
        };

        /**
         * Persist the configuration changes for the current tenant
         */
        var updateConfiguration = function() {
            // Get the filled out values from the form
            var $form = $(this);
            var values = $form.serializeObject();
            var module = $form.attr('data-module');

            // Object that will be used to construct the POST data
            var data = {};

            // Run over all the old config values to check which ones have been modified
            $.each(widgetData.configuration[module], function(option, optionValues) {
                $.each(optionValues, function(element, elementValue) {

                    // Convert the value in case it's a checkbox
                    var configPath = module + '/' + option + '/' + element;
                    if (widgetData.configurationSchema[module][option].elements[element].type === 'boolean') {
                        values[configPath] = values[configPath] ? true : false;
                    }

                    // Go one level deeper if it's an internationalizableText field
                    if (widgetData.configurationSchema[module][option].elements[element].type === 'internationalizableText') {
                        // Check if the default language changed
                        if (values[configPath + '/default'] !== widgetData.configuration[module][option][element]['default']) {
                            data[configPath + '/default'] = values[configPath + '/default'];
                            widgetData.configuration[module][option][element]['default'] = values[configPath + '/default'];
                        }

                        // Loop over the list of available languages
                        $.each(widgetData.configurationSchema['oae-principals'].user.elements.defaultLanguage.list, function(i, i18n) {
                            // Continue if the value has changed
                            if (values[configPath + '/' + i18n.value] !== widgetData.configuration[module][option][element][i18n.value]) {
                                // We shouldn't submit empty values
                                if (values[configPath + '/' + i18n.value] !== '') {
                                    data[configPath + '/' + i18n.value] = values[configPath + '/' + i18n.value];
                                    widgetData.configuration[module][option][element][i18n.value] = values[configPath + '/' + i18n.value];
                                }
                            }
                        });
                    }

                    // Check if the value has changed and overwrite if it has
                    if ((values[configPath] !== elementValue) &&
                        widgetData.configurationSchema[module][option].elements[element].type !== 'internationalizableText') {
                        data[configPath] = values[configPath];
                        widgetData.configuration[module][option][element] = values[configPath];
                    }
                });
            });

            // Only update when a change has actually been made
            if (!$.isEmptyObject(data)) {
                $.ajax({
                    'url': getApiUrl(),
                    'type': 'POST',
                    'data': data,
                    'success': function() {
                        oae.api.util.notification(
                            oae.api.i18n.translate('__MSG__CONFIGURATION_SAVED__', 'modules'),
                            oae.api.i18n.translate('__MSG__CONFIGURATION_SUCCESSFULLY_SAVED__', 'modules'));
                    },
                    'error': function() {
                        oae.api.util.notification(
                            oae.api.i18n.translate('__MSG__CONFIGURATION_NOT_SAVED__', 'modules'),
                            oae.api.i18n.translate('__MSG__CONFIGURATION_COULD_NOT_BE_SAVED__', 'modules'),
                            'error');
                    }
                });
            }
            return false;
        };

        /**
         * Handle click on revert to defaults
         */
        var revertToDefaults = function() {
            // List of keys to revert for this action
            var keysToClear = [];
            // Identify the module to revert
            var module = $(this).parent('form.modules-configuration-form').attr('data-module');
            // Find all the keys in the module
            var schema = widgetData.configurationSchema[module];
            _.each(_.omit(schema, 'title'), function(optionValue, option) {
                _.each(_.omit(optionValue.elements, ['name', 'tenantOverride']), function(elementValue, element) {
                    if (widgetData.configurationSchema[module][option].elements[element].type === 'internationalizableText') {
                        keysToClear.push(module + '/' + option + '/' + element + '/default');
                        _.each(widgetData.configurationSchema['oae-principals'].user.elements.defaultLanguage.list, function(lang) {
                            keysToClear.push(module + '/' + option + '/' + element + '/' + lang.value);
                        });
                    } else {
                        keysToClear.push(module + '/' + option + '/' + element);
                    }
                });
            });

            // Clear the keys via the API
            $.ajax({
                'url': getApiUrl() + '/clear',
                'type': 'POST',
                'data': {'configFields': keysToClear},
                'success': function() {
                    oae.api.util.notification(
                        oae.api.i18n.translate('__MSG__CONFIGURATION_REVERTED__', 'modules'),
                        oae.api.i18n.translate('__MSG__CONFIGURATION_SUCCESSFULLY_REVERTED__', 'modules'));
                    // Get the updated configuration after the reversion
                    $.getJSON(getApiUrl(), function (config) {
                        widgetData.configuration = config;
                        // Update the relevant module in the DOM
                        updateRenderedModule(module);
                    });
                },
                'error': function() {
                    oae.api.util.notification(
                        oae.api.i18n.translate('__MSG__CONFIGURATION_NOT_REVERTED__', 'modules'),
                        oae.api.i18n.translate('__MSG__CONFIGURATION_COULD_NOT_BE_REVERTED__', 'modules'),
                        'error');
                }
            });

            return true;
        };

        /**
         * Toggle internationalizable field container
         */
        var toggleInternationalizableFieldContainer = function() {
            // Define the target container
            var $targetContainer = $(this).parents('.modules-internationalizable-text-container');
            // Hide all form groups except the first one (language select) in the target container
            $targetContainer.find('.form-group').hide();
            $targetContainer.find('.form-group:first-child').show();
            // Show the selected language form group in the target container
            $targetContainer.find('div[data-id="' + $(this).val() + '"]').show();
            return true;
        };

        /**
         * Toggle a module container
         */
        var toggleContainer = function() {
            $(this).next().toggle(400);
            return true;
        };

        /**
         * Add event binding to the module related functionality
         */
        var addBinding = function() {
            // Modules toggle
            $rootel.on('click', '.admin-table-striped-toggle', toggleContainer);
            // Change config values
            $rootel.on('submit', '.modules-configuration-form', updateConfiguration);
            // Revert to defaults
            $rootel.on('click', '.modules-configuration-revert', revertToDefaults);
            // Toggle internationalizable field containers
            $rootel.on('change', '.admin-internationalizabletext-language-picker', toggleInternationalizableFieldContainer);
        };

        addBinding();
        renderModules();

    };
});
