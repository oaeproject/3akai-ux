/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

define(['jquery', 'oae.core', './constants.js', 'bootstrap.datepicker'], function($, oae, mimeTypeConstants) {

    return function(uid, showSettings, widgetData) {


        //////////////////////
        // WIDGET VARIABLES //
        //////////////////////

        // The maintenance widget container
        var $rootel = $('#' + uid);

        var fromDate = null;
        var toDate = null;

        ///////////////////////////////////
        // REPROCESSING CONTENT PREVIEWS //
        ///////////////////////////////////

        /**
         * Reprocess all content items with the selected mimetypes
         */
        var reprocessMimeTypes = function() {
            // Get all the selected mimetypes and construct the data object to send to the server
            var data = {'revision_mime': []};
            $.each($(this).find('input[type="checkbox"][name]:checked'), function(i, chk) {
                data.revision_mime.push(chk.name);
            });

            // Send the POST to reprocess content
            $.ajax({
                'type': 'POST',
                'url': '/api/content/reprocessPreviews',
                'data': data,
                'success': function() {
                    oae.api.util.notification('Reprocess content previews.', 'Successfully triggered reprocessing content previews.');
                },
                'error': function() {
                    oae.api.util.notification('Reprocess content previews.', 'Could not successfully start reprocessing content item previews.', 'error');
                }
            });

            return false;
        };

        var reprocessContentTypes = function() {
            // Get all the selected content types and construct the data object to send to the server
            var data = {'content_resourceSubType': []};
            $.each($(this).find('input[type="checkbox"][name]:checked'), function(i, chk) {
                data.content_resourceSubType.push(chk.name);
            });

            // Send the POST to reprocess content
            $.ajax({
                'type': 'POST',
                'url': '/api/content/reprocessPreviews',
                'data': data,
                'success': function() {
                    oae.api.util.notification('Reprocess content previews.', 'Successfully triggered reprocessing content previews.');
                },
                'error': function() {
                    oae.api.util.notification('Reprocess content previews.', 'Could not successfully start reprocessing content item previews.', 'error');
                }
            });

            return false;
        };

        /**
         * Reprocess all failed content previews
         */
        var reprocessAll = function() {
            $.ajax({
                'type': 'POST',
                'url': '/api/content/reprocessPreviews',
                'data': {
                    'revision_previewsStatus': ['ignored', 'error']
                },
                'success': function() {
                    oae.api.util.notification('Reprocess content previews.', 'Successfully triggered reprocessing content previews.');
                },
                'error': function() {
                    oae.api.util.notification('Reprocess content previews.', 'Could not successfully start reprocessing content item previews.', 'error');
                }
            });
        };

        /**
         * Reprocess all content items in a date range
         */
        var reprocessDateRange = function() {
            $.ajax({
                'type': 'POST',
                'url': '/api/content/reprocessPreviews',
                'data': {
                    'revision_createdAfter': fromDate,
                    'revision_createdBefore': toDate
                },
                'success': function() {
                    oae.api.util.notification('Reprocess content previews.', 'Successfully triggered reprocessing content previews.');
                },
                'error': function() {
                    oae.api.util.notification('Reprocess content previews.', 'Could not successfully start reprocessing content item previews.', 'error');
                }
            });

            return false;
        };

        /**
         * Reprocess all content items for a specific user
         */
        var reprocessUser = function() {
            var users = [];
            $.each(oae.api.util.autoSuggest().getSelection($rootel), function(i, user) {
                users.push(user.id);
            });

            $.ajax({
                'type': 'POST',
                'url': '/api/content/reprocessPreviews',
                'data': {
                    'revision_createdBy': users
                },
                'success': function() {
                    oae.api.util.notification('Reprocess content previews.', 'Successfully triggered reprocessing content previews.');
                },
                'error': function() {
                    oae.api.util.notification('Reprocess content previews.', 'Could not successfully start reprocessing content item previews.', 'error');
                }
            });
        };

        /**
         * Selects or deselects all mimetypes in the type category
         */
        var selectAllMimetypes = function() {
            var selectAll = $(this).is(':checked');
            var chkContainer = $(this).parents('.checkbox').next();
            $.each($(chkContainer).find('input[type="checkbox"]'), function(i, chk) {
                $(chk).prop('checked', selectAll);
            });
        };

        ////////////////////
        // REINDEX SEARCH //
        ////////////////////

        /**
         * Reindex the search index
         */
        var doReindexAll = function() {
            $.ajax({
                'url': '/api/search/reindexAll',
                'type': 'POST',
                'success': function() {
                    oae.api.util.notification('Reindex search index.', 'Successfully triggered a reindex of the search index.');
                },
                'error': function() {
                    oae.api.util.notification('Reindex search index.', 'Could not successfully trigger a reindex of the search index.', 'error');
                }
            });
        };


        ///////////////
        // UTILITIES //
        ///////////////

        /**
         * Toggles a container to show or hide
         */
        var toggleContainer = function() {
            $(this).next().toggle(400);
        };

        /**
         * Render the maintenance widget
         */
        var renderMaintenance = function() {
            oae.api.util.template().render($('#maintenance-template', $rootel), {
                'previewMimetypes': mimeTypeConstants.previewMimetypes
            }, $('#maintenance-container', $rootel));
        };


        ////////////////////
        // INITIALIZATION //
        ////////////////////

        /**
         * Initialize the date range picker to reprocess previews within the selected time range
         */
        var initDateRangePicker = function() {
            // Initialize the 'from' field
            var fromDateField = $('#maintenance-reprocess-daterange-from', $rootel).datepicker().on('changeDate', function(ev) {
                // Get the date and cache it
                fromDate = ev.date.valueOf();
                // Hide the 'from' field when a date is selected
                fromDateField.hide();
                // Focus the 'to' field when a date is selected
                $('#maintenance-reprocess-daterange-to')[0].focus();
            }).data('datepicker');

            // Initialize the 'to' field
            var toDateField = $('#maintenance-reprocess-daterange-to', $rootel).datepicker().on('changeDate', function(ev) {
                // Get the date and cache it
                toDate = ev.date.valueOf();
                // Hide the 'to' field when a date is selected
                toDateField.hide();
            }).data('datepicker');
        };

        var initUserAutosuggest = function() {
            oae.api.util.autoSuggest().setup($('#maintenance-reprocess-user-autosuggest', $rootel), {
                'url': '/api/search/general?limit=12&scope=all&resourceTypes=user'
            });
        };

        /**
         * Add binding to various elements in the maintenance widget
         */
        var addBinding = function() {
            // Toggle a maintenance container
            $rootel.on('click', '.maintenance-toggle-button', toggleContainer);
            // Reindex the search index
            $rootel.on('click', '#maintenance-reindexall', doReindexAll);

            // Reprocess previews
            $rootel.on('submit', '#maintenance-reprocess-mimetypes-form', reprocessMimeTypes);
            $rootel.on('submit', '#maintenance-reprocess-contenttypes-form', reprocessContentTypes);
            $rootel.on('click', '#maintenance-reprocess-all', reprocessAll);
            $rootel.on('click', '#maintenance-reprocess-user', reprocessUser);
            $rootel.on('change', '.maintenance-reprocess-selectall', selectAllMimetypes);
            oae.api.util.validation().validate($('#maintenance-reprocess-daterange-form', $rootel), {
                'methods': {
                    'isdate': {
                        'method': function(value, element) {
                            return this.optional(element) || !/Invalid|NaN/.test(new Date(value).toString());
                        },
                        'text': oae.api.i18n.translate('__MSG__PROVIDE_A_VALID_DATE__', 'maintenance')
                    },
                    'isolderdate': {
                        'method': function(value, element) {
                            return fromDate < toDate;
                        },
                        'text': oae.api.i18n.translate('__MSG__SELECT_A_DATE_AFTER_FROM_DATE__', 'maintenance')
                    }
                },
                'submitHandler': reprocessDateRange
            });

            // Attach the datepicker to the date range form
            initDateRangePicker();
            // Set up the autosuggest for reprocessing a user's content previews
            initUserAutosuggest();
        };

        /**
         * Initialize the maintenance widget
         */
        var initMaintenance = function() {
            renderMaintenance();
            addBinding();
        };

        initMaintenance();

    };
});
