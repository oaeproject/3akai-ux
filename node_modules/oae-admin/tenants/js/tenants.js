/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

define(['jquery', 'oae.core', 'jquery.jeditable'], function($, oae) {

    return function(uid, showSettings, widgetData) {

        // The widget container
        $rootel = $('#' + uid);

        // Regex used to validate a URL. jQuery validate can't be used in combination with jEditable, so this regex has to be copied in here
        var urlRegex = /^(https?|s?ftp):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i;

        /**
         * Stop one or more tenant servers
         *
         * @param {String[]}    tenants       Array of tenant aliases that need to be stopped
         * @param {Function}    callback      Standard callback function
         * @param {Object}      callback.err  Error object containing error code and message
         */
        var stopTenants = function(tenants, callback) {
            $.ajax({
                'url': '/api/tenant/stop',
                'type': 'POST',
                'data': {'aliases': tenants},
                'success': function(data) {
                    // Flag the provided tenants as stopped in the list of available tenants
                    $.each(tenants, function(index, alias) {
                        widgetData.tenants[alias].active = false;
                    });
                    renderTenants();
                    callback();
                },
                'error': function(jqXHR, textStatus) {
                    callback({'code': jqXHR.status, 'msg': jqXHR.responseText});
                }
            });
        };

        /**
         * Confirm whether or not a tenant should be stopped. If so, the tenant will be stopped
         */
        var stopTenantHandler = function() {
            var tenantDisplayName = $(this).attr('data-displayName');
            var tenantAlias = $(this).attr('data-alias');
            $(document).trigger('oae.trigger.confirmdialog', {
                'title': oae.api.i18n.translate('__MSG__STOP_TENANT__', 'tenants', {'displayName': tenantDisplayName}),
                'message': oae.api.i18n.translate('__MSG__STOP_TENANT_DESCRIPTION__', 'tenants', {'displayName': tenantDisplayName}),
                'confirm': oae.api.i18n.translate('__MSG__STOP_TENANT_CONFIRM__', 'tenants', {'displayName': tenantDisplayName}),
                'confirmclass': 'btn-warning',
                'confirmed': function() {
                    stopTenants([tenantAlias], function(err) {
                        // Show a success or failure message
                        if (err) {
                            oae.api.util.notification(
                                oae.api.i18n.translate('__MSG__TENANT_NOT_STOPPED__', 'tenants'),
                                oae.api.i18n.translate('__MSG__TENANT_COULD_NOT_BE_STOPPED__', 'tenants'),
                                'error');
                        } else {
                            oae.api.util.notification(
                                oae.api.i18n.translate('__MSG__TENANT_STOPPED__', 'tenants'),
                                oae.api.i18n.translate('__MSG__TENANT_STOPPED_SUCCESSFULLY__', 'tenants', {'displayName': tenantDisplayName}));
                        }
                    });
                }
            });
        };

        /**
         * Confirm whether or not all tenant should be stopped. If so, all tenants will be stopped
         */
        var stopAllTenantsHandler = function() {
            $(document).trigger('oae.trigger.confirmdialog', {
                'title': oae.api.i18n.translate('__MSG__STOP_ALL_TENANTS__', 'tenants'),
                'message': oae.api.i18n.translate('__MSG__STOP_ALL_TENANTS_DESCRIPTION__', 'tenants'),
                'confirm': oae.api.i18n.translate('__MSG__STOP_ALL_TENANTS_CONFIRM__', 'tenants'),
                'confirmclass': 'btn-warning',
                'confirmed': function() {
                    stopTenants(_.keys(widgetData.tenants), function(err) {
                        // Show a success or failure message
                        if (err) {
                            oae.api.util.notification(
                                oae.api.i18n.translate('__MSG__TENANTS_NOT_STOPPED__', 'tenants'),
                                oae.api.i18n.translate('__MSG__TENANTS_COULD_NOT_BE_STOPPED__', 'tenants'),
                                'error');
                        } else {
                            oae.api.util.notification(
                                oae.api.i18n.translate('__MSG__TENANTS_STOPPED__', 'tenants'),
                                oae.api.i18n.translate('__MSG__TENANTS_STOPPED_SUCCESSFULLY__', 'tenants'));
                        }
                    });
                }
            });
        };

        /**
         * Start one or more tenant servers
         *
         * @param {String[]}    tenants       Array of tenant aliases that need to be started
         * @param {Function}    callback      Standard callback function
         * @param {Object}      callback.err  Error object containing error code and message
         */
        var startTenants = function(tenants, callback) {
            $.ajax({
                'url': '/api/tenant/start',
                'type': 'POST',
                'data': {'aliases': tenants},
                'success': function(data) {
                    // Flag the provided tenants as started in the list of available tenants
                    $.each(tenants, function(index, alias) {
                        widgetData.tenants[alias].active = true;
                    });
                    renderTenants();
                    callback();
                },
                'error': function(jqXHR, textStatus) {
                    callback({'code': jqXHR.status, 'msg': jqXHR.responseText});
                }
            });
        };

        /**
         * Start a single tenant and show a confirmation message
         */
        var startTenantHandler = function() {
            var tenantDisplayName = $(this).attr('data-displayName');
            var tenantAlias = $(this).attr('data-alias');
            $(document).trigger('oae.trigger.confirmdialog', {
                'title': oae.api.i18n.translate('__MSG__START_TENANT__', 'tenants', {'displayName': tenantDisplayName}),
                'message': oae.api.i18n.translate('__MSG__START_TENANT_DESCRIPTION__', 'tenants', {'displayName': tenantDisplayName}),
                'confirm': oae.api.i18n.translate('__MSG__START_TENANT_CONFIRM__', 'tenants', {'displayName': tenantDisplayName}),
                'confirmclass': 'btn-success',
                'confirmed': function() {
                    startTenants([tenantAlias], function(err) {
                        // Show a success or failure message
                        if (err) {
                            oae.api.util.notification(
                                oae.api.i18n.translate('__MSG__TENANT_NOT_STARTED__', 'tenants'),
                                oae.api.i18n.translate('__MSG__TENANT_COULD_NOT_BE_STARTED__', 'tenants'),
                                'error');
                        } else {
                            oae.api.util.notification(
                                oae.api.i18n.translate('__MSG__TENANT_STARTED__', 'tenants'),
                                oae.api.i18n.translate('__MSG__TENANT_STARTED_SUCCESSFULLY__', 'tenants', {'displayName': tenantDisplayName}));
                        }
                    });
                }
            });
        };

        /**
         * Start all tenants in the system, no exceptions, and show a confirmation dialog.
         */
        var startAllTenantsHandler = function() {
            $(document).trigger('oae.trigger.confirmdialog', {
                'title': oae.api.i18n.translate('__MSG__START_ALL_TENANTS__', 'tenants'),
                'message': oae.api.i18n.translate('__MSG__START_ALL_TENANTS_DESCRIPTION__', 'tenants'),
                'confirm': oae.api.i18n.translate('__MSG__START_ALL_TENANTS_CONFIRM__', 'tenants'),
                'confirmclass': 'btn-success',
                'confirmed': function() {
                    startTenants(_.keys(widgetData.tenants), function(err) {
                        // Show a success or failure message
                        if (err) {
                            oae.api.util.notification(
                                oae.api.i18n.translate('__MSG__TENANTS_NOT_STARTED__', 'tenants'),
                                oae.api.i18n.translate('__MSG__TENANTS_COULD_NOT_BE_STARTED__', 'tenants'),
                                'error');
                        } else {
                            oae.api.util.notification(
                                oae.api.i18n.translate('__MSG__TENANTS_STARTED__', 'tenants'),
                                oae.api.i18n.translate('__MSG__TENANTS_STARTED_SUCCESSFULLY__', 'tenants'));
                        }
                    });
                }
            });
        };

        /**
         * Retrieve a signed token that can be used to log onto a tenant as a global administrator.
         *
         * @param  {String}     tenantAlias     The tenant alias of the tenant to log onto
         * @param  {Function}   callback        Standard callback function
         * @param  {Object}     callback.err    Error object containing error code and message
         * @param  {Object}     callback.token  A token that can be used to log onto the specified tenant
         */
        var getToken = function(tenantAlias, callback) {
            $.ajax({
                'url': '/api/auth/signed',
                'data': {
                    'tenant': tenantAlias
                },
                'success': function(data) {
                    callback(null, data);
                },
                'error': function(jqXHR, textStatus) {
                    callback({'code': jqXHR.status, 'msg': jqXHR.responseText});
                }
            });
        };

        /**
         * Log into a user tenant as a global admin. If successful, the user will be redirected
         * to the tenant where he should be logged in. If we were unable to retrieve a login
         * token, a notification will be shown.
         */
        var loginOnTenantHandler = function() {
            var tenantAlias = $(this).attr('data-alias');
            getToken(tenantAlias, function(err, token) {
                if (err) {
                    oae.api.util.notification(
                        oae.api.i18n.translate('__MSG__TOKEN_ERROR__', 'tenants'),
                        oae.api.i18n.translate('__MSG__COULD_NOT_SIGN_INTO_TENANT__', 'tenants'),
                        'error');
                } else {
                    // Fill in our hidden form and submit it. This is done because we are
                    // dealing with a cross-domain request. The action should have the tenant URL.
                    var $form = $('#tenants-login-form');
                    $form.attr('action', '//' + token.host + '/api/auth/signed');
                    $('#tenants-login-form-expires', $form).val(token.expires);
                    $('#tenants-login-form-signature', $form).val(token.signature);
                    $('#tenants-login-form-userid', $form).val(token.userId);
                    $form.submit();
                }
            });
        };

        /**
         * Create a new tenant and start it up immediately
         */
        var createTenant = function() {
            $.ajax({
                'url': '/api/tenant/create',
                'type': 'POST',
                'data': {
                    'alias': $.trim($('#tenants-create-alias', $rootel).val()),
                    'displayName': $.trim($('#tenants-create-displayName', $rootel).val()),
                    'host': $.trim($('#tenants-create-host', $rootel).val())
                },
                'success': function(tenant) {
                    oae.api.util.notification(
                        oae.api.i18n.translate('__MSG__TENANT_CREATED__', 'tenants'),
                        oae.api.i18n.translate('__MSG__TENANT_SUCCESSFULLY_CREATED__', 'tenants', {'displayName': oae.api.util.security().encodeForHTML(tenant.displayName)}));
                    // Add the created tenant to the list of available tenants
                    widgetData.tenants[tenant.alias] = tenant;
                    renderTenants();
                },
                'error': function(jqXHR, textStatus) {
                    oae.api.util.notification(
                        oae.api.i18n.translate('__MSG__TENANT_NOT_CREATED__', 'tenants'),
                        jqXHR.responseText,
                        'error');
                }
            });
            return false;
        };

        /**
         * Update a tenant's display name or host
         *
         * @param  {String}     tenantAlias         Alias for the tenant that needs to be updated
         * @param  {String}     field               The name of the tenant metadata field that needs to be updated. Accepted values are `displayName` and `host`
         * @param  {String}     value               The value the provided metadata field needs to be updated to
         */
        var updateTenant = function(tenantAlias, field, value) {
            // If we're making the change from the global admin tenant, the tenant alias
            // needs to be incorporated into the URL
            var url = '/api/tenant';
            if (widgetData.context.isGlobalAdminServer || widgetData.context.isTenantOnGlobalAdminServer) {
                url += '/' + tenantAlias;
            }

            // Post the update
            var data = {};
            data[field] = value;

            $.ajax({
                'url': url,
                'type': 'POST',
                'data': data,
                'success': function() {
                    if (field === 'displayName') {
                        oae.api.util.notification(
                            oae.api.i18n.translate('__MSG__TENANT_NAME_UPDATED__', 'tenants'),
                            oae.api.i18n.translate('__MSG__TENANT_NAME_SUCCESSFULLY_UPDATED__', 'tenants'));
                    } else if (field === 'host') {
                        oae.api.util.notification(
                            oae.api.i18n.translate('__MSG__TENANT_HOST_UPDATED__', 'tenants'),
                            oae.api.i18n.translate('__MSG__TENANT_HOST_SUCCESSFULLY_UPDATED__', 'tenants'));
                    }
                }
            });
        };

        /**
         * Check if a host name is valid using the jquery.validate URL regex
         *
         * @param  {String}    value    The host name to be validated
         * @return {Boolean}            Whether or not the provided value is a valid host name
         */
        var checkValidHostname = function(value) {
            return urlRegex.test('http://' + value);
        };

        /**
         * Initialize jEditable fields in the tenant overview
         */
        var enableInlineEdit = function() {
            $('.jeditable-field', $rootel).editable(function(value) {
                value = $.trim(value);
                var $inlineEdit = $(this);
                // Check which field is being updated
                var field = $inlineEdit.attr('data-field');
                // If no value has been provided, an error message is shown and the field is reset
                if (!value) {
                    if (field === 'displayName') {
                        oae.api.util.notification(
                            oae.api.i18n.translate('__MSG__INVALID_TENANT_NAME__', 'tenants'),
                            oae.api.i18n.translate('__MSG__PLEASE_ENTER_A_TENANT_NAME__', 'tenants'),
                            'error');
                    } else if (field === 'host') {
                        oae.api.util.notification(
                            oae.api.i18n.translate('__MSG__INVALID_HOST_NAME__', 'tenants'),
                            oae.api.i18n.translate('__MSG__PLEASE_ENTER_A_HOST_NAME__', 'tenants'),
                            'error');
                    }
                    return this.revert;
                } else if (field === 'host' && !checkValidHostname(value)) {
                    oae.api.util.notification(
                        oae.api.i18n.translate('__MSG__INVALID_HOST_NAME__', 'tenants'),
                        oae.api.i18n.translate('__MSG__PLEASE_ENTER_A_VALID_HOST_NAME__', 'tenants'),
                        'error');
                    return this.revert;
                } else {
                    updateTenant($inlineEdit.attr('data-alias'), field, value);
                    // Update the link to the tenant's landing page
                    $('a', $inlineEdit.parent().prev()).attr('href', '//' + value);
                    return value;
                }
            }, {
                'tooltip': oae.api.i18n.translate('__MSG__CLICK_TO_EDIT__', 'tenants'),
                'select' : true
            });
        };

        /**
         * Render the list of tenants
         */
        var renderTenants = function() {
            // Only render a single tenant when we're looking at a specific tenant
            var tenantsToRender = widgetData.context.isGlobalAdminServer ? widgetData.tenants : [widgetData.context];

            // Determine whether or not there is at least one tenant server that has been
            // stopped. When that's the case, the 'Start all' button will be shown instead
            // of the 'Stop all' button.
            var hasStoppedServer = _.find(widgetData.tenants, function(tenant) {
                return !tenant.active;
            });

            var tenantsArr = [];
            $.each(tenantsToRender, function(tenantHost, tenant) {
                tenantsArr.push(tenant);
            });

            // Sort the tenants alphabetically based on the tenant name
            tenantsArr.sort(function(a, b) {
                if (a.displayName.toLowerCase() > b.displayName.toLowerCase()) {
                    return 1;
                }
                if (a.displayName.toLowerCase() < b.displayName.toLowerCase()) {
                    return -1;
                }

                return 0;
            });

            oae.api.util.template().render($('#tenants-template', $rootel), {
                'tenants': tenantsArr,
                'hasStoppedServer': hasStoppedServer,
                'context': widgetData.context
            }, $('#tenants-container', $rootel));
            enableInlineEdit();
            // Set up the validation for the create tenant form
            oae.api.util.validation().validate($('#tenants-create-form', $rootel), {'submitHandler': createTenant});
        };

        /**
         * Toggle a container to show or hide
         */
        var toggleContainer = function() {
            $(this).next().toggle(400);
        };

        /**
         * Add event binding for the tenant related functionality
         */
        var addBinding = function() {
            // Create tenant toggle
            $rootel.on('click', '#tenants-create-toggle-button', toggleContainer);
            // Stop a tenant
            $rootel.on('click', '.tenants-stop', stopTenantHandler);
            // Stop all tenants
            $rootel.on('click', '.tenants-stop-all', stopAllTenantsHandler);
            // Start a tenant
            $rootel.on('click', '.tenants-start', startTenantHandler);
            // Start all tenants
            $rootel.on('click', '.tenants-start-all', startAllTenantsHandler);
            // Log onto a tenant
            $rootel.on('click', '.tenants-login', loginOnTenantHandler);
        };

        addBinding();
        renderTenants();

    };
});
