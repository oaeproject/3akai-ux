try {
  this["Module"] = Module;
} catch (e) {
  this["Module"] = Module = {};
}

var ENVIRONMENT_IS_NODE = typeof process === "object";

var ENVIRONMENT_IS_WEB = typeof window === "object";

var ENVIRONMENT_IS_WORKER = typeof importScripts === "function";

var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  Module["print"] = (function(x) {
    process["stdout"].write(x + "\n");
  });
  Module["printErr"] = (function(x) {
    process["stderr"].write(x + "\n");
  });
  var nodeFS = require("fs");
  var nodePath = require("path");
  Module["read"] = (function(filename) {
    filename = nodePath["normalize"](filename);
    var ret = nodeFS["readFileSync"](filename).toString();
    if (!ret && filename != nodePath["resolve"](filename)) {
      filename = path.join(__dirname, "..", "src", filename);
      ret = nodeFS["readFileSync"](filename).toString();
    }
    return ret;
  });
  Module["load"] = (function(f) {
    globalEval(read(f));
  });
  if (!Module["arguments"]) {
    Module["arguments"] = process["argv"].slice(2);
  }
} else if (ENVIRONMENT_IS_SHELL) {
  Module["print"] = print;
  Module["printErr"] = printErr;
  if (typeof read != "undefined") {
    Module["read"] = read;
  } else {
    Module["read"] = (function(f) {
      snarf(f);
    });
  }
  if (!Module["arguments"]) {
    if (typeof scriptArgs != "undefined") {
      Module["arguments"] = scriptArgs;
    } else if (typeof arguments != "undefined") {
      Module["arguments"] = arguments;
    }
  }
} else if (ENVIRONMENT_IS_WEB) {
  if (!Module["print"]) {
    Module["print"] = (function(x) {
      console.log(x);
    });
  }
  if (!Module["printErr"]) {
    Module["printErr"] = (function(x) {
      console.log(x);
    });
  }
  Module["read"] = (function(url) {
    var xhr = new XMLHttpRequest;
    xhr.open("GET", url, false);
    xhr.send(null);
    return xhr.responseText;
  });
  if (!Module["arguments"]) {
    if (typeof arguments != "undefined") {
      Module["arguments"] = arguments;
    }
  }
} else if (ENVIRONMENT_IS_WORKER) {
  Module["load"] = importScripts;
} else {
  throw "Unknown runtime environment. Where are we?";
}

function globalEval(x) {
  eval.call(null, x);
}

if (!Module["load"] == "undefined" && Module["read"]) {
  Module["load"] = (function(f) {
    globalEval(Module["read"](f));
  });
}

if (!Module["printErr"]) {
  Module["printErr"] = (function() {});
}

if (!Module["print"]) {
  Module["print"] = Module["printErr"];
}

if (!Module["arguments"]) {
  Module["arguments"] = [];
}

Module.print = Module["print"];

Module.printErr = Module["printErr"];

var Runtime = {
  stackSave: (function() {
    return STACKTOP;
  }),
  stackRestore: (function(stackTop) {
    STACKTOP = stackTop;
  }),
  forceAlign: (function(target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target / quantum) * quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      var logg = log2(quantum);
      return "((((" + target + ")+" + (quantum - 1) + ")>>" + logg + ")<<" + logg + ")";
    }
    return "Math.ceil((" + target + ")/" + quantum + ")*" + quantum;
  }),
  isNumberType: (function(type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  }),
  isPointerType: function isPointerType(type) {
    return type[type.length - 1] == "*";
  },
  isStructType: function isStructType(type) {
    if (isPointerType(type)) return false;
    if (/^\[\d+\ x\ (.*)\]/.test(type)) return true;
    if (/<?{ ?[^}]* ?}>?/.test(type)) return true;
    return type[0] == "%";
  },
  INT_TYPES: {
    "i1": 0,
    "i8": 0,
    "i16": 0,
    "i32": 0,
    "i64": 0
  },
  FLOAT_TYPES: {
    "float": 0,
    "double": 0
  },
  bitshift64: (function(low, high, op, bits) {
    var ander = Math.pow(2, bits) - 1;
    if (bits < 32) {
      switch (op) {
       case "shl":
        return [ low << bits, high << bits | (low & ander << 32 - bits) >>> 32 - bits ];
       case "ashr":
        return [ (low >>> bits | (high & ander) << 32 - bits) >> 0 >>> 0, high >> bits >>> 0 ];
       case "lshr":
        return [ (low >>> bits | (high & ander) << 32 - bits) >>> 0, high >>> bits ];
      }
    } else if (bits == 32) {
      switch (op) {
       case "shl":
        return [ 0, low ];
       case "ashr":
        return [ high, (high | 0) < 0 ? ander : 0 ];
       case "lshr":
        return [ high, 0 ];
      }
    } else {
      switch (op) {
       case "shl":
        return [ 0, low << bits - 32 ];
       case "ashr":
        return [ high >> bits - 32 >>> 0, (high | 0) < 0 ? ander : 0 ];
       case "lshr":
        return [ high >>> bits - 32, 0 ];
      }
    }
    abort("unknown bitshift64 op: " + [ value, op, bits ]);
  }),
  or64: (function(x, y) {
    var l = x | 0 | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  }),
  and64: (function(x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  }),
  xor64: (function(x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  }),
  getNativeTypeSize: (function(type, quantumSize) {
    if (Runtime.QUANTUM_SIZE == 1) return 1;
    var size = {
      "%i1": 1,
      "%i8": 1,
      "%i16": 2,
      "%i32": 4,
      "%i64": 8,
      "%float": 4,
      "%double": 8
    }["%" + type];
    if (!size) {
      if (type[type.length - 1] == "*") {
        size = Runtime.QUANTUM_SIZE;
      } else if (type[0] == "i") {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 == 0);
        size = bits / 8;
      }
    }
    return size;
  }),
  getNativeFieldSize: (function(type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  }),
  dedup: function dedup(items, ident) {
    var seen = {};
    if (ident) {
      return items.filter((function(item) {
        if (seen[item[ident]]) return false;
        seen[item[ident]] = true;
        return true;
      }));
    } else {
      return items.filter((function(item) {
        if (seen[item]) return false;
        seen[item] = true;
        return true;
      }));
    }
  },
  set: function set() {
    var args = typeof arguments[0] === "object" ? arguments[0] : arguments;
    var ret = {};
    for (var i = 0; i < args.length; i++) {
      ret[args[i]] = 0;
    }
    return ret;
  },
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    type.flatIndexes = type.fields.map((function(field) {
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field);
        alignSize = size;
      } else if (Runtime.isStructType(field)) {
        size = Types.types[field].flatSize;
        alignSize = Types.types[field].alignSize;
      } else {
        throw "Unclear type in struct: " + field + ", in " + type.name_ + " :: " + dump(Types.types[type.name_]);
      }
      alignSize = type.packed ? 1 : Math.min(alignSize, Runtime.QUANTUM_SIZE);
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize);
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr - prev);
      }
      prev = curr;
      return curr;
    }));
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = type.flatFactor != 1;
    return type.flatIndexes;
  },
  generateStructInfo: (function(struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === "undefined" ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      assert(type.fields.length === struct.length, "Number of named fields must match the type for " + typeName);
      alignment = type.flatIndexes;
    } else {
      var type = {
        fields: struct.map((function(item) {
          return item[0];
        }))
      };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach((function(item, i) {
        if (typeof item === "string") {
          ret[item] = alignment[i] + offset;
        } else {
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      }));
    } else {
      struct.forEach((function(item, i) {
        ret[item[1]] = alignment[i];
      }));
    }
    return ret;
  }),
  addFunction: (function(func) {
    var ret = FUNCTION_TABLE.length;
    FUNCTION_TABLE.push(func);
    FUNCTION_TABLE.push(0);
    return ret;
  }),
  stackAlloc: function stackAlloc(size) {
    var ret = STACKTOP;
    STACKTOP += size;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    return ret;
  },
  staticAlloc: function staticAlloc(size) {
    var ret = STATICTOP;
    STATICTOP += size;
    STATICTOP = STATICTOP + 3 >> 2 << 2;
    if (STATICTOP >= TOTAL_MEMORY) enlargeMemory();
    return ret;
  },
  alignMemory: function alignMemory(size, quantum) {
    var ret = size = Math.ceil(size / (quantum ? quantum : 4)) * (quantum ? quantum : 4);
    return ret;
  },
  makeBigInt: function makeBigInt(low, high, unsigned) {
    var ret = unsigned ? (low >>> 0) + (high >>> 0) * 4294967296 : (low >>> 0) + (high | 0) * 4294967296;
    return ret;
  },
  QUANTUM_SIZE: 4,
  __dummy__: 0
};

var CorrectionsMonitor = {
  MAX_ALLOWED: 0,
  corrections: 0,
  sigs: {},
  note: (function(type, succeed, sig) {
    if (!succeed) {
      this.corrections++;
      if (this.corrections >= this.MAX_ALLOWED) abort("\n\nToo many corrections!");
    }
  }),
  print: (function() {})
};

var __THREW__ = false;

var ABORT = false;

var undef = 0;

var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD;

var tempI64, tempI64b;

function abort(text) {
  Module.print(text + ":\n" + (new Error).stack);
  ABORT = true;
  throw "Assertion: " + text;
}

function assert(condition, text) {
  if (!condition) {
    abort("Assertion failed: " + text);
  }
}

var globalScope = this;

function ccall(ident, returnType, argTypes, args) {
  var stack = 0;
  function toC(value, type) {
    if (type == "string") {
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length + 1);
      writeStringToMemory(value, ret);
      return ret;
    } else if (type == "array") {
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length);
      writeArrayToMemory(value, ret);
      return ret;
    }
    return value;
  }
  function fromC(value, type) {
    if (type == "string") {
      return Pointer_stringify(value);
    }
    assert(type != "array");
    return value;
  }
  try {
    var func = eval("_" + ident);
  } catch (e) {
    try {
      func = globalScope["Module"]["_" + ident];
    } catch (e) {}
  }
  assert(func, "Cannot call unknown function " + ident + " (perhaps LLVM optimizations or closure removed it?)");
  var i = 0;
  var cArgs = args ? args.map((function(arg) {
    return toC(arg, argTypes[i++]);
  })) : [];
  var ret = fromC(func.apply(null, cArgs), returnType);
  if (stack) Runtime.stackRestore(stack);
  return ret;
}

Module["ccall"] = ccall;

function cwrap(ident, returnType, argTypes) {
  return (function() {
    return ccall(ident, returnType, argTypes, Array.prototype.slice.call(arguments));
  });
}

Module["cwrap"] = cwrap;

function setValue(ptr, value, type, noSafe) {
  type = type || "i8";
  if (type[type.length - 1] === "*") type = "i32";
  switch (type) {
   case "i1":
    HEAP8[ptr] = value;
    break;
   case "i8":
    HEAP8[ptr] = value;
    break;
   case "i16":
    HEAP16[ptr >> 1] = value;
    break;
   case "i32":
    HEAP32[ptr >> 2] = value;
    break;
   case "i64":
    HEAP32[ptr >> 2] = value;
    break;
   case "float":
    HEAPF32[ptr >> 2] = value;
    break;
   case "double":
    tempDoubleF64[0] = value, HEAP32[ptr >> 2] = tempDoubleI32[0], HEAP32[ptr + 4 >> 2] = tempDoubleI32[1];
    break;
   default:
    abort("invalid type for setValue: " + type);
  }
}

Module["setValue"] = setValue;

function getValue(ptr, type, noSafe) {
  type = type || "i8";
  if (type[type.length - 1] === "*") type = "i32";
  switch (type) {
   case "i1":
    return HEAP8[ptr];
   case "i8":
    return HEAP8[ptr];
   case "i16":
    return HEAP16[ptr >> 1];
   case "i32":
    return HEAP32[ptr >> 2];
   case "i64":
    return HEAP32[ptr >> 2];
   case "float":
    return HEAPF32[ptr >> 2];
   case "double":
    return tempDoubleI32[0] = HEAP32[ptr >> 2], tempDoubleI32[1] = HEAP32[ptr + 4 >> 2], tempDoubleF64[0];
   default:
    abort("invalid type for setValue: " + type);
  }
  return null;
}

Module["getValue"] = getValue;

var ALLOC_NORMAL = 0;

var ALLOC_STACK = 1;

var ALLOC_STATIC = 2;

Module["ALLOC_NORMAL"] = ALLOC_NORMAL;

Module["ALLOC_STACK"] = ALLOC_STACK;

Module["ALLOC_STATIC"] = ALLOC_STATIC;

function allocate(slab, types, allocator) {
  var zeroinit, size;
  if (typeof slab === "number") {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }
  var singleType = typeof types === "string" ? types : null;
  var ret = [ _malloc, Runtime.stackAlloc, Runtime.staticAlloc ][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  if (zeroinit) {
    _memset(ret, 0, size);
    return ret;
  }
  var i = 0, type;
  while (i < size) {
    var curr = slab[i];
    if (typeof curr === "function") {
      curr = Runtime.getFunctionIndex(curr);
    }
    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    if (type == "i64") type = "i32";
    setValue(ret + i, curr, type);
    i += Runtime.getNativeTypeSize(type);
  }
  return ret;
}

Module["allocate"] = allocate;

function Pointer_stringify(ptr, length) {
  var nullTerminated = typeof length == "undefined";
  var ret = "";
  var i = 0;
  var t;
  var nullByte = String.fromCharCode(0);
  while (1) {
    t = String.fromCharCode(HEAPU8[ptr + i]);
    if (nullTerminated && t == nullByte) {
      break;
    } else {}
    ret += t;
    i += 1;
    if (!nullTerminated && i == length) {
      break;
    }
  }
  return ret;
}

Module["Pointer_stringify"] = Pointer_stringify;

function Array_stringify(array) {
  var ret = "";
  for (var i = 0; i < array.length; i++) {
    ret += String.fromCharCode(array[i]);
  }
  return ret;
}

Module["Array_stringify"] = Array_stringify;

var FUNCTION_TABLE;

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  return x + 4095 >> 12 << 12;
}

var HEAP;

var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STACK_ROOT, STACKTOP, STACK_MAX;

var STATICTOP;

function enlargeMemory() {
  while (TOTAL_MEMORY <= STATICTOP) {
    TOTAL_MEMORY = alignMemoryPage(2 * TOTAL_MEMORY);
  }
  var oldHEAP8 = HEAP8;
  var buffer = new ArrayBuffer(TOTAL_MEMORY);
  HEAP8 = new Int8Array(buffer);
  HEAP16 = new Int16Array(buffer);
  HEAP32 = new Int32Array(buffer);
  HEAPU8 = new Uint8Array(buffer);
  HEAPU16 = new Uint16Array(buffer);
  HEAPU32 = new Uint32Array(buffer);
  HEAPF32 = new Float32Array(buffer);
  HEAPF64 = new Float64Array(buffer);
  HEAP8.set(oldHEAP8);
}

var TOTAL_STACK = Module["TOTAL_STACK"] || 5242880;

var TOTAL_MEMORY = Module["TOTAL_MEMORY"] || 10485760;

var FAST_MEMORY = Module["FAST_MEMORY"] || 2097152;

assert(!!Int32Array && !!Float64Array && !!(new Int32Array(1))["subarray"] && !!(new Int32Array(1))["set"], "Cannot fallback to non-typed array case: Code is too specialized");

var buffer = new ArrayBuffer(TOTAL_MEMORY);

HEAP8 = new Int8Array(buffer);

HEAP16 = new Int16Array(buffer);

HEAP32 = new Int32Array(buffer);

HEAPU8 = new Uint8Array(buffer);

HEAPU16 = new Uint16Array(buffer);

HEAPU32 = new Uint32Array(buffer);

HEAPF32 = new Float32Array(buffer);

HEAPF64 = new Float64Array(buffer);

HEAP32[0] = 255;

assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, "Typed arrays 2 must be run on a little-endian system");

var base = intArrayFromString("(null)");

STATICTOP = base.length;

for (var i = 0; i < base.length; i++) {
  HEAP8[i] = base[i];
}

Module["HEAP"] = HEAP;

Module["HEAP8"] = HEAP8;

Module["HEAP16"] = HEAP16;

Module["HEAP32"] = HEAP32;

Module["HEAPU8"] = HEAPU8;

Module["HEAPU16"] = HEAPU16;

Module["HEAPU32"] = HEAPU32;

Module["HEAPF32"] = HEAPF32;

Module["HEAPF64"] = HEAPF64;

STACK_ROOT = STACKTOP = Runtime.alignMemory(STATICTOP);

STACK_MAX = STACK_ROOT + TOTAL_STACK;

var tempDoublePtr = Runtime.alignMemory(STACK_MAX, 8);

var tempDoubleI8 = HEAP8.subarray(tempDoublePtr);

var tempDoubleI32 = HEAP32.subarray(tempDoublePtr >> 2);

var tempDoubleF32 = HEAPF32.subarray(tempDoublePtr >> 2);

var tempDoubleF64 = HEAPF64.subarray(tempDoublePtr >> 3);

function copyTempFloat(ptr) {
  tempDoubleI8[0] = HEAP8[ptr];
  tempDoubleI8[1] = HEAP8[ptr + 1];
  tempDoubleI8[2] = HEAP8[ptr + 2];
  tempDoubleI8[3] = HEAP8[ptr + 3];
}

function copyTempDouble(ptr) {
  tempDoubleI8[0] = HEAP8[ptr];
  tempDoubleI8[1] = HEAP8[ptr + 1];
  tempDoubleI8[2] = HEAP8[ptr + 2];
  tempDoubleI8[3] = HEAP8[ptr + 3];
  tempDoubleI8[4] = HEAP8[ptr + 4];
  tempDoubleI8[5] = HEAP8[ptr + 5];
  tempDoubleI8[6] = HEAP8[ptr + 6];
  tempDoubleI8[7] = HEAP8[ptr + 7];
}

STACK_MAX = tempDoublePtr + 8;

STATICTOP = alignMemoryPage(STACK_MAX);

function callRuntimeCallbacks(callbacks) {
  while (callbacks.length > 0) {
    var callback = callbacks.shift();
    var func = callback.func;
    if (typeof func === "number") {
      func = FUNCTION_TABLE[func];
    }
    func(callback.arg === undefined ? null : callback.arg);
  }
}

var __ATINIT__ = [];

var __ATMAIN__ = [];

var __ATEXIT__ = [];

function initRuntime() {
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  CorrectionsMonitor.print();
}

function Array_copy(ptr, num) {
  return Array.prototype.slice.call(HEAP8.subarray(ptr, ptr + num));
  return HEAP.slice(ptr, ptr + num);
}

Module["Array_copy"] = Array_copy;

function TypedArray_copy(ptr, num, offset) {
  if (offset === undefined) {
    offset = 0;
  }
  var arr = new Uint8Array(num - offset);
  for (var i = offset; i < num; ++i) {
    arr[i - offset] = HEAP8[ptr + i];
  }
  return arr.buffer;
}

Module["TypedArray_copy"] = TypedArray_copy;

function String_len(ptr) {
  var i = 0;
  while (HEAP8[ptr + i]) i++;
  return i;
}

Module["String_len"] = String_len;

function String_copy(ptr, addZero) {
  var len = String_len(ptr);
  if (addZero) len++;
  var ret = Array_copy(ptr, len);
  if (addZero) ret[len - 1] = 0;
  return ret;
}

Module["String_copy"] = String_copy;

function intArrayFromString(stringy, dontAddNull, length) {
  var ret = [];
  var t;
  var i = 0;
  if (length === undefined) {
    length = stringy.length;
  }
  while (i < length) {
    var chr = stringy.charCodeAt(i);
    if (chr > 255) {
      chr &= 255;
    }
    ret.push(chr);
    i = i + 1;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}

Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 255) {
      chr &= 255;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join("");
}

Module["intArrayToString"] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var i = 0;
  while (i < string.length) {
    var chr = string.charCodeAt(i);
    if (chr > 255) {
      chr &= 255;
    }
    HEAP8[buffer + i] = chr;
    i = i + 1;
  }
  if (!dontAddNull) {
    HEAP8[buffer + i] = 0;
  }
}

Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[buffer + i] = array[i];
  }
}

Module["writeArrayToMemory"] = writeArrayToMemory;

var STRING_TABLE = [];

function unSign(value, bits, ignore, sig) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2 * Math.abs(1 << bits - 1) + value : Math.pow(2, bits) + value;
}

function reSign(value, bits, ignore, sig) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << bits - 1) : Math.pow(2, bits - 1);
  if (value >= half && (bits <= 32 || value > half)) {
    value = -2 * half + value;
  }
  return value;
}

var runDependencies = 0;

function addRunDependency() {
  runDependencies++;
  if (Module["monitorRunDependencies"]) {
    Module["monitorRunDependencies"](runDependencies);
  }
}

function removeRunDependency() {
  runDependencies--;
  if (Module["monitorRunDependencies"]) {
    Module["monitorRunDependencies"](runDependencies);
  }
  if (runDependencies == 0) run();
}

function _pngcrush_default_read_data($png_ptr, $data, $length) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $call = _png_get_io_ptr($png_ptr);
    var $0 = $call;
    var $call1 = _fread($data, 1, $length, $0);
    if (($call1 | 0) == ($length | 0)) {
      __label__ = 3;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $1 = $png_ptr;
    _png_error($1, STRING_TABLE.__str1705 | 0);
    __label__ = 3;
    break;
   case 3:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_defaultwrite_data($png_ptr, $data) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $call = _png_get_io_ptr($png_ptr);
    var $0 = $call;
    var $call1 = _fwrite($data, 1, 8, $0);
    if (($call1 | 0) == 8) {
      __label__ = 3;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $1 = $png_ptr;
    _png_error($1, STRING_TABLE.__str11086 | 0);
    __label__ = 3;
    break;
   case 3:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_debug_malloc($png_ptr, $size) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($size | 0) == 0) {
      var $retval_0 = 0;
      __label__ = 6;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $0 = $png_ptr;
    var $call = _png_malloc_default($0, 12);
    var $1 = $call;
    var $size1 = $call;
    HEAP32[$size1 >> 2] = $size;
    var $add = HEAP32[_current_allocation >> 2] + $size | 0;
    HEAP32[_current_allocation >> 2] = $add;
    if (($add | 0) > (HEAP32[_maximum_allocation >> 2] | 0)) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    HEAP32[_maximum_allocation >> 2] = $add;
    __label__ = 4;
    break;
   case 4:
    var $call5 = _png_malloc_default($0, $size);
    var $4 = $call + 4 | 0;
    HEAP32[$4 >> 2] = $call5;
    var $5 = HEAP32[_pinformation >> 2];
    HEAP32[$call + 8 >> 2] = $5;
    HEAP32[_pinformation >> 2] = $1;
    var $7 = HEAP32[$size1 >> 2];
    _memset($call5, -35, $7, 1);
    if ((HEAP32[_verbose >> 2] | 0) > 2) {
      __label__ = 5;
      break;
    } else {
      var $retval_0 = $call5;
      __label__ = 6;
      break;
    }
   case 5:
    var $9 = HEAP32[_stdout >> 2];
    var $10 = $call5;
    var $call11 = _fprintf($9, STRING_TABLE.__str2 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $10, HEAP32[tempInt + 4 >> 2] = $size, tempInt));
    var $retval_0 = HEAP32[$4 >> 2];
    __label__ = 6;
    break;
   case 6:
    var $retval_0;
    return $retval_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_debug_free($png_ptr, $ptr) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0) {
      __label__ = 2;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 2:
    var $0 = HEAP32[_stdout >> 2];
    var $1 = _fwrite(STRING_TABLE.__str3 | 0, 32, 1, $0);
    __label__ = 3;
    break;
   case 3:
    if (($ptr | 0) == 0) {
      __label__ = 14;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $ppinfo_0 = _pinformation;
    var $2 = HEAP32[_pinformation >> 2];
    __label__ = 5;
    break;
   case 5:
    var $2;
    var $ppinfo_0;
    var $next = $2 + 8 | 0;
    var $4 = HEAP32[$next >> 2];
    if ((HEAP32[$2 + 4 >> 2] | 0) == ($ptr | 0)) {
      __label__ = 6;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 6:
    HEAP32[$ppinfo_0 >> 2] = $4;
    var $size = $2 | 0;
    var $5 = HEAP32[$size >> 2];
    var $sub = HEAP32[_current_allocation >> 2] - $5 | 0;
    HEAP32[_current_allocation >> 2] = $sub;
    if (($sub | 0) < 0) {
      __label__ = 7;
      break;
    } else {
      var $9 = $5;
      __label__ = 8;
      break;
    }
   case 7:
    var $7 = HEAP32[_stdout >> 2];
    var $8 = _fwrite(STRING_TABLE.__str4 | 0, 25, 1, $7);
    var $9 = HEAP32[$size >> 2];
    __label__ = 8;
    break;
   case 8:
    var $9;
    _memset($ptr, 85, $9, 1);
    if ((HEAP32[_verbose >> 2] | 0) > 2) {
      __label__ = 9;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 9:
    var $11 = HEAP32[_stdout >> 2];
    var $12 = $ptr;
    var $13 = HEAP32[$size >> 2];
    var $call14 = _fprintf($11, STRING_TABLE.__str5 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $12, HEAP32[tempInt + 4 >> 2] = $13, tempInt));
    __label__ = 10;
    break;
   case 10:
    var $15 = $png_ptr;
    _png_free_default($15, $2);
    var $_pre_phi = $15;
    __label__ = 13;
    break;
   case 11:
    if (($4 | 0) == 0) {
      __label__ = 12;
      break;
    } else {
      var $ppinfo_0 = $next;
      var $2 = $4;
      __label__ = 5;
      break;
    }
   case 12:
    var $16 = HEAP32[_stdout >> 2];
    var $17 = $ptr;
    var $call20 = _fprintf($16, STRING_TABLE.__str6 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $17, tempInt));
    var $_pre_phi = $png_ptr;
    __label__ = 13;
    break;
   case 13:
    var $_pre_phi;
    _png_free_default($_pre_phi, $ptr);
    __label__ = 14;
    break;
   case 14:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_debug_free["X"] = 1;

function _pngcrush_pause() {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if ((HEAP32[_pauses >> 2] | 0) > 0) {
      __label__ = 2;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 2:
    var $1 = HEAP32[_stdout >> 2];
    var $2 = _fwrite(STRING_TABLE.__str7 | 0, 31, 1, $1);
    var $3 = HEAP32[_stdin >> 2];
    var $call1 = _getc($3);
    __label__ = 3;
    break;
   case 3:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_skip_chunk($png_ptr) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $buff = __stackBase__;
    var $arraydecay = $buff | 0;
    _pngcrush_default_read_data($png_ptr, $arraydecay, 4);
    var $arrayidx = $buff + 3 | 0;
    var $arrayidx1 = $buff + 2 | 0;
    var $arrayidx3 = $buff + 1 | 0;
    var $add10 = (HEAPU8[$arrayidx1] & 255) << 8 | HEAPU8[$arrayidx] & 255 | (HEAPU8[$arrayidx3] & 255) << 16 | (HEAPU8[$arraydecay] & 255) << 24;
    _pngcrush_default_read_data($png_ptr, $arraydecay, 4);
    if ((HEAP32[_verbose >> 2] | 0) > 0) {
      __label__ = 2;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 2:
    var $conv14 = HEAPU8[$arraydecay] & 255;
    var $conv16 = HEAPU8[$arrayidx3] & 255;
    var $conv18 = HEAPU8[$arrayidx1] & 255;
    var $conv20 = HEAPU8[$arrayidx] & 255;
    var $call = _printf(STRING_TABLE.__str8 | 0, (tempInt = STACKTOP, STACKTOP += 16, HEAP32[tempInt >> 2] = $conv14, HEAP32[tempInt + 4 >> 2] = $conv16, HEAP32[tempInt + 8 >> 2] = $conv18, HEAP32[tempInt + 12 >> 2] = $conv20, tempInt));
    __label__ = 3;
    break;
   case 3:
    if (($add10 | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      var $i_02 = 0;
      __label__ = 4;
      break;
    }
   case 4:
    var $i_02;
    _pngcrush_default_read_data($png_ptr, $arraydecay, 1);
    var $inc = $i_02 + 1 | 0;
    if (($inc | 0) == ($add10 | 0)) {
      __label__ = 5;
      break;
    } else {
      var $i_02 = $inc;
      __label__ = 4;
      break;
    }
   case 5:
    _pngcrush_default_read_data($png_ptr, $arraydecay, 4);
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _keep_unknown_chunk($name, $argv) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $0 = HEAP32[_remove_chunks >> 2];
    if (($0 | 0) == 0) {
      var $retval_0 = 1;
      __label__ = 28;
      break;
    } else {
      var $i_0 = 1;
      __label__ = 2;
      break;
    }
   case 2:
    var $i_0;
    if (($i_0 | 0) > ($0 | 0)) {
      var $retval_0 = 1;
      __label__ = 28;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $1 = HEAP32[$argv + ($i_0 << 2) >> 2];
    var $call = _strncmp($1, STRING_TABLE.__str9 | 0, 4);
    if (($call | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      var $i_1 = $i_0;
      __label__ = 27;
      break;
    }
   case 4:
    var $inc = $i_0 + 1 | 0;
    var $2 = HEAP32[$argv + ($inc << 2) >> 2];
    var $call4 = _strncmp($2, STRING_TABLE.__str10 | 0, 3);
    var $tobool5 = ($call4 | 0) == 0;
    var $call10 = _strncmp($2, $name, 4);
    if (($call10 | 0) == 0) {
      var $retval_0 = 0;
      __label__ = 28;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $call12 = _strncmp($name, STRING_TABLE.__str11 | 0, 4);
    if (($call12 | 0) == 0) {
      __label__ = 6;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 6:
    var $call15 = _strncmp($2, STRING_TABLE.__str12 | 0, 4);
    if (($call15 | 0) != 0 & ($tobool5 ^ 1)) {
      __label__ = 7;
      break;
    } else {
      var $retval_0 = 0;
      __label__ = 28;
      break;
    }
   case 7:
    var $call20 = _strncmp($name, STRING_TABLE.__str13 | 0, 4);
    if (($call20 | 0) == 0) {
      __label__ = 8;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 8:
    var $call24 = _strncmp($2, STRING_TABLE.__str14 | 0, 4);
    if (($call24 | 0) != 0 & ($tobool5 ^ 1)) {
      __label__ = 9;
      break;
    } else {
      var $retval_0 = 0;
      __label__ = 28;
      break;
    }
   case 9:
    var $call29 = _strncmp($name, STRING_TABLE.__str15 | 0, 4);
    if (($call29 | 0) == 0) {
      __label__ = 10;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 10:
    var $call33 = _strncmp($2, STRING_TABLE.__str16 | 0, 4);
    if (($call33 | 0) != 0 & ($tobool5 ^ 1)) {
      __label__ = 11;
      break;
    } else {
      var $retval_0 = 0;
      __label__ = 28;
      break;
    }
   case 11:
    var $call38 = _strncmp($name, STRING_TABLE.__str17 | 0, 4);
    if (($call38 | 0) == 0) {
      __label__ = 12;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 12:
    var $call42 = _strncmp($2, STRING_TABLE.__str18 | 0, 4);
    if (($call42 | 0) != 0 & ($tobool5 ^ 1)) {
      __label__ = 13;
      break;
    } else {
      var $retval_0 = 0;
      __label__ = 28;
      break;
    }
   case 13:
    var $call47 = _strncmp($name, STRING_TABLE.__str19 | 0, 4);
    if (($call47 | 0) == 0) {
      __label__ = 14;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 14:
    var $call51 = _strncmp($2, STRING_TABLE.__str20 | 0, 4);
    if (($call51 | 0) != 0 & ($tobool5 ^ 1)) {
      __label__ = 15;
      break;
    } else {
      var $retval_0 = 0;
      __label__ = 28;
      break;
    }
   case 15:
    var $call56 = _strncmp($name, STRING_TABLE.__str21 | 0, 4);
    if (($call56 | 0) == 0) {
      __label__ = 16;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 16:
    var $call60 = _strncmp($2, STRING_TABLE.__str22 | 0, 4);
    if (($call60 | 0) != 0 & ($tobool5 ^ 1)) {
      __label__ = 17;
      break;
    } else {
      var $retval_0 = 0;
      __label__ = 28;
      break;
    }
   case 17:
    var $call65 = _strncmp($name, STRING_TABLE.__str23 | 0, 4);
    if (($call65 | 0) == 0) {
      __label__ = 18;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 18:
    var $call69 = _strncmp($2, STRING_TABLE.__str24 | 0, 4);
    if (($call69 | 0) != 0 & ($tobool5 ^ 1)) {
      __label__ = 19;
      break;
    } else {
      var $retval_0 = 0;
      __label__ = 28;
      break;
    }
   case 19:
    var $call74 = _strncmp($name, STRING_TABLE.__str25 | 0, 4);
    if (($call74 | 0) == 0) {
      __label__ = 20;
      break;
    } else {
      __label__ = 21;
      break;
    }
   case 20:
    var $call78 = _strncmp($2, STRING_TABLE.__str26 | 0, 4);
    if (($call78 | 0) != 0 & ($tobool5 ^ 1)) {
      __label__ = 21;
      break;
    } else {
      var $retval_0 = 0;
      __label__ = 28;
      break;
    }
   case 21:
    var $call83 = _strncmp($name, STRING_TABLE.__str27 | 0, 4);
    if (($call83 | 0) == 0) {
      __label__ = 22;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 22:
    var $call87 = _strncmp($2, STRING_TABLE.__str28 | 0, 4);
    if (($call87 | 0) != 0 & ($tobool5 ^ 1)) {
      __label__ = 23;
      break;
    } else {
      var $retval_0 = 0;
      __label__ = 28;
      break;
    }
   case 23:
    var $call92 = _strncmp($name, STRING_TABLE.__str29 | 0, 4);
    if (($call92 | 0) == 0) {
      __label__ = 24;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 24:
    var $call96 = _strncmp($2, STRING_TABLE.__str30 | 0, 4);
    if (($call96 | 0) != 0 & ($tobool5 ^ 1)) {
      __label__ = 25;
      break;
    } else {
      var $retval_0 = 0;
      __label__ = 28;
      break;
    }
   case 25:
    var $call101 = _strncmp($name, STRING_TABLE.__str31 | 0, 4);
    if (($call101 | 0) == 0) {
      __label__ = 26;
      break;
    } else {
      var $i_1 = $inc;
      __label__ = 27;
      break;
    }
   case 26:
    var $call105 = _strncmp($2, STRING_TABLE.__str32 | 0, 4);
    if (($call105 | 0) != 0 & ($tobool5 ^ 1)) {
      var $i_1 = $inc;
      __label__ = 27;
      break;
    } else {
      var $retval_0 = 0;
      __label__ = 28;
      break;
    }
   case 27:
    var $i_1;
    var $i_0 = $i_1 + 1 | 0;
    __label__ = 2;
    break;
   case 28:
    var $retval_0;
    return $retval_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_keep_unknown_chunk["X"] = 1;

function _keep_chunk($name, $argv) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if ((HEAP32[_verbose >> 2] | 0) > 2 & HEAPU8[_first_trial_b]) {
      __label__ = 2;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 2:
    var $1 = HEAP32[_stdout >> 2];
    var $call = _fprintf($1, STRING_TABLE.__str33 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $name, tempInt));
    __label__ = 3;
    break;
   case 3:
    var $2 = HEAP32[_remove_chunks >> 2];
    if (($2 | 0) == 0) {
      var $retval_0 = 1;
      __label__ = 65;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    if ((HEAP32[_verbose >> 2] | 0) > 1 & HEAPU8[_first_trial_b]) {
      __label__ = 5;
      break;
    } else {
      var $5 = $2;
      __label__ = 6;
      break;
    }
   case 5:
    var $4 = HEAP32[_stdout >> 2];
    var $call8 = _fprintf($4, STRING_TABLE.__str34 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $name, tempInt));
    var $5 = HEAP32[_remove_chunks >> 2];
    __label__ = 6;
    break;
   case 6:
    var $5;
    var $i_0 = 1;
    __label__ = 7;
    break;
   case 7:
    var $i_0;
    if (($i_0 | 0) > ($5 | 0)) {
      __label__ = 63;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    var $6 = HEAP32[$argv + ($i_0 << 2) >> 2];
    var $call11 = _strncmp($6, STRING_TABLE.__str9 | 0, 4);
    if (($call11 | 0) == 0) {
      __label__ = 9;
      break;
    } else {
      var $i_1 = $i_0;
      __label__ = 62;
      break;
    }
   case 9:
    var $inc = $i_0 + 1 | 0;
    var $7 = HEAP32[$argv + ($inc << 2) >> 2];
    var $call15 = _strncmp($7, STRING_TABLE.__str10 | 0, 3);
    if (($call15 | 0) == 0) {
      __label__ = 10;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 10:
    var $call21 = _strncmp($7, STRING_TABLE.__str35 | 0, 4);
    if (($call21 | 0) == 0) {
      __label__ = 11;
      break;
    } else {
      var $allt_0 = 1;
      var $allb_0 = 1;
      var $alla_0 = 0;
      __label__ = 14;
      break;
    }
   case 11:
    var $allt_0 = 1;
    var $allb_0 = 1;
    var $alla_0 = 1;
    __label__ = 14;
    break;
   case 12:
    var $call27 = _strncmp($7, STRING_TABLE.__str511184 | 0, 4);
    if (($call27 | 0) == 0) {
      __label__ = 13;
      break;
    } else {
      var $allt_0 = 0;
      var $allb_0 = 0;
      var $alla_0 = 0;
      __label__ = 14;
      break;
    }
   case 13:
    var $allt_0 = 1;
    var $allb_0 = 0;
    var $alla_0 = 0;
    __label__ = 14;
    break;
   case 14:
    var $alla_0;
    var $allb_0;
    var $allt_0;
    var $call34 = _strncmp($7, $name, 4);
    if (($call34 | 0) == 0) {
      __label__ = 60;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 15:
    var $call36 = _strncmp($name, STRING_TABLE.__str37 | 0, 4);
    if (($call36 | 0) == 0) {
      __label__ = 16;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 16:
    var $call40 = _strncmp($7, STRING_TABLE.__str38 | 0, 4);
    if (($call40 | 0) == 0) {
      __label__ = 60;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 17:
    var $call43 = _strncmp($name, STRING_TABLE.__str39 | 0, 4);
    if (($call43 | 0) == 0) {
      __label__ = 18;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 18:
    var $call47 = _strncmp($7, STRING_TABLE.__str40 | 0, 4);
    if (($call47 | 0) != 0 & ($allb_0 | 0) == 0) {
      __label__ = 19;
      break;
    } else {
      __label__ = 60;
      break;
    }
   case 19:
    var $call52 = _strncmp($name, STRING_TABLE.__str11 | 0, 4);
    if (($call52 | 0) == 0) {
      __label__ = 20;
      break;
    } else {
      __label__ = 21;
      break;
    }
   case 20:
    var $call56 = _strncmp($7, STRING_TABLE.__str12 | 0, 4);
    if (($call56 | 0) != 0 & ($allb_0 | 0) == 0) {
      __label__ = 21;
      break;
    } else {
      __label__ = 60;
      break;
    }
   case 21:
    var $call61 = _strncmp($name, STRING_TABLE.__str13 | 0, 4);
    if (($call61 | 0) == 0) {
      __label__ = 22;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 22:
    var $call65 = _strncmp($7, STRING_TABLE.__str14 | 0, 4);
    if (($call65 | 0) != 0 & ($allb_0 | 0) == 0) {
      __label__ = 23;
      break;
    } else {
      __label__ = 60;
      break;
    }
   case 23:
    var $call70 = _strncmp($name, STRING_TABLE.__str41 | 0, 4);
    if (($call70 | 0) == 0) {
      __label__ = 24;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 24:
    var $call74 = _strncmp($7, STRING_TABLE.__str42 | 0, 4);
    if (($call74 | 0) != 0 & ($alla_0 | 0) == 0) {
      __label__ = 25;
      break;
    } else {
      __label__ = 60;
      break;
    }
   case 25:
    var $call79 = _strncmp($name, STRING_TABLE.__str15 | 0, 4);
    if (($call79 | 0) == 0) {
      __label__ = 26;
      break;
    } else {
      __label__ = 27;
      break;
    }
   case 26:
    var $call83 = _strncmp($7, STRING_TABLE.__str16 | 0, 4);
    if (($call83 | 0) != 0 & ($allb_0 | 0) == 0) {
      __label__ = 27;
      break;
    } else {
      __label__ = 60;
      break;
    }
   case 27:
    var $call88 = _strncmp($name, STRING_TABLE.__str17 | 0, 4);
    if (($call88 | 0) == 0) {
      __label__ = 28;
      break;
    } else {
      __label__ = 29;
      break;
    }
   case 28:
    var $call92 = _strncmp($7, STRING_TABLE.__str18 | 0, 4);
    if (($call92 | 0) != 0 & ($allb_0 | 0) == 0) {
      __label__ = 29;
      break;
    } else {
      __label__ = 60;
      break;
    }
   case 29:
    var $call97 = _strncmp($name, STRING_TABLE.__str19 | 0, 4);
    if (($call97 | 0) == 0) {
      __label__ = 30;
      break;
    } else {
      __label__ = 31;
      break;
    }
   case 30:
    var $call101 = _strncmp($7, STRING_TABLE.__str20 | 0, 4);
    if (($call101 | 0) != 0 & ($allb_0 | 0) == 0) {
      __label__ = 31;
      break;
    } else {
      __label__ = 60;
      break;
    }
   case 31:
    var $call106 = _strncmp($name, STRING_TABLE.__str21 | 0, 4);
    if (($call106 | 0) == 0) {
      __label__ = 32;
      break;
    } else {
      __label__ = 33;
      break;
    }
   case 32:
    var $call110 = _strncmp($7, STRING_TABLE.__str22 | 0, 4);
    if (($call110 | 0) != 0 & ($allb_0 | 0) == 0) {
      __label__ = 33;
      break;
    } else {
      __label__ = 60;
      break;
    }
   case 33:
    var $call115 = _strncmp($name, STRING_TABLE.__str23 | 0, 4);
    if (($call115 | 0) == 0) {
      __label__ = 34;
      break;
    } else {
      __label__ = 35;
      break;
    }
   case 34:
    var $call119 = _strncmp($7, STRING_TABLE.__str24 | 0, 4);
    if (($call119 | 0) != 0 & ($allb_0 | 0) == 0) {
      __label__ = 35;
      break;
    } else {
      __label__ = 60;
      break;
    }
   case 35:
    var $call124 = _strncmp($name, STRING_TABLE.__str43 | 0, 4);
    if (($call124 | 0) == 0) {
      __label__ = 36;
      break;
    } else {
      __label__ = 37;
      break;
    }
   case 36:
    var $call128 = _strncmp($7, STRING_TABLE.__str44 | 0, 4);
    if (($call128 | 0) != 0 & ($allt_0 | 0) == 0) {
      __label__ = 37;
      break;
    } else {
      __label__ = 60;
      break;
    }
   case 37:
    var $call133 = _strncmp($name, STRING_TABLE.__str45 | 0, 4);
    if (($call133 | 0) == 0) {
      __label__ = 38;
      break;
    } else {
      __label__ = 39;
      break;
    }
   case 38:
    var $call137 = _strncmp($7, STRING_TABLE.__str46 | 0, 4);
    if (($call137 | 0) != 0 & ($allb_0 | 0) == 0) {
      __label__ = 39;
      break;
    } else {
      __label__ = 60;
      break;
    }
   case 39:
    var $call142 = _strncmp($name, STRING_TABLE.__str47 | 0, 4);
    if (($call142 | 0) == 0) {
      __label__ = 40;
      break;
    } else {
      __label__ = 41;
      break;
    }
   case 40:
    var $call146 = _strncmp($7, STRING_TABLE.__str48 | 0, 4);
    if (($call146 | 0) != 0 & ($allb_0 | 0) == 0) {
      __label__ = 41;
      break;
    } else {
      __label__ = 60;
      break;
    }
   case 41:
    var $call151 = _strncmp($name, STRING_TABLE.__str25 | 0, 4);
    if (($call151 | 0) == 0) {
      __label__ = 42;
      break;
    } else {
      __label__ = 43;
      break;
    }
   case 42:
    var $call155 = _strncmp($7, STRING_TABLE.__str26 | 0, 4);
    if (($call155 | 0) != 0 & ($allb_0 | 0) == 0) {
      __label__ = 43;
      break;
    } else {
      __label__ = 60;
      break;
    }
   case 43:
    var $call160 = _strncmp($name, STRING_TABLE.__str49 | 0, 4);
    if (($call160 | 0) == 0) {
      __label__ = 44;
      break;
    } else {
      __label__ = 45;
      break;
    }
   case 44:
    var $call164 = _strncmp($7, STRING_TABLE.__str50 | 0, 4);
    if (($call164 | 0) != 0 & ($allb_0 | 0) == 0) {
      __label__ = 45;
      break;
    } else {
      __label__ = 60;
      break;
    }
   case 45:
    var $call169 = _strncmp($name, STRING_TABLE.__str27 | 0, 4);
    if (($call169 | 0) == 0) {
      __label__ = 46;
      break;
    } else {
      __label__ = 47;
      break;
    }
   case 46:
    var $call173 = _strncmp($7, STRING_TABLE.__str28 | 0, 4);
    if (($call173 | 0) != 0 & ($allb_0 | 0) == 0) {
      __label__ = 47;
      break;
    } else {
      __label__ = 60;
      break;
    }
   case 47:
    var $call178 = _strncmp($name, STRING_TABLE.__str51 | 0, 4);
    if (($call178 | 0) == 0) {
      __label__ = 48;
      break;
    } else {
      __label__ = 49;
      break;
    }
   case 48:
    var $call182 = _strncmp($7, STRING_TABLE.__str52 | 0, 4);
    if (($call182 | 0) != 0 & ($allb_0 | 0) == 0) {
      __label__ = 49;
      break;
    } else {
      __label__ = 60;
      break;
    }
   case 49:
    var $call187 = _strncmp($name, STRING_TABLE.__str53 | 0, 4);
    if (($call187 | 0) == 0) {
      __label__ = 50;
      break;
    } else {
      __label__ = 51;
      break;
    }
   case 50:
    var $call191 = _strncmp($7, STRING_TABLE.__str54 | 0, 4);
    if (($call191 | 0) != 0 & ($allb_0 | 0) == 0) {
      __label__ = 51;
      break;
    } else {
      __label__ = 60;
      break;
    }
   case 51:
    var $call196 = _strncmp($name, STRING_TABLE.__str29 | 0, 4);
    if (($call196 | 0) == 0) {
      __label__ = 52;
      break;
    } else {
      __label__ = 53;
      break;
    }
   case 52:
    var $call200 = _strncmp($7, STRING_TABLE.__str30 | 0, 4);
    if (($call200 | 0) != 0 & ($allb_0 | 0) == 0) {
      __label__ = 53;
      break;
    } else {
      __label__ = 60;
      break;
    }
   case 53:
    var $call205 = _strncmp($name, STRING_TABLE.__str55 | 0, 4);
    var $tobool208 = ($allt_0 | 0) == 0;
    if (($call205 | 0) != 0 | $tobool208) {
      __label__ = 54;
      break;
    } else {
      __label__ = 60;
      break;
    }
   case 54:
    var $call210 = _strncmp($name, STRING_TABLE.__str31 | 0, 4);
    if (($call210 | 0) == 0) {
      __label__ = 55;
      break;
    } else {
      __label__ = 56;
      break;
    }
   case 55:
    var $call214 = _strncmp($7, STRING_TABLE.__str32 | 0, 4);
    if (($call214 | 0) != 0 & ($allb_0 | 0) == 0) {
      __label__ = 56;
      break;
    } else {
      __label__ = 60;
      break;
    }
   case 56:
    var $call219 = _strncmp($name, STRING_TABLE.__str56 | 0, 4);
    if (($call219 | 0) == 0) {
      __label__ = 57;
      break;
    } else {
      __label__ = 58;
      break;
    }
   case 57:
    var $call223 = _strncmp($7, STRING_TABLE.__str57 | 0, 4);
    if (($call223 | 0) == 0) {
      __label__ = 60;
      break;
    } else {
      __label__ = 58;
      break;
    }
   case 58:
    var $call226 = _strncmp($name, STRING_TABLE.__str58 | 0, 4);
    if (($call226 | 0) == 0) {
      __label__ = 59;
      break;
    } else {
      var $i_1 = $inc;
      __label__ = 62;
      break;
    }
   case 59:
    var $call230 = _strncmp($7, STRING_TABLE.__str59 | 0, 4);
    if (($call230 | 0) != 0 & $tobool208) {
      var $i_1 = $inc;
      __label__ = 62;
      break;
    } else {
      __label__ = 60;
      break;
    }
   case 60:
    HEAP32[_things_have_changed >> 2] = 1;
    if ((HEAP32[_verbose >> 2] | 0) > 0 & HEAPU8[_first_trial_b]) {
      __label__ = 61;
      break;
    } else {
      var $retval_0 = 0;
      __label__ = 65;
      break;
    }
   case 61:
    var $9 = HEAP32[_stdout >> 2];
    var $call239 = _fprintf($9, STRING_TABLE.__str60 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $name, tempInt));
    var $retval_0 = 0;
    __label__ = 65;
    break;
   case 62:
    var $i_1;
    var $i_0 = $i_1 + 1 | 0;
    __label__ = 7;
    break;
   case 63:
    if ((HEAP32[_verbose >> 2] | 0) > 1 & HEAPU8[_first_trial_b]) {
      __label__ = 64;
      break;
    } else {
      var $retval_0 = 1;
      __label__ = 65;
      break;
    }
   case 64:
    var $11 = HEAP32[_stdout >> 2];
    var $call248 = _fprintf($11, STRING_TABLE.__str61 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $name, tempInt));
    var $retval_0 = 1;
    __label__ = 65;
    break;
   case 65:
    var $retval_0;
    return $retval_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_keep_chunk["X"] = 1;

function _show_result() {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $call18 = _clock();
    var $conv19 = $call18 >>> 0;
    HEAPF32[_t_stop >> 2] = $conv19;
    var $0 = HEAPF32[_t_start >> 2];
    var $add = HEAPF32[_t_misc >> 2] + ($conv19 - $0);
    HEAPF32[_t_misc >> 2] = $add;
    if ($conv19 < $0) {
      __label__ = 2;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 2:
    var $add24 = $add + 2147483648;
    HEAPF32[_t_misc >> 2] = $add24;
    if ($conv19 < 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $add28 = $add24 + 2147483648;
    HEAPF32[_t_misc >> 2] = $add28;
    __label__ = 4;
    break;
   case 4:
    HEAPF32[_t_start >> 2] = $conv19;
    var $2 = HEAP32[_stdout >> 2];
    var $conv32 = HEAPF32[_t_decode >> 2] / 1e3;
    var $call33 = _fprintf($2, STRING_TABLE.__str65 | 0, (tempInt = STACKTOP, STACKTOP += 8, tempDoubleF64[0] = $conv32, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempInt));
    var $4 = HEAP32[_stdout >> 2];
    var $conv35 = HEAPF32[_t_encode >> 2] / 1e3;
    var $call36 = _fprintf($4, STRING_TABLE.__str66 | 0, (tempInt = STACKTOP, STACKTOP += 8, tempDoubleF64[0] = $conv35, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempInt));
    var $6 = HEAP32[_stdout >> 2];
    var $conv38 = HEAPF32[_t_misc >> 2] / 1e3;
    var $call39 = _fprintf($6, STRING_TABLE.__str67 | 0, (tempInt = STACKTOP, STACKTOP += 8, tempDoubleF64[0] = $conv38, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempInt));
    var $8 = HEAP32[_stdout >> 2];
    var $conv43 = (HEAPF32[_t_misc >> 2] + HEAPF32[_t_decode >> 2] + HEAPF32[_t_encode >> 2]) / 1e3;
    var $call44 = _fprintf($8, STRING_TABLE.__str68 | 0, (tempInt = STACKTOP, STACKTOP += 8, tempDoubleF64[0] = $conv43, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempInt));
    var $12 = HEAP32[_current_allocation >> 2];
    if (($12 | 0) == 0) {
      __label__ = 7;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $13 = HEAP32[_pinformation >> 2];
    var $14 = HEAP32[_stdout >> 2];
    var $call47 = _fprintf($14, STRING_TABLE.__str69 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $12, tempInt));
    if (($13 | 0) == 0) {
      __label__ = 7;
      break;
    } else {
      var $pinfo_02 = $13;
      __label__ = 6;
      break;
    }
   case 6:
    var $pinfo_02;
    var $15 = HEAP32[_stdout >> 2];
    var $16 = HEAP32[$pinfo_02 >> 2];
    var $pointer = $pinfo_02 + 4 | 0;
    var $18 = HEAP32[$pointer >> 2];
    var $call50 = _fprintf($15, STRING_TABLE.__str70 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $16, HEAP32[tempInt + 4 >> 2] = $18, tempInt));
    var $19 = HEAP32[$pointer >> 2];
    _free($19);
    var $20 = HEAP32[$pinfo_02 + 8 >> 2];
    if (($20 | 0) == 0) {
      __label__ = 7;
      break;
    } else {
      var $pinfo_02 = $20;
      __label__ = 6;
      break;
    }
   case 7:
    if ((HEAP32[_found_acTL_chunk >> 2] | 0) == 2 & (HEAP32[_verbose >> 2] | 0) > 0) {
      __label__ = 8;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 8:
    var $23 = HEAP32[_stdout >> 2];
    var $24 = _fwrite(STRING_TABLE.__str71 | 0, 36, 1, $23);
    __label__ = 9;
    break;
   case 9:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_show_result["X"] = 1;

function _main($argc, $argv) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 3896;
  var __label__;
  __label__ = 1;
  var setjmpTable = {
    "411": (function(value) {
      __label__ = 953;
      $call2052 = value;
    }),
    dummy: 0
  };
  while (1) try {
    switch (__label__) {
     case 1:
      var $bit_depth = __stackBase__;
      var $color_type = __stackBase__ + 4;
      var $try_method = __stackBase__ + 8;
      var $fm = __stackBase__ + 812;
      var $lv = __stackBase__ + 1616;
      var $zs = __stackBase__ + 2420;
      var $file_gamma = __stackBase__ + 3224;
      var $number = __stackBase__ + 3228;
      var $number748 = __stackBase__ + 3244;
      var $stat_buf = __stackBase__ + 3260;
      var $stat_in = __stackBase__ + 3332;
      var $stat_out = __stackBase__ + 3404;
      var $exception__env = __stackBase__ + 3476;
      var $chunk_name = __stackBase__ + 3516;
      var $mng_signature = __stackBase__ + 3524;
      var $png_signature = __stackBase__ + 3532;
      var $interlace_method = __stackBase__ + 3540;
      var $compression_method = __stackBase__ + 3544;
      var $filter_method = __stackBase__ + 3548;
      var $true_bits = __stackBase__ + 3552;
      var $background = __stackBase__ + 3560;
      var $backgd = __stackBase__ + 3564;
      var $white_x = __stackBase__ + 3576;
      var $white_y = __stackBase__ + 3580;
      var $red_x = __stackBase__ + 3584;
      var $red_y = __stackBase__ + 3588;
      var $green_x = __stackBase__ + 3592;
      var $green_y = __stackBase__ + 3596;
      var $blue_x = __stackBase__ + 3600;
      var $blue_y = __stackBase__ + 3604;
      var $file_intent = __stackBase__ + 3608;
      var $name = __stackBase__ + 3612;
      var $profile = __stackBase__ + 3616;
      var $proflen = __stackBase__ + 3620;
      var $compression_method2611 = __stackBase__ + 3624;
      var $offset_x = __stackBase__ + 3628;
      var $offset_y = __stackBase__ + 3632;
      var $unit_type = __stackBase__ + 3636;
      var $purpose = __stackBase__ + 3640;
      var $units = __stackBase__ + 3644;
      var $params = __stackBase__ + 3648;
      var $X0 = __stackBase__ + 3652;
      var $X1 = __stackBase__ + 3656;
      var $type = __stackBase__ + 3660;
      var $nparams = __stackBase__ + 3664;
      var $res_x = __stackBase__ + 3668;
      var $res_y = __stackBase__ + 3672;
      var $unit_type2676 = __stackBase__ + 3676;
      var $hist = __stackBase__ + 3680;
      var $trans = __stackBase__ + 3684;
      var $num_trans = __stackBase__ + 3688;
      var $trans_values = __stackBase__ + 3692;
      var $trans_data = __stackBase__ + 3696;
      var $sig_bit = __stackBase__ + 3708;
      var $unit = __stackBase__ + 3712;
      var $scal_width = __stackBase__ + 3716;
      var $scal_height = __stackBase__ + 3724;
      var $entries = __stackBase__ + 3732;
      var $text_ptr = __stackBase__ + 3736;
      var $num_text = __stackBase__ + 3740;
      var $mod_time = __stackBase__ + 3744;
      var $unknowns = __stackBase__ + 3748;
      var $buff = __stackBase__ + 3752;
      var $mng_signature3392 = __stackBase__ + 3784;
      var $true_bits3556 = __stackBase__ + 3792;
      var $text_ptr3703 = __stackBase__ + 3800;
      var $num_text3704 = __stackBase__ + 3804;
      var $mod_time3907 = __stackBase__ + 3808;
      var $unknowns3916 = __stackBase__ + 3812;
      var $stat_buf4073 = __stackBase__ + 3816;
      var $utim = __stackBase__ + 3888;
      HEAP32[$file_gamma >> 2] = 0;
      var $call6 = _clock();
      HEAPF32[_t_start >> 2] = $call6 >>> 0;
      var $0 = HEAP32[$argv >> 2];
      var $call7 = _strncpy(_prog_string | 0, $0, 256);
      HEAP8[_prog_string + 255 | 0] = 0;
      HEAP32[_progname >> 2] = _prog_string | 0;
      var $cp_0 = _prog_string | 0;
      __label__ = 2;
      break;
     case 2:
      var $cp_0;
      var $1 = HEAP8[$cp_0];
      if ($1 << 24 >> 24 == 92 || $1 << 24 >> 24 == 47) {
        __label__ = 3;
        break;
      } else if ($1 << 24 >> 24 == 0) {
        var $i_11524 = 0;
        __label__ = 7;
        break;
      } else {
        var $cp_1 = $cp_0;
        var $2 = $1;
        __label__ = 4;
        break;
      }
     case 3:
      var $incdec_ptr = $cp_0 + 1 | 0;
      HEAP32[_progname >> 2] = $incdec_ptr;
      var $cp_1 = $incdec_ptr;
      var $2 = HEAP8[$incdec_ptr];
      __label__ = 4;
      break;
     case 4:
      var $2;
      var $cp_1;
      if ($2 << 24 >> 24 == 46) {
        __label__ = 5;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 5:
      HEAP8[$cp_1] = 0;
      __label__ = 6;
      break;
     case 6:
      var $cp_0 = $cp_1 + 1 | 0;
      __label__ = 2;
      break;
     case 7:
      var $i_11524;
      HEAP32[$try_method + ($i_11524 << 2) >> 2] = 1;
      HEAP32[$fm + ($i_11524 << 2) >> 2] = 5;
      HEAP32[$lv + ($i_11524 << 2) >> 2] = 9;
      HEAP32[$zs + ($i_11524 << 2) >> 2] = 1;
      var $inc33 = $i_11524 + 1 | 0;
      if (($inc33 | 0) == 200) {
        __label__ = 8;
        break;
      } else {
        var $i_11524 = $inc33;
        __label__ = 7;
        break;
      }
     case 8:
      HEAP32[$fm + 4 >> 2] = 0;
      HEAP32[$lv + 4 >> 2] = 4;
      HEAP32[$zs + 4 >> 2] = 0;
      HEAP32[$fm + 8 >> 2] = 1;
      HEAP32[$lv + 8 >> 2] = 4;
      HEAP32[$zs + 8 >> 2] = 0;
      HEAP32[$lv + 12 >> 2] = 4;
      HEAP32[$fm + 16 >> 2] = 0;
      HEAP32[$fm + 20 >> 2] = 1;
      HEAP32[$zs + 20 >> 2] = 0;
      HEAP32[$zs + 24 >> 2] = 0;
      HEAP32[$fm + 28 >> 2] = 0;
      HEAP32[$zs + 28 >> 2] = 0;
      HEAP32[$fm + 32 >> 2] = 1;
      HEAP32[$lv + 36 >> 2] = 2;
      HEAP32[$zs + 36 >> 2] = 2;
      HEAP32[$fm + 44 >> 2] = 0;
      var $arrayidx56 = $lv + 44 | 0;
      HEAP32[$arrayidx56 >> 2] = 2;
      HEAP32[$zs + 44 >> 2] = 2;
      HEAP32[$fm + 48 >> 2] = 1;
      var $arrayidx56_1 = $lv + 48 | 0;
      HEAP32[$arrayidx56_1 >> 2] = 2;
      HEAP32[$zs + 48 >> 2] = 2;
      HEAP32[$fm + 52 >> 2] = 2;
      var $arrayidx56_2 = $lv + 52 | 0;
      HEAP32[$arrayidx56_2 >> 2] = 2;
      HEAP32[$zs + 52 >> 2] = 2;
      HEAP32[$fm + 56 >> 2] = 3;
      var $arrayidx56_3 = $lv + 56 | 0;
      HEAP32[$arrayidx56_3 >> 2] = 2;
      HEAP32[$zs + 56 >> 2] = 2;
      HEAP32[$fm + 60 >> 2] = 4;
      var $arrayidx56_4 = $lv + 60 | 0;
      HEAP32[$arrayidx56_4 >> 2] = 2;
      HEAP32[$zs + 60 >> 2] = 2;
      HEAP32[$fm + 64 >> 2] = 5;
      var $arrayidx56_5 = $lv + 64 | 0;
      HEAP32[$arrayidx56_5 >> 2] = 2;
      HEAP32[$zs + 64 >> 2] = 2;
      var $storemerge1642801520 = 17;
      var $lev_01521 = 1;
      __label__ = 952;
      break;
     case 9:
      HEAP32[$fm + 500 >> 2] = 0;
      HEAP32[$lv + 500 >> 2] = 1;
      HEAP32[$zs + 500 >> 2] = 3;
      HEAP32[$fm + 504 >> 2] = 1;
      HEAP32[$lv + 504 >> 2] = 1;
      HEAP32[$zs + 504 >> 2] = 3;
      HEAP32[$fm + 508 >> 2] = 2;
      HEAP32[$lv + 508 >> 2] = 1;
      HEAP32[$zs + 508 >> 2] = 3;
      HEAP32[$fm + 512 >> 2] = 3;
      HEAP32[$lv + 512 >> 2] = 1;
      HEAP32[$zs + 512 >> 2] = 3;
      HEAP32[$fm + 516 >> 2] = 4;
      HEAP32[$lv + 516 >> 2] = 1;
      HEAP32[$zs + 516 >> 2] = 3;
      HEAP32[$fm + 520 >> 2] = 5;
      HEAP32[$lv + 520 >> 2] = 1;
      HEAP32[$zs + 520 >> 2] = 3;
      HEAP32[$fm + 524 >> 2] = 0;
      HEAP32[$lv + 524 >> 2] = 4;
      HEAP32[$zs + 524 >> 2] = 3;
      HEAP32[$fm + 528 >> 2] = 1;
      HEAP32[$lv + 528 >> 2] = 4;
      HEAP32[$zs + 528 >> 2] = 3;
      HEAP32[$fm + 532 >> 2] = 2;
      HEAP32[$lv + 532 >> 2] = 4;
      HEAP32[$zs + 532 >> 2] = 3;
      HEAP32[$fm + 536 >> 2] = 3;
      HEAP32[$lv + 536 >> 2] = 4;
      HEAP32[$zs + 536 >> 2] = 3;
      HEAP32[$fm + 540 >> 2] = 4;
      HEAP32[$lv + 540 >> 2] = 4;
      HEAP32[$zs + 540 >> 2] = 3;
      HEAP32[$fm + 544 >> 2] = 5;
      HEAP32[$lv + 544 >> 2] = 4;
      HEAP32[$zs + 544 >> 2] = 3;
      var $arrayidx123 = $try_method + 64 | 0;
      var $arrayidx124 = $try_method + 212 | 0;
      var $arraydecay = $number | 0;
      var $arraydecay750 = $number748 | 0;
      var $scevgep17121713 = $try_method + 500 | 0;
      var $scevgep1757 = $try_method + 44 | 0;
      var $scevgep17571758 = $scevgep1757;
      var $arrayidx366_1 = $try_method + 48 | 0;
      var $arrayidx366_2 = $try_method + 52 | 0;
      var $arrayidx366_3 = $try_method + 56 | 0;
      var $arrayidx366_4 = $try_method + 60 | 0;
      var $i_2 = 1;
      var $call1169206 = 9;
      var $27 = 0;
      var $call1159208 = 15;
      var $conv1132218 = 0;
      var $conv1128227 = 0;
      var $conv1124236 = 0;
      var $conv1120245 = 0;
      var $26 = 0;
      var $sub1085247 = 0;
      var $25 = 0;
      var $24 = -1;
      var $call800249 = 0;
      var $call786251 = 0;
      var $23 = 0;
      var $call695253 = -1;
      var $22 = 0;
      var $21 = 0;
      var $20 = 1;
      var $19 = 0;
      var $18 = 0;
      var $17 = STRING_TABLE.__str574 | 0;
      var $call603255 = 524288;
      var $call525257 = 0;
      var $16 = 0;
      var $15 = STRING_TABLE.__str575 | 0;
      var $14 = 0;
      var $13 = STRING_TABLE.__str576 | 0;
      var $_169259 = 0;
      var $12 = 0;
      var $11 = 0;
      var $call272264 = 8;
      var $call248271 = 0;
      var $10 = 0;
      var $9 = 0;
      var $8 = 0;
      var $7 = 0;
      var $conv184273 = 0;
      var $conv180275 = 0;
      var $conv176277 = 0;
      var $6 = 0;
      var $5 = 0;
      var $4 = 1;
      var $storemerge164286 = 137;
      var $3 = 0;
      var $iccp_text_0 = 0;
      var $iccp_length_0 = 0;
      __label__ = 10;
      break;
     case 10:
      var $iccp_length_0;
      var $iccp_text_0;
      var $3;
      var $storemerge164286;
      var $4;
      var $5;
      var $6;
      var $conv176277;
      var $conv180275;
      var $conv184273;
      var $7;
      var $8;
      var $9;
      var $10;
      var $call248271;
      var $call272264;
      var $11;
      var $12;
      var $_169259;
      var $13;
      var $14;
      var $15;
      var $16;
      var $call525257;
      var $call603255;
      var $17;
      var $18;
      var $19;
      var $20;
      var $21;
      var $22;
      var $call695253;
      var $23;
      var $call786251;
      var $call800249;
      var $24;
      var $25;
      var $sub1085247;
      var $26;
      var $conv1120245;
      var $conv1124236;
      var $conv1128227;
      var $conv1132218;
      var $call1159208;
      var $27;
      var $call1169206;
      var $i_2;
      if (($i_2 | 0) < ($argc | 0)) {
        __label__ = 11;
        break;
      } else {
        __label__ = 236;
        break;
      }
     case 11:
      var $28 = HEAPU32[$argv + ($i_2 << 2) >> 2];
      var $inc117_ = (HEAP8[$28] << 24 >> 24 == 45 & 1) + $4 | 0;
      var $call120 = _strncmp($28, STRING_TABLE.__str77 | 0, 5);
      if (($call120 | 0) == 0) {
        __label__ = 12;
        break;
      } else {
        __label__ = 13;
        break;
      }
     case 12:
      HEAP32[$arrayidx123 >> 2] = 0;
      HEAP32[$arrayidx124 >> 2] = 0;
      var $i_5 = $i_2;
      var $call1169207 = $call1169206;
      var $154 = $27;
      var $call1159209 = $call1159208;
      var $conv1132219 = $conv1132218;
      var $conv1128228 = $conv1128227;
      var $conv1124237 = $conv1124236;
      var $conv1120246 = $conv1120245;
      var $153 = $26;
      var $sub1085248 = $sub1085247;
      var $152 = $25;
      var $151 = $24;
      var $call800250 = $call800249;
      var $call786252 = $call786251;
      var $150 = $23;
      var $call695254 = $call695253;
      var $149 = $22;
      var $148 = $21;
      var $147 = $20;
      var $146 = $19;
      var $145 = $18;
      var $144 = $17;
      var $call603256 = $call603255;
      var $call525258 = $call525257;
      var $143 = $16;
      var $142 = $15;
      var $141 = $14;
      var $140 = $13;
      var $_169260 = $_169259;
      var $139 = $12;
      var $138 = $11;
      var $call272265 = $call272264;
      var $call248272 = $call248271;
      var $137 = $10;
      var $136 = $9;
      var $135 = $8;
      var $134 = $7;
      var $conv184274 = $conv184273;
      var $conv180276 = $conv180275;
      var $conv176278 = $conv176277;
      var $133 = $6;
      var $132 = 1;
      var $131 = $inc117_;
      var $storemerge164287 = $storemerge164286;
      var $130 = $3;
      var $iccp_text_1 = $iccp_text_0;
      var $iccp_length_1 = $iccp_length_0;
      __label__ = 235;
      break;
     case 13:
      var $call126 = _strncmp($28, STRING_TABLE.__str78 | 0, 8);
      if (($call126 | 0) == 0) {
        __label__ = 234;
        break;
      } else {
        __label__ = 14;
        break;
      }
     case 14:
      var $call139 = _strncmp($28, STRING_TABLE.__str79 | 0, 4);
      if (($call139 | 0) == 0) {
        __label__ = 232;
        break;
      } else {
        __label__ = 15;
        break;
      }
     case 15:
      var $call152 = _strncmp($28, STRING_TABLE.__str80 | 0, 8);
      if (($call152 | 0) == 0) {
        __label__ = 16;
        break;
      } else {
        __label__ = 19;
        break;
      }
     case 16:
      var $inc156 = $i_2 + 1 | 0;
      if (($inc156 | 0) < ($argc | 0)) {
        __label__ = 18;
        break;
      } else {
        __label__ = 17;
        break;
      }
     case 17:
      var $puts = _puts(STRING_TABLE._str9 | 0);
      _exit(1);
      throw "Reached an unreachable!";
     case 18:
      var $inc155 = $inc117_ + 1 | 0;
      var $29 = HEAP32[$argv + ($inc156 << 2) >> 2];
      var $call163 = _atoi($29);
      HEAP32[_crushed_idat_size >> 2] = $call163;
      var $i_5 = $inc156;
      var $call1169207 = $call1169206;
      var $154 = $27;
      var $call1159209 = $call1159208;
      var $conv1132219 = $conv1132218;
      var $conv1128228 = $conv1128227;
      var $conv1124237 = $conv1124236;
      var $conv1120246 = $conv1120245;
      var $153 = $26;
      var $sub1085248 = $sub1085247;
      var $152 = $25;
      var $151 = $24;
      var $call800250 = $call800249;
      var $call786252 = $call786251;
      var $150 = $23;
      var $call695254 = $call695253;
      var $149 = $22;
      var $148 = $21;
      var $147 = $20;
      var $146 = $19;
      var $145 = $18;
      var $144 = $17;
      var $call603256 = $call603255;
      var $call525258 = $call525257;
      var $143 = $16;
      var $142 = $15;
      var $141 = $14;
      var $140 = $13;
      var $_169260 = $_169259;
      var $139 = $12;
      var $138 = $11;
      var $call272265 = $call272264;
      var $call248272 = $call248271;
      var $137 = $10;
      var $136 = $9;
      var $135 = $8;
      var $134 = $7;
      var $conv184274 = $conv184273;
      var $conv180276 = $conv180275;
      var $conv176278 = $conv176277;
      var $133 = $6;
      var $132 = $5;
      var $131 = $inc155;
      var $storemerge164287 = $storemerge164286;
      var $130 = $3;
      var $iccp_text_1 = $iccp_text_0;
      var $iccp_length_1 = $iccp_length_0;
      __label__ = 235;
      break;
     case 19:
      var $call166 = _strncmp($28, STRING_TABLE.__str82 | 0, 5);
      if (($call166 | 0) == 0) {
        __label__ = 21;
        break;
      } else {
        __label__ = 20;
        break;
      }
     case 20:
      var $call170 = _strncmp($28, STRING_TABLE.__str83 | 0, 5);
      if (($call170 | 0) == 0) {
        __label__ = 21;
        break;
      } else {
        __label__ = 22;
        break;
      }
     case 21:
      var $add = $inc117_ + 3 | 0;
      var $30 = HEAP32[$argv + ($i_2 + 1 << 2) >> 2];
      var $call175 = _atoi($30);
      var $conv176 = $call175 & 65535;
      var $31 = HEAP32[$argv + ($i_2 + 2 << 2) >> 2];
      var $call179 = _atoi($31);
      var $conv180 = $call179 & 65535;
      var $inc181 = $i_2 + 3 | 0;
      var $32 = HEAP32[$argv + ($inc181 << 2) >> 2];
      var $call183 = _atoi($32);
      var $i_5 = $inc181;
      var $call1169207 = $call1169206;
      var $154 = $27;
      var $call1159209 = $call1159208;
      var $conv1132219 = $conv1132218;
      var $conv1128228 = $conv1128227;
      var $conv1124237 = $conv1124236;
      var $conv1120246 = $conv1120245;
      var $153 = $26;
      var $sub1085248 = $sub1085247;
      var $152 = $25;
      var $151 = $24;
      var $call800250 = $call800249;
      var $call786252 = $call786251;
      var $150 = $23;
      var $call695254 = $call695253;
      var $149 = $22;
      var $148 = $21;
      var $147 = $20;
      var $146 = $19;
      var $145 = $18;
      var $144 = $17;
      var $call603256 = $call603255;
      var $call525258 = $call525257;
      var $143 = $16;
      var $142 = $15;
      var $141 = $14;
      var $140 = $13;
      var $_169260 = $_169259;
      var $139 = $12;
      var $138 = $11;
      var $call272265 = $call272264;
      var $call248272 = $call248271;
      var $137 = $10;
      var $136 = $9;
      var $135 = $8;
      var $134 = $7;
      var $conv184274 = $call183 & 65535;
      var $conv180276 = $conv180;
      var $conv176278 = $conv176;
      var $133 = 1;
      var $132 = $5;
      var $131 = $add;
      var $storemerge164287 = $storemerge164286;
      var $130 = $3;
      var $iccp_text_1 = $iccp_text_0;
      var $iccp_length_1 = $iccp_length_0;
      __label__ = 235;
      break;
     case 22:
      var $call187 = _strncmp($28, STRING_TABLE.__str84 | 0, 6);
      if (($call187 | 0) == 0) {
        __label__ = 23;
        break;
      } else {
        __label__ = 28;
        break;
      }
     case 23:
      var $inc190 = $7 + 1 | 0;
      for (var $$dest = $scevgep17571758 >> 2, $$stop = $$dest + 126; $$dest < $$stop; $$dest++) {
        HEAP32[$$dest] = 0;
      }
      if (($8 | 0) == 0) {
        __label__ = 24;
        break;
      } else {
        __label__ = 25;
        break;
      }
     case 24:
      HEAP32[_brute_force_filters >> 2] = 0;
      HEAP32[_brute_force_filters + 4 >> 2] = 0;
      HEAP32[_brute_force_filters + 8 >> 2] = 0;
      HEAP32[_brute_force_filters + 12 >> 2] = 0;
      HEAP32[_brute_force_filters + 16 >> 2] = 0;
      HEAP32[_brute_force_filters + 20 >> 2] = 0;
      __label__ = 25;
      break;
     case 25:
      if (($9 | 0) == 0) {
        __label__ = 26;
        break;
      } else {
        __label__ = 27;
        break;
      }
     case 26:
      for (var $$dest = _brute_force_levels >> 2, $$stop = $$dest + 10; $$dest < $$stop; $$dest++) {
        HEAP32[$$dest] = 0;
      }
      __label__ = 27;
      break;
     case 27:
      if (($10 | 0) == 0) {
        __label__ = 233;
        break;
      } else {
        var $i_5 = $i_2;
        var $call1169207 = $call1169206;
        var $154 = $27;
        var $call1159209 = $call1159208;
        var $conv1132219 = $conv1132218;
        var $conv1128228 = $conv1128227;
        var $conv1124237 = $conv1124236;
        var $conv1120246 = $conv1120245;
        var $153 = $26;
        var $sub1085248 = $sub1085247;
        var $152 = $25;
        var $151 = $24;
        var $call800250 = $call800249;
        var $call786252 = $call786251;
        var $150 = $23;
        var $call695254 = $call695253;
        var $149 = $22;
        var $148 = $21;
        var $147 = $20;
        var $146 = $19;
        var $145 = $18;
        var $144 = $17;
        var $call603256 = $call603255;
        var $call525258 = $call525257;
        var $143 = $16;
        var $142 = $15;
        var $141 = $14;
        var $140 = $13;
        var $_169260 = $_169259;
        var $139 = $12;
        var $138 = $11;
        var $call272265 = $call272264;
        var $call248272 = $call248271;
        var $137 = $10;
        var $136 = $9;
        var $135 = $8;
        var $134 = $inc190;
        var $conv184274 = $conv184273;
        var $conv180276 = $conv180275;
        var $conv176278 = $conv176277;
        var $133 = $6;
        var $132 = 1;
        var $131 = $inc117_;
        var $storemerge164287 = 137;
        var $130 = $3;
        var $iccp_text_1 = $iccp_text_0;
        var $iccp_length_1 = $iccp_length_0;
        __label__ = 235;
        break;
      }
     case 28:
      var $call237 = _strncmp($28, STRING_TABLE.__str85 | 0, 10);
      if (($call237 | 0) == 0) {
        __label__ = 29;
        break;
      } else {
        __label__ = 32;
        break;
      }
     case 29:
      var $inc241 = $i_2 + 1 | 0;
      if (($inc241 | 0) < ($argc | 0)) {
        __label__ = 31;
        break;
      } else {
        __label__ = 30;
        break;
      }
     case 30:
      var $puts300 = _puts(STRING_TABLE._str10 | 0);
      _exit(1);
      throw "Reached an unreachable!";
     case 31:
      var $inc240 = $inc117_ + 1 | 0;
      var $33 = HEAP32[$argv + ($inc241 << 2) >> 2];
      var $call248 = _atoi($33);
      var $i_5 = $inc241;
      var $call1169207 = $call1169206;
      var $154 = $27;
      var $call1159209 = $call1159208;
      var $conv1132219 = $conv1132218;
      var $conv1128228 = $conv1128227;
      var $conv1124237 = $conv1124236;
      var $conv1120246 = $conv1120245;
      var $153 = $26;
      var $sub1085248 = $sub1085247;
      var $152 = $25;
      var $151 = $24;
      var $call800250 = $call800249;
      var $call786252 = $call786251;
      var $150 = $23;
      var $call695254 = $call695253;
      var $149 = $22;
      var $148 = $21;
      var $147 = $20;
      var $146 = $19;
      var $145 = $18;
      var $144 = $17;
      var $call603256 = $call603255;
      var $call525258 = $call525257;
      var $143 = $16;
      var $142 = $15;
      var $141 = $14;
      var $140 = $13;
      var $_169260 = $_169259;
      var $139 = $12;
      var $138 = $11;
      var $call272265 = $call272264;
      var $call248272 = $call248;
      var $137 = $10;
      var $136 = $9;
      var $135 = $8;
      var $134 = $7;
      var $conv184274 = $conv184273;
      var $conv180276 = $conv180275;
      var $conv176278 = $conv176277;
      var $133 = $6;
      var $132 = $5;
      var $131 = $inc240;
      var $storemerge164287 = $storemerge164286;
      var $130 = $3;
      var $iccp_text_1 = $iccp_text_0;
      var $iccp_length_1 = $iccp_length_0;
      __label__ = 235;
      break;
     case 32:
      var $call251 = _strncmp($28, STRING_TABLE.__str86 | 0, 3);
      if (($call251 | 0) == 0) {
        var $i_5 = $i_2;
        var $call1169207 = $call1169206;
        var $154 = $27;
        var $call1159209 = $call1159208;
        var $conv1132219 = $conv1132218;
        var $conv1128228 = $conv1128227;
        var $conv1124237 = $conv1124236;
        var $conv1120246 = $conv1120245;
        var $153 = $26;
        var $sub1085248 = $sub1085247;
        var $152 = $25;
        var $151 = $24;
        var $call800250 = $call800249;
        var $call786252 = $call786251;
        var $150 = $23;
        var $call695254 = $call695253;
        var $149 = $22;
        var $148 = $21;
        var $147 = $20;
        var $146 = $19;
        var $145 = $18;
        var $144 = $17;
        var $call603256 = $call603255;
        var $call525258 = $call525257;
        var $143 = $16;
        var $142 = $15;
        var $141 = $14;
        var $140 = $13;
        var $_169260 = $_169259;
        var $139 = $12;
        var $138 = $11;
        var $call272265 = $call272264;
        var $call248272 = $call248271;
        var $137 = $10;
        var $136 = $9;
        var $135 = $8;
        var $134 = $7;
        var $conv184274 = $conv184273;
        var $conv180276 = $conv180275;
        var $conv176278 = $conv176277;
        var $133 = $6;
        var $132 = $5;
        var $131 = $inc117_;
        var $storemerge164287 = $storemerge164286;
        var $130 = 1;
        var $iccp_text_1 = $iccp_text_0;
        var $iccp_length_1 = $iccp_length_0;
        __label__ = 235;
        break;
      } else {
        __label__ = 33;
        break;
      }
     case 33:
      var $call256 = _strncmp($28, STRING_TABLE.__str87 | 0, 6);
      if (($call256 | 0) == 0) {
        var $i_5 = $i_2;
        var $call1169207 = $call1169206;
        var $154 = $27;
        var $call1159209 = $call1159208;
        var $conv1132219 = $conv1132218;
        var $conv1128228 = $conv1128227;
        var $conv1124237 = $conv1124236;
        var $conv1120246 = $conv1120245;
        var $153 = $26;
        var $sub1085248 = $sub1085247;
        var $152 = $25;
        var $151 = $24;
        var $call800250 = $call800249;
        var $call786252 = $call786251;
        var $150 = $23;
        var $call695254 = $call695253;
        var $149 = $22;
        var $148 = $21;
        var $147 = $20;
        var $146 = $19;
        var $145 = $18;
        var $144 = $17;
        var $call603256 = $call603255;
        var $call525258 = $call525257;
        var $143 = $16;
        var $142 = $15;
        var $141 = $14;
        var $140 = $13;
        var $_169260 = $_169259;
        var $139 = $12;
        var $138 = $11;
        var $call272265 = $call272264;
        var $call248272 = $call248271;
        var $137 = $10;
        var $136 = $9;
        var $135 = $8;
        var $134 = $7;
        var $conv184274 = $conv184273;
        var $conv180276 = $conv180275;
        var $conv176278 = $conv176277;
        var $133 = $6;
        var $132 = $5;
        var $131 = $inc117_;
        var $storemerge164287 = $storemerge164286;
        var $130 = 0;
        var $iccp_text_1 = $iccp_text_0;
        var $iccp_length_1 = $iccp_length_0;
        __label__ = 235;
        break;
      } else {
        __label__ = 34;
        break;
      }
     case 34:
      var $call261 = _strncmp($28, STRING_TABLE.__str88 | 0, 2);
      if (($call261 | 0) == 0) {
        __label__ = 35;
        break;
      } else {
        __label__ = 38;
        break;
      }
     case 35:
      var $inc265 = $i_2 + 1 | 0;
      if (($inc265 | 0) < ($argc | 0)) {
        __label__ = 37;
        break;
      } else {
        __label__ = 36;
        break;
      }
     case 36:
      var $puts301 = _puts(STRING_TABLE._str11 | 0);
      _exit(1);
      throw "Reached an unreachable!";
     case 37:
      var $inc264 = $inc117_ + 1 | 0;
      var $34 = HEAP32[$argv + ($inc265 << 2) >> 2];
      var $call272 = _atoi($34);
      var $i_5 = $inc265;
      var $call1169207 = $call1169206;
      var $154 = $27;
      var $call1159209 = $call1159208;
      var $conv1132219 = $conv1132218;
      var $conv1128228 = $conv1128227;
      var $conv1124237 = $conv1124236;
      var $conv1120246 = $conv1120245;
      var $153 = $26;
      var $sub1085248 = $sub1085247;
      var $152 = $25;
      var $151 = $24;
      var $call800250 = $call800249;
      var $call786252 = $call786251;
      var $150 = $23;
      var $call695254 = $call695253;
      var $149 = $22;
      var $148 = $21;
      var $147 = $20;
      var $146 = $19;
      var $145 = $18;
      var $144 = $17;
      var $call603256 = $call603255;
      var $call525258 = $call525257;
      var $143 = $16;
      var $142 = $15;
      var $141 = $14;
      var $140 = $13;
      var $_169260 = $_169259;
      var $139 = $12;
      var $138 = $11;
      var $call272265 = $call272;
      var $call248272 = $call248271;
      var $137 = $10;
      var $136 = $9;
      var $135 = $8;
      var $134 = $7;
      var $conv184274 = $conv184273;
      var $conv180276 = $conv180275;
      var $conv176278 = $conv176277;
      var $133 = $6;
      var $132 = $5;
      var $131 = $inc264;
      var $storemerge164287 = $storemerge164286;
      var $130 = $3;
      var $iccp_text_1 = $iccp_text_0;
      var $iccp_length_1 = $iccp_length_0;
      __label__ = 235;
      break;
     case 38:
      var $call275 = _strncmp($28, STRING_TABLE.__str89 | 0, 4);
      if (($call275 | 0) == 0) {
        __label__ = 39;
        break;
      } else {
        __label__ = 40;
        break;
      }
     case 39:
      HEAP8[_found_gAMA_b] = 1;
      var $i_5 = $i_2;
      var $call1169207 = $call1169206;
      var $154 = $27;
      var $call1159209 = $call1159208;
      var $conv1132219 = $conv1132218;
      var $conv1128228 = $conv1128227;
      var $conv1124237 = $conv1124236;
      var $conv1120246 = $conv1120245;
      var $153 = $26;
      var $sub1085248 = $sub1085247;
      var $152 = $25;
      var $151 = $24;
      var $call800250 = $call800249;
      var $call786252 = $call786251;
      var $150 = $23;
      var $call695254 = $call695253;
      var $149 = $22;
      var $148 = $21;
      var $147 = $20;
      var $146 = $19;
      var $145 = $18;
      var $144 = $17;
      var $call603256 = $call603255;
      var $call525258 = $call525257;
      var $143 = $16;
      var $142 = $15;
      var $141 = $14;
      var $140 = $13;
      var $_169260 = $_169259;
      var $139 = 1;
      var $138 = $11 + 1 | 0;
      var $call272265 = $call272264;
      var $call248272 = $call248271;
      var $137 = $10;
      var $136 = $9;
      var $135 = $8;
      var $134 = $7;
      var $conv184274 = $conv184273;
      var $conv180276 = $conv180275;
      var $conv176278 = $conv176277;
      var $133 = $6;
      var $132 = $5;
      var $131 = $inc117_;
      var $storemerge164287 = $storemerge164286;
      var $130 = $3;
      var $iccp_text_1 = $iccp_text_0;
      var $iccp_length_1 = $iccp_length_0;
      __label__ = 235;
      break;
     case 40:
      var $call281 = _strncmp($28, STRING_TABLE.__str90 | 0, 2);
      if (($call281 | 0) == 0) {
        __label__ = 41;
        break;
      } else {
        __label__ = 44;
        break;
      }
     case 41:
      var $inc284 = $i_2 + 1 | 0;
      if (($inc284 | 0) < ($argc | 0)) {
        __label__ = 43;
        break;
      } else {
        __label__ = 42;
        break;
      }
     case 42:
      var $puts302 = _puts(STRING_TABLE._str12 | 0);
      _exit(1);
      throw "Reached an unreachable!";
     case 43:
      var $_ = ($_169259 | 0) == 2 ? 3 : 1;
      var $i_5 = $inc284;
      var $call1169207 = $call1169206;
      var $154 = $27;
      var $call1159209 = $call1159208;
      var $conv1132219 = $conv1132218;
      var $conv1128228 = $conv1128227;
      var $conv1124237 = $conv1124236;
      var $conv1120246 = $conv1120245;
      var $153 = $26;
      var $sub1085248 = $sub1085247;
      var $152 = $25;
      var $151 = $24;
      var $call800250 = $call800249;
      var $call786252 = $call786251;
      var $150 = $23;
      var $call695254 = $call695253;
      var $149 = $22;
      var $148 = $21;
      var $147 = $20;
      var $146 = $19;
      var $145 = $18;
      var $144 = $17;
      var $call603256 = $call603255;
      var $call525258 = $call525257;
      var $143 = $16;
      var $142 = $15;
      var $141 = $14;
      var $140 = HEAP32[$argv + ($inc117_ << 2) >> 2];
      var $_169260 = $_;
      var $139 = $12;
      var $138 = $11;
      var $call272265 = $call272264;
      var $call248272 = $call248271;
      var $137 = $10;
      var $136 = $9;
      var $135 = $8;
      var $134 = $7;
      var $conv184274 = $conv184273;
      var $conv180276 = $conv180275;
      var $conv176278 = $conv176277;
      var $133 = $6;
      var $132 = $5;
      var $131 = $inc117_ + 1 | 0;
      var $storemerge164287 = $storemerge164286;
      var $130 = $3;
      var $iccp_text_1 = $iccp_text_0;
      var $iccp_length_1 = $iccp_length_0;
      __label__ = 235;
      break;
     case 44:
      var $call299 = _strncmp($28, STRING_TABLE.__str91 | 0, 5);
      if (($call299 | 0) == 0) {
        var $i_5 = $i_2;
        var $call1169207 = $call1169206;
        var $154 = $27;
        var $call1159209 = $call1159208;
        var $conv1132219 = $conv1132218;
        var $conv1128228 = $conv1128227;
        var $conv1124237 = $conv1124236;
        var $conv1120246 = $conv1120245;
        var $153 = $26;
        var $sub1085248 = $sub1085247;
        var $152 = $25;
        var $151 = $24;
        var $call800250 = $call800249;
        var $call786252 = $call786251;
        var $150 = $23;
        var $call695254 = $call695253;
        var $149 = $22;
        var $148 = $21;
        var $147 = $20;
        var $146 = $19;
        var $145 = $18;
        var $144 = $17;
        var $call603256 = $call603255;
        var $call525258 = $call525257;
        var $143 = $16;
        var $142 = $15;
        var $141 = 1;
        var $140 = $13;
        var $_169260 = $_169259;
        var $139 = $12;
        var $138 = $11;
        var $call272265 = $call272264;
        var $call248272 = $call248271;
        var $137 = $10;
        var $136 = $9;
        var $135 = $8;
        var $134 = $7;
        var $conv184274 = $conv184273;
        var $conv180276 = $conv180275;
        var $conv176278 = $conv176277;
        var $133 = $6;
        var $132 = $5;
        var $131 = $inc117_;
        var $storemerge164287 = $storemerge164286;
        var $130 = $3;
        var $iccp_text_1 = $iccp_text_0;
        var $iccp_length_1 = $iccp_length_0;
        __label__ = 235;
        break;
      } else {
        __label__ = 45;
        break;
      }
     case 45:
      var $call304 = _strncmp($28, STRING_TABLE.__str92 | 0, 2);
      if (($call304 | 0) == 0) {
        __label__ = 46;
        break;
      } else {
        __label__ = 49;
        break;
      }
     case 46:
      var $inc307 = $i_2 + 1 | 0;
      if (($inc307 | 0) < ($argc | 0)) {
        __label__ = 48;
        break;
      } else {
        __label__ = 47;
        break;
      }
     case 47:
      var $puts303 = _puts(STRING_TABLE._str13 | 0);
      _exit(1);
      throw "Reached an unreachable!";
     case 48:
      var $_169 = ($_169259 | 0) == 1 ? 3 : 2;
      var $i_5 = $inc307;
      var $call1169207 = $call1169206;
      var $154 = $27;
      var $call1159209 = $call1159208;
      var $conv1132219 = $conv1132218;
      var $conv1128228 = $conv1128227;
      var $conv1124237 = $conv1124236;
      var $conv1120246 = $conv1120245;
      var $153 = $26;
      var $sub1085248 = $sub1085247;
      var $152 = $25;
      var $151 = $24;
      var $call800250 = $call800249;
      var $call786252 = $call786251;
      var $150 = $23;
      var $call695254 = $call695253;
      var $149 = $22;
      var $148 = $21;
      var $147 = $20;
      var $146 = $19;
      var $145 = $18;
      var $144 = $17;
      var $call603256 = $call603255;
      var $call525258 = $call525257;
      var $143 = $16;
      var $142 = HEAP32[$argv + ($inc117_ << 2) >> 2];
      var $141 = $14;
      var $140 = $13;
      var $_169260 = $_169;
      var $139 = $12;
      var $138 = $11;
      var $call272265 = $call272264;
      var $call248272 = $call248271;
      var $137 = $10;
      var $136 = $9;
      var $135 = $8;
      var $134 = $7;
      var $conv184274 = $conv184273;
      var $conv180276 = $conv180275;
      var $conv176278 = $conv176277;
      var $133 = $6;
      var $132 = $5;
      var $131 = $inc117_ + 1 | 0;
      var $storemerge164287 = $storemerge164286;
      var $130 = $3;
      var $iccp_text_1 = $iccp_text_0;
      var $iccp_length_1 = $iccp_length_0;
      __label__ = 235;
      break;
     case 49:
      var $call322 = _strncmp($28, STRING_TABLE.__str93 | 0, 6);
      if (($call322 | 0) == 0) {
        var $i_5 = $i_2;
        var $call1169207 = $call1169206;
        var $154 = $27;
        var $call1159209 = $call1159208;
        var $conv1132219 = $conv1132218;
        var $conv1128228 = $conv1128227;
        var $conv1124237 = $conv1124236;
        var $conv1120246 = $conv1120245;
        var $153 = $26;
        var $sub1085248 = $sub1085247;
        var $152 = $25;
        var $151 = $24;
        var $call800250 = $call800249;
        var $call786252 = $call786251;
        var $150 = $23;
        var $call695254 = $call695253;
        var $149 = $22;
        var $148 = $21;
        var $147 = $20;
        var $146 = $19;
        var $145 = $18;
        var $144 = $17;
        var $call603256 = $call603255;
        var $call525258 = $call525257;
        var $143 = $16;
        var $142 = $15;
        var $141 = $14;
        var $140 = $13;
        var $_169260 = $_169259;
        var $139 = 1;
        var $138 = $11;
        var $call272265 = $call272264;
        var $call248272 = $call248271;
        var $137 = $10;
        var $136 = $9;
        var $135 = $8;
        var $134 = $7;
        var $conv184274 = $conv184273;
        var $conv180276 = $conv180275;
        var $conv176278 = $conv176277;
        var $133 = $6;
        var $132 = $5;
        var $131 = $inc117_;
        var $storemerge164287 = $storemerge164286;
        var $130 = $3;
        var $iccp_text_1 = $iccp_text_0;
        var $iccp_length_1 = $iccp_length_0;
        __label__ = 235;
        break;
      } else {
        __label__ = 50;
        break;
      }
     case 50:
      var $call327 = _strncmp($28, STRING_TABLE.__str94 | 0, 4);
      if (($call327 | 0) == 0) {
        __label__ = 51;
        break;
      } else {
        __label__ = 52;
        break;
      }
     case 51:
      var $inc330 = HEAP32[_fix >> 2] + 1 | 0;
      HEAP32[_fix >> 2] = $inc330;
      var $i_5 = $i_2;
      var $call1169207 = $call1169206;
      var $154 = $27;
      var $call1159209 = $call1159208;
      var $conv1132219 = $conv1132218;
      var $conv1128228 = $conv1128227;
      var $conv1124237 = $conv1124236;
      var $conv1120246 = $conv1120245;
      var $153 = $26;
      var $sub1085248 = $sub1085247;
      var $152 = $25;
      var $151 = $24;
      var $call800250 = $call800249;
      var $call786252 = $call786251;
      var $150 = $23;
      var $call695254 = $call695253;
      var $149 = $22;
      var $148 = $21;
      var $147 = $20;
      var $146 = $19;
      var $145 = $18;
      var $144 = $17;
      var $call603256 = $call603255;
      var $call525258 = $call525257;
      var $143 = $16;
      var $142 = $15;
      var $141 = $14;
      var $140 = $13;
      var $_169260 = $_169259;
      var $139 = $12;
      var $138 = $11;
      var $call272265 = $call272264;
      var $call248272 = $call248271;
      var $137 = $10;
      var $136 = $9;
      var $135 = $8;
      var $134 = $7;
      var $conv184274 = $conv184273;
      var $conv180276 = $conv180275;
      var $conv176278 = $conv176277;
      var $133 = $6;
      var $132 = $5;
      var $131 = $inc117_;
      var $storemerge164287 = $storemerge164286;
      var $130 = $3;
      var $iccp_text_1 = $iccp_text_0;
      var $iccp_length_1 = $iccp_length_0;
      __label__ = 235;
      break;
     case 52:
      var $call333 = _strncmp($28, STRING_TABLE.__str95 | 0, 2);
      if (($call333 | 0) == 0) {
        __label__ = 53;
        break;
      } else {
        __label__ = 57;
        break;
      }
     case 53:
      var $inc336 = $i_2 + 1 | 0;
      var $38 = HEAP32[$argv + ($inc336 << 2) >> 2];
      var $call338 = _atoi($38);
      var $specified_filter_0 = $call338 >>> 0 > 5 ? 5 : $call338;
      var $inc346 = $inc117_ + 1 | 0;
      if (($7 | 0) == 0) {
        __label__ = 54;
        break;
      } else {
        __label__ = 55;
        break;
      }
     case 54:
      HEAP32[$fm + ($storemerge164286 << 2) >> 2] = $specified_filter_0;
      var $i_5 = $inc336;
      var $call1169207 = $call1169206;
      var $154 = $27;
      var $call1159209 = $call1159208;
      var $conv1132219 = $conv1132218;
      var $conv1128228 = $conv1128227;
      var $conv1124237 = $conv1124236;
      var $conv1120246 = $conv1120245;
      var $153 = $26;
      var $sub1085248 = $sub1085247;
      var $152 = $25;
      var $151 = $24;
      var $call800250 = $call800249;
      var $call786252 = $call786251;
      var $150 = $23;
      var $call695254 = $call695253;
      var $149 = $22;
      var $148 = $21;
      var $147 = $20;
      var $146 = $19;
      var $145 = $18;
      var $144 = $17;
      var $call603256 = $call603255;
      var $call525258 = $call525257;
      var $143 = $16;
      var $142 = $15;
      var $141 = $14;
      var $140 = $13;
      var $_169260 = $_169259;
      var $139 = $12;
      var $138 = $11;
      var $call272265 = $call272264;
      var $call248272 = $call248271;
      var $137 = $10;
      var $136 = $9;
      var $135 = $8;
      var $134 = 0;
      var $conv184274 = $conv184273;
      var $conv180276 = $conv180275;
      var $conv176278 = $conv176277;
      var $133 = $6;
      var $132 = $5;
      var $131 = $inc346;
      var $storemerge164287 = $storemerge164286;
      var $130 = $3;
      var $iccp_text_1 = $iccp_text_0;
      var $iccp_length_1 = $iccp_length_0;
      __label__ = 235;
      break;
     case 55:
      HEAP32[_brute_force_filters >> 2] = 1;
      HEAP32[_brute_force_filters + 4 >> 2] = 1;
      HEAP32[_brute_force_filters + 8 >> 2] = 1;
      HEAP32[_brute_force_filters + 12 >> 2] = 1;
      HEAP32[_brute_force_filters + 16 >> 2] = 1;
      HEAP32[_brute_force_filters + 20 >> 2] = 1;
      var $arrayidx360 = _brute_force_filters + ($specified_filter_0 << 2) | 0;
      HEAP32[$arrayidx360 >> 2] = 0;
      var $40 = HEAPU32[_brute_force_strategies + 8 >> 2];
      var $41 = HEAPU32[_brute_force_filters >> 2];
      HEAP32[$scevgep1757 >> 2] = $40 | $41;
      var $42 = HEAPU32[_brute_force_filters + 4 >> 2];
      HEAP32[$arrayidx366_1 >> 2] = $40 | $42;
      var $43 = HEAPU32[_brute_force_filters + 8 >> 2];
      HEAP32[$arrayidx366_2 >> 2] = $40 | $43;
      var $44 = HEAPU32[_brute_force_filters + 12 >> 2];
      HEAP32[$arrayidx366_3 >> 2] = $40 | $44;
      var $45 = HEAPU32[_brute_force_filters + 16 >> 2];
      HEAP32[$arrayidx366_4 >> 2] = $40 | $45;
      var $46 = HEAPU32[_brute_force_filters + 20 >> 2];
      HEAP32[$arrayidx123 >> 2] = $40 | $46;
      var $47 = HEAP32[_brute_force_strategies >> 2];
      var $48 = HEAP32[_brute_force_strategies + 4 >> 2];
      var $storemerge164290617 = 17;
      var $lev_2618 = 1;
      __label__ = 945;
      break;
     case 56:
      var $i_5 = $inc336;
      var $call1169207 = $call1169206;
      var $154 = $27;
      var $call1159209 = $call1159208;
      var $conv1132219 = $conv1132218;
      var $conv1128228 = $conv1128227;
      var $conv1124237 = $conv1124236;
      var $conv1120246 = $conv1120245;
      var $153 = $26;
      var $sub1085248 = $sub1085247;
      var $152 = $25;
      var $151 = $24;
      var $call800250 = $call800249;
      var $call786252 = $call786251;
      var $150 = $23;
      var $call695254 = $call695253;
      var $149 = $22;
      var $148 = $21;
      var $147 = $20;
      var $146 = $19;
      var $145 = $18;
      var $144 = $17;
      var $call603256 = $call603255;
      var $call525258 = $call525257;
      var $143 = $16;
      var $142 = $15;
      var $141 = $14;
      var $140 = $13;
      var $_169260 = $_169259;
      var $139 = $12;
      var $138 = $11;
      var $call272265 = $call272264;
      var $call248272 = $call248271;
      var $137 = $10;
      var $136 = $9;
      var $135 = $8 + 1 | 0;
      var $134 = $7;
      var $conv184274 = $conv184273;
      var $conv180276 = $conv180275;
      var $conv176278 = $conv176277;
      var $133 = $6;
      var $132 = $5;
      var $131 = $inc346;
      var $storemerge164287 = 125;
      var $130 = $3;
      var $iccp_text_1 = $iccp_text_0;
      var $iccp_length_1 = $iccp_length_0;
      __label__ = 235;
      break;
     case 57:
      var $call403 = _strncmp($28, STRING_TABLE.__str96 | 0, 5);
      if (($call403 | 0) == 0) {
        var $i_5 = $i_2;
        var $call1169207 = $call1169206;
        var $154 = $27;
        var $call1159209 = $call1159208;
        var $conv1132219 = $conv1132218;
        var $conv1128228 = $conv1128227;
        var $conv1124237 = $conv1124236;
        var $conv1120246 = $conv1120245;
        var $153 = $26;
        var $sub1085248 = $sub1085247;
        var $152 = $25;
        var $151 = $24;
        var $call800250 = $call800249;
        var $call786252 = $call786251;
        var $150 = $23;
        var $call695254 = $call695253;
        var $149 = $22;
        var $148 = $21;
        var $147 = $20;
        var $146 = $19;
        var $145 = $18;
        var $144 = $17;
        var $call603256 = $call603255;
        var $call525258 = $call525257;
        var $143 = 1;
        var $142 = $15;
        var $141 = $14;
        var $140 = $13;
        var $_169260 = $_169259;
        var $139 = $12;
        var $138 = $11;
        var $call272265 = $call272264;
        var $call248272 = $call248271;
        var $137 = $10;
        var $136 = $9;
        var $135 = $8;
        var $134 = $7;
        var $conv184274 = $conv184273;
        var $conv180276 = $conv180275;
        var $conv176278 = $conv176277;
        var $133 = $6;
        var $132 = $5;
        var $131 = $inc117_;
        var $storemerge164287 = $storemerge164286;
        var $130 = $3;
        var $iccp_text_1 = $iccp_text_0;
        var $iccp_length_1 = $iccp_length_0;
        __label__ = 235;
        break;
      } else {
        __label__ = 58;
        break;
      }
     case 58:
      var $call408 = _strncmp($28, STRING_TABLE.__str97 | 0, 2);
      if (($call408 | 0) == 0) {
        __label__ = 59;
        break;
      } else {
        __label__ = 65;
        break;
      }
     case 59:
      var $inc411 = $i_2 + 1 | 0;
      var $49 = HEAP32[$argv + ($inc411 << 2) >> 2];
      var $call413 = _atoi($49);
      var $specified_level_0 = $call413 >>> 0 > 9 ? 9 : $call413;
      var $inc421 = $inc117_ + 1 | 0;
      if (($7 | 0) == 0) {
        __label__ = 60;
        break;
      } else {
        __label__ = 61;
        break;
      }
     case 60:
      HEAP32[$lv + ($storemerge164286 << 2) >> 2] = $specified_level_0;
      var $i_5 = $inc411;
      var $call1169207 = $call1169206;
      var $154 = $27;
      var $call1159209 = $call1159208;
      var $conv1132219 = $conv1132218;
      var $conv1128228 = $conv1128227;
      var $conv1124237 = $conv1124236;
      var $conv1120246 = $conv1120245;
      var $153 = $26;
      var $sub1085248 = $sub1085247;
      var $152 = $25;
      var $151 = $24;
      var $call800250 = $call800249;
      var $call786252 = $call786251;
      var $150 = $23;
      var $call695254 = $call695253;
      var $149 = $22;
      var $148 = $21;
      var $147 = $20;
      var $146 = $19;
      var $145 = $18;
      var $144 = $17;
      var $call603256 = $call603255;
      var $call525258 = $call525257;
      var $143 = $16;
      var $142 = $15;
      var $141 = $14;
      var $140 = $13;
      var $_169260 = $_169259;
      var $139 = $12;
      var $138 = $11;
      var $call272265 = $call272264;
      var $call248272 = $call248271;
      var $137 = $10;
      var $136 = $9;
      var $135 = $8;
      var $134 = 0;
      var $conv184274 = $conv184273;
      var $conv180276 = $conv180275;
      var $conv176278 = $conv176277;
      var $133 = $6;
      var $132 = $5;
      var $131 = $inc421;
      var $storemerge164287 = $storemerge164286;
      var $130 = $3;
      var $iccp_text_1 = $iccp_text_0;
      var $iccp_length_1 = $iccp_length_0;
      __label__ = 235;
      break;
     case 61:
      if (($9 | 0) == 0) {
        __label__ = 62;
        break;
      } else {
        __label__ = 63;
        break;
      }
     case 62:
      HEAP32[_brute_force_levels >> 2] = 1;
      HEAP32[_brute_force_levels + 4 >> 2] = 1;
      HEAP32[_brute_force_levels + 8 >> 2] = 1;
      HEAP32[_brute_force_levels + 12 >> 2] = 1;
      HEAP32[_brute_force_levels + 16 >> 2] = 1;
      HEAP32[_brute_force_levels + 20 >> 2] = 1;
      HEAP32[_brute_force_levels + 24 >> 2] = 1;
      HEAP32[_brute_force_levels + 28 >> 2] = 1;
      HEAP32[_brute_force_levels + 32 >> 2] = 1;
      HEAP32[_brute_force_levels + 36 >> 2] = 1;
      __label__ = 63;
      break;
     case 63:
      var $arrayidx439 = _brute_force_levels + ($specified_level_0 << 2) | 0;
      HEAP32[$arrayidx439 >> 2] = 0;
      HEAP32[$arrayidx56 >> 2] = $specified_level_0;
      HEAP32[$arrayidx56_1 >> 2] = $specified_level_0;
      HEAP32[$arrayidx56_2 >> 2] = $specified_level_0;
      HEAP32[$arrayidx56_3 >> 2] = $specified_level_0;
      HEAP32[$arrayidx56_4 >> 2] = $specified_level_0;
      HEAP32[$arrayidx56_5 >> 2] = $specified_level_0;
      var $51 = HEAP32[_brute_force_strategies >> 2];
      var $52 = HEAP32[_brute_force_filters >> 2];
      var $53 = HEAP32[_brute_force_filters + 4 >> 2];
      var $54 = HEAP32[_brute_force_filters + 8 >> 2];
      var $55 = HEAP32[_brute_force_filters + 12 >> 2];
      var $56 = HEAP32[_brute_force_filters + 16 >> 2];
      var $57 = HEAP32[_brute_force_filters + 20 >> 2];
      var $58 = HEAP32[_brute_force_strategies + 4 >> 2];
      var $storemerge164294626 = 17;
      var $lev_4627 = 1;
      __label__ = 947;
      break;
     case 64:
      var $i_5 = $inc411;
      var $call1169207 = $call1169206;
      var $154 = $27;
      var $call1159209 = $call1159208;
      var $conv1132219 = $conv1132218;
      var $conv1128228 = $conv1128227;
      var $conv1124237 = $conv1124236;
      var $conv1120246 = $conv1120245;
      var $153 = $26;
      var $sub1085248 = $sub1085247;
      var $152 = $25;
      var $151 = $24;
      var $call800250 = $call800249;
      var $call786252 = $call786251;
      var $150 = $23;
      var $call695254 = $call695253;
      var $149 = $22;
      var $148 = $21;
      var $147 = $20;
      var $146 = $19;
      var $145 = $18;
      var $144 = $17;
      var $call603256 = $call603255;
      var $call525258 = $call525257;
      var $143 = $16;
      var $142 = $15;
      var $141 = $14;
      var $140 = $13;
      var $_169260 = $_169259;
      var $139 = $12;
      var $138 = $11;
      var $call272265 = $call272264;
      var $call248272 = $call248271;
      var $137 = $10;
      var $136 = $9 + 1 | 0;
      var $135 = $8;
      var $134 = $7;
      var $conv184274 = $conv184273;
      var $conv180276 = $conv180275;
      var $conv176278 = $conv176277;
      var $133 = $6;
      var $132 = $5;
      var $131 = $inc421;
      var $storemerge164287 = 125;
      var $130 = $3;
      var $iccp_text_1 = $iccp_text_0;
      var $iccp_length_1 = $iccp_length_0;
      __label__ = 235;
      break;
     case 65:
      var $call481 = _strncmp($28, STRING_TABLE.__str98 | 0, 2);
      if (($call481 | 0) == 0) {
        __label__ = 66;
        break;
      } else {
        __label__ = 78;
        break;
      }
     case 66:
      var $inc484 = $inc117_ + 1 | 0;
      var $inc485 = $i_2 + 1 | 0;
      if (($inc485 | 0) < ($argc | 0)) {
        __label__ = 68;
        break;
      } else {
        __label__ = 67;
        break;
      }
     case 67:
      var $puts304 = _puts(STRING_TABLE._str14 | 0);
      _exit(1);
      throw "Reached an unreachable!";
     case 68:
      HEAP8[_found_gAMA_b] = 1;
      if ((HEAP32[_intent >> 2] | 0) < 0) {
        __label__ = 69;
        break;
      } else {
        var $i_5 = $inc485;
        var $call1169207 = $call1169206;
        var $154 = $27;
        var $call1159209 = $call1159208;
        var $conv1132219 = $conv1132218;
        var $conv1128228 = $conv1128227;
        var $conv1124237 = $conv1124236;
        var $conv1120246 = $conv1120245;
        var $153 = $26;
        var $sub1085248 = $sub1085247;
        var $152 = $25;
        var $151 = $24;
        var $call800250 = $call800249;
        var $call786252 = $call786251;
        var $150 = $23;
        var $call695254 = $call695253;
        var $149 = $22;
        var $148 = $21;
        var $147 = $20;
        var $146 = $19;
        var $145 = $18;
        var $144 = $17;
        var $call603256 = $call603255;
        var $call525258 = $call525257;
        var $143 = $16;
        var $142 = $15;
        var $141 = $14;
        var $140 = $13;
        var $_169260 = $_169259;
        var $139 = $12;
        var $138 = $11;
        var $call272265 = $call272264;
        var $call248272 = $call248271;
        var $137 = $10;
        var $136 = $9;
        var $135 = $8;
        var $134 = $7;
        var $conv184274 = $conv184273;
        var $conv180276 = $conv180275;
        var $conv176278 = $conv176277;
        var $133 = $6;
        var $132 = $5;
        var $131 = $inc484;
        var $storemerge164287 = $storemerge164286;
        var $130 = $3;
        var $iccp_text_1 = $iccp_text_0;
        var $iccp_length_1 = $iccp_length_0;
        __label__ = 235;
        break;
      }
     case 69:
      var $arrayidx494 = $argv + ($inc485 << 2) | 0;
      var $60 = HEAP32[$arrayidx494 >> 2];
      var $call495 = _strlen($60);
      if (($call495 | 0) > 0) {
        var $nzeroes_0654 = -1;
        var $n_0655 = $arraydecay;
        var $c_0656 = 0;
        var $61 = $60;
        __label__ = 70;
        break;
      } else {
        var $n_2_lcssa = $arraydecay;
        __label__ = 77;
        break;
      }
     case 70:
      var $61;
      var $c_0656;
      var $n_0655;
      var $nzeroes_0654;
      var $62 = HEAP8[$61 + $c_0656 | 0];
      if ($62 << 24 >> 24 == 46) {
        var $n_1 = $n_0655;
        var $nzeroes_1 = 5;
        __label__ = 73;
        break;
      } else {
        __label__ = 71;
        break;
      }
     case 71:
      if (($nzeroes_0654 | 0) == 0) {
        var $n_1 = $n_0655;
        var $nzeroes_1 = 0;
        __label__ = 73;
        break;
      } else {
        __label__ = 72;
        break;
      }
     case 72:
      HEAP8[$n_0655] = $62;
      var $n_1 = $n_0655 + 1 | 0;
      var $nzeroes_1 = $nzeroes_0654 - 1 | 0;
      __label__ = 73;
      break;
     case 73:
      var $nzeroes_1;
      var $n_1;
      var $inc514 = $c_0656 + 1 | 0;
      if (($inc514 | 0) == ($call495 | 0)) {
        __label__ = 75;
        break;
      } else {
        __label__ = 74;
        break;
      }
     case 74:
      var $nzeroes_0654 = $nzeroes_1;
      var $n_0655 = $n_1;
      var $c_0656 = $inc514;
      var $61 = HEAP32[$arrayidx494 >> 2];
      __label__ = 70;
      break;
     case 75:
      if (($nzeroes_1 | 0) > 0) {
        __label__ = 76;
        break;
      } else {
        var $n_2_lcssa = $n_1;
        __label__ = 77;
        break;
      }
     case 76:
      _memset($n_1, 48, $nzeroes_1, 1);
      var $n_2_lcssa = $n_1 + $nzeroes_1 | 0;
      __label__ = 77;
      break;
     case 77:
      var $n_2_lcssa;
      HEAP8[$n_2_lcssa] = 0;
      var $call525 = _atoi($arraydecay);
      var $i_5 = $inc485;
      var $call1169207 = $call1169206;
      var $154 = $27;
      var $call1159209 = $call1159208;
      var $conv1132219 = $conv1132218;
      var $conv1128228 = $conv1128227;
      var $conv1124237 = $conv1124236;
      var $conv1120246 = $conv1120245;
      var $153 = $26;
      var $sub1085248 = $sub1085247;
      var $152 = $25;
      var $151 = $24;
      var $call800250 = $call800249;
      var $call786252 = $call786251;
      var $150 = $23;
      var $call695254 = $call695253;
      var $149 = $22;
      var $148 = $21;
      var $147 = $20;
      var $146 = $19;
      var $145 = $18;
      var $144 = $17;
      var $call603256 = $call603255;
      var $call525258 = $call525;
      var $143 = $16;
      var $142 = $15;
      var $141 = $14;
      var $140 = $13;
      var $_169260 = $_169259;
      var $139 = $12;
      var $138 = $11;
      var $call272265 = $call272264;
      var $call248272 = $call248271;
      var $137 = $10;
      var $136 = $9;
      var $135 = $8;
      var $134 = $7;
      var $conv184274 = $conv184273;
      var $conv180276 = $conv180275;
      var $conv176278 = $conv176277;
      var $133 = $6;
      var $132 = $5;
      var $131 = $inc484;
      var $storemerge164287 = $storemerge164286;
      var $130 = $3;
      var $iccp_text_1 = $iccp_text_0;
      var $iccp_length_1 = $iccp_length_0;
      __label__ = 235;
      break;
     case 78:
      var $call529 = _strncmp($28, STRING_TABLE.__str99 | 0, 2);
      if (($call529 | 0) == 0) {
        __label__ = 79;
        break;
      } else {
        __label__ = 80;
        break;
      }
     case 79:
      var $inc532 = HEAP32[_verbose >> 2] + 1 | 0;
      HEAP32[_verbose >> 2] = $inc532;
      _print_version_info();
      _print_usage(0);
      throw "Reached an unreachable!";
     case 80:
      var $call535 = _strncmp($28, STRING_TABLE.__str100 | 0, 5);
      if (($call535 | 0) == 0) {
        __label__ = 81;
        break;
      } else {
        __label__ = 89;
        break;
      }
     case 81:
      if (($iccp_length_0 | 0) == 0) {
        __label__ = 83;
        break;
      } else {
        __label__ = 82;
        break;
      }
     case 82:
      _free($iccp_text_0);
      __label__ = 83;
      break;
     case 83:
      var $64 = HEAP32[$argv + ($i_2 + 1 << 2) >> 2];
      var $call543 = _atoi($64);
      var $add544 = $inc117_ + 3 | 0;
      var $65 = HEAP32[$argv + ($i_2 + 2 << 2) >> 2];
      var $call547 = _strcpy(_iccp_name | 0, $65);
      var $inc548 = $i_2 + 3 | 0;
      var $66 = HEAP32[$argv + ($inc548 << 2) >> 2];
      var $call550 = _fopen($66, STRING_TABLE.__str101 | 0);
      if (($call550 | 0) == 0) {
        __label__ = 84;
        break;
      } else {
        __label__ = 85;
        break;
      }
     case 84:
      var $67 = HEAP32[_stdout >> 2];
      var $call554 = _fprintf($67, STRING_TABLE.__str102 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $66, tempInt));
      var $i_5 = $inc548;
      var $call1169207 = $call1169206;
      var $154 = $27;
      var $call1159209 = $call1159208;
      var $conv1132219 = $conv1132218;
      var $conv1128228 = $conv1128227;
      var $conv1124237 = $conv1124236;
      var $conv1120246 = $conv1120245;
      var $153 = $26;
      var $sub1085248 = $sub1085247;
      var $152 = $25;
      var $151 = $24;
      var $call800250 = $call800249;
      var $call786252 = $call786251;
      var $150 = $23;
      var $call695254 = $call695253;
      var $149 = $22;
      var $148 = $21;
      var $147 = $20;
      var $146 = $19;
      var $145 = $18;
      var $144 = $17;
      var $call603256 = $call603255;
      var $call525258 = $call525257;
      var $143 = $16;
      var $142 = $15;
      var $141 = $14;
      var $140 = $13;
      var $_169260 = $_169259;
      var $139 = $12;
      var $138 = $11;
      var $call272265 = $call272264;
      var $call248272 = $call248271;
      var $137 = $10;
      var $136 = $9;
      var $135 = $8;
      var $134 = $7;
      var $conv184274 = $conv184273;
      var $conv180276 = $conv180275;
      var $conv176278 = $conv176277;
      var $133 = $6;
      var $132 = $5;
      var $131 = $add544;
      var $storemerge164287 = $storemerge164286;
      var $130 = $3;
      var $iccp_text_1 = $iccp_text_0;
      var $iccp_length_1 = 0;
      __label__ = 235;
      break;
     case 85:
      var $call556 = _malloc($call543);
      var $ic_0 = 0;
      __label__ = 86;
      break;
     case 86:
      var $ic_0;
      if (($ic_0 | 0) < ($call543 | 0)) {
        __label__ = 87;
        break;
      } else {
        var $i_5 = $inc548;
        var $call1169207 = $call1169206;
        var $154 = $27;
        var $call1159209 = $call1159208;
        var $conv1132219 = $conv1132218;
        var $conv1128228 = $conv1128227;
        var $conv1124237 = $conv1124236;
        var $conv1120246 = $conv1120245;
        var $153 = $26;
        var $sub1085248 = $sub1085247;
        var $152 = $25;
        var $151 = $24;
        var $call800250 = $call800249;
        var $call786252 = $call786251;
        var $150 = $23;
        var $call695254 = $call695253;
        var $149 = $22;
        var $148 = $21;
        var $147 = $20;
        var $146 = $19;
        var $145 = $18;
        var $144 = $17;
        var $call603256 = $call603255;
        var $call525258 = $call525257;
        var $143 = $16;
        var $142 = $15;
        var $141 = $14;
        var $140 = $13;
        var $_169260 = $_169259;
        var $139 = $12;
        var $138 = $11;
        var $call272265 = $call272264;
        var $call248272 = $call248271;
        var $137 = $10;
        var $136 = $9;
        var $135 = $8;
        var $134 = $7;
        var $conv184274 = $conv184273;
        var $conv180276 = $conv180275;
        var $conv176278 = $conv176277;
        var $133 = $6;
        var $132 = $5;
        var $131 = $add544;
        var $storemerge164287 = $storemerge164286;
        var $130 = $3;
        var $iccp_text_1 = $call556;
        var $iccp_length_1 = $call543;
        __label__ = 235;
        break;
      }
     case 87:
      var $call561 = _fread(_buffer | 0, 1, 1, $call550);
      if (($call561 | 0) == 0) {
        var $i_5 = $inc548;
        var $call1169207 = $call1169206;
        var $154 = $27;
        var $call1159209 = $call1159208;
        var $conv1132219 = $conv1132218;
        var $conv1128228 = $conv1128227;
        var $conv1124237 = $conv1124236;
        var $conv1120246 = $conv1120245;
        var $153 = $26;
        var $sub1085248 = $sub1085247;
        var $152 = $25;
        var $151 = $24;
        var $call800250 = $call800249;
        var $call786252 = $call786251;
        var $150 = $23;
        var $call695254 = $call695253;
        var $149 = $22;
        var $148 = $21;
        var $147 = $20;
        var $146 = $19;
        var $145 = $18;
        var $144 = $17;
        var $call603256 = $call603255;
        var $call525258 = $call525257;
        var $143 = $16;
        var $142 = $15;
        var $141 = $14;
        var $140 = $13;
        var $_169260 = $_169259;
        var $139 = $12;
        var $138 = $11;
        var $call272265 = $call272264;
        var $call248272 = $call248271;
        var $137 = $10;
        var $136 = $9;
        var $135 = $8;
        var $134 = $7;
        var $conv184274 = $conv184273;
        var $conv180276 = $conv180275;
        var $conv176278 = $conv176277;
        var $133 = $6;
        var $132 = $5;
        var $131 = $add544;
        var $storemerge164287 = $storemerge164286;
        var $130 = $3;
        var $iccp_text_1 = $call556;
        var $iccp_length_1 = $call543;
        __label__ = 235;
        break;
      } else {
        __label__ = 88;
        break;
      }
     case 88:
      var $68 = HEAP8[_buffer | 0];
      HEAP8[$call556 + $ic_0 | 0] = $68;
      var $ic_0 = $ic_0 + 1 | 0;
      __label__ = 86;
      break;
     case 89:
      var $call572 = _strncmp($28, STRING_TABLE.__str103 | 0, 5);
      if (($call572 | 0) == 0) {
        __label__ = 90;
        break;
      } else {
        __label__ = 95;
        break;
      }
     case 90:
      var $inc575 = $inc117_ + 1 | 0;
      var $inc576 = $i_2 + 1 | 0;
      if (($inc576 | 0) < ($argc | 0)) {
        __label__ = 92;
        break;
      } else {
        __label__ = 91;
        break;
      }
     case 91:
      var $puts305 = _puts(STRING_TABLE._str15 | 0);
      _exit(1);
      throw "Reached an unreachable!";
     case 92:
      var $69 = HEAP32[$argv + ($inc576 << 2) >> 2];
      var $call583 = _strncmp($69, STRING_TABLE.__str13 | 0, 4);
      if (($call583 | 0) == 0) {
        __label__ = 93;
        break;
      } else {
        var $i_5 = $inc576;
        var $call1169207 = $call1169206;
        var $154 = $27;
        var $call1159209 = $call1159208;
        var $conv1132219 = $conv1132218;
        var $conv1128228 = $conv1128227;
        var $conv1124237 = $conv1124236;
        var $conv1120246 = $conv1120245;
        var $153 = $26;
        var $sub1085248 = $sub1085247;
        var $152 = $25;
        var $151 = $24;
        var $call800250 = $call800249;
        var $call786252 = $call786251;
        var $150 = $23;
        var $call695254 = $call695253;
        var $149 = $22;
        var $148 = $21;
        var $147 = $20;
        var $146 = $19;
        var $145 = $18;
        var $144 = $17;
        var $call603256 = $call603255;
        var $call525258 = $call525257;
        var $143 = $16;
        var $142 = $15;
        var $141 = $14;
        var $140 = $13;
        var $_169260 = $_169259;
        var $139 = $12;
        var $138 = $11;
        var $call272265 = $call272264;
        var $call248272 = $call248271;
        var $137 = $10;
        var $136 = $9;
        var $135 = $8;
        var $134 = $7;
        var $conv184274 = $conv184273;
        var $conv180276 = $conv180275;
        var $conv176278 = $conv176277;
        var $133 = $6;
        var $132 = $5;
        var $131 = $inc575;
        var $storemerge164287 = $storemerge164286;
        var $130 = $3;
        var $iccp_text_1 = $iccp_text_0;
        var $iccp_length_1 = $iccp_length_0;
        __label__ = 235;
        break;
      }
     case 93:
      var $call586 = _strncmp($69, STRING_TABLE.__str14 | 0, 4);
      if (($call586 | 0) == 0) {
        __label__ = 94;
        break;
      } else {
        var $i_5 = $inc576;
        var $call1169207 = $call1169206;
        var $154 = $27;
        var $call1159209 = $call1159208;
        var $conv1132219 = $conv1132218;
        var $conv1128228 = $conv1128227;
        var $conv1124237 = $conv1124236;
        var $conv1120246 = $conv1120245;
        var $153 = $26;
        var $sub1085248 = $sub1085247;
        var $152 = $25;
        var $151 = $24;
        var $call800250 = $call800249;
        var $call786252 = $call786251;
        var $150 = $23;
        var $call695254 = $call695253;
        var $149 = $22;
        var $148 = $21;
        var $147 = $20;
        var $146 = $19;
        var $145 = $18;
        var $144 = $17;
        var $call603256 = $call603255;
        var $call525258 = $call525257;
        var $143 = $16;
        var $142 = $15;
        var $141 = $14;
        var $140 = $13;
        var $_169260 = $_169259;
        var $139 = $12;
        var $138 = $11;
        var $call272265 = $call272264;
        var $call248272 = $call248271;
        var $137 = $10;
        var $136 = $9;
        var $135 = $8;
        var $134 = $7;
        var $conv184274 = $conv184273;
        var $conv180276 = $conv180275;
        var $conv176278 = $conv176277;
        var $133 = $6;
        var $132 = $5;
        var $131 = $inc575;
        var $storemerge164287 = $storemerge164286;
        var $130 = $3;
        var $iccp_text_1 = $iccp_text_0;
        var $iccp_length_1 = $iccp_length_0;
        __label__ = 235;
        break;
      }
     case 94:
      HEAP8[_found_any_chunk_b] = 1;
      var $i_5 = $inc576;
      var $call1169207 = $call1169206;
      var $154 = $27;
      var $call1159209 = $call1159208;
      var $conv1132219 = $conv1132218;
      var $conv1128228 = $conv1128227;
      var $conv1124237 = $conv1124236;
      var $conv1120246 = $conv1120245;
      var $153 = $26;
      var $sub1085248 = $sub1085247;
      var $152 = $25;
      var $151 = $24;
      var $call800250 = $call800249;
      var $call786252 = $call786251;
      var $150 = $23;
      var $call695254 = $call695253;
      var $149 = $22;
      var $148 = $21;
      var $147 = $20;
      var $146 = $19;
      var $145 = $18;
      var $144 = $17;
      var $call603256 = $call603255;
      var $call525258 = $call525257;
      var $143 = $16;
      var $142 = $15;
      var $141 = $14;
      var $140 = $13;
      var $_169260 = $_169259;
      var $139 = $12;
      var $138 = $11;
      var $call272265 = $call272264;
      var $call248272 = $call248271;
      var $137 = $10;
      var $136 = $9;
      var $135 = $8;
      var $134 = $7;
      var $conv184274 = $conv184273;
      var $conv180276 = $conv180275;
      var $conv176278 = $conv176277;
      var $133 = $6;
      var $132 = $5;
      var $131 = $inc575;
      var $storemerge164287 = $storemerge164286;
      var $130 = $3;
      var $iccp_text_1 = $iccp_text_0;
      var $iccp_length_1 = $iccp_length_0;
      __label__ = 235;
      break;
     case 95:
      var $call592 = _strncmp($28, STRING_TABLE.__str104 | 0, 4);
      if (($call592 | 0) == 0) {
        __label__ = 96;
        break;
      } else {
        __label__ = 100;
        break;
      }
     case 96:
      var $inc595 = $inc117_ + 1 | 0;
      var $inc596 = $i_2 + 1 | 0;
      if (($inc596 | 0) < ($argc | 0)) {
        __label__ = 98;
        break;
      } else {
        __label__ = 97;
        break;
      }
     case 97:
      var $puts306 = _puts(STRING_TABLE._str16 | 0);
      _exit(1);
      throw "Reached an unreachable!";
     case 98:
      var $70 = HEAP32[$argv + ($inc596 << 2) >> 2];
      var $call603 = _atoi($70);
      if (($call603 | 0) < 1) {
        __label__ = 99;
        break;
      } else {
        var $i_5 = $inc596;
        var $call1169207 = $call1169206;
        var $154 = $27;
        var $call1159209 = $call1159208;
        var $conv1132219 = $conv1132218;
        var $conv1128228 = $conv1128227;
        var $conv1124237 = $conv1124236;
        var $conv1120246 = $conv1120245;
        var $153 = $26;
        var $sub1085248 = $sub1085247;
        var $152 = $25;
        var $151 = $24;
        var $call800250 = $call800249;
        var $call786252 = $call786251;
        var $150 = $23;
        var $call695254 = $call695253;
        var $149 = $22;
        var $148 = $21;
        var $147 = $20;
        var $146 = $19;
        var $145 = $18;
        var $144 = $17;
        var $call603256 = $call603;
        var $call525258 = $call525257;
        var $143 = $16;
        var $142 = $15;
        var $141 = $14;
        var $140 = $13;
        var $_169260 = $_169259;
        var $139 = $12;
        var $138 = $11;
        var $call272265 = $call272264;
        var $call248272 = $call248271;
        var $137 = $10;
        var $136 = $9;
        var $135 = $8;
        var $134 = $7;
        var $conv184274 = $conv184273;
        var $conv180276 = $conv180275;
        var $conv176278 = $conv176277;
        var $133 = $6;
        var $132 = $5;
        var $131 = $inc595;
        var $storemerge164287 = $storemerge164286;
        var $130 = $3;
        var $iccp_text_1 = $iccp_text_0;
        var $iccp_length_1 = $iccp_length_0;
        __label__ = 235;
        break;
      }
     case 99:
      var $i_5 = $inc596;
      var $call1169207 = $call1169206;
      var $154 = $27;
      var $call1159209 = $call1159208;
      var $conv1132219 = $conv1132218;
      var $conv1128228 = $conv1128227;
      var $conv1124237 = $conv1124236;
      var $conv1120246 = $conv1120245;
      var $153 = $26;
      var $sub1085248 = $sub1085247;
      var $152 = $25;
      var $151 = $24;
      var $call800250 = $call800249;
      var $call786252 = $call786251;
      var $150 = $23;
      var $call695254 = $call695253;
      var $149 = $22;
      var $148 = $21;
      var $147 = $20;
      var $146 = $19;
      var $145 = $18;
      var $144 = $17;
      var $call603256 = 8192;
      var $call525258 = $call525257;
      var $143 = $16;
      var $142 = $15;
      var $141 = $14;
      var $140 = $13;
      var $_169260 = $_169259;
      var $139 = $12;
      var $138 = $11;
      var $call272265 = $call272264;
      var $call248272 = $call248271;
      var $137 = $10;
      var $136 = $9;
      var $135 = $8;
      var $134 = $7;
      var $conv184274 = $conv184273;
      var $conv180276 = $conv180275;
      var $conv176278 = $conv176277;
      var $133 = $6;
      var $132 = $5;
      var $131 = $inc595;
      var $storemerge164287 = $storemerge164286;
      var $130 = $3;
      var $iccp_text_1 = $iccp_text_0;
      var $iccp_length_1 = $iccp_length_0;
      __label__ = 235;
      break;
     case 100:
      var $call613 = _strncmp($28, STRING_TABLE.__str105 | 0, 4);
      if (($call613 | 0) == 0) {
        __label__ = 101;
        break;
      } else {
        __label__ = 104;
        break;
      }
     case 101:
      var $inc617 = $i_2 + 1 | 0;
      if (($inc617 | 0) < ($argc | 0)) {
        __label__ = 103;
        break;
      } else {
        __label__ = 102;
        break;
      }
     case 102:
      var $puts307 = _puts(STRING_TABLE._str17 | 0);
      _exit(1);
      throw "Reached an unreachable!";
     case 103:
      var $inc616 = $inc117_ + 1 | 0;
      var $72 = HEAP32[$argv + ($inc617 << 2) >> 2];
      var $inc624 = HEAP32[_new_mng >> 2] + 1 | 0;
      HEAP32[_new_mng >> 2] = $inc624;
      var $i_5 = $inc617;
      var $call1169207 = $call1169206;
      var $154 = $27;
      var $call1159209 = $call1159208;
      var $conv1132219 = $conv1132218;
      var $conv1128228 = $conv1128227;
      var $conv1124237 = $conv1124236;
      var $conv1120246 = $conv1120245;
      var $153 = $26;
      var $sub1085248 = $sub1085247;
      var $152 = $25;
      var $151 = $24;
      var $call800250 = $call800249;
      var $call786252 = $call786251;
      var $150 = $23;
      var $call695254 = $call695253;
      var $149 = $22;
      var $148 = $21;
      var $147 = $20;
      var $146 = $19;
      var $145 = $18;
      var $144 = $72;
      var $call603256 = $call603255;
      var $call525258 = $call525257;
      var $143 = $16;
      var $142 = $15;
      var $141 = $14;
      var $140 = $13;
      var $_169260 = $_169259;
      var $139 = $12;
      var $138 = $11;
      var $call272265 = $call272264;
      var $call248272 = $call248271;
      var $137 = $10;
      var $136 = $9;
      var $135 = $8;
      var $134 = $7;
      var $conv184274 = $conv184273;
      var $conv180276 = $conv180275;
      var $conv176278 = $conv176277;
      var $133 = $6;
      var $132 = $5;
      var $131 = $inc616;
      var $storemerge164287 = $storemerge164286;
      var $130 = $3;
      var $iccp_text_1 = $iccp_text_0;
      var $iccp_length_1 = $iccp_length_0;
      __label__ = 235;
      break;
     case 104:
      var $call627 = _strncmp($28, STRING_TABLE.__str106 | 0, 2);
      if (($call627 | 0) == 0) {
        __label__ = 105;
        break;
      } else {
        __label__ = 110;
        break;
      }
     case 105:
      var $inc630 = $inc117_ + 1 | 0;
      var $inc631 = $i_2 + 1 | 0;
      if (($inc631 | 0) < ($argc | 0)) {
        __label__ = 107;
        break;
      } else {
        __label__ = 106;
        break;
      }
     case 106:
      var $puts308 = _puts(STRING_TABLE._str18 | 0);
      _exit(1);
      throw "Reached an unreachable!";
     case 107:
      var $74 = HEAP32[$argv + ($inc631 << 2) >> 2];
      var $call638 = _atoi($74);
      if ($call638 >>> 0 < 201) {
        __label__ = 108;
        break;
      } else {
        __label__ = 109;
        break;
      }
     case 108:
      var $arrayidx645 = $try_method + ($call638 << 2) | 0;
      HEAP32[$arrayidx645 >> 2] = 0;
      var $i_5 = $inc631;
      var $call1169207 = $call1169206;
      var $154 = $27;
      var $call1159209 = $call1159208;
      var $conv1132219 = $conv1132218;
      var $conv1128228 = $conv1128227;
      var $conv1124237 = $conv1124236;
      var $conv1120246 = $conv1120245;
      var $153 = $26;
      var $sub1085248 = $sub1085247;
      var $152 = $25;
      var $151 = $24;
      var $call800250 = $call800249;
      var $call786252 = $call786251;
      var $150 = $23;
      var $call695254 = $call695253;
      var $149 = $22;
      var $148 = $21;
      var $147 = $20;
      var $146 = $19;
      var $145 = $18;
      var $144 = $17;
      var $call603256 = $call603255;
      var $call525258 = $call525257;
      var $143 = $16;
      var $142 = $15;
      var $141 = $14;
      var $140 = $13;
      var $_169260 = $_169259;
      var $139 = $12;
      var $138 = $11;
      var $call272265 = $call272264;
      var $call248272 = $call248271;
      var $137 = $10;
      var $136 = $9;
      var $135 = $8;
      var $134 = 0;
      var $conv184274 = $conv184273;
      var $conv180276 = $conv180275;
      var $conv176278 = $conv176277;
      var $133 = $6;
      var $132 = 1;
      var $131 = $inc630;
      var $storemerge164287 = $call638;
      var $130 = $3;
      var $iccp_text_1 = $iccp_text_0;
      var $iccp_length_1 = $iccp_length_0;
      __label__ = 235;
      break;
     case 109:
      var $76 = HEAP32[_stdout >> 2];
      var $call647 = _fprintf($76, STRING_TABLE.__str107 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $call638, tempInt));
      var $i_5 = $inc631;
      var $call1169207 = $call1169206;
      var $154 = $27;
      var $call1159209 = $call1159208;
      var $conv1132219 = $conv1132218;
      var $conv1128228 = $conv1128227;
      var $conv1124237 = $conv1124236;
      var $conv1120246 = $conv1120245;
      var $153 = $26;
      var $sub1085248 = $sub1085247;
      var $152 = $25;
      var $151 = $24;
      var $call800250 = $call800249;
      var $call786252 = $call786251;
      var $150 = $23;
      var $call695254 = $call695253;
      var $149 = $22;
      var $148 = $21;
      var $147 = $20;
      var $146 = $19;
      var $145 = $18;
      var $144 = $17;
      var $call603256 = $call603255;
      var $call525258 = $call525257;
      var $143 = $16;
      var $142 = $15;
      var $141 = $14;
      var $140 = $13;
      var $_169260 = $_169259;
      var $139 = $12;
      var $138 = $11;
      var $call272265 = $call272264;
      var $call248272 = $call248271;
      var $137 = $10;
      var $136 = $9;
      var $135 = $8;
      var $134 = $7;
      var $conv184274 = $conv184273;
      var $conv180276 = $conv180275;
      var $conv176278 = $conv176277;
      var $133 = $6;
      var $132 = $5;
      var $131 = $inc630;
      var $storemerge164287 = 200;
      var $130 = $3;
      var $iccp_text_1 = $iccp_text_0;
      var $iccp_length_1 = $iccp_length_0;
      __label__ = 235;
      break;
     case 110:
      var $call651 = _strncmp($28, STRING_TABLE.__str108 | 0, 5);
      if (($call651 | 0) == 0) {
        __label__ = 111;
        break;
      } else {
        __label__ = 112;
        break;
      }
     case 111:
      var $i_5 = $i_2;
      var $call1169207 = $call1169206;
      var $154 = $27;
      var $call1159209 = $call1159208;
      var $conv1132219 = $conv1132218;
      var $conv1128228 = $conv1128227;
      var $conv1124237 = $conv1124236;
      var $conv1120246 = $conv1120245;
      var $153 = $26;
      var $sub1085248 = $sub1085247;
      var $152 = $25;
      var $151 = $24;
      var $call800250 = $call800249;
      var $call786252 = $call786251;
      var $150 = $23;
      var $call695254 = $call695253;
      var $149 = $22;
      var $148 = $21;
      var $147 = $20;
      var $146 = $19;
      var $145 = $18 + 1 | 0;
      var $144 = $17;
      var $call603256 = $call603255;
      var $call525258 = $call525257;
      var $143 = $16;
      var $142 = $15;
      var $141 = $14;
      var $140 = $13;
      var $_169260 = $_169259;
      var $139 = $12;
      var $138 = $11;
      var $call272265 = $call272264;
      var $call248272 = $call248271;
      var $137 = $10;
      var $136 = $9;
      var $135 = $8;
      var $134 = $7;
      var $conv184274 = $conv184273;
      var $conv180276 = $conv180275;
      var $conv176278 = $conv176277;
      var $133 = $6;
      var $132 = $5;
      var $131 = $inc117_;
      var $storemerge164287 = $storemerge164286;
      var $130 = $3;
      var $iccp_text_1 = $iccp_text_0;
      var $iccp_length_1 = $iccp_length_0;
      __label__ = 235;
      break;
     case 112:
      var $call657 = _strncmp($28, STRING_TABLE.__str109 | 0, 5);
      if (($call657 | 0) == 0) {
        __label__ = 113;
        break;
      } else {
        __label__ = 114;
        break;
      }
     case 113:
      var $i_5 = $i_2;
      var $call1169207 = $call1169206;
      var $154 = $27;
      var $call1159209 = $call1159208;
      var $conv1132219 = $conv1132218;
      var $conv1128228 = $conv1128227;
      var $conv1124237 = $conv1124236;
      var $conv1120246 = $conv1120245;
      var $153 = $26;
      var $sub1085248 = $sub1085247;
      var $152 = $25;
      var $151 = $24;
      var $call800250 = $call800249;
      var $call786252 = $call786251;
      var $150 = $23;
      var $call695254 = $call695253;
      var $149 = $22;
      var $148 = $21;
      var $147 = $20;
      var $146 = $19 + 1 | 0;
      var $145 = $18;
      var $144 = $17;
      var $call603256 = $call603255;
      var $call525258 = $call525257;
      var $143 = $16;
      var $142 = $15;
      var $141 = $14;
      var $140 = $13;
      var $_169260 = $_169259;
      var $139 = $12;
      var $138 = $11;
      var $call272265 = $call272264;
      var $call248272 = $call248271;
      var $137 = $10;
      var $136 = $9;
      var $135 = $8;
      var $134 = $7;
      var $conv184274 = $conv184273;
      var $conv180276 = $conv180275;
      var $conv176278 = $conv176277;
      var $133 = $6;
      var $132 = $5;
      var $131 = $inc117_;
      var $storemerge164287 = $storemerge164286;
      var $130 = $3;
      var $iccp_text_1 = $iccp_text_0;
      var $iccp_length_1 = $iccp_length_0;
      __label__ = 235;
      break;
     case 114:
      var $call663 = _strncmp($28, STRING_TABLE.__str110 | 0, 2);
      if (($call663 | 0) == 0) {
        __label__ = 115;
        break;
      } else {
        __label__ = 116;
        break;
      }
     case 115:
      var $inc666 = HEAP32[_nosave >> 2] + 1 | 0;
      HEAP32[_nosave >> 2] = $inc666;
      var $i_5 = $i_2;
      var $call1169207 = $call1169206;
      var $154 = $27;
      var $call1159209 = $call1159208;
      var $conv1132219 = $conv1132218;
      var $conv1128228 = $conv1128227;
      var $conv1124237 = $conv1124236;
      var $conv1120246 = $conv1120245;
      var $153 = $26;
      var $sub1085248 = $sub1085247;
      var $152 = $25;
      var $151 = $24;
      var $call800250 = $call800249;
      var $call786252 = $call786251;
      var $150 = $23;
      var $call695254 = $call695253;
      var $149 = $22;
      var $148 = $21;
      var $147 = $20;
      var $146 = $19;
      var $145 = $18;
      var $144 = $17;
      var $call603256 = $call603255;
      var $call525258 = $call525257;
      var $143 = $16;
      var $142 = $15;
      var $141 = $14;
      var $140 = $13;
      var $_169260 = 2;
      var $139 = $12;
      var $138 = $11;
      var $call272265 = $call272264;
      var $call248272 = $call248271;
      var $137 = $10;
      var $136 = $9;
      var $135 = $8;
      var $134 = $7;
      var $conv184274 = $conv184273;
      var $conv180276 = $conv180275;
      var $conv176278 = $conv176277;
      var $133 = $6;
      var $132 = $5;
      var $131 = $inc117_;
      var $storemerge164287 = $storemerge164286;
      var $130 = $3;
      var $iccp_text_1 = $iccp_text_0;
      var $iccp_length_1 = $iccp_length_0;
      __label__ = 235;
      break;
     case 116:
      var $call669 = _strncmp($28, STRING_TABLE.__str111 | 0, 5);
      if (($call669 | 0) == 0) {
        var $i_5 = $i_2;
        var $call1169207 = $call1169206;
        var $154 = $27;
        var $call1159209 = $call1159208;
        var $conv1132219 = $conv1132218;
        var $conv1128228 = $conv1128227;
        var $conv1124237 = $conv1124236;
        var $conv1120246 = $conv1120245;
        var $153 = $26;
        var $sub1085248 = $sub1085247;
        var $152 = $25;
        var $151 = $24;
        var $call800250 = $call800249;
        var $call786252 = $call786251;
        var $150 = $23;
        var $call695254 = $call695253;
        var $149 = $22;
        var $148 = $21;
        var $147 = 0;
        var $146 = $19;
        var $145 = $18;
        var $144 = $17;
        var $call603256 = $call603255;
        var $call525258 = $call525257;
        var $143 = $16;
        var $142 = $15;
        var $141 = $14;
        var $140 = $13;
        var $_169260 = $_169259;
        var $139 = $12;
        var $138 = $11;
        var $call272265 = $call272264;
        var $call248272 = $call248271;
        var $137 = $10;
        var $136 = $9;
        var $135 = $8;
        var $134 = $7;
        var $conv184274 = $conv184273;
        var $conv180276 = $conv180275;
        var $conv176278 = $conv176277;
        var $133 = $6;
        var $132 = $5;
        var $131 = $inc117_;
        var $storemerge164287 = $storemerge164286;
        var $130 = $3;
        var $iccp_text_1 = $iccp_text_0;
        var $iccp_length_1 = $iccp_length_0;
        __label__ = 235;
        break;
      } else {
        __label__ = 117;
        break;
      }
     case 117:
      var $call674 = _strncmp($28, STRING_TABLE.__str112 | 0, 3);
      if (($call674 | 0) == 0) {
        var $i_5 = $i_2;
        var $call1169207 = $call1169206;
        var $154 = $27;
        var $call1159209 = $call1159208;
        var $conv1132219 = $conv1132218;
        var $conv1128228 = $conv1128227;
        var $conv1124237 = $conv1124236;
        var $conv1120246 = $conv1120245;
        var $153 = $26;
        var $sub1085248 = $sub1085247;
        var $152 = $25;
        var $151 = $24;
        var $call800250 = $call800249;
        var $call786252 = $call786251;
        var $150 = $23;
        var $call695254 = $call695253;
        var $149 = $22;
        var $148 = 1;
        var $147 = $20;
        var $146 = $19;
        var $145 = $18;
        var $144 = $17;
        var $call603256 = $call603255;
        var $call525258 = $call525257;
        var $143 = $16;
        var $142 = $15;
        var $141 = $14;
        var $140 = $13;
        var $_169260 = $_169259;
        var $139 = $12;
        var $138 = $11;
        var $call272265 = $call272264;
        var $call248272 = $call248271;
        var $137 = $10;
        var $136 = $9;
        var $135 = $8;
        var $134 = $7;
        var $conv184274 = $conv184273;
        var $conv180276 = $conv180275;
        var $conv176278 = $conv176277;
        var $133 = $6;
        var $132 = $5;
        var $131 = $inc117_;
        var $storemerge164287 = $storemerge164286;
        var $130 = $3;
        var $iccp_text_1 = $iccp_text_0;
        var $iccp_length_1 = $iccp_length_0;
        __label__ = 235;
        break;
      } else {
        __label__ = 118;
        break;
      }
     case 118:
      var $call679 = _strncmp($28, STRING_TABLE.__str113 | 0, 5);
      if (($call679 | 0) == 0) {
        var $i_5 = $i_2;
        var $call1169207 = $call1169206;
        var $154 = $27;
        var $call1159209 = $call1159208;
        var $conv1132219 = $conv1132218;
        var $conv1128228 = $conv1128227;
        var $conv1124237 = $conv1124236;
        var $conv1120246 = $conv1120245;
        var $153 = $26;
        var $sub1085248 = $sub1085247;
        var $152 = $25;
        var $151 = $24;
        var $call800250 = $call800249;
        var $call786252 = $call786251;
        var $150 = $23;
        var $call695254 = $call695253;
        var $149 = 2;
        var $148 = $21;
        var $147 = $20;
        var $146 = $19;
        var $145 = $18;
        var $144 = $17;
        var $call603256 = $call603255;
        var $call525258 = $call525257;
        var $143 = $16;
        var $142 = $15;
        var $141 = $14;
        var $140 = $13;
        var $_169260 = $_169259;
        var $139 = $12;
        var $138 = $11;
        var $call272265 = $call272264;
        var $call248272 = $call248271;
        var $137 = $10;
        var $136 = $9;
        var $135 = $8;
        var $134 = $7;
        var $conv184274 = $conv184273;
        var $conv180276 = $conv180275;
        var $conv176278 = $conv176277;
        var $133 = $6;
        var $132 = $5;
        var $131 = $inc117_;
        var $storemerge164287 = $storemerge164286;
        var $130 = $3;
        var $iccp_text_1 = $iccp_text_0;
        var $iccp_length_1 = $iccp_length_0;
        __label__ = 235;
        break;
      } else {
        __label__ = 119;
        break;
      }
     case 119:
      var $call684 = _strncmp($28, STRING_TABLE.__str114 | 0, 9);
      if (($call684 | 0) == 0) {
        __label__ = 120;
        break;
      } else {
        __label__ = 124;
        break;
      }
     case 120:
      var $inc687 = $inc117_ + 1 | 0;
      var $inc688 = $i_2 + 1 | 0;
      if (($inc688 | 0) < ($argc | 0)) {
        __label__ = 122;
        break;
      } else {
        __label__ = 121;
        break;
      }
     case 121:
      var $puts309 = _puts(STRING_TABLE._str19 | 0);
      _exit(1);
      throw "Reached an unreachable!";
     case 122:
      var $78 = HEAP32[$argv + ($inc688 << 2) >> 2];
      var $call695 = _atoi($78);
      if ($call695 >>> 0 > 256) {
        __label__ = 123;
        break;
      } else {
        var $i_5 = $inc688;
        var $call1169207 = $call1169206;
        var $154 = $27;
        var $call1159209 = $call1159208;
        var $conv1132219 = $conv1132218;
        var $conv1128228 = $conv1128227;
        var $conv1124237 = $conv1124236;
        var $conv1120246 = $conv1120245;
        var $153 = $26;
        var $sub1085248 = $sub1085247;
        var $152 = $25;
        var $151 = $24;
        var $call800250 = $call800249;
        var $call786252 = $call786251;
        var $150 = $23;
        var $call695254 = $call695;
        var $149 = $22;
        var $148 = $21;
        var $147 = $20;
        var $146 = $19;
        var $145 = $18;
        var $144 = $17;
        var $call603256 = $call603255;
        var $call525258 = $call525257;
        var $143 = $16;
        var $142 = $15;
        var $141 = $14;
        var $140 = $13;
        var $_169260 = $_169259;
        var $139 = $12;
        var $138 = $11;
        var $call272265 = $call272264;
        var $call248272 = $call248271;
        var $137 = $10;
        var $136 = $9;
        var $135 = $8;
        var $134 = $7;
        var $conv184274 = $conv184273;
        var $conv180276 = $conv180275;
        var $conv176278 = $conv176277;
        var $133 = $6;
        var $132 = $5;
        var $131 = $inc687;
        var $storemerge164287 = $storemerge164286;
        var $130 = $3;
        var $iccp_text_1 = $iccp_text_0;
        var $iccp_length_1 = $iccp_length_0;
        __label__ = 235;
        break;
      }
     case 123:
      var $i_5 = $inc688;
      var $call1169207 = $call1169206;
      var $154 = $27;
      var $call1159209 = $call1159208;
      var $conv1132219 = $conv1132218;
      var $conv1128228 = $conv1128227;
      var $conv1124237 = $conv1124236;
      var $conv1120246 = $conv1120245;
      var $153 = $26;
      var $sub1085248 = $sub1085247;
      var $152 = $25;
      var $151 = $24;
      var $call800250 = $call800249;
      var $call786252 = $call786251;
      var $150 = $23;
      var $call695254 = -1;
      var $149 = $22;
      var $148 = $21;
      var $147 = $20;
      var $146 = $19;
      var $145 = $18;
      var $144 = $17;
      var $call603256 = $call603255;
      var $call525258 = $call525257;
      var $143 = $16;
      var $142 = $15;
      var $141 = $14;
      var $140 = $13;
      var $_169260 = $_169259;
      var $139 = $12;
      var $138 = $11;
      var $call272265 = $call272264;
      var $call248272 = $call248271;
      var $137 = $10;
      var $136 = $9;
      var $135 = $8;
      var $134 = $7;
      var $conv184274 = $conv184273;
      var $conv180276 = $conv180275;
      var $conv176278 = $conv176277;
      var $133 = $6;
      var $132 = $5;
      var $131 = $inc687;
      var $storemerge164287 = $storemerge164286;
      var $130 = $3;
      var $iccp_text_1 = $iccp_text_0;
      var $iccp_length_1 = $iccp_length_0;
      __label__ = 235;
      break;
     case 124:
      var $call705 = _strncmp($28, STRING_TABLE.__str115 | 0, 3);
      if (($call705 | 0) == 0) {
        __label__ = 125;
        break;
      } else {
        __label__ = 128;
        break;
      }
     case 125:
      var $inc710 = $i_2 + 1 | 0;
      if (($inc710 | 0) < ($argc | 0)) {
        __label__ = 127;
        break;
      } else {
        __label__ = 126;
        break;
      }
     case 126:
      var $puts310 = _puts(STRING_TABLE._str20 | 0);
      _exit(1);
      throw "Reached an unreachable!";
     case 127:
      var $inc709 = $23 + 1 | 0;
      var $inc708 = $inc117_ + 1 | 0;
      var $80 = HEAP32[$argv + ($inc710 << 2) >> 2];
      var $call717 = _strcpy(_pplt_string | 0, $80);
      var $i_5 = $inc710;
      var $call1169207 = $call1169206;
      var $154 = $27;
      var $call1159209 = $call1159208;
      var $conv1132219 = $conv1132218;
      var $conv1128228 = $conv1128227;
      var $conv1124237 = $conv1124236;
      var $conv1120246 = $conv1120245;
      var $153 = $26;
      var $sub1085248 = $sub1085247;
      var $152 = $25;
      var $151 = $24;
      var $call800250 = $call800249;
      var $call786252 = $call786251;
      var $150 = $inc709;
      var $call695254 = $call695253;
      var $149 = $22;
      var $148 = $21;
      var $147 = $20;
      var $146 = $19;
      var $145 = $18;
      var $144 = $17;
      var $call603256 = $call603255;
      var $call525258 = $call525257;
      var $143 = $16;
      var $142 = $15;
      var $141 = $14;
      var $140 = $13;
      var $_169260 = $_169259;
      var $139 = 1;
      var $138 = $11;
      var $call272265 = $call272264;
      var $call248272 = $call248271;
      var $137 = $10;
      var $136 = $9;
      var $135 = $8;
      var $134 = $7;
      var $conv184274 = $conv184273;
      var $conv180276 = $conv180275;
      var $conv176278 = $conv176277;
      var $133 = $6;
      var $132 = $5;
      var $131 = $inc708;
      var $storemerge164287 = $storemerge164286;
      var $130 = $3;
      var $iccp_text_1 = $iccp_text_0;
      var $iccp_length_1 = $iccp_length_0;
      __label__ = 235;
      break;
     case 128:
      var $call720 = _strncmp($28, STRING_TABLE.__str116 | 0, 2);
      if (($call720 | 0) == 0) {
        __label__ = 129;
        break;
      } else {
        __label__ = 130;
        break;
      }
     case 129:
      var $inc723 = HEAP32[_pauses >> 2] + 1 | 0;
      HEAP32[_pauses >> 2] = $inc723;
      var $i_5 = $i_2;
      var $call1169207 = $call1169206;
      var $154 = $27;
      var $call1159209 = $call1159208;
      var $conv1132219 = $conv1132218;
      var $conv1128228 = $conv1128227;
      var $conv1124237 = $conv1124236;
      var $conv1120246 = $conv1120245;
      var $153 = $26;
      var $sub1085248 = $sub1085247;
      var $152 = $25;
      var $151 = $24;
      var $call800250 = $call800249;
      var $call786252 = $call786251;
      var $150 = $23;
      var $call695254 = $call695253;
      var $149 = $22;
      var $148 = $21;
      var $147 = $20;
      var $146 = $19;
      var $145 = $18;
      var $144 = $17;
      var $call603256 = $call603255;
      var $call525258 = $call525257;
      var $143 = $16;
      var $142 = $15;
      var $141 = $14;
      var $140 = $13;
      var $_169260 = $_169259;
      var $139 = $12;
      var $138 = $11;
      var $call272265 = $call272264;
      var $call248272 = $call248271;
      var $137 = $10;
      var $136 = $9;
      var $135 = $8;
      var $134 = $7;
      var $conv184274 = $conv184273;
      var $conv180276 = $conv180275;
      var $conv176278 = $conv176277;
      var $133 = $6;
      var $132 = $5;
      var $131 = $inc117_;
      var $storemerge164287 = $storemerge164286;
      var $130 = $3;
      var $iccp_text_1 = $iccp_text_0;
      var $iccp_length_1 = $iccp_length_0;
      __label__ = 235;
      break;
     case 130:
      var $call726 = _strncmp($28, STRING_TABLE.__str117 | 0, 2);
      if (($call726 | 0) == 0) {
        __label__ = 131;
        break;
      } else {
        __label__ = 132;
        break;
      }
     case 131:
      HEAP32[_verbose >> 2] = 0;
      var $i_5 = $i_2;
      var $call1169207 = $call1169206;
      var $154 = $27;
      var $call1159209 = $call1159208;
      var $conv1132219 = $conv1132218;
      var $conv1128228 = $conv1128227;
      var $conv1124237 = $conv1124236;
      var $conv1120246 = $conv1120245;
      var $153 = $26;
      var $sub1085248 = $sub1085247;
      var $152 = $25;
      var $151 = $24;
      var $call800250 = $call800249;
      var $call786252 = $call786251;
      var $150 = $23;
      var $call695254 = $call695253;
      var $149 = $22;
      var $148 = $21;
      var $147 = $20;
      var $146 = $19;
      var $145 = $18;
      var $144 = $17;
      var $call603256 = $call603255;
      var $call525258 = $call525257;
      var $143 = $16;
      var $142 = $15;
      var $141 = $14;
      var $140 = $13;
      var $_169260 = $_169259;
      var $139 = $12;
      var $138 = $11;
      var $call272265 = $call272264;
      var $call248272 = $call248271;
      var $137 = $10;
      var $136 = $9;
      var $135 = $8;
      var $134 = $7;
      var $conv184274 = $conv184273;
      var $conv180276 = $conv180275;
      var $conv176278 = $conv176277;
      var $133 = $6;
      var $132 = $5;
      var $131 = $inc117_;
      var $storemerge164287 = $storemerge164286;
      var $130 = $3;
      var $iccp_text_1 = $iccp_text_0;
      var $iccp_length_1 = $iccp_length_0;
      __label__ = 235;
      break;
     case 132:
      var $call731 = _strncmp($28, STRING_TABLE.__str118 | 0, 7);
      if (($call731 | 0) == 0) {
        var $i_5 = $i_2;
        var $call1169207 = $call1169206;
        var $154 = $27;
        var $call1159209 = $call1159208;
        var $conv1132219 = $conv1132218;
        var $conv1128228 = $conv1128227;
        var $conv1124237 = $conv1124236;
        var $conv1120246 = $conv1120245;
        var $153 = $26;
        var $sub1085248 = $sub1085247;
        var $152 = $25;
        var $151 = $24;
        var $call800250 = $call800249;
        var $call786252 = $call786251;
        var $150 = $23;
        var $call695254 = $call695253;
        var $149 = $22;
        var $148 = $21;
        var $147 = $20;
        var $146 = $19;
        var $145 = $18;
        var $144 = $17;
        var $call603256 = $call603255;
        var $call525258 = $call525257;
        var $143 = $16;
        var $142 = $15;
        var $141 = $14;
        var $140 = $13;
        var $_169260 = $_169259;
        var $139 = $12;
        var $138 = $11;
        var $call272265 = $call272264;
        var $call248272 = $call248271;
        var $137 = $10;
        var $136 = $9;
        var $135 = $8;
        var $134 = $7;
        var $conv184274 = $conv184273;
        var $conv180276 = $conv180275;
        var $conv176278 = $conv176277;
        var $133 = $6;
        var $132 = $5;
        var $131 = $inc117_;
        var $storemerge164287 = $storemerge164286;
        var $130 = 1;
        var $iccp_text_1 = $iccp_text_0;
        var $iccp_length_1 = $iccp_length_0;
        __label__ = 235;
        break;
      } else {
        __label__ = 133;
        break;
      }
     case 133:
      var $call737 = _strncmp($28, STRING_TABLE.__str119 | 0, 4);
      if (($call737 | 0) == 0) {
        __label__ = 134;
        break;
      } else {
        __label__ = 145;
        break;
      }
     case 134:
      var $inc740 = $inc117_ + 1 | 0;
      var $inc741 = $i_2 + 1 | 0;
      if (($inc741 | 0) < ($argc | 0)) {
        __label__ = 136;
        break;
      } else {
        __label__ = 135;
        break;
      }
     case 135:
      var $puts311 = _puts(STRING_TABLE._str21 | 0);
      _exit(1);
      throw "Reached an unreachable!";
     case 136:
      HEAP8[_found_gAMA_b] = 1;
      var $arrayidx753 = $argv + ($inc741 << 2) | 0;
      var $82 = HEAP32[$arrayidx753 >> 2];
      var $call754 = _strlen($82);
      if (($call754 | 0) > 0) {
        var $nzeroes751_0643 = -1;
        var $n749_0644 = $arraydecay750;
        var $c747_0645 = 0;
        var $83 = $82;
        __label__ = 137;
        break;
      } else {
        var $n749_2_lcssa = $arraydecay750;
        __label__ = 144;
        break;
      }
     case 137:
      var $83;
      var $c747_0645;
      var $n749_0644;
      var $nzeroes751_0643;
      var $84 = HEAP8[$83 + $c747_0645 | 0];
      if ($84 << 24 >> 24 == 46) {
        var $n749_1 = $n749_0644;
        var $nzeroes751_1 = 5;
        __label__ = 140;
        break;
      } else {
        __label__ = 138;
        break;
      }
     case 138:
      if (($nzeroes751_0643 | 0) == 0) {
        var $n749_1 = $n749_0644;
        var $nzeroes751_1 = 0;
        __label__ = 140;
        break;
      } else {
        __label__ = 139;
        break;
      }
     case 139:
      HEAP8[$n749_0644] = $84;
      var $n749_1 = $n749_0644 + 1 | 0;
      var $nzeroes751_1 = $nzeroes751_0643 - 1 | 0;
      __label__ = 140;
      break;
     case 140:
      var $nzeroes751_1;
      var $n749_1;
      var $inc775 = $c747_0645 + 1 | 0;
      if (($inc775 | 0) == ($call754 | 0)) {
        __label__ = 142;
        break;
      } else {
        __label__ = 141;
        break;
      }
     case 141:
      var $nzeroes751_0643 = $nzeroes751_1;
      var $n749_0644 = $n749_1;
      var $c747_0645 = $inc775;
      var $83 = HEAP32[$arrayidx753 >> 2];
      __label__ = 137;
      break;
     case 142:
      if (($nzeroes751_1 | 0) > 0) {
        __label__ = 143;
        break;
      } else {
        var $n749_2_lcssa = $n749_1;
        __label__ = 144;
        break;
      }
     case 143:
      _memset($n749_1, 48, $nzeroes751_1, 1);
      var $n749_2_lcssa = $n749_1 + $nzeroes751_1 | 0;
      __label__ = 144;
      break;
     case 144:
      var $n749_2_lcssa;
      HEAP8[$n749_2_lcssa] = 0;
      var $call786 = _atoi($arraydecay750);
      var $i_5 = $inc741;
      var $call1169207 = $call1169206;
      var $154 = $27;
      var $call1159209 = $call1159208;
      var $conv1132219 = $conv1132218;
      var $conv1128228 = $conv1128227;
      var $conv1124237 = $conv1124236;
      var $conv1120246 = $conv1120245;
      var $153 = $26;
      var $sub1085248 = $sub1085247;
      var $152 = $25;
      var $151 = $24;
      var $call800250 = $call800249;
      var $call786252 = $call786;
      var $150 = $23;
      var $call695254 = $call695253;
      var $149 = $22;
      var $148 = $21;
      var $147 = $20;
      var $146 = $19;
      var $145 = $18;
      var $144 = $17;
      var $call603256 = $call603255;
      var $call525258 = $call525257;
      var $143 = $16;
      var $142 = $15;
      var $141 = $14;
      var $140 = $13;
      var $_169260 = $_169259;
      var $139 = 1;
      var $138 = $11;
      var $call272265 = $call272264;
      var $call248272 = $call248271;
      var $137 = $10;
      var $136 = $9;
      var $135 = $8;
      var $134 = $7;
      var $conv184274 = $conv184273;
      var $conv180276 = $conv180275;
      var $conv176278 = $conv176277;
      var $133 = $6;
      var $132 = $5;
      var $131 = $inc740;
      var $storemerge164287 = $storemerge164286;
      var $130 = $3;
      var $iccp_text_1 = $iccp_text_0;
      var $iccp_length_1 = $iccp_length_0;
      __label__ = 235;
      break;
     case 145:
      var $call789 = _strncmp($28, STRING_TABLE.__str120 | 0, 4);
      if (($call789 | 0) == 0) {
        __label__ = 146;
        break;
      } else {
        __label__ = 149;
        break;
      }
     case 146:
      var $inc793 = $i_2 + 1 | 0;
      if (($inc793 | 0) < ($argc | 0)) {
        __label__ = 148;
        break;
      } else {
        __label__ = 147;
        break;
      }
     case 147:
      var $puts312 = _puts(STRING_TABLE._str22 | 0);
      _exit(1);
      throw "Reached an unreachable!";
     case 148:
      var $inc792 = $inc117_ + 1 | 0;
      var $85 = HEAP32[$argv + ($inc793 << 2) >> 2];
      var $call800 = _atoi($85);
      var $i_5 = $inc793;
      var $call1169207 = $call1169206;
      var $154 = $27;
      var $call1159209 = $call1159208;
      var $conv1132219 = $conv1132218;
      var $conv1128228 = $conv1128227;
      var $conv1124237 = $conv1124236;
      var $conv1120246 = $conv1120245;
      var $153 = $26;
      var $sub1085248 = $sub1085247;
      var $152 = $25;
      var $151 = $24;
      var $call800250 = $call800;
      var $call786252 = $call786251;
      var $150 = $23;
      var $call695254 = $call695253;
      var $149 = $22;
      var $148 = $21;
      var $147 = $20;
      var $146 = $19;
      var $145 = $18;
      var $144 = $17;
      var $call603256 = $call603255;
      var $call525258 = $call525257;
      var $143 = $16;
      var $142 = $15;
      var $141 = $14;
      var $140 = $13;
      var $_169260 = $_169259;
      var $139 = 1;
      var $138 = $11;
      var $call272265 = $call272264;
      var $call248272 = $call248271;
      var $137 = $10;
      var $136 = $9;
      var $135 = $8;
      var $134 = $7;
      var $conv184274 = $conv184273;
      var $conv180276 = $conv180275;
      var $conv176278 = $conv176277;
      var $133 = $6;
      var $132 = $5;
      var $131 = $inc792;
      var $storemerge164287 = $storemerge164286;
      var $130 = $3;
      var $iccp_text_1 = $iccp_text_0;
      var $iccp_length_1 = $iccp_length_0;
      __label__ = 235;
      break;
     case 149:
      var $call803 = _strncmp($28, STRING_TABLE.__str121 | 0, 2);
      if (($call803 | 0) == 0) {
        __label__ = 150;
        break;
      } else {
        __label__ = 155;
        break;
      }
     case 150:
      HEAP32[_remove_chunks >> 2] = $i_2;
      var $inc806 = $inc117_ + 1 | 0;
      var $inc807 = $i_2 + 1 | 0;
      if (($inc807 | 0) < ($argc | 0)) {
        __label__ = 152;
        break;
      } else {
        __label__ = 151;
        break;
      }
     case 151:
      var $puts313 = _puts(STRING_TABLE._str23 | 0);
      _exit(1);
      throw "Reached an unreachable!";
     case 152:
      var $86 = HEAP32[$argv + ($inc807 << 2) >> 2];
      var $call814 = _strncmp($86, STRING_TABLE.__str13 | 0, 4);
      if (($call814 | 0) == 0) {
        __label__ = 153;
        break;
      } else {
        var $i_5 = $inc807;
        var $call1169207 = $call1169206;
        var $154 = $27;
        var $call1159209 = $call1159208;
        var $conv1132219 = $conv1132218;
        var $conv1128228 = $conv1128227;
        var $conv1124237 = $conv1124236;
        var $conv1120246 = $conv1120245;
        var $153 = $26;
        var $sub1085248 = $sub1085247;
        var $152 = $25;
        var $151 = $24;
        var $call800250 = $call800249;
        var $call786252 = $call786251;
        var $150 = $23;
        var $call695254 = $call695253;
        var $149 = $22;
        var $148 = $21;
        var $147 = $20;
        var $146 = $19;
        var $145 = $18;
        var $144 = $17;
        var $call603256 = $call603255;
        var $call525258 = $call525257;
        var $143 = $16;
        var $142 = $15;
        var $141 = $14;
        var $140 = $13;
        var $_169260 = $_169259;
        var $139 = $12;
        var $138 = $11;
        var $call272265 = $call272264;
        var $call248272 = $call248271;
        var $137 = $10;
        var $136 = $9;
        var $135 = $8;
        var $134 = $7;
        var $conv184274 = $conv184273;
        var $conv180276 = $conv180275;
        var $conv176278 = $conv176277;
        var $133 = $6;
        var $132 = $5;
        var $131 = $inc806;
        var $storemerge164287 = $storemerge164286;
        var $130 = $3;
        var $iccp_text_1 = $iccp_text_0;
        var $iccp_length_1 = $iccp_length_0;
        __label__ = 235;
        break;
      }
     case 153:
      var $call818 = _strncmp($86, STRING_TABLE.__str14 | 0, 4);
      if (($call818 | 0) == 0) {
        __label__ = 154;
        break;
      } else {
        var $i_5 = $inc807;
        var $call1169207 = $call1169206;
        var $154 = $27;
        var $call1159209 = $call1159208;
        var $conv1132219 = $conv1132218;
        var $conv1128228 = $conv1128227;
        var $conv1124237 = $conv1124236;
        var $conv1120246 = $conv1120245;
        var $153 = $26;
        var $sub1085248 = $sub1085247;
        var $152 = $25;
        var $151 = $24;
        var $call800250 = $call800249;
        var $call786252 = $call786251;
        var $150 = $23;
        var $call695254 = $call695253;
        var $149 = $22;
        var $148 = $21;
        var $147 = $20;
        var $146 = $19;
        var $145 = $18;
        var $144 = $17;
        var $call603256 = $call603255;
        var $call525258 = $call525257;
        var $143 = $16;
        var $142 = $15;
        var $141 = $14;
        var $140 = $13;
        var $_169260 = $_169259;
        var $139 = $12;
        var $138 = $11;
        var $call272265 = $call272264;
        var $call248272 = $call248271;
        var $137 = $10;
        var $136 = $9;
        var $135 = $8;
        var $134 = $7;
        var $conv184274 = $conv184273;
        var $conv180276 = $conv180275;
        var $conv176278 = $conv176277;
        var $133 = $6;
        var $132 = $5;
        var $131 = $inc806;
        var $storemerge164287 = $storemerge164286;
        var $130 = $3;
        var $iccp_text_1 = $iccp_text_0;
        var $iccp_length_1 = $iccp_length_0;
        __label__ = 235;
        break;
      }
     case 154:
      HEAP8[_image_is_immutable_b] = 0;
      var $i_5 = $inc807;
      var $call1169207 = $call1169206;
      var $154 = $27;
      var $call1159209 = $call1159208;
      var $conv1132219 = $conv1132218;
      var $conv1128228 = $conv1128227;
      var $conv1124237 = $conv1124236;
      var $conv1120246 = $conv1120245;
      var $153 = $26;
      var $sub1085248 = $sub1085247;
      var $152 = $25;
      var $151 = $24;
      var $call800250 = $call800249;
      var $call786252 = $call786251;
      var $150 = $23;
      var $call695254 = $call695253;
      var $149 = $22;
      var $148 = $21;
      var $147 = $20;
      var $146 = $19;
      var $145 = $18;
      var $144 = $17;
      var $call603256 = $call603255;
      var $call525258 = $call525257;
      var $143 = $16;
      var $142 = $15;
      var $141 = $14;
      var $140 = $13;
      var $_169260 = $_169259;
      var $139 = $12;
      var $138 = $11;
      var $call272265 = $call272264;
      var $call248272 = $call248271;
      var $137 = $10;
      var $136 = $9;
      var $135 = $8;
      var $134 = $7;
      var $conv184274 = $conv184273;
      var $conv180276 = $conv180275;
      var $conv176278 = $conv176277;
      var $133 = $6;
      var $132 = $5;
      var $131 = $inc806;
      var $storemerge164287 = $storemerge164286;
      var $130 = $3;
      var $iccp_text_1 = $iccp_text_0;
      var $iccp_length_1 = $iccp_length_0;
      __label__ = 235;
      break;
     case 155:
      var $call824 = _strncmp($28, STRING_TABLE.__str122 | 0, 5);
      if (($call824 | 0) == 0) {
        __label__ = 156;
        break;
      } else {
        __label__ = 157;
        break;
      }
     case 156:
      var $inc827 = HEAP32[_all_chunks_are_safe >> 2] + 1 | 0;
      HEAP32[_all_chunks_are_safe >> 2] = $inc827;
      var $i_5 = $i_2;
      var $call1169207 = $call1169206;
      var $154 = $27;
      var $call1159209 = $call1159208;
      var $conv1132219 = $conv1132218;
      var $conv1128228 = $conv1128227;
      var $conv1124237 = $conv1124236;
      var $conv1120246 = $conv1120245;
      var $153 = $26;
      var $sub1085248 = $sub1085247;
      var $152 = $25;
      var $151 = $24;
      var $call800250 = $call800249;
      var $call786252 = $call786251;
      var $150 = $23;
      var $call695254 = $call695253;
      var $149 = $22;
      var $148 = $21;
      var $147 = $20;
      var $146 = $19;
      var $145 = $18;
      var $144 = $17;
      var $call603256 = $call603255;
      var $call525258 = $call525257;
      var $143 = $16;
      var $142 = $15;
      var $141 = $14;
      var $140 = $13;
      var $_169260 = $_169259;
      var $139 = $12;
      var $138 = $11;
      var $call272265 = $call272264;
      var $call248272 = $call248271;
      var $137 = $10;
      var $136 = $9;
      var $135 = $8;
      var $134 = $7;
      var $conv184274 = $conv184273;
      var $conv180276 = $conv180275;
      var $conv176278 = $conv176277;
      var $133 = $6;
      var $132 = $5;
      var $131 = $inc117_;
      var $storemerge164287 = $storemerge164286;
      var $130 = $3;
      var $iccp_text_1 = $iccp_text_0;
      var $iccp_length_1 = $iccp_length_0;
      __label__ = 235;
      break;
     case 157:
      var $call830 = _strncmp($28, STRING_TABLE.__str123 | 0, 5);
      if (($call830 | 0) == 0) {
        __label__ = 159;
        break;
      } else {
        __label__ = 158;
        break;
      }
     case 158:
      var $call834 = _strncmp($28, STRING_TABLE.__str124 | 0, 5);
      if (($call834 | 0) == 0) {
        __label__ = 159;
        break;
      } else {
        __label__ = 163;
        break;
      }
     case 159:
      HEAP32[_intent >> 2] = 0;
      var $inc837 = $i_2 + 1 | 0;
      if (($inc837 | 0) < ($argc | 0)) {
        __label__ = 161;
        break;
      } else {
        __label__ = 160;
        break;
      }
     case 160:
      var $puts314 = _puts(STRING_TABLE._str24 | 0);
      _exit(1);
      throw "Reached an unreachable!";
     case 161:
      var $88 = HEAPU32[$argv + ($inc837 << 2) >> 2];
      if ((HEAP8[$88] - 48 & 255 & 255) < 4) {
        __label__ = 162;
        break;
      } else {
        var $i_5 = $i_2;
        var $call1169207 = $call1169206;
        var $154 = $27;
        var $call1159209 = $call1159208;
        var $conv1132219 = $conv1132218;
        var $conv1128228 = $conv1128227;
        var $conv1124237 = $conv1124236;
        var $conv1120246 = $conv1120245;
        var $153 = $26;
        var $sub1085248 = $sub1085247;
        var $152 = $25;
        var $151 = $24;
        var $call800250 = $call800249;
        var $call786252 = $call786251;
        var $150 = $23;
        var $call695254 = $call695253;
        var $149 = $22;
        var $148 = $21;
        var $147 = $20;
        var $146 = $19;
        var $145 = $18;
        var $144 = $17;
        var $call603256 = $call603255;
        var $call525258 = 45455;
        var $143 = $16;
        var $142 = $15;
        var $141 = $14;
        var $140 = $13;
        var $_169260 = $_169259;
        var $139 = $12;
        var $138 = $11;
        var $call272265 = $call272264;
        var $call248272 = $call248271;
        var $137 = $10;
        var $136 = $9;
        var $135 = $8;
        var $134 = $7;
        var $conv184274 = $conv184273;
        var $conv180276 = $conv180275;
        var $conv176278 = $conv176277;
        var $133 = $6;
        var $132 = $5;
        var $131 = $inc117_;
        var $storemerge164287 = $storemerge164286;
        var $130 = $3;
        var $iccp_text_1 = $iccp_text_0;
        var $iccp_length_1 = $iccp_length_0;
        __label__ = 235;
        break;
      }
     case 162:
      var $inc859 = $inc117_ + 1 | 0;
      var $call861 = _atoi($88);
      HEAP32[_intent >> 2] = $call861;
      var $i_5 = $inc837;
      var $call1169207 = $call1169206;
      var $154 = $27;
      var $call1159209 = $call1159208;
      var $conv1132219 = $conv1132218;
      var $conv1128228 = $conv1128227;
      var $conv1124237 = $conv1124236;
      var $conv1120246 = $conv1120245;
      var $153 = $26;
      var $sub1085248 = $sub1085247;
      var $152 = $25;
      var $151 = $24;
      var $call800250 = $call800249;
      var $call786252 = $call786251;
      var $150 = $23;
      var $call695254 = $call695253;
      var $149 = $22;
      var $148 = $21;
      var $147 = $20;
      var $146 = $19;
      var $145 = $18;
      var $144 = $17;
      var $call603256 = $call603255;
      var $call525258 = 45455;
      var $143 = $16;
      var $142 = $15;
      var $141 = $14;
      var $140 = $13;
      var $_169260 = $_169259;
      var $139 = 1;
      var $138 = $11;
      var $call272265 = $call272264;
      var $call248272 = $call248271;
      var $137 = $10;
      var $136 = $9;
      var $135 = $8;
      var $134 = $7;
      var $conv184274 = $conv184273;
      var $conv180276 = $conv180275;
      var $conv176278 = $conv176277;
      var $133 = $6;
      var $132 = $5;
      var $131 = $inc859;
      var $storemerge164287 = $storemerge164286;
      var $130 = $3;
      var $iccp_text_1 = $iccp_text_0;
      var $iccp_length_1 = $iccp_length_0;
      __label__ = 235;
      break;
     case 163:
      var $call867 = _strncmp($28, STRING_TABLE.__str129 | 0, 5);
      if (($call867 | 0) == 0) {
        __label__ = 165;
        break;
      } else {
        __label__ = 164;
        break;
      }
     case 164:
      var $call871 = _strncmp($28, STRING_TABLE.__str130 | 0, 5);
      if (($call871 | 0) == 0) {
        __label__ = 165;
        break;
      } else {
        __label__ = 169;
        break;
      }
     case 165:
      var $inc874 = $i_2 + 1 | 0;
      if (($inc874 | 0) < ($argc | 0)) {
        __label__ = 167;
        break;
      } else {
        __label__ = 166;
        break;
      }
     case 166:
      var $puts335 = _puts(STRING_TABLE._str25 | 0);
      _exit(1);
      throw "Reached an unreachable!";
     case 167:
      var $89 = HEAPU32[$argv + ($inc874 << 2) >> 2];
      if ((HEAP8[$89] - 48 & 255 & 255) < 2) {
        __label__ = 168;
        break;
      } else {
        var $i_5 = $i_2;
        var $call1169207 = $call1169206;
        var $154 = $27;
        var $call1159209 = $call1159208;
        var $conv1132219 = $conv1132218;
        var $conv1128228 = $conv1128227;
        var $conv1124237 = $conv1124236;
        var $conv1120246 = $conv1120245;
        var $153 = $26;
        var $sub1085248 = $sub1085247;
        var $152 = $25;
        var $151 = -1;
        var $call800250 = $call800249;
        var $call786252 = $call786251;
        var $150 = $23;
        var $call695254 = $call695253;
        var $149 = $22;
        var $148 = $21;
        var $147 = $20;
        var $146 = $19;
        var $145 = $18;
        var $144 = $17;
        var $call603256 = $call603255;
        var $call525258 = $call525257;
        var $143 = $16;
        var $142 = $15;
        var $141 = $14;
        var $140 = $13;
        var $_169260 = $_169259;
        var $139 = $12;
        var $138 = $11;
        var $call272265 = $call272264;
        var $call248272 = $call248271;
        var $137 = $10;
        var $136 = $9;
        var $135 = $8;
        var $134 = $7;
        var $conv184274 = $conv184273;
        var $conv180276 = $conv180275;
        var $conv176278 = $conv176277;
        var $133 = $6;
        var $132 = $5;
        var $131 = $inc117_;
        var $storemerge164287 = $storemerge164286;
        var $130 = $3;
        var $iccp_text_1 = $iccp_text_0;
        var $iccp_length_1 = $iccp_length_0;
        __label__ = 235;
        break;
      }
     case 168:
      var $inc888 = $inc117_ + 1 | 0;
      var $call890 = _atoi($89);
      var $i_5 = $inc874;
      var $call1169207 = $call1169206;
      var $154 = $27;
      var $call1159209 = $call1159208;
      var $conv1132219 = $conv1132218;
      var $conv1128228 = $conv1128227;
      var $conv1124237 = $conv1124236;
      var $conv1120246 = $conv1120245;
      var $153 = $26;
      var $sub1085248 = $sub1085247;
      var $152 = $25;
      var $151 = $call890;
      var $call800250 = $call800249;
      var $call786252 = $call786251;
      var $150 = $23;
      var $call695254 = $call695253;
      var $149 = $22;
      var $148 = $21;
      var $147 = $20;
      var $146 = $19;
      var $145 = $18;
      var $144 = $17;
      var $call603256 = $call603255;
      var $call525258 = $call525257;
      var $143 = $16;
      var $142 = $15;
      var $141 = $14;
      var $140 = $13;
      var $_169260 = $_169259;
      var $139 = 1;
      var $138 = $11;
      var $call272265 = $call272264;
      var $call248272 = $call248271;
      var $137 = $10;
      var $136 = $9;
      var $135 = $8;
      var $134 = $7;
      var $conv184274 = $conv184273;
      var $conv180276 = $conv180275;
      var $conv176278 = $conv176277;
      var $133 = $6;
      var $132 = $5;
      var $131 = $inc888;
      var $storemerge164287 = $storemerge164286;
      var $130 = $3;
      var $iccp_text_1 = $iccp_text_0;
      var $iccp_length_1 = $iccp_length_0;
      __label__ = 235;
      break;
     case 169:
      var $call896 = _strncmp($28, STRING_TABLE.__str131 | 0, 2);
      if (($call896 | 0) == 0) {
        __label__ = 170;
        break;
      } else {
        __label__ = 171;
        break;
      }
     case 170:
      HEAP32[_verbose >> 2] = 0;
      var $i_5 = $i_2;
      var $call1169207 = $call1169206;
      var $154 = $27;
      var $call1159209 = $call1159208;
      var $conv1132219 = $conv1132218;
      var $conv1128228 = $conv1128227;
      var $conv1124237 = $conv1124236;
      var $conv1120246 = $conv1120245;
      var $153 = $26;
      var $sub1085248 = $sub1085247;
      var $152 = $25;
      var $151 = $24;
      var $call800250 = $call800249;
      var $call786252 = $call786251;
      var $150 = $23;
      var $call695254 = $call695253;
      var $149 = $22;
      var $148 = $21;
      var $147 = $20;
      var $146 = $19;
      var $145 = $18;
      var $144 = $17;
      var $call603256 = $call603255;
      var $call525258 = $call525257;
      var $143 = $16;
      var $142 = $15;
      var $141 = $14;
      var $140 = $13;
      var $_169260 = $_169259;
      var $139 = $12;
      var $138 = $11;
      var $call272265 = $call272264;
      var $call248272 = $call248271;
      var $137 = $10;
      var $136 = $9;
      var $135 = $8;
      var $134 = $7;
      var $conv184274 = $conv184273;
      var $conv180276 = $conv180275;
      var $conv176278 = $conv176277;
      var $133 = $6;
      var $132 = $5;
      var $131 = $inc117_;
      var $storemerge164287 = $storemerge164286;
      var $130 = $3;
      var $iccp_text_1 = $iccp_text_0;
      var $iccp_length_1 = $iccp_length_0;
      __label__ = 235;
      break;
     case 171:
      var $call901 = _strncmp($28, STRING_TABLE.__str132 | 0, 5);
      if (($call901 | 0) == 0) {
        __label__ = 179;
        break;
      } else {
        __label__ = 172;
        break;
      }
     case 172:
      var $call905 = _strncmp($28, STRING_TABLE.__str133 | 0, 5);
      if (($call905 | 0) == 0) {
        __label__ = 179;
        break;
      } else {
        __label__ = 173;
        break;
      }
     case 173:
      var $call909 = _strncmp($28, STRING_TABLE.__str134 | 0, 5);
      if (($call909 | 0) == 0) {
        __label__ = 179;
        break;
      } else {
        __label__ = 174;
        break;
      }
     case 174:
      var $call913 = _strncmp($28, STRING_TABLE.__str135 | 0, 5);
      if (($call913 | 0) == 0) {
        __label__ = 179;
        break;
      } else {
        __label__ = 175;
        break;
      }
     case 175:
      var $call917 = _strncmp($28, STRING_TABLE.__str136 | 0, 6);
      if (($call917 | 0) == 0) {
        __label__ = 179;
        break;
      } else {
        __label__ = 176;
        break;
      }
     case 176:
      var $call921 = _strncmp($28, STRING_TABLE.__str137 | 0, 6);
      if (($call921 | 0) == 0) {
        __label__ = 179;
        break;
      } else {
        __label__ = 177;
        break;
      }
     case 177:
      var $call925 = _strncmp($28, STRING_TABLE.__str138 | 0, 5);
      if (($call925 | 0) == 0) {
        __label__ = 179;
        break;
      } else {
        __label__ = 178;
        break;
      }
     case 178:
      var $call929 = _strncmp($28, STRING_TABLE.__str139 | 0, 5);
      if (($call929 | 0) == 0) {
        __label__ = 179;
        break;
      } else {
        __label__ = 207;
        break;
      }
     case 179:
      var $inc933 = $i_2 + 3 | 0;
      if (($inc933 | 0) < ($argc | 0)) {
        __label__ = 181;
        break;
      } else {
        __label__ = 180;
        break;
      }
     case 180:
      var $puts346 = _puts(STRING_TABLE._str26 | 0);
      _exit(1);
      throw "Reached an unreachable!";
     case 181:
      var $add932 = $i_2 + 2 | 0;
      var $90 = HEAPU32[$argv + ($add932 << 2) >> 2];
      var $call941 = _strlen($90);
      if ($call941 >>> 0 < 80) {
        __label__ = 182;
        break;
      } else {
        __label__ = 199;
        break;
      }
     case 182:
      var $arrayidx946 = $argv + ($inc933 << 2) | 0;
      var $91 = HEAP32[$arrayidx946 >> 2];
      var $call947 = _strlen($91);
      if ($call947 >>> 0 < 2048 & ($25 | 0) < 10) {
        __label__ = 183;
        break;
      } else {
        __label__ = 199;
        break;
      }
     case 183:
      var $call955 = _strncmp($28, STRING_TABLE.__str140 | 0, 3);
      if (($call955 | 0) == 0) {
        __label__ = 184;
        break;
      } else {
        __label__ = 185;
        break;
      }
     case 184:
      HEAP32[_text_compression + ($25 << 2) >> 2] = 2;
      __label__ = 190;
      break;
     case 185:
      var $call961 = _strncmp($28, STRING_TABLE.__str141 | 0, 2);
      if (($call961 | 0) == 0) {
        __label__ = 186;
        break;
      } else {
        __label__ = 187;
        break;
      }
     case 186:
      HEAP32[_text_compression + ($25 << 2) >> 2] = 0;
      __label__ = 190;
      break;
     case 187:
      var $call967 = _strncmp($28, STRING_TABLE.__str142 | 0, 2);
      var $arrayidx972 = _text_compression + ($25 << 2) | 0;
      if (($call967 | 0) == 0) {
        __label__ = 188;
        break;
      } else {
        __label__ = 189;
        break;
      }
     case 188:
      HEAP32[$arrayidx972 >> 2] = -1;
      __label__ = 190;
      break;
     case 189:
      HEAP32[$arrayidx972 >> 2] = 1;
      __label__ = 190;
      break;
     case 190:
      var $add976 = $inc117_ + 3 | 0;
      var $lhsc347 = HEAP8[HEAP32[$argv + ($i_2 + 1 << 2) >> 2]];
      if ($lhsc347 << 24 >> 24 == 98) {
        __label__ = 191;
        break;
      } else if ($lhsc347 << 24 >> 24 == 97) {
        __label__ = 192;
        break;
      } else {
        __label__ = 193;
        break;
      }
     case 191:
      HEAP32[_text_where + ($25 << 2) >> 2] = 1;
      __label__ = 193;
      break;
     case 192:
      HEAP32[_text_where + ($25 << 2) >> 2] = 2;
      __label__ = 193;
      break;
     case 193:
      var $mul = $25 * 80 | 0;
      var $arrayidx990 = _text_keyword + $mul | 0;
      var $call993 = _strcpy($arrayidx990, $90);
      if ((HEAP32[_text_compression + ($25 << 2) >> 2] | 0) < 1) {
        __label__ = 194;
        break;
      } else {
        __label__ = 195;
        break;
      }
     case 194:
      HEAP8[_text_lang + $mul | 0] = 0;
      HEAP8[_text_lang_key + $mul | 0] = 0;
      var $i_3 = $add932;
      var $96 = $add976;
      __label__ = 198;
      break;
     case 195:
      if (($i_2 + 5 | 0) < ($argc | 0)) {
        __label__ = 197;
        break;
      } else {
        __label__ = 196;
        break;
      }
     case 196:
      var $puts357 = _puts(STRING_TABLE._str27 | 0);
      _exit(1);
      throw "Reached an unreachable!";
     case 197:
      var $add1011 = $inc117_ + 5 | 0;
      var $arrayidx1013 = _text_lang + $mul | 0;
      var $94 = HEAP32[$arrayidx946 >> 2];
      var $call1016 = _strcpy($arrayidx1013, $94);
      var $arrayidx1018 = _text_lang_key + $mul | 0;
      var $inc1019 = $i_2 + 4 | 0;
      var $95 = HEAP32[$argv + ($inc1019 << 2) >> 2];
      var $call1021 = _strcpy($arrayidx1018, $95);
      var $i_3 = $inc1019;
      var $96 = $add1011;
      __label__ = 198;
      break;
     case 198:
      var $96;
      var $i_3;
      var $arrayidx1024 = _text_text + ($25 << 11) | 0;
      var $inc1025 = $i_3 + 1 | 0;
      var $97 = HEAP32[$argv + ($inc1025 << 2) >> 2];
      var $call1027 = _strcpy($arrayidx1024, $97);
      var $i_5 = $inc1025;
      var $call1169207 = $call1169206;
      var $154 = $27;
      var $call1159209 = $call1159208;
      var $conv1132219 = $conv1132218;
      var $conv1128228 = $conv1128227;
      var $conv1124237 = $conv1124236;
      var $conv1120246 = $conv1120245;
      var $153 = $26;
      var $sub1085248 = $sub1085247;
      var $152 = $25 + 1 | 0;
      var $151 = $24;
      var $call800250 = $call800249;
      var $call786252 = $call786251;
      var $150 = $23;
      var $call695254 = $call695253;
      var $149 = $22;
      var $148 = $21;
      var $147 = $20;
      var $146 = $19;
      var $145 = $18;
      var $144 = $17;
      var $call603256 = $call603255;
      var $call525258 = $call525257;
      var $143 = $16;
      var $142 = $15;
      var $141 = $14;
      var $140 = $13;
      var $_169260 = $_169259;
      var $139 = $12;
      var $138 = $11;
      var $call272265 = $call272264;
      var $call248272 = $call248271;
      var $137 = $10;
      var $136 = $9;
      var $135 = $8;
      var $134 = $7;
      var $conv184274 = $conv184273;
      var $conv180276 = $conv180275;
      var $conv176278 = $conv176277;
      var $133 = $6;
      var $132 = $5;
      var $131 = $96;
      var $storemerge164287 = $storemerge164286;
      var $130 = $3;
      var $iccp_text_1 = $iccp_text_0;
      var $iccp_length_1 = $iccp_length_0;
      __label__ = 235;
      break;
     case 199:
      var $98 = HEAP32[_stdout >> 2];
      if (($25 | 0) > 9) {
        __label__ = 200;
        break;
      } else {
        __label__ = 201;
        break;
      }
     case 200:
      var $99 = _fwrite(STRING_TABLE.__str145 | 0, 43, 1, $98);
      __label__ = 202;
      break;
     case 201:
      var $100 = _fwrite(STRING_TABLE.__str146 | 0, 62, 1, $98);
      __label__ = 202;
      break;
     case 202:
      var $101 = HEAP32[$argv + ($inc933 << 2) >> 2];
      var $call1040 = _strncmp($101, STRING_TABLE.__str147 | 0, 2);
      if (($call1040 | 0) == 0) {
        __label__ = 204;
        break;
      } else {
        __label__ = 203;
        break;
      }
     case 203:
      var $add1038 = $inc117_ + 3 | 0;
      var $call1044 = _strncmp($101, STRING_TABLE.__str140 | 0, 3);
      if (($call1044 | 0) == 0) {
        __label__ = 204;
        break;
      } else {
        var $i_5 = $inc933;
        var $call1169207 = $call1169206;
        var $154 = $27;
        var $call1159209 = $call1159208;
        var $conv1132219 = $conv1132218;
        var $conv1128228 = $conv1128227;
        var $conv1124237 = $conv1124236;
        var $conv1120246 = $conv1120245;
        var $153 = $26;
        var $sub1085248 = $sub1085247;
        var $152 = $25;
        var $151 = $24;
        var $call800250 = $call800249;
        var $call786252 = $call786251;
        var $150 = $23;
        var $call695254 = $call695253;
        var $149 = $22;
        var $148 = $21;
        var $147 = $20;
        var $146 = $19;
        var $145 = $18;
        var $144 = $17;
        var $call603256 = $call603255;
        var $call525258 = $call525257;
        var $143 = $16;
        var $142 = $15;
        var $141 = $14;
        var $140 = $13;
        var $_169260 = $_169259;
        var $139 = $12;
        var $138 = $11;
        var $call272265 = $call272264;
        var $call248272 = $call248271;
        var $137 = $10;
        var $136 = $9;
        var $135 = $8;
        var $134 = $7;
        var $conv184274 = $conv184273;
        var $conv180276 = $conv180275;
        var $conv176278 = $conv176277;
        var $133 = $6;
        var $132 = $5;
        var $131 = $add1038;
        var $storemerge164287 = $storemerge164286;
        var $130 = $3;
        var $iccp_text_1 = $iccp_text_0;
        var $iccp_length_1 = $iccp_length_0;
        __label__ = 235;
        break;
      }
     case 204:
      var $inc1048 = $i_2 + 5 | 0;
      if (($inc1048 | 0) < ($argc | 0)) {
        __label__ = 206;
        break;
      } else {
        __label__ = 205;
        break;
      }
     case 205:
      var $puts358 = _puts(STRING_TABLE._str28 | 0);
      _exit(1);
      throw "Reached an unreachable!";
     case 206:
      var $i_5 = $inc1048;
      var $call1169207 = $call1169206;
      var $154 = $27;
      var $call1159209 = $call1159208;
      var $conv1132219 = $conv1132218;
      var $conv1128228 = $conv1128227;
      var $conv1124237 = $conv1124236;
      var $conv1120246 = $conv1120245;
      var $153 = $26;
      var $sub1085248 = $sub1085247;
      var $152 = $25;
      var $151 = $24;
      var $call800250 = $call800249;
      var $call786252 = $call786251;
      var $150 = $23;
      var $call695254 = $call695253;
      var $149 = $22;
      var $148 = $21;
      var $147 = $20;
      var $146 = $19;
      var $145 = $18;
      var $144 = $17;
      var $call603256 = $call603255;
      var $call525258 = $call525257;
      var $143 = $16;
      var $142 = $15;
      var $141 = $14;
      var $140 = $13;
      var $_169260 = $_169259;
      var $139 = $12;
      var $138 = $11;
      var $call272265 = $call272264;
      var $call248272 = $call248271;
      var $137 = $10;
      var $136 = $9;
      var $135 = $8;
      var $134 = $7;
      var $conv184274 = $conv184273;
      var $conv180276 = $conv180275;
      var $conv176278 = $conv176277;
      var $133 = $6;
      var $132 = $5;
      var $131 = $inc117_ + 5 | 0;
      var $storemerge164287 = $storemerge164286;
      var $130 = $3;
      var $iccp_text_1 = $iccp_text_0;
      var $iccp_length_1 = $iccp_length_0;
      __label__ = 235;
      break;
     case 207:
      var $call1059 = _strncmp($28, STRING_TABLE.__str148 | 0, 5);
      if (($call1059 | 0) == 0) {
        var $i_5 = $i_2;
        var $call1169207 = $call1169206;
        var $154 = $27;
        var $call1159209 = $call1159208;
        var $conv1132219 = $conv1132218;
        var $conv1128228 = $conv1128227;
        var $conv1124237 = $conv1124236;
        var $conv1120246 = $conv1120245;
        var $153 = $26;
        var $sub1085248 = $sub1085247;
        var $152 = $25;
        var $151 = $24;
        var $call800250 = $call800249;
        var $call786252 = $call786251;
        var $150 = $23;
        var $call695254 = $call695253;
        var $149 = $22;
        var $148 = $21;
        var $147 = 1;
        var $146 = $19;
        var $145 = $18;
        var $144 = $17;
        var $call603256 = $call603255;
        var $call525258 = $call525257;
        var $143 = $16;
        var $142 = $15;
        var $141 = $14;
        var $140 = $13;
        var $_169260 = $_169259;
        var $139 = $12;
        var $138 = $11;
        var $call272265 = $call272264;
        var $call248272 = $call248271;
        var $137 = $10;
        var $136 = $9;
        var $135 = $8;
        var $134 = $7;
        var $conv184274 = $conv184273;
        var $conv180276 = $conv180275;
        var $conv176278 = $conv176277;
        var $133 = $6;
        var $132 = $5;
        var $131 = $inc117_;
        var $storemerge164287 = $storemerge164286;
        var $130 = $3;
        var $iccp_text_1 = $iccp_text_0;
        var $iccp_length_1 = $iccp_length_0;
        __label__ = 235;
        break;
      } else {
        __label__ = 208;
        break;
      }
     case 208:
      var $call1063 = _strncmp($28, STRING_TABLE.__str149 | 0, 5);
      if (($call1063 | 0) == 0) {
        var $i_5 = $i_2;
        var $call1169207 = $call1169206;
        var $154 = $27;
        var $call1159209 = $call1159208;
        var $conv1132219 = $conv1132218;
        var $conv1128228 = $conv1128227;
        var $conv1124237 = $conv1124236;
        var $conv1120246 = $conv1120245;
        var $153 = $26;
        var $sub1085248 = $sub1085247;
        var $152 = $25;
        var $151 = $24;
        var $call800250 = $call800249;
        var $call786252 = $call786251;
        var $150 = $23;
        var $call695254 = $call695253;
        var $149 = $22;
        var $148 = $21;
        var $147 = 1;
        var $146 = $19;
        var $145 = $18;
        var $144 = $17;
        var $call603256 = $call603255;
        var $call525258 = $call525257;
        var $143 = $16;
        var $142 = $15;
        var $141 = $14;
        var $140 = $13;
        var $_169260 = $_169259;
        var $139 = $12;
        var $138 = $11;
        var $call272265 = $call272264;
        var $call248272 = $call248271;
        var $137 = $10;
        var $136 = $9;
        var $135 = $8;
        var $134 = $7;
        var $conv184274 = $conv184273;
        var $conv180276 = $conv180275;
        var $conv176278 = $conv176277;
        var $133 = $6;
        var $132 = $5;
        var $131 = $inc117_;
        var $storemerge164287 = $storemerge164286;
        var $130 = $3;
        var $iccp_text_1 = $iccp_text_0;
        var $iccp_length_1 = $iccp_length_0;
        __label__ = 235;
        break;
      } else {
        __label__ = 209;
        break;
      }
     case 209:
      var $call1068 = _strncmp($28, STRING_TABLE.__str150 | 0, 7);
      if (($call1068 | 0) == 0) {
        __label__ = 211;
        break;
      } else {
        __label__ = 210;
        break;
      }
     case 210:
      var $call1072 = _strncmp($28, STRING_TABLE.__str151 | 0, 7);
      if (($call1072 | 0) == 0) {
        __label__ = 211;
        break;
      } else {
        __label__ = 214;
        break;
      }
     case 211:
      var $inc1075 = $i_2 + 1 | 0;
      var $102 = HEAP32[$argv + ($inc1075 << 2) >> 2];
      var $call1077 = _atoi($102);
      var $storemerge168 = ($call1077 & 65535) >>> 0 > 256 ? 256 : $call1077 & 65535;
      var $sub1085 = $storemerge168 - 1 & 65535;
      var $conv1088 = $storemerge168 & 65535;
      if ($storemerge168 << 16 >> 16 == 0) {
        var $i_4_lcssa = $inc1075;
        __label__ = 213;
        break;
      } else {
        var $i_4630 = $inc1075;
        var $ia_0 = 0;
        __label__ = 212;
        break;
      }
     case 212:
      var $ia_0;
      var $i_4630;
      var $inc1092 = $i_4630 + 1 | 0;
      var $103 = HEAP32[$argv + ($inc1092 << 2) >> 2];
      var $call1094 = _atoi($103);
      HEAP8[_trans_in + $ia_0 | 0] = $call1094 & 255;
      var $inc1098 = $ia_0 + 1 | 0;
      if (($inc1098 | 0) < ($conv1088 | 0)) {
        var $i_4630 = $inc1092;
        var $ia_0 = $inc1098;
        __label__ = 212;
        break;
      } else {
        var $i_4_lcssa = $inc1092;
        __label__ = 213;
        break;
      }
     case 213:
      var $i_4_lcssa;
      var $i_5 = $i_4_lcssa;
      var $call1169207 = $call1169206;
      var $154 = $27;
      var $call1159209 = $call1159208;
      var $conv1132219 = $conv1132218;
      var $conv1128228 = $conv1128227;
      var $conv1124237 = $conv1124236;
      var $conv1120246 = $conv1120245;
      var $153 = 1;
      var $sub1085248 = $sub1085;
      var $152 = $25;
      var $151 = $24;
      var $call800250 = $call800249;
      var $call786252 = $call786251;
      var $150 = $23;
      var $call695254 = $call695253;
      var $149 = $22;
      var $148 = $21;
      var $147 = $20;
      var $146 = $19;
      var $145 = $18;
      var $144 = $17;
      var $call603256 = $call603255;
      var $call525258 = $call525257;
      var $143 = $16;
      var $142 = $15;
      var $141 = $14;
      var $140 = $13;
      var $_169260 = $_169259;
      var $139 = $12;
      var $138 = $11;
      var $call272265 = $call272264;
      var $call248272 = $call248271;
      var $137 = $10;
      var $136 = $9;
      var $135 = $8;
      var $134 = $7;
      var $conv184274 = $conv184273;
      var $conv180276 = $conv180275;
      var $conv176278 = $conv176277;
      var $133 = $6;
      var $132 = $5;
      var $131 = $conv1088 + ($inc117_ + 1) | 0;
      var $storemerge164287 = $storemerge164286;
      var $130 = $3;
      var $iccp_text_1 = $iccp_text_0;
      var $iccp_length_1 = $iccp_length_0;
      __label__ = 235;
      break;
     case 214:
      var $call1105 = _strncmp($28, STRING_TABLE.__str152 | 0, 5);
      if (($call1105 | 0) == 0) {
        __label__ = 216;
        break;
      } else {
        __label__ = 215;
        break;
      }
     case 215:
      var $call1109 = _strncmp($28, STRING_TABLE.__str153 | 0, 5);
      if (($call1109 | 0) == 0) {
        __label__ = 216;
        break;
      } else {
        __label__ = 217;
        break;
      }
     case 216:
      var $add1112 = $inc117_ + 5 | 0;
      var $104 = HEAP32[$argv + ($i_2 + 1 << 2) >> 2];
      var $call1115 = _atoi($104);
      var $conv1116 = $call1115 & 65535;
      var $105 = HEAP32[$argv + ($i_2 + 2 << 2) >> 2];
      var $call1119 = _atoi($105);
      var $conv1120 = $call1119 & 65535;
      var $106 = HEAP32[$argv + ($i_2 + 3 << 2) >> 2];
      var $call1123 = _atoi($106);
      var $conv1124 = $call1123 & 65535;
      var $107 = HEAP32[$argv + ($i_2 + 4 << 2) >> 2];
      var $call1127 = _atoi($107);
      var $conv1128 = $call1127 & 65535;
      var $inc1129 = $i_2 + 5 | 0;
      var $108 = HEAP32[$argv + ($inc1129 << 2) >> 2];
      var $call1131 = _atoi($108);
      var $i_5 = $inc1129;
      var $call1169207 = $call1169206;
      var $154 = $27;
      var $call1159209 = $call1159208;
      var $conv1132219 = $call1131 & 65535;
      var $conv1128228 = $conv1128;
      var $conv1124237 = $conv1124;
      var $conv1120246 = $conv1120;
      var $153 = 1;
      var $sub1085248 = $conv1116;
      var $152 = $25;
      var $151 = $24;
      var $call800250 = $call800249;
      var $call786252 = $call786251;
      var $150 = $23;
      var $call695254 = $call695253;
      var $149 = $22;
      var $148 = $21;
      var $147 = $20;
      var $146 = $19;
      var $145 = $18;
      var $144 = $17;
      var $call603256 = $call603255;
      var $call525258 = $call525257;
      var $143 = $16;
      var $142 = $15;
      var $141 = $14;
      var $140 = $13;
      var $_169260 = $_169259;
      var $139 = $12;
      var $138 = $11;
      var $call272265 = $call272264;
      var $call248272 = $call248271;
      var $137 = $10;
      var $136 = $9;
      var $135 = $8;
      var $134 = $7;
      var $conv184274 = $conv184273;
      var $conv180276 = $conv180275;
      var $conv176278 = $conv176277;
      var $133 = $6;
      var $132 = $5;
      var $131 = $add1112;
      var $storemerge164287 = $storemerge164286;
      var $130 = $3;
      var $iccp_text_1 = $iccp_text_0;
      var $iccp_length_1 = $iccp_length_0;
      __label__ = 235;
      break;
     case 217:
      var $call1135 = _strncmp($28, STRING_TABLE.__str154 | 0, 8);
      if (($call1135 | 0) == 0) {
        __label__ = 218;
        break;
      } else {
        __label__ = 219;
        break;
      }
     case 218:
      var $109 = HEAP32[_stdout >> 2];
      var $110 = _fwrite(STRING_TABLE.__str155 | 0, 10, 1, $109);
      var $111 = HEAP32[_stdout >> 2];
      var $112 = _fwrite(STRING_TABLE.__str156 | 0, 6, 1, $111);
      var $113 = HEAP32[_stdout >> 2];
      var $114 = _fwrite(STRING_TABLE.__str157 | 0, 14, 1, $113);
      var $115 = HEAP32[_stdout >> 2];
      var $116 = _fwrite(STRING_TABLE.__str72 | 0, 6, 1, $115);
      var $117 = HEAP32[_stdout >> 2];
      var $118 = _fwrite(STRING_TABLE.__str158 | 0, 10, 1, $117);
      var $119 = HEAP32[_stdout >> 2];
      var $120 = _fwrite(STRING_TABLE.__str501183 | 0, 5, 1, $119);
      var $121 = HEAP32[_stdout >> 2];
      var $122 = _fwrite(STRING_TABLE.__str160 | 0, 27, 1, $121);
      var $123 = HEAP32[_stdout >> 2];
      var $124 = _fwrite(STRING_TABLE.__str161 | 0, 30, 1, $123);
      HEAP32[_verbose >> 2] = 0;
      var $i_5 = $i_2;
      var $call1169207 = $call1169206;
      var $154 = $27;
      var $call1159209 = $call1159208;
      var $conv1132219 = $conv1132218;
      var $conv1128228 = $conv1128227;
      var $conv1124237 = $conv1124236;
      var $conv1120246 = $conv1120245;
      var $153 = $26;
      var $sub1085248 = $sub1085247;
      var $152 = $25;
      var $151 = $24;
      var $call800250 = $call800249;
      var $call786252 = $call786251;
      var $150 = $23;
      var $call695254 = $call695253;
      var $149 = $22;
      var $148 = $21;
      var $147 = $20;
      var $146 = $19;
      var $145 = $18;
      var $144 = $17;
      var $call603256 = $call603255;
      var $call525258 = $call525257;
      var $143 = $16;
      var $142 = $15;
      var $141 = $14;
      var $140 = $13;
      var $_169260 = $_169259;
      var $139 = $12;
      var $138 = $11;
      var $call272265 = $call272264;
      var $call248272 = $call248271;
      var $137 = $10;
      var $136 = $9;
      var $135 = $8;
      var $134 = $7;
      var $conv184274 = $conv184273;
      var $conv180276 = $conv180275;
      var $conv176278 = $conv176277;
      var $133 = $6;
      var $132 = $5;
      var $131 = $inc117_;
      var $storemerge164287 = $storemerge164286;
      var $130 = $3;
      var $iccp_text_1 = $iccp_text_0;
      var $iccp_length_1 = $iccp_length_0;
      __label__ = 235;
      break;
     case 219:
      var $call1148 = _strncmp($28, STRING_TABLE.__str162 | 0, 2);
      if (($call1148 | 0) == 0) {
        __label__ = 220;
        break;
      } else {
        __label__ = 221;
        break;
      }
     case 220:
      var $inc1151 = HEAP32[_verbose >> 2] + 1 | 0;
      HEAP32[_verbose >> 2] = $inc1151;
      var $i_5 = $i_2;
      var $call1169207 = $call1169206;
      var $154 = $27;
      var $call1159209 = $call1159208;
      var $conv1132219 = $conv1132218;
      var $conv1128228 = $conv1128227;
      var $conv1124237 = $conv1124236;
      var $conv1120246 = $conv1120245;
      var $153 = $26;
      var $sub1085248 = $sub1085247;
      var $152 = $25;
      var $151 = $24;
      var $call800250 = $call800249;
      var $call786252 = $call786251;
      var $150 = $23;
      var $call695254 = $call695253;
      var $149 = $22;
      var $148 = $21;
      var $147 = $20;
      var $146 = $19;
      var $145 = $18;
      var $144 = $17;
      var $call603256 = $call603255;
      var $call525258 = $call525257;
      var $143 = $16;
      var $142 = $15;
      var $141 = $14;
      var $140 = $13;
      var $_169260 = $_169259;
      var $139 = $12;
      var $138 = $11;
      var $call272265 = $call272264;
      var $call248272 = $call248271;
      var $137 = $10;
      var $136 = $9;
      var $135 = $8;
      var $134 = $7;
      var $conv184274 = $conv184273;
      var $conv180276 = $conv180275;
      var $conv176278 = $conv176277;
      var $133 = $6;
      var $132 = $5;
      var $131 = $inc117_;
      var $storemerge164287 = $storemerge164286;
      var $130 = $3;
      var $iccp_text_1 = $iccp_text_0;
      var $iccp_length_1 = $iccp_length_0;
      __label__ = 235;
      break;
     case 221:
      var $call1154 = _strncmp($28, STRING_TABLE.__str163 | 0, 2);
      if (($call1154 | 0) == 0) {
        __label__ = 222;
        break;
      } else {
        __label__ = 223;
        break;
      }
     case 222:
      var $inc1157 = $i_2 + 1 | 0;
      var $126 = HEAP32[$argv + ($inc1157 << 2) >> 2];
      var $call1159 = _atoi($126);
      var $i_5 = $inc1157;
      var $call1169207 = $call1169206;
      var $154 = $27 + 1 | 0;
      var $call1159209 = $call1159;
      var $conv1132219 = $conv1132218;
      var $conv1128228 = $conv1128227;
      var $conv1124237 = $conv1124236;
      var $conv1120246 = $conv1120245;
      var $153 = $26;
      var $sub1085248 = $sub1085247;
      var $152 = $25;
      var $151 = $24;
      var $call800250 = $call800249;
      var $call786252 = $call786251;
      var $150 = $23;
      var $call695254 = $call695253;
      var $149 = $22;
      var $148 = $21;
      var $147 = $20;
      var $146 = $19;
      var $145 = $18;
      var $144 = $17;
      var $call603256 = $call603255;
      var $call525258 = $call525257;
      var $143 = $16;
      var $142 = $15;
      var $141 = $14;
      var $140 = $13;
      var $_169260 = $_169259;
      var $139 = $12;
      var $138 = $11;
      var $call272265 = $call272264;
      var $call248272 = $call248271;
      var $137 = $10;
      var $136 = $9;
      var $135 = $8;
      var $134 = $7;
      var $conv184274 = $conv184273;
      var $conv180276 = $conv180275;
      var $conv176278 = $conv176277;
      var $133 = $6;
      var $132 = $5;
      var $131 = $inc117_ + 1 | 0;
      var $storemerge164287 = $storemerge164286;
      var $130 = $3;
      var $iccp_text_1 = $iccp_text_0;
      var $iccp_length_1 = $iccp_length_0;
      __label__ = 235;
      break;
     case 223:
      var $call1164 = _strncmp($28, STRING_TABLE.__str164 | 0, 3);
      if (($call1164 | 0) == 0) {
        __label__ = 224;
        break;
      } else {
        __label__ = 225;
        break;
      }
     case 224:
      var $inc1167 = $i_2 + 1 | 0;
      var $127 = HEAP32[$argv + ($inc1167 << 2) >> 2];
      var $call1169 = _atoi($127);
      var $i_5 = $inc1167;
      var $call1169207 = $call1169;
      var $154 = $27;
      var $call1159209 = $call1159208;
      var $conv1132219 = $conv1132218;
      var $conv1128228 = $conv1128227;
      var $conv1124237 = $conv1124236;
      var $conv1120246 = $conv1120245;
      var $153 = $26;
      var $sub1085248 = $sub1085247;
      var $152 = $25;
      var $151 = $24;
      var $call800250 = $call800249;
      var $call786252 = $call786251;
      var $150 = $23;
      var $call695254 = $call695253;
      var $149 = $22;
      var $148 = $21;
      var $147 = $20;
      var $146 = $19;
      var $145 = $18;
      var $144 = $17;
      var $call603256 = $call603255;
      var $call525258 = $call525257;
      var $143 = $16;
      var $142 = $15;
      var $141 = $14;
      var $140 = $13;
      var $_169260 = $_169259;
      var $139 = $12;
      var $138 = $11;
      var $call272265 = $call272264;
      var $call248272 = $call248271;
      var $137 = $10;
      var $136 = $9;
      var $135 = $8;
      var $134 = $7;
      var $conv184274 = $conv184273;
      var $conv180276 = $conv180275;
      var $conv176278 = $conv176277;
      var $133 = $6;
      var $132 = $5;
      var $131 = $inc117_ + 1 | 0;
      var $storemerge164287 = $storemerge164286;
      var $130 = $3;
      var $iccp_text_1 = $iccp_text_0;
      var $iccp_length_1 = $iccp_length_0;
      __label__ = 235;
      break;
     case 225:
      var $call1173 = _strncmp($28, STRING_TABLE.__str141 | 0, 2);
      if (($call1173 | 0) == 0) {
        __label__ = 226;
        break;
      } else {
        var $i_5 = $i_2;
        var $call1169207 = $call1169206;
        var $154 = $27;
        var $call1159209 = $call1159208;
        var $conv1132219 = $conv1132218;
        var $conv1128228 = $conv1128227;
        var $conv1124237 = $conv1124236;
        var $conv1120246 = $conv1120245;
        var $153 = $26;
        var $sub1085248 = $sub1085247;
        var $152 = $25;
        var $151 = $24;
        var $call800250 = $call800249;
        var $call786252 = $call786251;
        var $150 = $23;
        var $call695254 = $call695253;
        var $149 = $22;
        var $148 = $21;
        var $147 = $20;
        var $146 = $19;
        var $145 = $18;
        var $144 = $17;
        var $call603256 = $call603255;
        var $call525258 = $call525257;
        var $143 = $16;
        var $142 = $15;
        var $141 = $14;
        var $140 = $13;
        var $_169260 = $_169259;
        var $139 = $12;
        var $138 = $11;
        var $call272265 = $call272264;
        var $call248272 = $call248271;
        var $137 = $10;
        var $136 = $9;
        var $135 = $8;
        var $134 = $7;
        var $conv184274 = $conv184273;
        var $conv180276 = $conv180275;
        var $conv176278 = $conv176277;
        var $133 = $6;
        var $132 = $5;
        var $131 = $inc117_;
        var $storemerge164287 = $storemerge164286;
        var $130 = $3;
        var $iccp_text_1 = $iccp_text_0;
        var $iccp_length_1 = $iccp_length_0;
        __label__ = 235;
        break;
      }
     case 226:
      var $inc1176 = $i_2 + 1 | 0;
      var $128 = HEAP32[$argv + ($inc1176 << 2) >> 2];
      var $call1178 = _atoi($128);
      var $specified_strategy_0 = $call1178 >>> 0 > 2 ? 0 : $call1178;
      var $inc1186 = $inc117_ + 1 | 0;
      if (($7 | 0) == 0) {
        __label__ = 227;
        break;
      } else {
        __label__ = 228;
        break;
      }
     case 227:
      HEAP32[$zs + ($storemerge164286 << 2) >> 2] = $specified_strategy_0;
      var $storemerge164285 = $storemerge164286;
      __label__ = 231;
      break;
     case 228:
      if (($10 | 0) == 0) {
        __label__ = 229;
        break;
      } else {
        __label__ = 230;
        break;
      }
     case 229:
      HEAP32[_brute_force_strategies >> 2] = 1;
      HEAP32[_brute_force_strategies + 4 >> 2] = 1;
      __label__ = 230;
      break;
     case 230:
      var $arrayidx1204 = _brute_force_strategies + ($specified_strategy_0 << 2) | 0;
      HEAP32[$arrayidx1204 >> 2] = 0;
      if (($specified_strategy_0 | 0) == 2) {
        __label__ = 949;
        break;
      } else {
        __label__ = 948;
        break;
      }
     case 231:
      var $storemerge164285;
      var $i_5 = $inc1176;
      var $call1169207 = $call1169206;
      var $154 = $27;
      var $call1159209 = $call1159208;
      var $conv1132219 = $conv1132218;
      var $conv1128228 = $conv1128227;
      var $conv1124237 = $conv1124236;
      var $conv1120246 = $conv1120245;
      var $153 = $26;
      var $sub1085248 = $sub1085247;
      var $152 = $25;
      var $151 = $24;
      var $call800250 = $call800249;
      var $call786252 = $call786251;
      var $150 = $23;
      var $call695254 = $call695253;
      var $149 = $22;
      var $148 = $21;
      var $147 = $20;
      var $146 = $19;
      var $145 = $18;
      var $144 = $17;
      var $call603256 = $call603255;
      var $call525258 = $call525257;
      var $143 = $16;
      var $142 = $15;
      var $141 = $14;
      var $140 = $13;
      var $_169260 = $_169259;
      var $139 = $12;
      var $138 = $11;
      var $call272265 = $call272264;
      var $call248272 = $call248271;
      var $137 = $10 + 1 | 0;
      var $136 = $9;
      var $135 = $8;
      var $134 = $7;
      var $conv184274 = $conv184273;
      var $conv180276 = $conv180275;
      var $conv176278 = $conv176277;
      var $133 = $6;
      var $132 = $5;
      var $131 = $inc1186;
      var $storemerge164287 = $storemerge164285;
      var $130 = $3;
      var $iccp_text_1 = $iccp_text_0;
      var $iccp_length_1 = $iccp_length_0;
      __label__ = 235;
      break;
     case 232:
      for (var $$dest = $scevgep17121713 >> 2, $$stop = $$dest + 12; $$dest < $$stop; $$dest++) {
        HEAP32[$$dest] = 0;
      }
      var $i_5 = $i_2;
      var $call1169207 = $call1169206;
      var $154 = $27;
      var $call1159209 = $call1159208;
      var $conv1132219 = $conv1132218;
      var $conv1128228 = $conv1128227;
      var $conv1124237 = $conv1124236;
      var $conv1120246 = $conv1120245;
      var $153 = $26;
      var $sub1085248 = $sub1085247;
      var $152 = $25;
      var $151 = $24;
      var $call800250 = $call800249;
      var $call786252 = $call786251;
      var $150 = $23;
      var $call695254 = $call695253;
      var $149 = $22;
      var $148 = $21;
      var $147 = $20;
      var $146 = $19;
      var $145 = $18;
      var $144 = $17;
      var $call603256 = $call603255;
      var $call525258 = $call525257;
      var $143 = $16;
      var $142 = $15;
      var $141 = $14;
      var $140 = $13;
      var $_169260 = $_169259;
      var $139 = $12;
      var $138 = $11;
      var $call272265 = $call272264;
      var $call248272 = $call248271;
      var $137 = $10;
      var $136 = $9;
      var $135 = $8;
      var $134 = $7;
      var $conv184274 = $conv184273;
      var $conv180276 = $conv180275;
      var $conv176278 = $conv176277;
      var $133 = $6;
      var $132 = 1;
      var $131 = $inc117_;
      var $storemerge164287 = 137;
      var $130 = $3;
      var $iccp_text_1 = $iccp_text_0;
      var $iccp_length_1 = $iccp_length_0;
      __label__ = 235;
      break;
     case 233:
      HEAP32[_brute_force_strategies >> 2] = 0;
      HEAP32[_brute_force_strategies + 4 >> 2] = 0;
      HEAP32[_brute_force_strategies + 8 >> 2] = 0;
      HEAP32[_brute_force_strategies + 12 >> 2] = 0;
      var $i_5 = $i_2;
      var $call1169207 = $call1169206;
      var $154 = $27;
      var $call1159209 = $call1159208;
      var $conv1132219 = $conv1132218;
      var $conv1128228 = $conv1128227;
      var $conv1124237 = $conv1124236;
      var $conv1120246 = $conv1120245;
      var $153 = $26;
      var $sub1085248 = $sub1085247;
      var $152 = $25;
      var $151 = $24;
      var $call800250 = $call800249;
      var $call786252 = $call786251;
      var $150 = $23;
      var $call695254 = $call695253;
      var $149 = $22;
      var $148 = $21;
      var $147 = $20;
      var $146 = $19;
      var $145 = $18;
      var $144 = $17;
      var $call603256 = $call603255;
      var $call525258 = $call525257;
      var $143 = $16;
      var $142 = $15;
      var $141 = $14;
      var $140 = $13;
      var $_169260 = $_169259;
      var $139 = $12;
      var $138 = $11;
      var $call272265 = $call272264;
      var $call248272 = $call248271;
      var $137 = $10;
      var $136 = $9;
      var $135 = $8;
      var $134 = $inc190;
      var $conv184274 = $conv184273;
      var $conv180276 = $conv180275;
      var $conv176278 = $conv176277;
      var $133 = $6;
      var $132 = 1;
      var $131 = $inc117_;
      var $storemerge164287 = 137;
      var $130 = $3;
      var $iccp_text_1 = $iccp_text_0;
      var $iccp_length_1 = $iccp_length_0;
      __label__ = 235;
      break;
     case 234:
      HEAP32[$scevgep17571758 >> 2] = 0;
      HEAP32[$scevgep17571758 + 4 >> 2] = 0;
      HEAP32[$scevgep17571758 + 8 >> 2] = 0;
      HEAP32[$scevgep17571758 + 12 >> 2] = 0;
      HEAP32[$scevgep17571758 + 16 >> 2] = 0;
      HEAP32[$scevgep17571758 + 20 >> 2] = 0;
      var $i_5 = $i_2;
      var $call1169207 = $call1169206;
      var $154 = $27;
      var $call1159209 = $call1159208;
      var $conv1132219 = $conv1132218;
      var $conv1128228 = $conv1128227;
      var $conv1124237 = $conv1124236;
      var $conv1120246 = $conv1120245;
      var $153 = $26;
      var $sub1085248 = $sub1085247;
      var $152 = $25;
      var $151 = $24;
      var $call800250 = $call800249;
      var $call786252 = $call786251;
      var $150 = $23;
      var $call695254 = $call695253;
      var $149 = $22;
      var $148 = $21;
      var $147 = $20;
      var $146 = $19;
      var $145 = $18;
      var $144 = $17;
      var $call603256 = $call603255;
      var $call525258 = $call525257;
      var $143 = $16;
      var $142 = $15;
      var $141 = $14;
      var $140 = $13;
      var $_169260 = $_169259;
      var $139 = $12;
      var $138 = $11;
      var $call272265 = $call272264;
      var $call248272 = $call248271;
      var $137 = $10;
      var $136 = $9;
      var $135 = $8;
      var $134 = $7;
      var $conv184274 = $conv184273;
      var $conv180276 = $conv180275;
      var $conv176278 = $conv176277;
      var $133 = $6;
      var $132 = 1;
      var $131 = $inc117_;
      var $storemerge164287 = 17;
      var $130 = $3;
      var $iccp_text_1 = $iccp_text_0;
      var $iccp_length_1 = $iccp_length_0;
      __label__ = 235;
      break;
     case 235:
      var $iccp_length_1;
      var $iccp_text_1;
      var $130;
      var $storemerge164287;
      var $131;
      var $132;
      var $133;
      var $conv176278;
      var $conv180276;
      var $conv184274;
      var $134;
      var $135;
      var $136;
      var $137;
      var $call248272;
      var $call272265;
      var $138;
      var $139;
      var $_169260;
      var $140;
      var $141;
      var $142;
      var $143;
      var $call525258;
      var $call603256;
      var $144;
      var $145;
      var $146;
      var $147;
      var $148;
      var $149;
      var $call695254;
      var $150;
      var $call786252;
      var $call800250;
      var $151;
      var $152;
      var $sub1085248;
      var $153;
      var $conv1120246;
      var $conv1124237;
      var $conv1128228;
      var $conv1132219;
      var $call1159209;
      var $154;
      var $call1169207;
      var $i_5;
      var $i_2 = $i_5 + 1 | 0;
      var $call1169206 = $call1169207;
      var $27 = $154;
      var $call1159208 = $call1159209;
      var $conv1132218 = $conv1132219;
      var $conv1128227 = $conv1128228;
      var $conv1124236 = $conv1124237;
      var $conv1120245 = $conv1120246;
      var $26 = $153;
      var $sub1085247 = $sub1085248;
      var $25 = $152;
      var $24 = $151;
      var $call800249 = $call800250;
      var $call786251 = $call786252;
      var $23 = $150;
      var $call695253 = $call695254;
      var $22 = $149;
      var $21 = $148;
      var $20 = $147;
      var $19 = $146;
      var $18 = $145;
      var $17 = $144;
      var $call603255 = $call603256;
      var $call525257 = $call525258;
      var $16 = $143;
      var $15 = $142;
      var $14 = $141;
      var $13 = $140;
      var $_169259 = $_169260;
      var $12 = $139;
      var $11 = $138;
      var $call272264 = $call272265;
      var $call248271 = $call248272;
      var $10 = $137;
      var $9 = $136;
      var $8 = $135;
      var $7 = $134;
      var $conv184273 = $conv184274;
      var $conv180275 = $conv180276;
      var $conv176277 = $conv176278;
      var $6 = $133;
      var $5 = $132;
      var $4 = $131;
      var $storemerge164286 = $storemerge164287;
      var $3 = $130;
      var $iccp_text_0 = $iccp_text_1;
      var $iccp_length_0 = $iccp_length_1;
      __label__ = 10;
      break;
     case 236:
      if ((HEAP32[_verbose >> 2] | 0) > 0) {
        __label__ = 237;
        break;
      } else {
        __label__ = 238;
        break;
      }
     case 237:
      _print_version_info();
      __label__ = 238;
      break;
     case 238:
      if (($call1159208 | 0) == 16) {
        __label__ = 239;
        break;
      } else if (($call1159208 | 0) == 8) {
        __label__ = 240;
        break;
      } else if (($call1159208 | 0) == 4) {
        __label__ = 241;
        break;
      } else if (($call1159208 | 0) == 2) {
        __label__ = 242;
        break;
      } else if (($call1159208 | 0) == 1) {
        __label__ = 243;
        break;
      } else if (($call1159208 | 0) == 512) {
        __label__ = 244;
        break;
      } else if (($call1159208 | 0) == 256) {
        __label__ = 245;
        break;
      } else if (($call1159208 | 0) == 32 || ($call1159208 | 0) == 15) {
        var $call1159210 = 15;
        __label__ = 247;
        break;
      } else {
        __label__ = 246;
        break;
      }
     case 239:
      var $call1159210 = 14;
      __label__ = 247;
      break;
     case 240:
      var $call1159210 = 13;
      __label__ = 247;
      break;
     case 241:
      var $call1159210 = 12;
      __label__ = 247;
      break;
     case 242:
      var $call1159210 = 11;
      __label__ = 247;
      break;
     case 243:
      var $call1159210 = 10;
      __label__ = 247;
      break;
     case 244:
      var $call1159210 = 9;
      __label__ = 247;
      break;
     case 245:
      var $call1159210 = 8;
      __label__ = 247;
      break;
     case 246:
      var $156 = HEAP32[_stdout >> 2];
      var $call1343 = _fprintf($156, STRING_TABLE.__str165 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $call1159208, tempInt));
      var $call1159210 = 12;
      __label__ = 247;
      break;
     case 247:
      var $call1159210;
      var $cmp1353 = ($_169259 | 0) == 0;
      if ($cmp1353) {
        __label__ = 248;
        break;
      } else {
        var $_ph605 = STRING_TABLE.__str572 | 0;
        __label__ = 256;
        break;
      }
     case 248:
      var $sub1356 = $argc - $4 | 0;
      if (($sub1356 | 0) == 2) {
        __label__ = 249;
        break;
      } else {
        __label__ = 250;
        break;
      }
     case 249:
      var $157 = HEAP32[$argv + ($4 << 2) >> 2];
      HEAP32[_inname >> 2] = $157;
      var $_ph605 = HEAP32[$argv + ($4 + 1 << 2) >> 2];
      __label__ = 256;
      break;
     case 250:
      if (($21 | 0) == 0) {
        __label__ = 252;
        break;
      } else {
        __label__ = 251;
        break;
      }
     case 251:
      var $159 = HEAP32[$argv + ($4 << 2) >> 2];
      HEAP32[_inname >> 2] = $159;
      var $_ph605 = STRING_TABLE.__str572 | 0;
      __label__ = 256;
      break;
     case 252:
      var $tobool1372 = (HEAP32[_nosave >> 2] | 0) != 0;
      if (($sub1356 | 0) == 1 | $tobool1372) {
        __label__ = 253;
        break;
      } else {
        __label__ = 254;
        break;
      }
     case 253:
      var $161 = HEAP32[$argv + ($4 << 2) >> 2];
      HEAP32[_inname >> 2] = $161;
      __label__ = 254;
      break;
     case 254:
      if ((HEAP32[_verbose >> 2] | 0) == 0 | $tobool1372) {
        var $_ph605 = STRING_TABLE.__str572 | 0;
        __label__ = 256;
        break;
      } else {
        __label__ = 255;
        break;
      }
     case 255:
      _print_usage(1);
      throw "Reached an unreachable!";
     case 256:
      var $_ph605;
      _memset(_trns_array | 0, -1, 256, 1);
      var $163 = ($_169259 - 2 | 0) >>> 0 < 2;
      var $cmp1514 = ($_169259 | 0) == 2;
      var $164 = ($_169259 - 1 | 0) >>> 0 < 3;
      var $st_size4075 = $stat_buf4073 + 28 | 0;
      var $st_atime = $stat_buf4073 + 32 | 0;
      var $actime = $utim | 0;
      var $st_mtime = $stat_buf4073 + 40 | 0;
      var $modtime = $utim + 4 | 0;
      var $cmp4078 = ($20 | 0) == 0;
      var $tobool1670 = ($3 | 0) == 0;
      var $cmp1674 = ($call695253 | 0) > 0;
      var $cmp1680 = ($call695253 | 0) < 3;
      var $cmp1684 = ($call695253 | 0) < 5;
      var $cmp1688 = ($call695253 | 0) < 17;
      var $tobool1736 = ($5 | 0) == 0;
      var $st_ino = $stat_in + 4 | 0;
      var $st_ino2018 = $stat_out + 4 | 0;
      var $st_dev = $stat_in | 0;
      var $st_dev2022 = $stat_out | 0;
      var $arraydecay2051 = $exception__env | 0;
      var $cmp2069 = ($19 | 0) == 0;
      var $arrayidx2163 = $chunk_name + 4 | 0;
      var $arraydecay2175 = $chunk_name | 0;
      var $arraydecay2185 = $png_signature;
      var $arraydecay2186 = $mng_signature;
      var $tobool2481 = ($6 | 0) == 0;
      var $165 = $background;
      var $tobool2521 = ($call786251 | 0) == 0;
      var $tobool2550 = ($11 | 0) == 0;
      var $tobool2556 = ($call525257 | 0) == 0;
      var $cmp2677 = ($call800249 | 0) == 0;
      var $166 = $trans_values;
      var $cmp2817 = ($26 | 0) == 1;
      var $conv2820 = $sub1085247 & 255;
      var $conv2821 = $sub1085247 & 255 & 65535;
      var $add2822 = $conv2821 + 1 | 0;
      var $arrayidx2857 = _trns_array + $conv2821 | 0;
      var $index = $trans_data | 0;
      var $red2858 = $trans_data + 2 | 0;
      var $green2859 = $trans_data + 4 | 0;
      var $blue2860 = $trans_data + 6 | 0;
      var $gray2861 = $trans_data + 8 | 0;
      var $167 = $sig_bit;
      var $168 = $entries;
      var $169 = $text_ptr;
      var $170 = $mod_time;
      var $171 = $unknowns;
      var $cmp3254 = ($24 | 0) > -1;
      var $conv3269 = $24 & 255;
      var $tobool3390 = ($16 | 0) == 0;
      var $tobool3530 = ($27 | 0) != 0;
      var $gray3558 = $true_bits3556 + 3 | 0;
      var $172 = $true_bits3556;
      var $arrayidx3401 = $mng_signature3392;
      var $arrayidx3403 = $buff | 0;
      var $arrayidx3407 = $buff + 1 | 0;
      var $arrayidx3411 = $buff + 2 | 0;
      var $arrayidx3414 = $buff + 3 | 0;
      var $arrayidx3418 = $buff + 4 | 0;
      var $arrayidx3422 = $buff + 5 | 0;
      var $arrayidx3426 = $buff + 6 | 0;
      var $arrayidx3429 = $buff + 7 | 0;
      var $arrayidx3438 = $buff + 15 | 0;
      var $arrayidx3439 = $buff + 19 | 0;
      var $arrayidx3443 = $buff + 27 | 0;
      var $173 = $text_ptr3703;
      var $174 = $mod_time3907;
      var $175 = $unknowns3916;
      var $cmp3842488 = ($25 | 0) > 0;
      var $tobool2942 = ($23 | 0) == 0;
      var $add2705 = ($call800249 | 0) / .0254 + .5;
      var $conv2706 = $add2705 >= 0 ? Math.floor($add2705) : Math.ceil($add2705);
      var $red = $backgd + 2 | 0;
      var $green2507 = $backgd + 4 | 0;
      var $blue = $backgd + 6 | 0;
      var $gray2509 = $backgd + 8 | 0;
      var $176 = $backgd;
      var $gray = $true_bits + 3 | 0;
      var $177 = $true_bits;
      var $arrayidx1910 = $try_method | 0;
      var $arrayidx1751 = $try_method + 24 | 0;
      var $scevgep1558 = $try_method + 4 | 0;
      var $scevgep1561 = $buff + 8 | 0;
      var $_mux = $cmp1680 ? 1 : 2;
      var $_mux_mux = $cmp1684 ? $_mux : 4;
      var $tobool2635 = ($iccp_length_0 | 0) == 0;
      var $call1816186_ph_ph = 0;
      var $_ph585_ph = 0;
      var $call1627192_ph_ph = 0;
      var $_ph584_ph = 0;
      var $_ph583_ph = $_ph605;
      var $conv1132217_ph_ph = $conv1132218;
      var $conv1128226_ph_ph = $conv1128227;
      var $conv1124235_ph_ph = $conv1124236;
      var $conv1120244_ph_ph = $conv1120245;
      var $_ph582_ph = $22;
      var $_ph581_ph = $21;
      var $_ph580_ph = $18;
      var $call272263_ph_ph = $call272264;
      var $call248267_ph_ph = $call248271;
      var $_ph579_ph = $4;
      var $_ph578_ph = 0;
      var $best_10 = 0;
      var $ia_14 = 256;
      var $total_input_length_1 = 0;
      __label__ = 937;
      break;
     case 257:
      var $178;
      var $179;
      var $180;
      var $181;
      var $182;
      var $183;
      HEAP8[_first_trial_b] = 1;
      HEAP32[_things_have_changed >> 2] = $12;
      HEAP8[_image_specified_gamma_b] = 0;
      var $inc1397 = $178 + 1 | 0;
      var $184 = HEAP32[$argv + ($178 << 2) >> 2];
      HEAP32[_inname >> 2] = $184;
      if (($184 | 0) == 0) {
        __label__ = 258;
        break;
      } else {
        __label__ = 260;
        break;
      }
     case 258:
      if ((HEAP32[_verbose >> 2] | 0) > 0) {
        __label__ = 259;
        break;
      } else {
        __label__ = 944;
        break;
      }
     case 259:
      _show_result();
      __label__ = 944;
      break;
     case 260:
      if (($_169259 | 0) == 3 || ($_169259 | 0) == 1) {
        __label__ = 261;
        break;
      } else {
        var $196 = $182;
        var $195 = $179;
        __label__ = 278;
        break;
      }
     case 261:
      var $call1413 = _stat($13, $stat_buf);
      if (($call1413 | 0) == 0) {
        var $187 = $179;
        __label__ = 264;
        break;
      } else {
        __label__ = 262;
        break;
      }
     case 262:
      var $call1416 = _mkdir($13, 493);
      if (($call1416 | 0) == 0) {
        var $187 = 1;
        __label__ = 264;
        break;
      } else {
        __label__ = 263;
        break;
      }
     case 263:
      var $186 = HEAP32[_stdout >> 2];
      var $call1419 = _fprintf($186, STRING_TABLE.__str166 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $13, tempInt));
      _exit(1);
      throw "Reached an unreachable!";
     case 264:
      var $187;
      var $call1422 = _strlen($13);
      if (($call1422 | 0) > 254) {
        __label__ = 265;
        break;
      } else {
        __label__ = 266;
        break;
      }
     case 265:
      var $188 = HEAP32[_stdout >> 2];
      var $call1426 = _fprintf($188, STRING_TABLE.__str167 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $13, tempInt));
      _exit(1);
      throw "Reached an unreachable!";
     case 266:
      var $call1428 = _strcpy(_out_string | 0, $13);
      var $189 = HEAP8[_out_string + ($call1422 - 1) | 0];
      if ($189 << 24 >> 24 == 47 || $189 << 24 >> 24 == 92) {
        var $outlen_0 = $call1422;
        __label__ = 268;
        break;
      } else {
        __label__ = 267;
        break;
      }
     case 267:
      var $inc1450 = $call1422 + 1 | 0;
      HEAP8[_out_string + $call1422 | 0] = 47;
      var $outlen_0 = $inc1450;
      __label__ = 268;
      break;
     case 268:
      var $outlen_0;
      var $arrayidx1453 = _out_string + $outlen_0 | 0;
      HEAP8[$arrayidx1453] = 0;
      var $190 = HEAP32[_inname >> 2];
      var $call1454 = _strlen($190);
      if (($call1454 | 0) > 255) {
        __label__ = 269;
        break;
      } else {
        __label__ = 270;
        break;
      }
     case 269:
      var $191 = HEAP32[_stdout >> 2];
      var $call1458 = _fprintf($191, STRING_TABLE.__str170 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $190, tempInt));
      _exit(1);
      throw "Reached an unreachable!";
     case 270:
      var $call1460 = _strcpy(_in_string | 0, $190);
      HEAP8[_in_string + $call1454 | 0] = 0;
      var $storemerge160 = _in_string + ($call1454 - 1) | 0;
      __label__ = 271;
      break;
     case 271:
      var $storemerge160;
      if ($storemerge160 >>> 0 > (_in_string | 0) >>> 0) {
        __label__ = 272;
        break;
      } else {
        var $op_0 = _in_string | 0;
        __label__ = 275;
        break;
      }
     case 272:
      var $192 = HEAP8[$storemerge160];
      if ($192 << 24 >> 24 == 92 || $192 << 24 >> 24 == 47) {
        __label__ = 273;
        break;
      } else {
        __label__ = 274;
        break;
      }
     case 273:
      var $op_0 = $storemerge160 + 1 | 0;
      __label__ = 275;
      break;
     case 274:
      var $storemerge160 = $storemerge160 - 1 | 0;
      __label__ = 271;
      break;
     case 275:
      var $op_0;
      if (($outlen_0 + _in_string + $call1454 - $op_0 | 0) > 255) {
        __label__ = 276;
        break;
      } else {
        __label__ = 277;
        break;
      }
     case 276:
      var $193 = HEAP32[_stdout >> 2];
      var $194 = _fwrite(STRING_TABLE.__str171 | 0, 33, 1, $193);
      _exit(1);
      throw "Reached an unreachable!";
     case 277:
      var $call1485 = _strcpy($arrayidx1453, $op_0);
      var $196 = _out_string | 0;
      var $195 = $187;
      __label__ = 278;
      break;
     case 278:
      var $195;
      var $196;
      if (($180 | 0) == 0) {
        var $198 = 0;
        __label__ = 282;
        break;
      } else {
        __label__ = 279;
        break;
      }
     case 279:
      if ($164 & ($180 | 0) > 0) {
        __label__ = 280;
        break;
      } else {
        var $198 = $180;
        __label__ = 282;
        break;
      }
     case 280:
      if ((HEAP32[_verbose >> 2] | 0) > 1) {
        __label__ = 281;
        break;
      } else {
        var $198 = 0;
        __label__ = 282;
        break;
      }
     case 281:
      var $call1504 = _printf(STRING_TABLE.__str172 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
      var $198 = 0;
      __label__ = 282;
      break;
     case 282:
      var $198;
      if ($163) {
        __label__ = 283;
        break;
      } else {
        var $204 = $196;
        __label__ = 294;
        break;
      }
     case 283:
      HEAP8[_in_string | 0] = 0;
      if ($cmp1514) {
        __label__ = 284;
        break;
      } else {
        __label__ = 285;
        break;
      }
     case 284:
      var $199 = HEAP32[_inname >> 2];
      var $call1517 = _strcat(_in_string | 0, $199);
      __label__ = 286;
      break;
     case 285:
      var $call1519 = _strcat(_in_string | 0, $196);
      __label__ = 286;
      break;
     case 286:
      var $200 = HEAP8[_in_string | 0];
      if ($200 << 24 >> 24 == 0) {
        __label__ = 287;
        break;
      } else {
        var $202 = _in_string | 0;
        var $dot_0 = _out_string | 0;
        var $op_1 = _out_string | 0;
        var $201 = $200;
        __label__ = 288;
        break;
      }
     case 287:
      HEAP8[_out_string | 0] = 0;
      var $dot_238_ph = _out_string | 0;
      var $cmp153439_ph = 1;
      __label__ = 291;
      break;
     case 288:
      var $201;
      var $op_1;
      var $dot_0;
      var $202;
      var $incdec_ptr1526 = $202 + 1 | 0;
      var $incdec_ptr1527 = $op_1 + 1 | 0;
      HEAP8[$op_1] = $201;
      var $203 = HEAP8[$incdec_ptr1526];
      if ($203 << 24 >> 24 == 46) {
        var $202 = $incdec_ptr1526;
        var $dot_0 = $incdec_ptr1527;
        var $op_1 = $incdec_ptr1527;
        var $201 = $203;
        __label__ = 288;
        break;
      } else {
        var $dot_1 = $dot_0;
        __label__ = 289;
        break;
      }
     case 289:
      var $dot_1;
      if ($203 << 24 >> 24 == 0) {
        var $dot_2 = $dot_1;
        var $op_2 = $incdec_ptr1527;
        __label__ = 290;
        break;
      } else {
        var $202 = $incdec_ptr1526;
        var $dot_0 = $dot_1;
        var $op_1 = $incdec_ptr1527;
        var $201 = $203;
        __label__ = 288;
        break;
      }
     case 290:
      var $op_2;
      var $dot_2;
      HEAP8[$op_2] = 0;
      var $cmp1534 = ($dot_2 | 0) == (_out_string | 0);
      if ($cmp1534) {
        var $dot_238_ph = $dot_2;
        var $cmp153439_ph = $cmp1534;
        __label__ = 291;
        break;
      } else {
        __label__ = 292;
        break;
      }
     case 291:
      var $cmp153439_ph;
      var $dot_238_ph;
      HEAP8[_in_extension | 0] = 0;
      __label__ = 293;
      break;
     case 292:
      HEAP8[$dot_2] = 0;
      HEAP8[_in_extension | 0] = 0;
      var $call1542 = _strcat(_in_extension | 0, $dot_2 + 1 | 0);
      __label__ = 293;
      break;
     case 293:
      var $call1544 = _strcat(_out_string | 0, $15);
      var $204 = _out_string | 0;
      __label__ = 294;
      break;
     case 294:
      var $204;
      var $call1546 = _strlen($204);
      if (HEAP8[$204 + ($call1546 - 4) | 0] << 24 >> 24 == 112) {
        __label__ = 295;
        break;
      } else {
        var $211 = $181;
        __label__ = 299;
        break;
      }
     case 295:
      if (HEAP8[$204 + ($call1546 - 3) | 0] << 24 >> 24 == 112) {
        __label__ = 296;
        break;
      } else {
        var $211 = $181;
        __label__ = 299;
        break;
      }
     case 296:
      if (HEAP8[$204 + ($call1546 - 2) | 0] << 24 >> 24 == 110) {
        __label__ = 297;
        break;
      } else {
        var $211 = $181;
        __label__ = 299;
        break;
      }
     case 297:
      if (HEAP8[$204 + ($call1546 - 1) | 0] << 24 >> 24 == 103) {
        __label__ = 298;
        break;
      } else {
        var $211 = $181;
        __label__ = 299;
        break;
      }
     case 298:
      var $210 = HEAP32[_read_ptr >> 2];
      _png_error($210, STRING_TABLE.__str173 | 0);
      var $211 = 2;
      __label__ = 299;
      break;
     case 299:
      var $211;
      var $call1575 = _strlen($204);
      if (HEAP8[$204 + ($call1575 - 4) | 0] << 24 >> 24 == 97) {
        __label__ = 300;
        break;
      } else {
        var $216 = $183;
        __label__ = 304;
        break;
      }
     case 300:
      if (HEAP8[$204 + ($call1575 - 3) | 0] << 24 >> 24 == 112) {
        __label__ = 301;
        break;
      } else {
        var $216 = $183;
        __label__ = 304;
        break;
      }
     case 301:
      if (HEAP8[$204 + ($call1575 - 2) | 0] << 24 >> 24 == 110) {
        __label__ = 302;
        break;
      } else {
        var $216 = $183;
        __label__ = 304;
        break;
      }
     case 302:
      if (HEAP8[$204 + ($call1575 - 1) | 0] << 24 >> 24 == 103) {
        __label__ = 303;
        break;
      } else {
        var $216 = $183;
        __label__ = 304;
        break;
      }
     case 303:
      var $216 = 1;
      __label__ = 304;
      break;
     case 304:
      var $216;
      if ((HEAP32[_nosave >> 2] | 0) < 2) {
        __label__ = 305;
        break;
      } else {
        __label__ = 321;
        break;
      }
     case 305:
      if ((HEAP32[_verbose >> 2] | 0) > 1) {
        __label__ = 306;
        break;
      } else {
        __label__ = 307;
        break;
      }
     case 306:
      var $219 = HEAP32[_inname >> 2];
      var $call1610 = _printf(STRING_TABLE.__str174 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $219, tempInt));
      __label__ = 307;
      break;
     case 307:
      var $220 = HEAP32[_inname >> 2];
      var $call1612 = _fopen($220, STRING_TABLE.__str101 | 0);
      if (($call1612 | 0) == 0) {
        __label__ = 308;
        break;
      } else {
        __label__ = 309;
        break;
      }
     case 308:
      var $221 = HEAP32[_stdout >> 2];
      var $222 = HEAP32[_inname >> 2];
      var $call1616 = _fprintf($221, STRING_TABLE.__str102 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $222, tempInt));
      var $183 = $216;
      var $182 = $204;
      var $181 = $211;
      var $180 = $198;
      var $179 = $195;
      var $178 = $inc1397;
      __label__ = 257;
      break;
     case 309:
      HEAP32[_already_crushed >> 2] = 0;
      if ((HEAP32[_new_mng >> 2] | 0) == 0) {
        var $call1627194 = $call1627192_ph;
        var $231 = $_ph578 + 1 | 0;
        __label__ = 315;
        break;
      } else {
        __label__ = 310;
        break;
      }
     case 310:
      var $call1621 = _png_create_write_struct_2();
      HEAP32[_mng_ptr >> 2] = $call1621;
      if (($call1621 | 0) == 0) {
        __label__ = 311;
        break;
      } else {
        __label__ = 312;
        break;
      }
     case 311:
      var $225 = HEAP32[_stdout >> 2];
      var $226 = _fwrite(STRING_TABLE.__str175 | 0, 33, 1, $225);
      __label__ = 312;
      break;
     case 312:
      var $call1627 = _fopen($17, STRING_TABLE.__str176 | 0);
      if (($call1627 | 0) == 0) {
        __label__ = 313;
        break;
      } else {
        __label__ = 314;
        break;
      }
     case 313:
      var $227 = HEAP32[_stdout >> 2];
      var $call1631 = _fprintf($227, STRING_TABLE.__str177 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $17, tempInt));
      var $call1632 = _fclose($call1612);
      _exit(1);
      throw "Reached an unreachable!";
     case 314:
      var $inc1635 = $_ph578 + 2 | 0;
      var $228 = HEAP32[_mng_ptr >> 2];
      _png_init_io($228, $call1627);
      var $229 = HEAP32[_mng_ptr >> 2];
      var $230 = $call1627;
      _png_set_write_fn($229, $230);
      var $call1627194 = $call1627;
      var $231 = $inc1635;
      __label__ = 315;
      break;
     case 315:
      var $231;
      var $call1627194;
      var $call1637 = _measure_idats($call1612);
      HEAP32[_idat_length >> 2] = $call1637;
      if ((HEAP32[_new_mng >> 2] | 0) == 0) {
        var $call1627193 = $call1627194;
        var $233 = $231;
        __label__ = 317;
        break;
      } else {
        __label__ = 316;
        break;
      }
     case 316:
      _png_destroy_write_struct(_mng_ptr, 0);
      var $call1640 = _fclose($call1627194);
      var $call1627193 = 0;
      var $233 = $231 - 1 | 0;
      __label__ = 317;
      break;
     case 317:
      var $233;
      var $call1627193;
      var $call1643 = _fclose($call1612);
      var $dec1644 = $233 - 1 | 0;
      if ((HEAP32[_verbose >> 2] | 0) > 0) {
        __label__ = 318;
        break;
      } else {
        __label__ = 319;
        break;
      }
     case 318:
      var $235 = HEAP32[_stdout >> 2];
      var $236 = HEAP32[_inname >> 2];
      var $call1648 = _fprintf($235, STRING_TABLE.__str178 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $236, tempInt));
      var $237 = HEAP32[_stdout >> 2];
      var $238 = HEAP32[_idat_length >> 2];
      var $call1649 = _fprintf($237, STRING_TABLE.__str179 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $238, tempInt));
      var $239 = HEAP32[_stdout >> 2];
      var $call1650 = _fflush($239);
      __label__ = 319;
      break;
     case 319:
      if ((HEAP32[_idat_length >> 2] | 0) == 0) {
        var $call1627192_ph = $call1627193;
        var $_ph584 = $216;
        var $_ph583 = $204;
        var $_ph582 = $211;
        var $_ph581 = $198;
        var $_ph580 = $195;
        var $_ph579 = $inc1397;
        var $_ph578 = $dec1644;
        __label__ = 320;
        break;
      } else {
        var $call1627191 = $call1627193;
        var $241 = $dec1644;
        __label__ = 322;
        break;
      }
     case 320:
      var $_ph578;
      var $_ph579;
      var $_ph580;
      var $_ph581;
      var $_ph582;
      var $_ph583;
      var $_ph584;
      var $call1627192_ph;
      var $183 = $_ph584;
      var $182 = $_ph583;
      var $181 = $_ph582;
      var $180 = $_ph581;
      var $179 = $_ph580;
      var $178 = $_ph579;
      __label__ = 257;
      break;
     case 321:
      HEAP32[_idat_length >> 2] = 1;
      var $call1627191 = $call1627192_ph;
      var $241 = $_ph578;
      __label__ = 322;
      break;
     case 322:
      var $241;
      var $call1627191;
      if ((HEAP32[_already_crushed >> 2] | 0) == 0) {
        __label__ = 324;
        break;
      } else {
        __label__ = 323;
        break;
      }
     case 323:
      var $243 = HEAP32[_stdout >> 2];
      var $244 = HEAP32[_inname >> 2];
      var $call1660 = _fprintf($243, STRING_TABLE.__str180 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $244, tempInt));
      __label__ = 324;
      break;
     case 324:
      var $_b144 = HEAPU8[_image_is_immutable_b];
      if ($_b144) {
        __label__ = 325;
        break;
      } else {
        var $_b142 = $_b144;
        __label__ = 326;
        break;
      }
     case 325:
      var $245 = HEAP32[_stdout >> 2];
      var $246 = HEAP32[_inname >> 2];
      var $call1664 = _fprintf($245, STRING_TABLE.__str181 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $246, tempInt));
      var $_b142 = HEAPU8[_image_is_immutable_b];
      __label__ = 326;
      break;
     case 326:
      var $_b142;
      if ((HEAP32[_already_crushed >> 2] | 0) != 0 | $_b142) {
        var $call1816185 = $call1816186_ph_ph;
        var $1024 = $_ph585_ph;
        var $1023 = $216;
        var $conv1132216 = $conv1132217_ph_ph;
        var $conv1128225 = $conv1128226_ph_ph;
        var $conv1124234 = $conv1124235_ph_ph;
        var $conv1120243 = $conv1120244_ph_ph;
        var $call272262 = $call272263_ph_ph;
        var $call248268 = $call248267_ph_ph;
        var $1022 = $241;
        var $best_9 = $best_10;
        var $ia_13 = $ia_14;
        __label__ = 908;
        break;
      } else {
        __label__ = 327;
        break;
      }
     case 327:
      if ($tobool1670) {
        __label__ = 329;
        break;
      } else {
        __label__ = 328;
        break;
      }
     case 328:
      var $puts359 = _puts(STRING_TABLE._str29 | 0);
      __label__ = 329;
      break;
     case 329:
      if ($cmp1674 & ($call248267_ph_ph | 0) == 0) {
        __label__ = 330;
        break;
      } else {
        __label__ = 332;
        break;
      }
     case 330:
      if ($cmp1688) {
        var $call248269 = $_mux_mux;
        __label__ = 334;
        break;
      } else {
        __label__ = 331;
        break;
      }
     case 331:
      var $call248269 = 8;
      __label__ = 334;
      break;
     case 332:
      if (($call248267_ph_ph | 0) == 16 || ($call248267_ph_ph | 0) == 8 || ($call248267_ph_ph | 0) == 4 || ($call248267_ph_ph | 0) == 2 || ($call248267_ph_ph | 0) == 1 || ($call248267_ph_ph | 0) == 0) {
        var $call248269 = $call248267_ph_ph;
        __label__ = 334;
        break;
      } else {
        __label__ = 333;
        break;
      }
     case 333:
      var $248 = HEAP32[_stdout >> 2];
      var $call1714 = _fprintf($248, STRING_TABLE.__str183 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $call248267_ph_ph, tempInt));
      var $call248269 = 0;
      __label__ = 334;
      break;
     case 334:
      var $call248269;
      if (($call272263_ph_ph | 0) == 8 || ($call272263_ph_ph | 0) == 6 || ($call272263_ph_ph | 0) == 4 || ($call272263_ph_ph | 0) == 3 || ($call272263_ph_ph | 0) == 2 || ($call272263_ph_ph | 0) == 0) {
        var $call272266 = $call272263_ph_ph;
        __label__ = 336;
        break;
      } else {
        __label__ = 335;
        break;
      }
     case 335:
      var $249 = HEAP32[_stdout >> 2];
      var $call1734 = _fprintf($249, STRING_TABLE.__str184 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $call272263_ph_ph, tempInt));
      var $call272266 = 8;
      __label__ = 336;
      break;
     case 336:
      var $call272266;
      var $_pre23 = HEAP32[$arrayidx1910 >> 2];
      if ($tobool1736 | ($_pre23 | 0) == 0) {
        __label__ = 337;
        break;
      } else {
        __label__ = 338;
        break;
      }
     case 337:
      for (var $$dest = $scevgep1558 >> 2, $$stop = $$dest + 10; $$dest < $$stop; $$dest++) {
        HEAP32[$$dest] = 0;
      }
      HEAP32[$arrayidx1751 >> 2] = $_pre23;
      __label__ = 338;
      break;
     case 338:
      if ((HEAP32[_verbose >> 2] | 0) > 1) {
        __label__ = 339;
        break;
      } else {
        __label__ = 340;
        break;
      }
     case 339:
      var $call1756 = _printf(STRING_TABLE.__str185 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = 200, tempInt));
      __label__ = 340;
      break;
     case 340:
      var $tobool2008 = ($195 | 0) != 0;
      var $tobool2210 = ($211 | 0) == 0;
      var $cmp2241 = ($call248269 | 0) == 0;
      var $storemerge149 = 1;
      var $call1816183 = $call1816186_ph_ph;
      var $256 = $_ph585_ph;
      var $255 = 1;
      var $254 = $call248269;
      var $253 = $call272266;
      var $252 = $216;
      var $conv1132215 = $conv1132217_ph_ph;
      var $conv1128224 = $conv1128226_ph_ph;
      var $conv1124233 = $conv1124235_ph_ph;
      var $conv1120242 = $conv1120244_ph_ph;
      var $251 = $241;
      var $best_0 = $best_10;
      var $ia_1 = $ia_14;
      __label__ = 341;
      break;
     case 341:
      var $ia_1;
      var $best_0;
      var $251;
      var $conv1120242;
      var $conv1124233;
      var $conv1128224;
      var $conv1132215;
      var $252;
      var $253;
      var $254;
      var $255;
      var $256;
      var $call1816183;
      var $storemerge149;
      if (($storemerge149 | 0) < 201) {
        __label__ = 342;
        break;
      } else {
        var $call1816179 = $call1816183;
        var $1020 = $256;
        var $1019 = $252;
        var $conv1132211 = $conv1132215;
        var $conv1128220 = $conv1128224;
        var $conv1124229 = $conv1124233;
        var $conv1120238 = $conv1120242;
        var $1018 = $251;
        var $best_8 = $best_0;
        var $ia_12 = $ia_1;
        __label__ = 906;
        break;
      }
     case 342:
      HEAP32[_idat_length + ($storemerge149 << 2) >> 2] = -1;
      if (($storemerge149 | 0) == 200) {
        __label__ = 343;
        break;
      } else {
        __label__ = 369;
        break;
      }
     case 343:
      var $257 = HEAPU32[_things_have_changed >> 2];
      if (($257 | 0) < 200) {
        var $j_0491 = $257;
        var $best_length_0492 = -1;
        var $258 = 1;
        var $best_1 = 0;
        __label__ = 345;
        break;
      } else {
        var $best_4 = 0;
        __label__ = 346;
        break;
      }
     case 344:
      var $j_0491 = $inc1785;
      var $best_length_0492 = $best_length_1;
      var $258 = ($best_3 | 0) == 0;
      var $best_1 = $best_3;
      __label__ = 345;
      break;
     case 345:
      var $best_1;
      var $258;
      var $best_length_0492;
      var $j_0491;
      var $259 = HEAPU32[_idat_length + ($j_0491 << 2) >> 2];
      var $best_2 = $258 & ($best_length_0492 | 0) == ($259 | 0) ? $j_0491 : $best_1;
      var $cmp1779 = $best_length_0492 >>> 0 > $259 >>> 0;
      var $best_3 = $cmp1779 ? $j_0491 : $best_2;
      var $best_length_1 = $cmp1779 ? $259 : $best_length_0492;
      var $inc1785 = $j_0491 + 1 | 0;
      if (($inc1785 | 0) == 200) {
        var $best_4 = $best_3;
        __label__ = 346;
        break;
      } else {
        __label__ = 344;
        break;
      }
     case 346:
      var $best_4;
      if (HEAPU8[_image_is_immutable_b]) {
        __label__ = 349;
        break;
      } else {
        __label__ = 347;
        break;
      }
     case 347:
      var $260 = HEAPU32[_idat_length + ($best_4 << 2) >> 2];
      var $262 = HEAPU32[_idat_length + ($256 << 2) >> 2];
      if (($260 | 0) == (HEAP32[_idat_length >> 2] | 0) & ($257 | 0) == 0) {
        __label__ = 348;
        break;
      } else {
        var $273 = $262;
        __label__ = 364;
        break;
      }
     case 348:
      if (($260 | 0) != ($262 | 0) & (HEAP32[_nosave >> 2] | 0) == 0) {
        __label__ = 349;
        break;
      } else {
        var $273 = $262;
        __label__ = 364;
        break;
      }
     case 349:
      if ((HEAP32[_verbose >> 2] | 0) > 2) {
        __label__ = 350;
        break;
      } else {
        __label__ = 351;
        break;
      }
     case 350:
      var $puts360 = _puts(STRING_TABLE._str30 | 0);
      __label__ = 351;
      break;
     case 351:
      _pngcrush_pause();
      var $265 = HEAP32[_inname >> 2];
      var $call1809 = _fopen($265, STRING_TABLE.__str101 | 0);
      if (($call1809 | 0) == 0) {
        __label__ = 352;
        break;
      } else {
        __label__ = 353;
        break;
      }
     case 352:
      var $266 = HEAP32[_stdout >> 2];
      var $267 = HEAP32[_inname >> 2];
      var $call1813 = _fprintf($266, STRING_TABLE.__str187 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $267, tempInt));
      var $call1816180 = $call1816183;
      var $1017 = $256;
      var $storemerge149189 = $storemerge149;
      var $1016 = $255;
      var $1015 = $254;
      var $1014 = $253;
      var $1013 = $252;
      var $conv1132212 = $conv1132215;
      var $conv1128221 = $conv1128224;
      var $conv1124230 = $conv1124233;
      var $conv1120239 = $conv1120242;
      var $1012 = $251;
      var $best_7 = $best_4;
      var $ia_11 = $ia_1;
      __label__ = 905;
      break;
     case 353:
      var $call1816 = _fopen($204, STRING_TABLE.__str176 | 0);
      if (($call1816 | 0) == 0) {
        __label__ = 354;
        break;
      } else {
        __label__ = 355;
        break;
      }
     case 354:
      var $268 = HEAP32[_stdout >> 2];
      var $call1820 = _fprintf($268, STRING_TABLE.__str177 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $204, tempInt));
      var $call1821 = _fclose($call1809);
      _exit(1);
      throw "Reached an unreachable!";
     case 355:
      if ((HEAP32[_verbose >> 2] | 0) > 2) {
        __label__ = 356;
        break;
      } else {
        __label__ = 357;
        break;
      }
     case 356:
      var $270 = HEAP32[_things_have_changed >> 2];
      var $call1828 = _printf(STRING_TABLE.__str188 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $270, tempInt));
      __label__ = 357;
      break;
     case 357:
      var $call1832426 = _fread(_buffer | 0, 1, 1, $call1809);
      if (($call1832426 | 0) == 0) {
        __label__ = 361;
        break;
      } else {
        var $call1832428 = $call1832426;
        __label__ = 358;
        break;
      }
     case 358:
      var $call1832428;
      var $chari = HEAP8[_buffer | 0] << 24 >> 24;
      var $fputc = _fputc($chari, $call1816);
      if (($call1832428 | 0) != 1 & (HEAP32[_verbose >> 2] | 0) > 2) {
        __label__ = 359;
        break;
      } else {
        __label__ = 360;
        break;
      }
     case 359:
      var $puts361 = _puts(STRING_TABLE._str31 | 0);
      __label__ = 360;
      break;
     case 360:
      var $call1832 = _fread(_buffer | 0, 1, 1, $call1809);
      if (($call1832 | 0) == 0) {
        __label__ = 361;
        break;
      } else {
        var $call1832428 = $call1832;
        __label__ = 358;
        break;
      }
     case 361:
      if ((HEAP32[_verbose >> 2] | 0) > 2) {
        __label__ = 362;
        break;
      } else {
        __label__ = 363;
        break;
      }
     case 362:
      var $puts362 = _puts(STRING_TABLE._str32 | 0);
      __label__ = 363;
      break;
     case 363:
      _pngcrush_pause();
      var $call1852 = _fclose($call1809);
      var $call1854 = _fclose($call1816);
      var $call1816179 = 0;
      var $1020 = $256;
      var $1019 = $252;
      var $conv1132211 = $conv1132215;
      var $conv1128220 = $conv1128224;
      var $conv1124229 = $conv1124233;
      var $conv1120238 = $conv1120242;
      var $1018 = $251;
      var $best_8 = $best_4;
      var $ia_12 = $ia_1;
      __label__ = 906;
      break;
     case 364:
      var $273;
      if (($260 | 0) == ($273 | 0)) {
        var $call1816179 = $call1816183;
        var $1020 = $256;
        var $1019 = $252;
        var $conv1132211 = $conv1132215;
        var $conv1128220 = $conv1128224;
        var $conv1124229 = $conv1124233;
        var $conv1120238 = $conv1120242;
        var $1018 = $251;
        var $best_8 = $best_4;
        var $ia_12 = $ia_1;
        __label__ = 906;
        break;
      } else {
        __label__ = 365;
        break;
      }
     case 365:
      var $274 = HEAP32[$fm + ($best_4 << 2) >> 2];
      var $275 = HEAP32[$lv + ($best_4 << 2) >> 2];
      var $276 = HEAPU32[$zs + ($best_4 << 2) >> 2];
      if (($276 | 0) == 2) {
        __label__ = 366;
        break;
      } else if (($276 | 0) == 3) {
        __label__ = 367;
        break;
      } else if (($276 | 0) == 1) {
        var $_ph400 = 1;
        var $_ph399 = $275;
        var $_ph398 = $274;
        var $_ph397 = $256;
        var $_ph = $255;
        var $best_5 = $best_4;
        __label__ = 392;
        break;
      } else {
        __label__ = 368;
        break;
      }
     case 366:
      var $_ph400 = $276;
      var $_ph399 = $275;
      var $_ph398 = $274;
      var $_ph397 = $256;
      var $_ph = $255;
      var $best_5 = $best_4;
      __label__ = 392;
      break;
     case 367:
      var $_ph400 = $276;
      var $_ph399 = $275;
      var $_ph398 = $274;
      var $_ph397 = $256;
      var $_ph = $255;
      var $best_5 = $best_4;
      __label__ = 392;
      break;
     case 368:
      var $_ph400 = 0;
      var $_ph399 = $275;
      var $_ph398 = $274;
      var $_ph397 = $256;
      var $_ph = $255;
      var $best_5 = $best_4;
      __label__ = 392;
      break;
     case 369:
      if (($storemerge149 - 3 | 0) >>> 0 < 2) {
        __label__ = 370;
        break;
      } else {
        var $280 = $255;
        __label__ = 372;
        break;
      }
     case 370:
      var $sub1891 = $storemerge149 - 1 | 0;
      if (HEAPU32[_idat_length + ($sub1891 << 2) >> 2] >>> 0 < HEAPU32[_idat_length + ($255 << 2) >> 2] >>> 0) {
        __label__ = 371;
        break;
      } else {
        var $280 = $255;
        __label__ = 372;
        break;
      }
     case 371:
      var $280 = $sub1891;
      __label__ = 372;
      break;
     case 372:
      var $280;
      if ((HEAP32[$try_method + ($storemerge149 << 2) >> 2] | 0) == 0) {
        __label__ = 375;
        break;
      } else {
        __label__ = 373;
        break;
      }
     case 373:
      if ((HEAP32[_verbose >> 2] | 0) > 2) {
        __label__ = 374;
        break;
      } else {
        var $call1816180 = $call1816183;
        var $1017 = $256;
        var $storemerge149189 = $storemerge149;
        var $1016 = $280;
        var $1015 = $254;
        var $1014 = $253;
        var $1013 = $252;
        var $conv1132212 = $conv1132215;
        var $conv1128221 = $conv1128224;
        var $conv1124230 = $conv1124233;
        var $conv1120239 = $conv1120242;
        var $1012 = $251;
        var $best_7 = $best_0;
        var $ia_11 = $ia_1;
        __label__ = 905;
        break;
      }
     case 374:
      var $call1905 = _printf(STRING_TABLE.__str191 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $storemerge149, tempInt));
      var $call1816180 = $call1816183;
      var $1017 = $256;
      var $storemerge149189 = $storemerge149;
      var $1016 = $280;
      var $1015 = $254;
      var $1014 = $253;
      var $1013 = $252;
      var $conv1132212 = $conv1132215;
      var $conv1128221 = $conv1128224;
      var $conv1124230 = $conv1124233;
      var $conv1120239 = $conv1120242;
      var $1012 = $251;
      var $best_7 = $best_0;
      var $ia_11 = $ia_1;
      __label__ = 905;
      break;
     case 375:
      if ($tobool1736) {
        __label__ = 376;
        break;
      } else {
        __label__ = 386;
        break;
      }
     case 376:
      if ((HEAP32[$arrayidx1910 >> 2] | 0) == 0) {
        __label__ = 386;
        break;
      } else {
        __label__ = 377;
        break;
      }
     case 377:
      if ((($storemerge149 | 0) == 4 | ($storemerge149 | 0) == 7) & ($280 | 0) != 1) {
        __label__ = 378;
        break;
      } else {
        __label__ = 380;
        break;
      }
     case 378:
      if ((HEAP32[_verbose >> 2] | 0) > 2) {
        __label__ = 379;
        break;
      } else {
        var $call1816180 = $call1816183;
        var $1017 = $256;
        var $storemerge149189 = $storemerge149;
        var $1016 = $280;
        var $1015 = $254;
        var $1014 = $253;
        var $1013 = $252;
        var $conv1132212 = $conv1132215;
        var $conv1128221 = $conv1128224;
        var $conv1124230 = $conv1124233;
        var $conv1120239 = $conv1120242;
        var $1012 = $251;
        var $best_7 = $best_0;
        var $ia_11 = $ia_1;
        __label__ = 905;
        break;
      }
     case 379:
      var $call1925 = _printf(STRING_TABLE.__str192 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $storemerge149, tempInt));
      var $call1816180 = $call1816183;
      var $1017 = $256;
      var $storemerge149189 = $storemerge149;
      var $1016 = $280;
      var $1015 = $254;
      var $1014 = $253;
      var $1013 = $252;
      var $conv1132212 = $conv1132215;
      var $conv1128221 = $conv1128224;
      var $conv1124230 = $conv1124233;
      var $conv1120239 = $conv1120242;
      var $1012 = $251;
      var $best_7 = $best_0;
      var $ia_11 = $ia_1;
      __label__ = 905;
      break;
     case 380:
      if ((($storemerge149 | 0) == 5 | ($storemerge149 | 0) == 8) & ($280 | 0) != 2) {
        __label__ = 381;
        break;
      } else {
        __label__ = 383;
        break;
      }
     case 381:
      if ((HEAP32[_verbose >> 2] | 0) > 2) {
        __label__ = 382;
        break;
      } else {
        var $call1816180 = $call1816183;
        var $1017 = $256;
        var $storemerge149189 = $storemerge149;
        var $1016 = $280;
        var $1015 = $254;
        var $1014 = $253;
        var $1013 = $252;
        var $conv1132212 = $conv1132215;
        var $conv1128221 = $conv1128224;
        var $conv1124230 = $conv1124233;
        var $conv1120239 = $conv1120242;
        var $1012 = $251;
        var $best_7 = $best_0;
        var $ia_11 = $ia_1;
        __label__ = 905;
        break;
      }
     case 382:
      var $call1940 = _printf(STRING_TABLE.__str192 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $storemerge149, tempInt));
      var $call1816180 = $call1816183;
      var $1017 = $256;
      var $storemerge149189 = $storemerge149;
      var $1016 = $280;
      var $1015 = $254;
      var $1014 = $253;
      var $1013 = $252;
      var $conv1132212 = $conv1132215;
      var $conv1128221 = $conv1128224;
      var $conv1124230 = $conv1124233;
      var $conv1120239 = $conv1120242;
      var $1012 = $251;
      var $best_7 = $best_0;
      var $ia_11 = $ia_1;
      __label__ = 905;
      break;
     case 383:
      if ((($storemerge149 | 0) == 6 | ($storemerge149 | 0) == 9 | ($storemerge149 | 0) == 10) & ($280 | 0) != 3) {
        __label__ = 384;
        break;
      } else {
        __label__ = 386;
        break;
      }
     case 384:
      if ((HEAP32[_verbose >> 2] | 0) > 2) {
        __label__ = 385;
        break;
      } else {
        var $call1816180 = $call1816183;
        var $1017 = $256;
        var $storemerge149189 = $storemerge149;
        var $1016 = $280;
        var $1015 = $254;
        var $1014 = $253;
        var $1013 = $252;
        var $conv1132212 = $conv1132215;
        var $conv1128221 = $conv1128224;
        var $conv1124230 = $conv1124233;
        var $conv1120239 = $conv1120242;
        var $1012 = $251;
        var $best_7 = $best_0;
        var $ia_11 = $ia_1;
        __label__ = 905;
        break;
      }
     case 385:
      var $call1958 = _printf(STRING_TABLE.__str192 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $storemerge149, tempInt));
      var $call1816180 = $call1816183;
      var $1017 = $256;
      var $storemerge149189 = $storemerge149;
      var $1016 = $280;
      var $1015 = $254;
      var $1014 = $253;
      var $1013 = $252;
      var $conv1132212 = $conv1132215;
      var $conv1128221 = $conv1128224;
      var $conv1124230 = $conv1124233;
      var $conv1120239 = $conv1120242;
      var $1012 = $251;
      var $best_7 = $best_0;
      var $ia_11 = $ia_1;
      __label__ = 905;
      break;
     case 386:
      var $287 = HEAP32[$fm + ($storemerge149 << 2) >> 2];
      var $288 = HEAP32[$lv + ($storemerge149 << 2) >> 2];
      var $289 = HEAP32[$zs + ($storemerge149 << 2) >> 2];
      if (($289 | 0) == 2) {
        __label__ = 387;
        break;
      } else if (($289 | 0) == 3) {
        __label__ = 388;
        break;
      } else if (($289 | 0) == 1) {
        var $290 = 1;
        __label__ = 390;
        break;
      } else {
        __label__ = 389;
        break;
      }
     case 387:
      var $290 = $289;
      __label__ = 390;
      break;
     case 388:
      var $290 = $289;
      __label__ = 390;
      break;
     case 389:
      var $290 = 0;
      __label__ = 390;
      break;
     case 390:
      var $290;
      var $292 = HEAP32[_verbose >> 2];
      if ((HEAP32[_nosave >> 2] | 0) == 0 & ($292 | 0) > 2) {
        __label__ = 391;
        break;
      } else {
        var $298 = $290;
        var $297 = $288;
        var $296 = $287;
        var $295 = $storemerge149;
        var $294 = $280;
        var $293 = $292;
        var $best_6 = $best_0;
        __label__ = 393;
        break;
      }
     case 391:
      var $call1987 = _printf(STRING_TABLE.__str193 | 0, (tempInt = STACKTOP, STACKTOP += 16, HEAP32[tempInt >> 2] = $storemerge149, HEAP32[tempInt + 4 >> 2] = $287, HEAP32[tempInt + 8 >> 2] = $290, HEAP32[tempInt + 12 >> 2] = $288, tempInt));
      var $_ph400 = $290;
      var $_ph399 = $288;
      var $_ph398 = $287;
      var $_ph397 = $storemerge149;
      var $_ph = $280;
      var $best_5 = $best_0;
      __label__ = 392;
      break;
     case 392:
      var $best_5;
      var $_ph;
      var $_ph397;
      var $_ph398;
      var $_ph399;
      var $_ph400;
      var $298 = $_ph400;
      var $297 = $_ph399;
      var $296 = $_ph398;
      var $295 = $_ph397;
      var $294 = $_ph;
      var $293 = HEAP32[_verbose >> 2];
      var $best_6 = $best_5;
      __label__ = 393;
      break;
     case 393:
      var $best_6;
      var $293;
      var $294;
      var $295;
      var $296;
      var $297;
      var $298;
      if (($293 | 0) > 2) {
        __label__ = 394;
        break;
      } else {
        __label__ = 395;
        break;
      }
     case 394:
      var $puts363 = _puts(STRING_TABLE._str33 | 0);
      __label__ = 395;
      break;
     case 395:
      _pngcrush_pause();
      var $299 = HEAP32[_inname >> 2];
      var $call1996 = _fopen($299, STRING_TABLE.__str101 | 0);
      if (($call1996 | 0) == 0) {
        __label__ = 396;
        break;
      } else {
        __label__ = 397;
        break;
      }
     case 396:
      var $300 = HEAP32[_stdout >> 2];
      var $301 = HEAP32[_inname >> 2];
      var $call2000 = _fprintf($300, STRING_TABLE.__str187 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $301, tempInt));
      var $call1816180 = $call1816183;
      var $1017 = $295;
      var $storemerge149189 = $storemerge149;
      var $1016 = $294;
      var $1015 = $254;
      var $1014 = $253;
      var $1013 = $252;
      var $conv1132212 = $conv1132215;
      var $conv1128221 = $conv1128224;
      var $conv1124230 = $conv1124233;
      var $conv1120239 = $conv1120242;
      var $1012 = $251;
      var $best_7 = $best_6;
      var $ia_11 = $ia_1;
      __label__ = 905;
      break;
     case 397:
      if ((HEAP32[_nosave >> 2] | 0) == 0) {
        __label__ = 398;
        break;
      } else {
        var $call1816182 = $call1816183;
        var $312 = $251 + 1 | 0;
        __label__ = 409;
        break;
      }
     case 398:
      if ($tobool2008 | HEAPU8[_first_trial_b] ^ 1) {
        __label__ = 406;
        break;
      } else {
        __label__ = 399;
        break;
      }
     case 399:
      var $303 = HEAP32[_inname >> 2];
      var $call2010 = _stat($303, $stat_in);
      if (($call2010 | 0) == 0) {
        __label__ = 400;
        break;
      } else {
        __label__ = 406;
        break;
      }
     case 400:
      var $call2014 = _stat($204, $stat_out);
      if (($call2014 | 0) == 0) {
        __label__ = 401;
        break;
      } else {
        __label__ = 406;
        break;
      }
     case 401:
      var $304 = HEAP32[$st_ino >> 2];
      if (($304 | 0) == (HEAP32[$st_ino2018 >> 2] | 0)) {
        __label__ = 402;
        break;
      } else {
        __label__ = 406;
        break;
      }
     case 402:
      if ((HEAP32[$st_dev >> 2] | 0) == (HEAP32[$st_dev2022 >> 2] | 0)) {
        __label__ = 403;
        break;
      } else {
        __label__ = 406;
        break;
      }
     case 403:
      var $308 = HEAP32[_stdout >> 2];
      var $call2026 = _fprintf($308, STRING_TABLE.__str195 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $204, tempInt));
      if ((HEAP32[_verbose >> 2] | 0) > 1) {
        __label__ = 404;
        break;
      } else {
        __label__ = 405;
        break;
      }
     case 404:
      var $310 = HEAP32[$stat_in + 28 >> 2];
      var $call2031 = _printf(STRING_TABLE.__str196 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $304, HEAP32[tempInt + 4 >> 2] = $310, tempInt));
      __label__ = 405;
      break;
     case 405:
      var $call2033 = _fclose($call1996);
      _exit(1);
      throw "Reached an unreachable!";
     case 406:
      var $call2036 = _fopen($204, STRING_TABLE.__str176 | 0);
      if (($call2036 | 0) == 0) {
        __label__ = 407;
        break;
      } else {
        __label__ = 408;
        break;
      }
     case 407:
      var $311 = HEAP32[_stdout >> 2];
      var $call2040 = _fprintf($311, STRING_TABLE.__str177 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $204, tempInt));
      var $call2041 = _fclose($call1996);
      _exit(1);
      throw "Reached an unreachable!";
     case 408:
      var $call1816182 = $call2036;
      var $312 = $251 + 2 | 0;
      __label__ = 409;
      break;
     case 409:
      var $312;
      var $call1816182;
      if ((HEAP32[_verbose >> 2] | 0) > 2) {
        __label__ = 410;
        break;
      } else {
        __label__ = 411;
        break;
      }
     case 410:
      var $puts364 = _puts(STRING_TABLE._str34 | 0);
      __label__ = 411;
      break;
     case 411:
      _pngcrush_pause();
      var $314 = HEAP32[_the_exception_context >> 2];
      HEAP32[_the_exception_context >> 2] = $exception__env;
      var $call2052 = (HEAP32[$arraydecay2051 >> 2] = __label__, 0);
      __label__ = 953;
      break;
     case 953:
      if (($call2052 | 0) == 0) {
        __label__ = 412;
        break;
      } else {
        __label__ = 890;
        break;
      }
     case 412:
      if ((HEAP32[_verbose >> 2] | 0) > 1) {
        __label__ = 413;
        break;
      } else {
        __label__ = 414;
        break;
      }
     case 413:
      var $puts365 = _puts(STRING_TABLE._str35 | 0);
      __label__ = 414;
      break;
     case 414:
      var $call2061 = _png_create_read_struct_2(2, 4);
      HEAP32[_read_ptr >> 2] = $call2061;
      if (($call2061 | 0) == 0) {
        __label__ = 415;
        break;
      } else {
        __label__ = 416;
        break;
      }
     case 415:
      HEAP32[_the_exception_context + 8 >> 2] = STRING_TABLE.__str199 | 0;
      var $arraydecay2067 = HEAP32[_the_exception_context >> 2] | 0;
      _longjmp($arraydecay2067, 1);
      throw "Reached an unreachable!";
     case 416:
      if ($cmp2069) {
        __label__ = 417;
        break;
      } else {
        __label__ = 418;
        break;
      }
     case 417:
      _png_set_chunk_cache_max($call2061);
      _png_set_user_limits($call2061);
      _png_set_chunk_cache_max($call2061);
      _png_set_chunk_malloc_max($call2061);
      __label__ = 418;
      break;
     case 418:
      if ((HEAP32[_nosave >> 2] | 0) == 0) {
        __label__ = 419;
        break;
      } else {
        __label__ = 421;
        break;
      }
     case 419:
      var $call2076 = _png_create_write_struct_2();
      HEAP32[_write_ptr >> 2] = $call2076;
      if (($call2076 | 0) == 0) {
        __label__ = 420;
        break;
      } else {
        __label__ = 421;
        break;
      }
     case 420:
      HEAP32[_the_exception_context + 8 >> 2] = STRING_TABLE.__str200 | 0;
      var $arraydecay2082 = HEAP32[_the_exception_context >> 2] | 0;
      _longjmp($arraydecay2082, 1);
      throw "Reached an unreachable!";
     case 421:
      if ((HEAP32[_verbose >> 2] | 0) > 1) {
        __label__ = 422;
        break;
      } else {
        __label__ = 423;
        break;
      }
     case 422:
      var $puts366 = _puts(STRING_TABLE._str36 | 0);
      __label__ = 423;
      break;
     case 423:
      var $321 = HEAP32[_read_ptr >> 2];
      var $call2090 = _png_create_info_struct($321);
      HEAP32[_read_info_ptr >> 2] = $call2090;
      if (($call2090 | 0) == 0) {
        __label__ = 424;
        break;
      } else {
        __label__ = 425;
        break;
      }
     case 424:
      HEAP32[_the_exception_context + 8 >> 2] = STRING_TABLE.__str202 | 0;
      var $arraydecay2096 = HEAP32[_the_exception_context >> 2] | 0;
      _longjmp($arraydecay2096, 1);
      throw "Reached an unreachable!";
     case 425:
      var $323 = HEAP32[_read_ptr >> 2];
      var $call2098 = _png_create_info_struct($323);
      HEAP32[_end_info_ptr >> 2] = $call2098;
      if (($call2098 | 0) == 0) {
        __label__ = 426;
        break;
      } else {
        __label__ = 427;
        break;
      }
     case 426:
      HEAP32[_the_exception_context + 8 >> 2] = STRING_TABLE.__str203 | 0;
      var $arraydecay2104 = HEAP32[_the_exception_context >> 2] | 0;
      _longjmp($arraydecay2104, 1);
      throw "Reached an unreachable!";
     case 427:
      if ((HEAP32[_nosave >> 2] | 0) == 0) {
        __label__ = 428;
        break;
      } else {
        __label__ = 432;
        break;
      }
     case 428:
      var $326 = HEAP32[_write_ptr >> 2];
      var $call2109 = _png_create_info_struct($326);
      HEAP32[_write_info_ptr >> 2] = $call2109;
      if (($call2109 | 0) == 0) {
        __label__ = 429;
        break;
      } else {
        __label__ = 430;
        break;
      }
     case 429:
      HEAP32[_the_exception_context + 8 >> 2] = STRING_TABLE.__str204 | 0;
      var $arraydecay2115 = HEAP32[_the_exception_context >> 2] | 0;
      _longjmp($arraydecay2115, 1);
      throw "Reached an unreachable!";
     case 430:
      var $328 = HEAP32[_write_ptr >> 2];
      var $call2117 = _png_create_info_struct($328);
      HEAP32[_write_end_info_ptr >> 2] = $call2117;
      if (($call2117 | 0) == 0) {
        __label__ = 431;
        break;
      } else {
        __label__ = 432;
        break;
      }
     case 431:
      HEAP32[_the_exception_context + 8 >> 2] = STRING_TABLE.__str205 | 0;
      var $arraydecay2123 = HEAP32[_the_exception_context >> 2] | 0;
      _longjmp($arraydecay2123, 1);
      throw "Reached an unreachable!";
     case 432:
      if ((HEAP32[_verbose >> 2] | 0) > 2) {
        __label__ = 433;
        break;
      } else {
        __label__ = 434;
        break;
      }
     case 433:
      var $puts367 = _puts(STRING_TABLE._str37 | 0);
      __label__ = 434;
      break;
     case 434:
      _pngcrush_pause();
      if ((HEAP32[_verbose >> 2] | 0) > 1) {
        __label__ = 435;
        break;
      } else {
        __label__ = 436;
        break;
      }
     case 435:
      var $puts368 = _puts(STRING_TABLE._str38 | 0);
      __label__ = 436;
      break;
     case 436:
      var $332 = HEAP32[_read_ptr >> 2];
      _png_init_io($332, $call1996);
      if ((HEAP32[_nosave >> 2] | 0) == 0) {
        __label__ = 437;
        break;
      } else {
        __label__ = 438;
        break;
      }
     case 437:
      var $334 = HEAP32[_write_ptr >> 2];
      _png_init_io($334, $call1816182);
      __label__ = 438;
      break;
     case 438:
      if ((HEAP32[_verbose >> 2] | 0) > 2) {
        __label__ = 439;
        break;
      } else {
        __label__ = 440;
        break;
      }
     case 439:
      var $puts369 = _puts(STRING_TABLE._str39 | 0);
      __label__ = 440;
      break;
     case 440:
      _pngcrush_pause();
      var $336 = HEAP32[_read_ptr >> 2];
      _png_set_crc_action($336, 4, 4);
      var $337 = HEAP32[_read_ptr >> 2];
      _png_set_keep_unknown_chunks($337, 3, 0, 0);
      if ((HEAP32[_nosave >> 2] | 0) == 0) {
        __label__ = 441;
        break;
      } else {
        __label__ = 454;
        break;
      }
     case 441:
      if (($252 | 0) == 1) {
        __label__ = 442;
        break;
      } else {
        __label__ = 443;
        break;
      }
     case 442:
      var $339 = HEAP32[_write_ptr >> 2];
      _png_set_keep_unknown_chunks($339, 3, STRING_TABLE.__str209 | 0, 1);
      var $340 = HEAP32[_write_ptr >> 2];
      _png_set_keep_unknown_chunks($340, 3, STRING_TABLE.__str210 | 0, 1);
      var $341 = HEAP32[_write_ptr >> 2];
      _png_set_keep_unknown_chunks($341, 3, STRING_TABLE.__str211 | 0, 1);
      __label__ = 443;
      break;
     case 443:
      if (HEAPU8[_found_any_chunk_b]) {
        __label__ = 444;
        break;
      } else {
        __label__ = 445;
        break;
      }
     case 444:
      var $342 = HEAP32[_write_ptr >> 2];
      _png_set_keep_unknown_chunks($342, 3, STRING_TABLE.__str13 | 0, 1);
      __label__ = 445;
      break;
     case 445:
      if ((HEAP32[_all_chunks_are_safe >> 2] | 0) == 0) {
        __label__ = 448;
        break;
      } else {
        __label__ = 446;
        break;
      }
     case 446:
      var $344 = HEAP32[_write_ptr >> 2];
      _png_set_keep_unknown_chunks($344, 3, 0, 0);
      if (($252 | 0) == 0) {
        __label__ = 447;
        break;
      } else {
        __label__ = 454;
        break;
      }
     case 447:
      var $345 = HEAP32[_write_ptr >> 2];
      _png_set_keep_unknown_chunks($345, 3, STRING_TABLE.__str209 | 0, 1);
      var $346 = HEAP32[_write_ptr >> 2];
      _png_set_keep_unknown_chunks($346, 3, STRING_TABLE.__str210 | 0, 1);
      var $347 = HEAP32[_write_ptr >> 2];
      _png_set_keep_unknown_chunks($347, 3, STRING_TABLE.__str211 | 0, 1);
      __label__ = 454;
      break;
     case 448:
      HEAP8[$arrayidx2163] = 0;
      var $call2164 = _keep_unknown_chunk(STRING_TABLE.__str35 | 0, $argv);
      if (($call2164 | 0) == 0) {
        __label__ = 451;
        break;
      } else {
        __label__ = 449;
        break;
      }
     case 449:
      var $call2167 = _keep_unknown_chunk(STRING_TABLE.__str212 | 0, $argv);
      if (($call2167 | 0) == 0) {
        __label__ = 451;
        break;
      } else {
        __label__ = 450;
        break;
      }
     case 450:
      var $348 = HEAP32[_write_ptr >> 2];
      _png_set_keep_unknown_chunks($348, 2, 0, 0);
      __label__ = 452;
      break;
     case 451:
      var $349 = HEAP32[_write_ptr >> 2];
      _png_set_keep_unknown_chunks($349, 1, 0, 0);
      __label__ = 452;
      break;
     case 452:
      var $call2172 = _keep_unknown_chunk(STRING_TABLE.__str53 | 0, $argv);
      if (($call2172 | 0) == 0) {
        __label__ = 454;
        break;
      } else {
        __label__ = 453;
        break;
      }
     case 453:
      _png_save_uint_32($arraydecay2175, 1934902610);
      var $350 = HEAP32[_write_ptr >> 2];
      _png_set_keep_unknown_chunks($350, 3, $arraydecay2175, 1);
      __label__ = 454;
      break;
     case 454:
      if ((HEAP32[_verbose >> 2] | 0) > 1) {
        __label__ = 455;
        break;
      } else {
        __label__ = 456;
        break;
      }
     case 455:
      var $puts370 = _puts(STRING_TABLE._str40 | 0);
      __label__ = 456;
      break;
     case 456:
      var $st$2$0 = $mng_signature | 0;
      HEAP32[$st$2$0 >> 2] = 1196313994;
      var $st$2$1 = $mng_signature + 4 | 0;
      HEAP32[$st$2$1 >> 2] = 169478669;
      HEAP32[$png_signature >> 2] = 1196314761;
      HEAP32[$png_signature + 4 >> 2] = 169478669;
      var $352 = HEAP32[_read_ptr >> 2];
      _pngcrush_default_read_data($352, $arraydecay2185, 8);
      var $353 = HEAP32[_read_ptr >> 2];
      _png_set_sig_bytes($353, 8);
      var $call2188 = _memcmp($arraydecay2186, $arraydecay2185, 8);
      if (($call2188 | 0) == 0) {
        __label__ = 457;
        break;
      } else {
        __label__ = 458;
        break;
      }
     case 457:
      var $354 = HEAP32[_read_ptr >> 2];
      _png_permit_mng_features($354);
      _png_skip_chunk($354);
      HEAP8[_input_format_b] = 1;
      __label__ = 462;
      break;
     case 458:
      var $call2194 = _png_sig_cmp($arraydecay2185, 0, 8);
      if (($call2194 | 0) == 0) {
        __label__ = 462;
        break;
      } else {
        __label__ = 459;
        break;
      }
     case 459:
      var $call2198 = _png_sig_cmp($arraydecay2185, 0, 4);
      var $356 = HEAP32[_read_ptr >> 2];
      if (($call2198 | 0) == 0) {
        __label__ = 461;
        break;
      } else {
        __label__ = 460;
        break;
      }
     case 460:
      _png_error($356, STRING_TABLE.__str214 | 0);
      __label__ = 462;
      break;
     case 461:
      _png_error($356, STRING_TABLE.__str2751 | 0);
      __label__ = 462;
      break;
     case 462:
      if ((HEAP32[_fix >> 2] | 0) != 0 & (HEAP32[_found_CgBI >> 2] | 0) != 0) {
        __label__ = 463;
        break;
      } else {
        __label__ = 464;
        break;
      }
     case 463:
      var $359 = HEAP32[_read_ptr >> 2];
      _png_skip_chunk($359);
      var $360 = HEAP32[_read_ptr >> 2];
      _png_set_keep_unknown_chunks($360, 1, STRING_TABLE.__str23 | 0, 1);
      var $361 = HEAP32[_read_ptr >> 2];
      _png_set_keep_unknown_chunks($361, 1, STRING_TABLE.__str58 | 0, 1);
      __label__ = 464;
      break;
     case 464:
      if ($tobool2210) {
        __label__ = 466;
        break;
      } else {
        __label__ = 465;
        break;
      }
     case 465:
      var $363 = HEAP32[_read_ptr >> 2];
      _png_error($363, STRING_TABLE.__str173 | 0);
      __label__ = 466;
      break;
     case 466:
      var $364 = HEAP32[_read_ptr >> 2];
      var $365 = HEAP32[_read_info_ptr >> 2];
      _png_read_info($364, $365);
      if ((HEAP32[_verbose >> 2] | 0) > 1) {
        __label__ = 467;
        break;
      } else {
        __label__ = 468;
        break;
      }
     case 467:
      var $puts371 = _puts(STRING_TABLE._str41 | 0);
      __label__ = 468;
      break;
     case 468:
      var $367 = HEAP32[_read_ptr >> 2];
      var $368 = HEAP32[_read_info_ptr >> 2];
      var $call2218 = _png_get_IHDR($367, $368, $bit_depth, $color_type, $interlace_method, $compression_method, $filter_method);
      if (($call2218 | 0) == 0) {
        var $469 = $254;
        var $468 = $253;
        var $467 = $252;
        __label__ = 530;
        break;
      } else {
        __label__ = 469;
        break;
      }
     case 469:
      var $369 = HEAP32[$color_type >> 2];
      HEAP32[_input_color_type >> 2] = $369;
      var $370 = HEAPU32[$bit_depth >> 2];
      var $371 = ($253 | 0) > 7 ? $369 : $253;
      if ((HEAP32[_verbose >> 2] | 0) > 1 & HEAPU8[_first_trial_b]) {
        __label__ = 470;
        break;
      } else {
        var $386 = $369;
        __label__ = 473;
        break;
      }
     case 470:
      var $373 = HEAP32[_stdout >> 2];
      var $374 = _fwrite(STRING_TABLE.__str217 | 0, 20, 1, $373);
      var $375 = HEAP32[_stdout >> 2];
      var $376 = HEAP32[_width >> 2];
      var $377 = HEAP32[_height >> 2];
      var $call2231 = _fprintf($375, STRING_TABLE.__str218 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $376, HEAP32[tempInt + 4 >> 2] = $377, tempInt));
      var $378 = HEAP32[_stdout >> 2];
      var $379 = HEAP32[$bit_depth >> 2];
      var $call2232 = _fprintf($378, STRING_TABLE.__str219 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $379, tempInt));
      var $380 = HEAP32[_stdout >> 2];
      var $381 = HEAP32[$color_type >> 2];
      var $call2233 = _fprintf($380, STRING_TABLE.__str220 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $381, tempInt));
      if (($371 | 0) == (HEAP32[$color_type >> 2] | 0)) {
        __label__ = 472;
        break;
      } else {
        __label__ = 471;
        break;
      }
     case 471:
      var $383 = HEAP32[_stdout >> 2];
      var $call2237 = _fprintf($383, STRING_TABLE.__str221 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $371, tempInt));
      __label__ = 472;
      break;
     case 472:
      var $384 = HEAP32[_stdout >> 2];
      var $385 = HEAP32[$interlace_method >> 2];
      var $call2239 = _fprintf($384, STRING_TABLE.__str222 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $385, tempInt));
      var $386 = HEAP32[$color_type >> 2];
      __label__ = 473;
      break;
     case 473:
      var $386;
      var $387 = $cmp2241 ? $370 : $254;
      var $need_expand_0 = (($387 | 0) == ($370 | 0) | (($371 | 0) != 3 | ($387 | 0) > 8) & ($387 | 0) > 7 ^ 1) & 1 ^ 1;
      if (($386 | 0) == 6 || ($386 | 0) == 3 || ($386 | 0) == 2) {
        __label__ = 474;
        break;
      } else {
        var $need_expand_1 = $need_expand_0;
        var $396 = $387;
        var $395 = $386;
        __label__ = 478;
        break;
      }
     case 474:
      if (($371 | 0) == 4 || ($371 | 0) == 0) {
        __label__ = 475;
        break;
      } else {
        var $need_expand_1 = $need_expand_0;
        var $396 = $387;
        var $395 = $386;
        __label__ = 478;
        break;
      }
     case 475:
      if ((HEAP32[_verbose >> 2] | 0) > 0 & HEAPU8[_first_trial_b]) {
        __label__ = 476;
        break;
      } else {
        __label__ = 477;
        break;
      }
     case 476:
      var $390 = HEAP32[_stdout >> 2];
      var $391 = _fwrite(STRING_TABLE.__str223 | 0, 42, 1, $390);
      __label__ = 477;
      break;
     case 477:
      var $392 = HEAP32[_read_ptr >> 2];
      _png_set_rgb_to_gray_fixed($392);
      var $393 = ($387 | 0) < 8 ? 8 : $387;
      var $394 = HEAP32[$color_type >> 2];
      if (($394 | 0) == 3) {
        var $410 = $371;
        var $409 = $393;
        var $need_expand_1434446 = 1;
        __label__ = 488;
        break;
      } else {
        var $need_expand_1 = $need_expand_0;
        var $396 = $393;
        var $395 = $394;
        __label__ = 478;
        break;
      }
     case 478:
      var $395;
      var $396;
      var $need_expand_1;
      if (($395 | 0) != 3 & ($371 | 0) == 3) {
        __label__ = 479;
        break;
      } else {
        var $400 = $371;
        var $399 = $395;
        var $398 = $396;
        var $need_expand_143 = $need_expand_1;
        __label__ = 480;
        break;
      }
     case 479:
      var $puts372 = _puts(STRING_TABLE._str42 | 0);
      var $400 = HEAP32[_input_color_type >> 2];
      var $399 = HEAP32[$color_type >> 2];
      var $398 = $396;
      var $need_expand_143 = $need_expand_1;
      __label__ = 480;
      break;
     case 480:
      var $need_expand_143;
      var $398;
      var $399;
      var $400;
      if (($399 | 0) == 4 || ($399 | 0) == 0) {
        __label__ = 481;
        break;
      } else {
        var $404 = $399;
        var $need_expand_14344 = $need_expand_143;
        var $403 = $398;
        var $402 = $400;
        __label__ = 483;
        break;
      }
     case 481:
      if (($400 | 0) == 6 || ($400 | 0) == 2) {
        __label__ = 482;
        break;
      } else {
        var $404 = $399;
        var $need_expand_14344 = $need_expand_143;
        var $403 = $398;
        var $402 = $400;
        __label__ = 483;
        break;
      }
     case 482:
      var $401 = HEAP32[_read_ptr >> 2];
      _png_set_gray_to_rgb($401);
      var $404 = HEAP32[$color_type >> 2];
      var $need_expand_14344 = $need_expand_143;
      var $403 = $398;
      var $402 = $400;
      __label__ = 483;
      break;
     case 483:
      var $402;
      var $403;
      var $need_expand_14344;
      var $404;
      if (($404 | 0) == 6 || ($404 | 0) == 4) {
        __label__ = 484;
        break;
      } else {
        var $410 = $402;
        var $409 = $403;
        var $need_expand_1434446 = $need_expand_14344;
        __label__ = 488;
        break;
      }
     case 484:
      if (($402 | 0) == 6 || ($402 | 0) == 4) {
        var $412 = $402;
        var $411 = $403;
        var $need_expand_1434445 = $need_expand_14344;
        __label__ = 489;
        break;
      } else {
        __label__ = 485;
        break;
      }
     case 485:
      if ((HEAP32[_verbose >> 2] | 0) > 0 & HEAPU8[_first_trial_b]) {
        __label__ = 486;
        break;
      } else {
        __label__ = 487;
        break;
      }
     case 486:
      var $406 = HEAP32[_stdout >> 2];
      var $407 = _fwrite(STRING_TABLE.__str225 | 0, 37, 1, $406);
      __label__ = 487;
      break;
     case 487:
      var $408 = HEAP32[_read_ptr >> 2];
      _png_set_strip_alpha($408);
      var $410 = $402;
      var $409 = $403;
      var $need_expand_1434446 = $need_expand_14344;
      __label__ = 488;
      break;
     case 488:
      var $need_expand_1434446;
      var $409;
      var $410;
      if (($410 | 0) == 6 || ($410 | 0) == 4) {
        var $412 = $410;
        var $411 = $409;
        var $need_expand_1434445 = $need_expand_1434446;
        __label__ = 489;
        break;
      } else {
        var $need_expand_2 = $need_expand_1434446;
        var $420 = $410;
        var $419 = $409;
        __label__ = 493;
        break;
      }
     case 489:
      var $need_expand_1434445;
      var $411;
      var $412;
      var $413 = HEAP32[$color_type >> 2];
      if (($413 | 0) == 6 || ($413 | 0) == 4) {
        var $need_expand_2 = $need_expand_1434445;
        var $420 = $412;
        var $419 = $411;
        __label__ = 493;
        break;
      } else {
        __label__ = 490;
        break;
      }
     case 490:
      if ((HEAP32[_verbose >> 2] | 0) > 0 & HEAPU8[_first_trial_b]) {
        __label__ = 491;
        break;
      } else {
        __label__ = 492;
        break;
      }
     case 491:
      var $415 = HEAP32[_stdout >> 2];
      var $416 = _fwrite(STRING_TABLE.__str226 | 0, 35, 1, $415);
      __label__ = 492;
      break;
     case 492:
      var $418 = HEAP32[_read_ptr >> 2];
      _png_set_filler($418);
      var $need_expand_2 = 1;
      var $420 = $412;
      var $419 = $411;
      __label__ = 493;
      break;
     case 493:
      var $419;
      var $420;
      var $need_expand_2;
      if (($419 | 0) < 8) {
        __label__ = 494;
        break;
      } else {
        var $421 = $419;
        __label__ = 496;
        break;
      }
     case 494:
      if (($420 | 0) == 3 || ($420 | 0) == 0) {
        var $421 = $419;
        __label__ = 496;
        break;
      } else {
        __label__ = 495;
        break;
      }
     case 495:
      var $421 = 8;
      __label__ = 496;
      break;
     case 496:
      var $421;
      if (($420 | 0) == 6 || ($420 | 0) == 2) {
        __label__ = 497;
        break;
      } else {
        __label__ = 500;
        break;
      }
     case 497:
      if ((HEAP32[$color_type >> 2] | 0) == 3) {
        __label__ = 498;
        break;
      } else {
        __label__ = 500;
        break;
      }
     case 498:
      if ((HEAP32[_verbose >> 2] | 0) > 0 & HEAPU8[_first_trial_b]) {
        __label__ = 499;
        break;
      } else {
        __label__ = 501;
        break;
      }
     case 499:
      var $424 = HEAP32[_stdout >> 2];
      var $425 = _fwrite(STRING_TABLE.__str227 | 0, 33, 1, $424);
      __label__ = 501;
      break;
     case 500:
      if (($need_expand_2 | 0) == 1) {
        __label__ = 501;
        break;
      } else {
        __label__ = 502;
        break;
      }
     case 501:
      var $426 = HEAP32[_read_ptr >> 2];
      _png_set_expand($426);
      __label__ = 502;
      break;
     case 502:
      if (($370 | 0) < 8) {
        __label__ = 503;
        break;
      } else {
        __label__ = 504;
        break;
      }
     case 503:
      var $428 = HEAP32[_read_ptr >> 2];
      _png_set_packing($428);
      __label__ = 504;
      break;
     case 504:
      if (($420 | 0) == 0 & ($421 | 0) < 8) {
        __label__ = 505;
        break;
      } else {
        __label__ = 506;
        break;
      }
     case 505:
      HEAP8[$gray] = $421 & 255;
      var $430 = HEAP32[_read_ptr >> 2];
      _png_set_shift($430, $177);
      __label__ = 506;
      break;
     case 506:
      if (($252 | 0) == 1 | (HEAP32[_found_acTL_chunk >> 2] | 0) == 1) {
        __label__ = 507;
        break;
      } else {
        var $452 = $252;
        var $451 = $420;
        __label__ = 520;
        break;
      }
     case 507:
      if (($252 | 0) == 0 & (HEAP32[_verbose >> 2] | 0) > 0) {
        __label__ = 508;
        break;
      } else {
        __label__ = 510;
        break;
      }
     case 508:
      var $433 = HEAP32[_stdout >> 2];
      var $434 = _fwrite(STRING_TABLE.__str228 | 0, 45, 1, $433);
      if ((HEAP32[_verbose >> 2] | 0) > 0) {
        __label__ = 509;
        break;
      } else {
        __label__ = 510;
        break;
      }
     case 509:
      var $435 = HEAP32[_stdout >> 2];
      var $436 = _fwrite(STRING_TABLE.__str229 | 0, 42, 1, $435);
      __label__ = 510;
      break;
     case 510:
      if ((HEAP32[_input_color_type >> 2] | 0) == ($420 | 0)) {
        var $443 = $252;
        __label__ = 514;
        break;
      } else {
        __label__ = 511;
        break;
      }
     case 511:
      if ((HEAP32[_verbose >> 2] | 0) > 0) {
        __label__ = 512;
        break;
      } else {
        var $443 = 2;
        __label__ = 514;
        break;
      }
     case 512:
      var $439 = HEAP32[_stdout >> 2];
      var $440 = _fwrite(STRING_TABLE.__str230 | 0, 45, 1, $439);
      if ((HEAP32[_verbose >> 2] | 0) > 0) {
        __label__ = 513;
        break;
      } else {
        var $443 = 2;
        __label__ = 514;
        break;
      }
     case 513:
      var $441 = HEAP32[_stdout >> 2];
      var $442 = _fwrite(STRING_TABLE.__str231 | 0, 42, 1, $441);
      var $443 = 2;
      __label__ = 514;
      break;
     case 514:
      var $443;
      if (($370 | 0) == ($421 | 0)) {
        var $449 = $443;
        __label__ = 518;
        break;
      } else {
        __label__ = 515;
        break;
      }
     case 515:
      if ((HEAP32[_verbose >> 2] | 0) > 0) {
        __label__ = 516;
        break;
      } else {
        var $449 = 2;
        __label__ = 518;
        break;
      }
     case 516:
      var $445 = HEAP32[_stdout >> 2];
      var $446 = _fwrite(STRING_TABLE.__str232 | 0, 44, 1, $445);
      if ((HEAP32[_verbose >> 2] | 0) > 0) {
        __label__ = 517;
        break;
      } else {
        var $449 = 2;
        __label__ = 518;
        break;
      }
     case 517:
      var $447 = HEAP32[_stdout >> 2];
      var $448 = _fwrite(STRING_TABLE.__str231 | 0, 42, 1, $447);
      var $449 = 2;
      __label__ = 518;
      break;
     case 518:
      var $449;
      if (($449 | 0) != 1 & (HEAP32[_found_acTL_chunk >> 2] | 0) == 1) {
        __label__ = 519;
        break;
      } else {
        var $452 = $449;
        var $451 = $420;
        __label__ = 520;
        break;
      }
     case 519:
      HEAP32[_found_acTL_chunk >> 2] = 2;
      var $452 = $449;
      var $451 = $420;
      __label__ = 520;
      break;
     case 520:
      var $451;
      var $452;
      if ((HEAP32[_verbose >> 2] | 0) > 1) {
        __label__ = 521;
        break;
      } else {
        __label__ = 522;
        break;
      }
     case 521:
      var $454 = HEAP32[_stdout >> 2];
      var $455 = _fwrite(STRING_TABLE.__str233 | 0, 16, 1, $454);
      __label__ = 522;
      break;
     case 522:
      if ($tobool3390) {
        __label__ = 525;
        break;
      } else {
        __label__ = 523;
        break;
      }
     case 523:
      if (($451 | 0) == 6 || ($451 | 0) == 2) {
        __label__ = 524;
        break;
      } else {
        var $457 = 0;
        __label__ = 526;
        break;
      }
     case 524:
      HEAP32[$filter_method >> 2] = 64;
      var $456 = HEAP32[_write_ptr >> 2];
      _png_permit_mng_features($456);
      var $457 = 1;
      __label__ = 526;
      break;
     case 525:
      HEAP32[$filter_method >> 2] = 0;
      var $457 = 0;
      __label__ = 526;
      break;
     case 526:
      var $457;
      if ((HEAPU8[_input_format_b] & 1 | 0) == ($457 | 0)) {
        __label__ = 528;
        break;
      } else {
        __label__ = 527;
        break;
      }
     case 527:
      HEAP32[_things_have_changed >> 2] = 1;
      __label__ = 528;
      break;
     case 528:
      var $459 = HEAP32[_write_ptr >> 2];
      var $460 = HEAP32[_write_info_ptr >> 2];
      var $461 = HEAP32[_width >> 2];
      var $462 = HEAP32[_height >> 2];
      var $463 = HEAP32[$interlace_method >> 2];
      var $464 = HEAP32[$compression_method >> 2];
      var $465 = HEAP32[$filter_method >> 2];
      _png_set_IHDR($459, $460, $461, $462, $421, $451, $463, $464, $465);
      if (($451 | 0) == (HEAP32[_input_color_type >> 2] | 0)) {
        var $469 = $421;
        var $468 = $451;
        var $467 = $452;
        __label__ = 530;
        break;
      } else {
        __label__ = 529;
        break;
      }
     case 529:
      HEAP32[_things_have_changed >> 2] = 1;
      var $469 = $421;
      var $468 = $451;
      var $467 = $452;
      __label__ = 530;
      break;
     case 530:
      var $467;
      var $468;
      var $469;
      if ($tobool2481) {
        __label__ = 531;
        break;
      } else {
        __label__ = 537;
        break;
      }
     case 531:
      var $470 = HEAP32[_read_ptr >> 2];
      var $471 = HEAP32[_read_info_ptr >> 2];
      var $call2483 = _png_get_bKGD($470, $471, $165);
      if (($call2483 | 0) == 0) {
        __label__ = 538;
        break;
      } else {
        __label__ = 532;
        break;
      }
     case 532:
      var $call2486 = _keep_chunk(STRING_TABLE.__str39 | 0, $argv);
      if (($call2486 | 0) == 0) {
        __label__ = 538;
        break;
      } else {
        __label__ = 533;
        break;
      }
     case 533:
      var $472 = HEAP32[_input_color_type >> 2];
      if (($472 | 0) == 6 || ($472 | 0) == 2) {
        __label__ = 534;
        break;
      } else {
        __label__ = 536;
        break;
      }
     case 534:
      if (($468 | 0) == 4 || ($468 | 0) == 0) {
        __label__ = 535;
        break;
      } else {
        __label__ = 536;
        break;
      }
     case 535:
      var $473 = HEAP32[$background >> 2];
      var $474 = HEAP16[$473 + 4 >> 1];
      HEAP16[$473 + 8 >> 1] = $474;
      __label__ = 536;
      break;
     case 536:
      var $475 = HEAP32[_write_ptr >> 2];
      var $476 = HEAP32[_write_info_ptr >> 2];
      var $478 = HEAP32[$background >> 2];
      _png_set_bKGD($475, $476, $478);
      __label__ = 538;
      break;
     case 537:
      HEAP16[$red >> 1] = $conv176277;
      HEAP16[$green2507 >> 1] = $conv180275;
      HEAP16[$blue >> 1] = $conv184273;
      HEAP16[$gray2509 >> 1] = $conv180275;
      var $479 = HEAP32[_write_ptr >> 2];
      var $480 = HEAP32[_write_info_ptr >> 2];
      _png_set_bKGD($479, $480, $176);
      __label__ = 538;
      break;
     case 538:
      if (HEAPU8[_found_cHRM_b]) {
        __label__ = 539;
        break;
      } else {
        __label__ = 542;
        break;
      }
     case 539:
      var $481 = HEAP32[_read_ptr >> 2];
      var $482 = HEAP32[_read_info_ptr >> 2];
      var $call2513 = _png_get_cHRM_fixed($481, $482, $white_x, $white_y, $red_x, $red_y, $green_x, $green_y, $blue_x, $blue_y);
      if (($call2513 | 0) == 0) {
        __label__ = 542;
        break;
      } else {
        __label__ = 540;
        break;
      }
     case 540:
      var $call2516 = _keep_chunk(STRING_TABLE.__str11 | 0, $argv);
      if (($call2516 | 0) == 0) {
        __label__ = 542;
        break;
      } else {
        __label__ = 541;
        break;
      }
     case 541:
      var $483 = HEAP32[_write_ptr >> 2];
      var $484 = HEAP32[_write_info_ptr >> 2];
      var $485 = HEAP32[$white_x >> 2];
      var $486 = HEAP32[$white_y >> 2];
      var $487 = HEAP32[$red_x >> 2];
      var $488 = HEAP32[$red_y >> 2];
      var $489 = HEAP32[$green_x >> 2];
      var $490 = HEAP32[$green_y >> 2];
      var $491 = HEAP32[$blue_x >> 2];
      var $492 = HEAP32[$blue_y >> 2];
      _png_set_cHRM_fixed($483, $484, $485, $486, $487, $488, $489, $490, $491, $492);
      __label__ = 542;
      break;
     case 542:
      if ($tobool2521) {
        __label__ = 547;
        break;
      } else {
        __label__ = 543;
        break;
      }
     case 543:
      if (HEAPU8[_first_trial_b]) {
        __label__ = 544;
        break;
      } else {
        __label__ = 546;
        break;
      }
     case 544:
      HEAP32[_things_have_changed >> 2] = 1;
      if ((HEAP32[_verbose >> 2] | 0) > 0) {
        __label__ = 545;
        break;
      } else {
        __label__ = 546;
        break;
      }
     case 545:
      var $494 = HEAP32[_stdout >> 2];
      var $call2528 = _fprintf($494, STRING_TABLE.__str234 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $call786251, tempInt));
      __label__ = 546;
      break;
     case 546:
      var $495 = HEAP32[_write_ptr >> 2];
      var $496 = HEAP32[_write_info_ptr >> 2];
      _png_set_gAMA_fixed($495, $496, $call786251);
      HEAP32[$file_gamma >> 2] = $call786251;
      __label__ = 562;
      break;
     case 547:
      if (HEAPU8[_found_gAMA_b]) {
        __label__ = 548;
        break;
      } else {
        __label__ = 557;
        break;
      }
     case 548:
      var $497 = HEAP32[_read_ptr >> 2];
      var $498 = HEAP32[_read_info_ptr >> 2];
      var $call2534 = _png_get_gAMA_fixed($497, $498, $file_gamma);
      if (($call2534 | 0) == 0) {
        __label__ = 557;
        break;
      } else {
        __label__ = 549;
        break;
      }
     case 549:
      var $call2537 = _keep_chunk(STRING_TABLE.__str41 | 0, $argv);
      if (($call2537 | 0) == 0) {
        __label__ = 562;
        break;
      } else {
        __label__ = 550;
        break;
      }
     case 550:
      if (HEAPU8[_image_specified_gamma_b]) {
        __label__ = 551;
        break;
      } else {
        __label__ = 552;
        break;
      }
     case 551:
      HEAP32[$file_gamma >> 2] = 45455;
      __label__ = 552;
      break;
     case 552:
      if ((HEAP32[_verbose >> 2] | 0) > 1 & HEAPU8[_first_trial_b]) {
        __label__ = 553;
        break;
      } else {
        __label__ = 554;
        break;
      }
     case 553:
      var $500 = HEAP32[_stdout >> 2];
      var $501 = HEAP32[$file_gamma >> 2];
      var $call2548 = _fprintf($500, STRING_TABLE.__str235 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $501, tempInt));
      __label__ = 554;
      break;
     case 554:
      var $_pre26 = HEAP32[$file_gamma >> 2];
      if ($tobool2550) {
        var $502 = $_pre26;
        __label__ = 556;
        break;
      } else {
        __label__ = 555;
        break;
      }
     case 555:
      var $add2552 = $_pre26 << 1;
      HEAP32[$file_gamma >> 2] = $add2552;
      var $502 = $add2552;
      __label__ = 556;
      break;
     case 556:
      var $502;
      var $503 = HEAP32[_write_ptr >> 2];
      var $504 = HEAP32[_write_info_ptr >> 2];
      _png_set_gAMA_fixed($503, $504, $502);
      __label__ = 562;
      break;
     case 557:
      if ($tobool2556) {
        __label__ = 562;
        break;
      } else {
        __label__ = 558;
        break;
      }
     case 558:
      if (HEAPU8[_first_trial_b]) {
        __label__ = 559;
        break;
      } else {
        __label__ = 561;
        break;
      }
     case 559:
      HEAP32[_things_have_changed >> 2] = 1;
      if ((HEAP32[_verbose >> 2] | 0) > 0) {
        __label__ = 560;
        break;
      } else {
        __label__ = 561;
        break;
      }
     case 560:
      var $506 = HEAP32[_stdout >> 2];
      var $call2563 = _fprintf($506, STRING_TABLE.__str234 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $call525257, tempInt));
      __label__ = 561;
      break;
     case 561:
      var $507 = HEAP32[_write_ptr >> 2];
      var $508 = HEAP32[_write_info_ptr >> 2];
      _png_set_gAMA_fixed($507, $508, $call525257);
      HEAP32[$file_gamma >> 2] = $call525257;
      __label__ = 562;
      break;
     case 562:
      var $509 = HEAPU32[_read_ptr >> 2];
      var $510 = HEAPU32[_read_info_ptr >> 2];
      var $call2569 = _png_get_sRGB($509, $510, $file_intent);
      if (($call2569 | 0) == 0) {
        __label__ = 565;
        break;
      } else {
        __label__ = 563;
        break;
      }
     case 563:
      var $call2572 = _keep_chunk(STRING_TABLE.__str51 | 0, $argv);
      if (($call2572 | 0) == 0) {
        __label__ = 573;
        break;
      } else {
        __label__ = 564;
        break;
      }
     case 564:
      var $511 = HEAP32[_write_ptr >> 2];
      var $512 = HEAP32[_write_info_ptr >> 2];
      var $513 = HEAP32[$file_intent >> 2];
      _png_set_sRGB($511, $512, $513);
      var $514 = HEAPU32[$file_intent >> 2];
      HEAP32[_intent >> 2] = $514;
      var $525 = $514;
      __label__ = 574;
      break;
     case 565:
      var $515 = HEAPU32[_intent >> 2];
      if (($515 | 0) > -1) {
        __label__ = 566;
        break;
      } else {
        var $527 = $509;
        var $526 = $510;
        __label__ = 576;
        break;
      }
     case 566:
      var $516 = HEAPU32[$file_gamma >> 2];
      if (($516 - 45e3 | 0) >>> 0 < 1001) {
        __label__ = 567;
        break;
      } else {
        __label__ = 570;
        break;
      }
     case 567:
      HEAP32[_things_have_changed >> 2] = 1;
      if ((HEAP32[_verbose >> 2] | 0) > 0 & HEAPU8[_first_trial_b]) {
        __label__ = 568;
        break;
      } else {
        var $520 = $515;
        __label__ = 569;
        break;
      }
     case 568:
      var $519 = HEAP32[_stdout >> 2];
      var $call2591 = _fprintf($519, STRING_TABLE.__str236 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $515, tempInt));
      var $520 = HEAP32[_intent >> 2];
      __label__ = 569;
      break;
     case 569:
      var $520;
      var $521 = HEAP32[_write_ptr >> 2];
      var $522 = HEAP32[_write_info_ptr >> 2];
      _png_set_sRGB($521, $522, $520);
      __label__ = 573;
      break;
     case 570:
      if (($516 | 0) == 0) {
        __label__ = 573;
        break;
      } else {
        __label__ = 571;
        break;
      }
     case 571:
      if ((HEAP32[_verbose >> 2] | 0) > 0 & HEAPU8[_first_trial_b]) {
        __label__ = 572;
        break;
      } else {
        __label__ = 573;
        break;
      }
     case 572:
      var $524 = HEAP32[_stdout >> 2];
      var $call2602 = _fprintf($524, STRING_TABLE.__str237 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $516, tempInt));
      __label__ = 573;
      break;
     case 573:
      var $525 = HEAP32[_intent >> 2];
      __label__ = 574;
      break;
     case 574:
      var $525;
      if (($525 | 0) < 0) {
        __label__ = 575;
        break;
      } else {
        __label__ = 587;
        break;
      }
     case 575:
      var $527 = HEAP32[_read_ptr >> 2];
      var $526 = HEAP32[_read_info_ptr >> 2];
      __label__ = 576;
      break;
     case 576:
      var $526;
      var $527;
      var $call2612 = _png_get_iCCP($527, $526, $name, $compression_method2611, $profile, $proflen);
      if (($call2612 | 0) == 0) {
        __label__ = 584;
        break;
      } else {
        __label__ = 577;
        break;
      }
     case 577:
      if ((HEAP32[_verbose >> 2] | 0) > 1) {
        __label__ = 578;
        break;
      } else {
        __label__ = 579;
        break;
      }
     case 578:
      var $529 = HEAP32[$proflen >> 2];
      var $call2618 = _printf(STRING_TABLE.__str238 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $529, tempInt));
      __label__ = 579;
      break;
     case 579:
      if ($tobool2635) {
        __label__ = 582;
        break;
      } else {
        __label__ = 580;
        break;
      }
     case 580:
      if (HEAPU8[_first_trial_b] & (HEAP32[_verbose >> 2] | 0) > 0) {
        __label__ = 581;
        break;
      } else {
        __label__ = 582;
        break;
      }
     case 581:
      var $puts373 = _puts(STRING_TABLE._str43 | 0);
      __label__ = 582;
      break;
     case 582:
      var $call2630 = _keep_chunk(STRING_TABLE.__str23 | 0, $argv);
      if (($call2630 | 0) == 0) {
        __label__ = 587;
        break;
      } else {
        __label__ = 583;
        break;
      }
     case 583:
      var $531 = HEAP32[_write_ptr >> 2];
      var $532 = HEAP32[_write_info_ptr >> 2];
      var $533 = HEAP32[$name >> 2];
      var $534 = HEAP32[$compression_method2611 >> 2];
      var $535 = HEAP32[$profile >> 2];
      var $536 = HEAP32[$proflen >> 2];
      _png_set_iCCP($531, $532, $533, $534, $535, $536);
      __label__ = 587;
      break;
     case 584:
      if ($tobool2635) {
        __label__ = 587;
        break;
      } else {
        __label__ = 585;
        break;
      }
     case 585:
      var $537 = HEAP32[_write_ptr >> 2];
      var $538 = HEAP32[_write_info_ptr >> 2];
      _png_set_iCCP($537, $538, _iccp_name | 0, 0, $iccp_text_0, $iccp_length_0);
      if ((HEAP32[_verbose >> 2] | 0) > 1) {
        __label__ = 586;
        break;
      } else {
        __label__ = 587;
        break;
      }
     case 586:
      var $call2640 = _printf(STRING_TABLE.__str240 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $iccp_length_0, tempInt));
      __label__ = 587;
      break;
     case 587:
      var $540 = HEAP32[_read_ptr >> 2];
      var $541 = HEAP32[_read_info_ptr >> 2];
      var $call2645 = _png_get_oFFs($540, $541, $offset_x, $offset_y, $unit_type);
      if (($call2645 | 0) == 0) {
        __label__ = 594;
        break;
      } else {
        __label__ = 588;
        break;
      }
     case 588:
      if ((HEAP32[$offset_x >> 2] | 0) == 0) {
        __label__ = 589;
        break;
      } else {
        __label__ = 592;
        break;
      }
     case 589:
      if ((HEAP32[$offset_y >> 2] | 0) == 0) {
        __label__ = 590;
        break;
      } else {
        __label__ = 592;
        break;
      }
     case 590:
      if ((HEAP32[_verbose >> 2] | 0) > 0 & HEAPU8[_first_trial_b]) {
        __label__ = 591;
        break;
      } else {
        __label__ = 594;
        break;
      }
     case 591:
      var $545 = HEAP32[_stdout >> 2];
      var $546 = _fwrite(STRING_TABLE.__str241 | 0, 35, 1, $545);
      __label__ = 594;
      break;
     case 592:
      var $call2662 = _keep_chunk(STRING_TABLE.__str45 | 0, $argv);
      if (($call2662 | 0) == 0) {
        __label__ = 594;
        break;
      } else {
        __label__ = 593;
        break;
      }
     case 593:
      var $547 = HEAP32[_write_ptr >> 2];
      var $548 = HEAP32[_write_info_ptr >> 2];
      var $549 = HEAP32[$offset_x >> 2];
      var $550 = HEAP32[$offset_y >> 2];
      var $551 = HEAP32[$unit_type >> 2];
      _png_set_oFFs($547, $548, $549, $550, $551);
      __label__ = 594;
      break;
     case 594:
      var $552 = HEAP32[_read_ptr >> 2];
      var $553 = HEAP32[_read_info_ptr >> 2];
      var $call2668 = _png_get_pCAL($552, $553, $purpose, $X0, $X1, $type, $nparams, $units, $params);
      if (($call2668 | 0) == 0) {
        __label__ = 597;
        break;
      } else {
        __label__ = 595;
        break;
      }
     case 595:
      var $call2671 = _keep_chunk(STRING_TABLE.__str25 | 0, $argv);
      if (($call2671 | 0) == 0) {
        __label__ = 597;
        break;
      } else {
        __label__ = 596;
        break;
      }
     case 596:
      var $554 = HEAP32[_write_ptr >> 2];
      var $555 = HEAP32[_write_info_ptr >> 2];
      var $556 = HEAP32[$purpose >> 2];
      var $557 = HEAP32[$X0 >> 2];
      var $558 = HEAP32[$X1 >> 2];
      var $559 = HEAP32[$type >> 2];
      var $560 = HEAP32[$nparams >> 2];
      var $561 = HEAP32[$units >> 2];
      var $562 = HEAP32[$params >> 2];
      _png_set_pCAL($554, $555, $556, $557, $558, $559, $560, $561, $562);
      __label__ = 597;
      break;
     case 597:
      if ($cmp2677) {
        __label__ = 598;
        break;
      } else {
        __label__ = 605;
        break;
      }
     case 598:
      var $563 = HEAP32[_read_ptr >> 2];
      var $564 = HEAP32[_read_info_ptr >> 2];
      var $call2680 = _png_get_pHYs($563, $564, $res_x, $res_y, $unit_type2676);
      if (($call2680 | 0) == 0) {
        __label__ = 607;
        break;
      } else {
        __label__ = 599;
        break;
      }
     case 599:
      if ((HEAP32[$res_x >> 2] | 0) == 0) {
        __label__ = 600;
        break;
      } else {
        __label__ = 603;
        break;
      }
     case 600:
      if ((HEAP32[$res_y >> 2] | 0) == 0) {
        __label__ = 601;
        break;
      } else {
        __label__ = 603;
        break;
      }
     case 601:
      if ((HEAP32[_verbose >> 2] | 0) > 0 & HEAPU8[_first_trial_b]) {
        __label__ = 602;
        break;
      } else {
        __label__ = 607;
        break;
      }
     case 602:
      var $568 = HEAP32[_stdout >> 2];
      var $569 = _fwrite(STRING_TABLE.__str242 | 0, 35, 1, $568);
      __label__ = 607;
      break;
     case 603:
      var $call2697 = _keep_chunk(STRING_TABLE.__str47 | 0, $argv);
      if (($call2697 | 0) == 0) {
        __label__ = 607;
        break;
      } else {
        __label__ = 604;
        break;
      }
     case 604:
      var $570 = HEAP32[_write_ptr >> 2];
      var $571 = HEAP32[_write_info_ptr >> 2];
      var $572 = HEAP32[$res_x >> 2];
      var $573 = HEAP32[$res_y >> 2];
      var $574 = HEAP32[$unit_type2676 >> 2];
      _png_set_pHYs($570, $571, $572, $573, $574);
      __label__ = 607;
      break;
     case 605:
      HEAP32[$unit_type2676 >> 2] = 1;
      HEAP32[$res_y >> 2] = $conv2706;
      HEAP32[$res_x >> 2] = $conv2706;
      var $575 = HEAP32[_write_ptr >> 2];
      var $576 = HEAP32[_write_info_ptr >> 2];
      _png_set_pHYs($575, $576, $conv2706, $conv2706, 1);
      if ((HEAP32[_verbose >> 2] | 0) > 0 & HEAPU8[_first_trial_b]) {
        __label__ = 606;
        break;
      } else {
        __label__ = 607;
        break;
      }
     case 606:
      var $578 = HEAP32[_stdout >> 2];
      var $579 = HEAP32[$res_x >> 2];
      var $580 = HEAP32[$res_y >> 2];
      var $call2712 = _fprintf($578, STRING_TABLE.__str243 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $579, HEAP32[tempInt + 4 >> 2] = $580, tempInt));
      __label__ = 607;
      break;
     case 607:
      var $581 = HEAP32[_read_ptr >> 2];
      var $582 = HEAP32[_read_info_ptr >> 2];
      var $call2715 = _png_get_hIST($581, $582, $hist);
      if (($call2715 | 0) == 0) {
        __label__ = 610;
        break;
      } else {
        __label__ = 608;
        break;
      }
     case 608:
      var $call2718 = _keep_chunk(STRING_TABLE.__str21 | 0, $argv);
      if (($call2718 | 0) == 0) {
        __label__ = 610;
        break;
      } else {
        __label__ = 609;
        break;
      }
     case 609:
      var $583 = HEAP32[_write_ptr >> 2];
      var $584 = HEAP32[_write_info_ptr >> 2];
      var $585 = HEAP32[$hist >> 2];
      _png_set_hIST($583, $584, $585);
      __label__ = 610;
      break;
     case 610:
      var $586 = HEAP32[_read_ptr >> 2];
      var $587 = HEAP32[_read_info_ptr >> 2];
      var $call2723 = _png_get_tRNS($586, $587, $trans, $num_trans, $166);
      if (($call2723 | 0) == 0) {
        __label__ = 634;
        break;
      } else {
        __label__ = 611;
        break;
      }
     case 611:
      if ((HEAP32[_verbose >> 2] | 0) > 1 & HEAPU8[_first_trial_b]) {
        __label__ = 612;
        break;
      } else {
        __label__ = 613;
        break;
      }
     case 612:
      var $589 = HEAP32[_stdout >> 2];
      var $590 = _fwrite(STRING_TABLE.__str244 | 0, 34, 1, $589);
      __label__ = 613;
      break;
     case 613:
      if ($cmp2817) {
        __label__ = 614;
        break;
      } else {
        __label__ = 616;
        break;
      }
     case 614:
      if (HEAPU8[_first_trial_b] & (HEAP32[_verbose >> 2] | 0) > 0) {
        __label__ = 615;
        break;
      } else {
        __label__ = 616;
        break;
      }
     case 615:
      var $puts374 = _puts(STRING_TABLE._str44 | 0);
      __label__ = 616;
      break;
     case 616:
      var $call2744 = _keep_chunk(STRING_TABLE.__str56 | 0, $argv);
      if (($call2744 | 0) == 0) {
        var $conv1132214 = $conv1132215;
        var $conv1128223 = $conv1128224;
        var $conv1124232 = $conv1124233;
        var $conv1120241 = $conv1120242;
        var $ia_7 = $ia_1;
        __label__ = 650;
        break;
      } else {
        __label__ = 617;
        break;
      }
     case 617:
      var $592 = HEAP32[$trans_values >> 2];
      var $593 = HEAP16[$592 + 2 >> 1];
      var $594 = HEAP16[$592 + 4 >> 1];
      var $595 = HEAP16[$592 + 6 >> 1];
      var $596 = HEAP16[$592 + 8 >> 1];
      var $cmp2751 = ($468 | 0) == 3;
      if ($cmp2751) {
        __label__ = 618;
        break;
      } else {
        var $ia_4 = $ia_1;
        __label__ = 630;
        break;
      }
     case 618:
      var $597 = HEAP32[$num_trans >> 2];
      if (($597 | 0) > 0) {
        __label__ = 619;
        break;
      } else {
        var $inc2769467 = 0;
        __label__ = 622;
        break;
      }
     case 619:
      var $_pre18 = HEAP32[$trans >> 2];
      var $ia_2 = 0;
      __label__ = 620;
      break;
     case 620:
      var $ia_2;
      var $598 = HEAP8[$_pre18 + $ia_2 | 0];
      HEAP8[_trns_array + $ia_2 | 0] = $598;
      var $inc2761 = $ia_2 + 1 | 0;
      if (($inc2761 | 0) < ($597 | 0)) {
        var $ia_2 = $inc2761;
        __label__ = 620;
        break;
      } else {
        __label__ = 621;
        break;
      }
     case 621:
      if (($inc2761 | 0) < 256) {
        var $inc2769467 = $inc2761;
        __label__ = 622;
        break;
      } else {
        var $storemerge157468 = 0;
        var $last_nonmax_0469 = -1;
        __label__ = 623;
        break;
      }
     case 622:
      var $inc2769467;
      HEAP8[_trns_array + $inc2769467 | 0] = -1;
      var $inc2769 = $inc2769467 + 1 | 0;
      if (($inc2769 | 0) < 256) {
        var $inc2769467 = $inc2769;
        __label__ = 622;
        break;
      } else {
        var $storemerge157468 = 0;
        var $last_nonmax_0469 = -1;
        __label__ = 623;
        break;
      }
     case 623:
      var $last_nonmax_0469;
      var $storemerge157468;
      var $last_nonmax_1 = HEAP8[_trns_array + $storemerge157468 | 0] << 24 >> 24 == -1 ? $last_nonmax_0469 : $storemerge157468;
      var $inc2782 = $storemerge157468 + 1 | 0;
      if (($inc2782 | 0) == 256) {
        __label__ = 624;
        break;
      } else {
        var $storemerge157468 = $inc2782;
        var $last_nonmax_0469 = $last_nonmax_1;
        __label__ = 623;
        break;
      }
     case 624:
      if (HEAPU8[_first_trial_b] & (HEAP32[_verbose >> 2] | 0) > 0) {
        __label__ = 625;
        break;
      } else {
        __label__ = 629;
        break;
      }
     case 625:
      if (($last_nonmax_1 | 0) < 0) {
        __label__ = 626;
        break;
      } else {
        __label__ = 627;
        break;
      }
     case 626:
      var $601 = HEAP32[_stdout >> 2];
      var $602 = _fwrite(STRING_TABLE.__str246 | 0, 35, 1, $601);
      __label__ = 629;
      break;
     case 627:
      if (($last_nonmax_1 + 1 | 0) < ($597 | 0)) {
        __label__ = 628;
        break;
      } else {
        __label__ = 629;
        break;
      }
     case 628:
      var $603 = HEAP32[_stdout >> 2];
      var $604 = _fwrite(STRING_TABLE.__str247 | 0, 55, 1, $603);
      __label__ = 629;
      break;
     case 629:
      HEAP32[$num_trans >> 2] = $last_nonmax_1 + 1 | 0;
      var $ia_4 = 256;
      __label__ = 630;
      break;
     case 630:
      var $ia_4;
      if ((HEAP32[_verbose >> 2] | 0) > 1) {
        __label__ = 631;
        break;
      } else {
        __label__ = 632;
        break;
      }
     case 631:
      var $606 = HEAP32[_stdout >> 2];
      var $607 = HEAP32[$num_trans >> 2];
      var $call2807 = _fprintf($606, STRING_TABLE.__str248 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $607, tempInt));
      __label__ = 632;
      break;
     case 632:
      var $608 = HEAP32[$num_trans >> 2];
      if ($cmp2751 & ($608 | 0) == 0) {
        var $conv1132214 = $596;
        var $conv1128223 = $595;
        var $conv1124232 = $594;
        var $conv1120241 = $593;
        var $ia_7 = $ia_4;
        __label__ = 650;
        break;
      } else {
        __label__ = 633;
        break;
      }
     case 633:
      var $609 = HEAP32[_write_ptr >> 2];
      var $610 = HEAP32[_write_info_ptr >> 2];
      var $611 = HEAP32[$trans >> 2];
      var $613 = HEAP32[$trans_values >> 2];
      _png_set_tRNS($609, $610, $611, $608, $613);
      var $conv1132214 = $596;
      var $conv1128223 = $595;
      var $conv1124232 = $594;
      var $conv1120241 = $593;
      var $ia_7 = $ia_4;
      __label__ = 650;
      break;
     case 634:
      if ($cmp2817) {
        __label__ = 635;
        break;
      } else {
        __label__ = 649;
        break;
      }
     case 635:
      HEAP32[$num_trans >> 2] = $add2822;
      if ((HEAP32[_verbose >> 2] | 0) > 1) {
        __label__ = 636;
        break;
      } else {
        __label__ = 637;
        break;
      }
     case 636:
      var $615 = HEAP32[_stdout >> 2];
      var $call2826 = _fprintf($615, STRING_TABLE.__str249 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $add2822, tempInt));
      __label__ = 637;
      break;
     case 637:
      if (($468 | 0) == 3) {
        __label__ = 638;
        break;
      } else {
        __label__ = 644;
        break;
      }
     case 638:
      HEAP32[$trans_values >> 2] = 0;
      var $616 = HEAP32[$num_trans >> 2];
      if (($616 | 0) > 0) {
        __label__ = 639;
        break;
      } else {
        var $ia_5 = 0;
        __label__ = 642;
        break;
      }
     case 639:
      var $617 = ($616 | 0) > 1;
      var $inc2838452 = 0;
      __label__ = 640;
      break;
     case 640:
      var $inc2838452;
      var $618 = HEAP8[_trans_in + $inc2838452 | 0];
      HEAP8[_trns_array + $inc2838452 | 0] = $618;
      var $inc2838 = $inc2838452 + 1 | 0;
      if (($inc2838 | 0) < ($616 | 0)) {
        var $inc2838452 = $inc2838;
        __label__ = 640;
        break;
      } else {
        __label__ = 641;
        break;
      }
     case 641:
      var $smax1563 = $617 ? $616 : 1;
      if (($smax1563 | 0) < 256) {
        var $ia_5 = $smax1563;
        __label__ = 642;
        break;
      } else {
        var $ia_6 = $smax1563;
        var $621 = 0;
        __label__ = 646;
        break;
      }
     case 642:
      var $ia_5;
      var $619 = $ia_5 + 1 | 0;
      var $620 = ($619 | 0) > 256;
      var $inc2846455 = $ia_5;
      __label__ = 643;
      break;
     case 643:
      var $inc2846455;
      HEAP8[_trns_array + $inc2846455 | 0] = -1;
      var $inc2846 = $inc2846455 + 1 | 0;
      if (($inc2846 | 0) < 256) {
        var $inc2846455 = $inc2846;
        __label__ = 643;
        break;
      } else {
        __label__ = 645;
        break;
      }
     case 644:
      _memset(_trns_array | 0, -1, 256, 1);
      HEAP8[$arrayidx2857] = 0;
      HEAP8[$index] = $conv2820;
      HEAP16[$red2858 >> 1] = $conv1120242;
      HEAP16[$green2859 >> 1] = $conv1124233;
      HEAP16[$blue2860 >> 1] = $conv1128224;
      HEAP16[$gray2861 >> 1] = $conv1132215;
      HEAP32[$trans_values >> 2] = $trans_data;
      var $ia_6 = 256;
      var $621 = $trans_data;
      __label__ = 646;
      break;
     case 645:
      var $smax1564 = $620 ? $619 : 256;
      var $ia_6 = $smax1564;
      var $621 = 0;
      __label__ = 646;
      break;
     case 646:
      var $621;
      var $ia_6;
      if (HEAPU8[_first_trial_b] & (HEAP32[_verbose >> 2] | 0) > 0) {
        __label__ = 647;
        break;
      } else {
        var $623 = $621;
        __label__ = 648;
        break;
      }
     case 647:
      var $puts375 = _puts(STRING_TABLE._str45 | 0);
      var $623 = HEAP32[$trans_values >> 2];
      __label__ = 648;
      break;
     case 648:
      var $623;
      var $624 = HEAP32[_write_ptr >> 2];
      var $625 = HEAP32[_write_info_ptr >> 2];
      var $626 = HEAP32[$num_trans >> 2];
      _png_set_tRNS($624, $625, _trns_array | 0, $626, $623);
      HEAP32[_things_have_changed >> 2] = 1;
      var $conv1132214 = $conv1132215;
      var $conv1128223 = $conv1128224;
      var $conv1124232 = $conv1124233;
      var $conv1120241 = $conv1120242;
      var $ia_7 = $ia_6;
      __label__ = 650;
      break;
     case 649:
      _memset(_trns_array | 0, -1, 256, 1);
      var $conv1132214 = $conv1132215;
      var $conv1128223 = $conv1128224;
      var $conv1124232 = $conv1124233;
      var $conv1120241 = $conv1120242;
      var $ia_7 = 256;
      __label__ = 650;
      break;
     case 650:
      var $ia_7;
      var $conv1120241;
      var $conv1124232;
      var $conv1128223;
      var $conv1132214;
      if ((HEAP32[_verbose >> 2] | 0) > 1 & HEAPU8[_first_trial_b]) {
        __label__ = 651;
        break;
      } else {
        var $ia_9 = $ia_7;
        __label__ = 660;
        break;
      }
     case 651:
      var $629 = HEAP32[_num_palette >> 2];
      if (($ia_7 | 0) < ($629 | 0)) {
        __label__ = 652;
        break;
      } else {
        var $ia_9 = $ia_7;
        __label__ = 660;
        break;
      }
     case 652:
      var $630 = $ia_7 + 1 | 0;
      var $631 = ($629 | 0) > ($630 | 0);
      var $last_0446 = -1;
      var $632 = $ia_7;
      __label__ = 653;
      break;
     case 653:
      var $632;
      var $last_0446;
      var $last_1 = HEAP8[_trns_array + $632 | 0] << 24 >> 24 == -1 ? $last_0446 : $632;
      var $inc2897 = $632 + 1 | 0;
      if (($inc2897 | 0) < ($629 | 0)) {
        var $last_0446 = $last_1;
        var $632 = $inc2897;
        __label__ = 653;
        break;
      } else {
        __label__ = 654;
        break;
      }
     case 654:
      var $smax = $631 ? $629 : $630;
      if (($last_1 | 0) > -1) {
        __label__ = 655;
        break;
      } else {
        var $ia_9 = $smax;
        __label__ = 660;
        break;
      }
     case 655:
      var $634 = HEAP32[_stdout >> 2];
      var $635 = _fwrite(STRING_TABLE.__str251 | 0, 17, 1, $634);
      if (($468 | 0) == 3) {
        __label__ = 656;
        break;
      } else if (($468 | 0) == 0) {
        __label__ = 658;
        break;
      } else if (($468 | 0) == 2) {
        __label__ = 659;
        break;
      } else {
        var $ia_9 = $smax;
        __label__ = 660;
        break;
      }
     case 656:
      if (($smax | 0) < (HEAP32[_num_palette >> 2] | 0)) {
        var $ia_8 = $smax;
        __label__ = 657;
        break;
      } else {
        var $ia_9 = $smax;
        __label__ = 660;
        break;
      }
     case 657:
      var $ia_8;
      var $637 = HEAP32[_stdout >> 2];
      var $conv2911 = HEAPU8[_trns_array + $ia_8 | 0] & 255;
      var $call2912 = _fprintf($637, STRING_TABLE.__str252 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $ia_8, HEAP32[tempInt + 4 >> 2] = $conv2911, tempInt));
      var $inc2914 = $ia_8 + 1 | 0;
      if (($inc2914 | 0) < (HEAP32[_num_palette >> 2] | 0)) {
        var $ia_8 = $inc2914;
        __label__ = 657;
        break;
      } else {
        var $ia_9 = $inc2914;
        __label__ = 660;
        break;
      }
     case 658:
      var $640 = HEAP32[_stdout >> 2];
      var $call2921 = _fprintf($640, STRING_TABLE.__str253 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $conv1132214 & 65535, tempInt));
      var $ia_9 = $smax;
      __label__ = 660;
      break;
     case 659:
      var $641 = HEAP32[_stdout >> 2];
      var $call2929 = _fprintf($641, STRING_TABLE.__str254 | 0, (tempInt = STACKTOP, STACKTOP += 12, HEAP32[tempInt >> 2] = $conv1120241 & 65535, HEAP32[tempInt + 4 >> 2] = $conv1124232 & 65535, HEAP32[tempInt + 8 >> 2] = $conv1128223 & 65535, tempInt));
      var $ia_9 = $smax;
      __label__ = 660;
      break;
     case 660:
      var $ia_9;
      var $642 = HEAP32[_read_ptr >> 2];
      var $643 = HEAP32[_read_info_ptr >> 2];
      var $call2935 = _png_get_PLTE($642, $643);
      if (($call2935 | 0) == 0) {
        __label__ = 672;
        break;
      } else {
        __label__ = 661;
        break;
      }
     case 661:
      if ($cmp1674) {
        __label__ = 662;
        break;
      } else {
        __label__ = 663;
        break;
      }
     case 662:
      HEAP32[_num_palette >> 2] = $call695253;
      __label__ = 663;
      break;
     case 663:
      if ($tobool2942) {
        __label__ = 665;
        break;
      } else {
        __label__ = 664;
        break;
      }
     case 664:
      var $call2944 = _printf(STRING_TABLE.__str255 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = _pplt_string | 0, tempInt));
      var $puts376 = _puts(STRING_TABLE._str46 | 0);
      __label__ = 665;
      break;
     case 665:
      if (($468 | 0) == 3) {
        __label__ = 666;
        break;
      } else {
        __label__ = 667;
        break;
      }
     case 666:
      var $644 = HEAP32[_write_ptr >> 2];
      var $645 = HEAP32[_write_info_ptr >> 2];
      var $647 = HEAP32[_num_palette >> 2];
      var $648 = HEAP32[_palette >> 2];
      _png_set_PLTE($644, $645, $648, $647);
      __label__ = 669;
      break;
     case 667:
      var $call2951 = _keep_chunk(STRING_TABLE.__str37 | 0, $argv);
      if (($call2951 | 0) == 0) {
        __label__ = 669;
        break;
      } else {
        __label__ = 668;
        break;
      }
     case 668:
      var $649 = HEAP32[_write_ptr >> 2];
      var $650 = HEAP32[_write_info_ptr >> 2];
      var $652 = HEAP32[_num_palette >> 2];
      var $653 = HEAP32[_palette >> 2];
      _png_set_PLTE($649, $650, $653, $652);
      __label__ = 669;
      break;
     case 669:
      if ((HEAP32[_verbose >> 2] | 0) > 1 & HEAPU8[_first_trial_b]) {
        __label__ = 670;
        break;
      } else {
        __label__ = 672;
        break;
      }
     case 670:
      var $655 = HEAP32[_palette >> 2];
      var $656 = HEAP32[_stdout >> 2];
      var $657 = _fwrite(STRING_TABLE.__str257 | 0, 12, 1, $656);
      var $658 = HEAP32[_stdout >> 2];
      var $659 = _fwrite(STRING_TABLE.__str258 | 0, 38, 1, $658);
      if ((HEAP32[_num_palette >> 2] | 0) > 0) {
        var $p_0472 = $655;
        var $i_7473 = 0;
        __label__ = 671;
        break;
      } else {
        __label__ = 672;
        break;
      }
     case 671:
      var $i_7473;
      var $p_0472;
      var $661 = HEAP32[_stdout >> 2];
      var $conv2968 = HEAPU8[$p_0472 | 0] & 255;
      var $conv2970 = HEAPU8[$p_0472 + 1 | 0] & 255;
      var $conv2972 = HEAPU8[$p_0472 + 2 | 0] & 255;
      var $conv2980 = HEAPU8[_trns_array + $i_7473 | 0] & 255;
      var $call2981 = _fprintf($661, STRING_TABLE.__str259 | 0, (tempInt = STACKTOP, STACKTOP += 32, HEAP32[tempInt >> 2] = $i_7473, HEAP32[tempInt + 4 >> 2] = $conv2968, HEAP32[tempInt + 8 >> 2] = $conv2970, HEAP32[tempInt + 12 >> 2] = $conv2972, HEAP32[tempInt + 16 >> 2] = $conv2968, HEAP32[tempInt + 20 >> 2] = $conv2970, HEAP32[tempInt + 24 >> 2] = $conv2972, HEAP32[tempInt + 28 >> 2] = $conv2980, tempInt));
      var $inc2984 = $i_7473 + 1 | 0;
      if (($inc2984 | 0) < (HEAP32[_num_palette >> 2] | 0)) {
        var $p_0472 = $p_0472 + 3 | 0;
        var $i_7473 = $inc2984;
        __label__ = 671;
        break;
      } else {
        __label__ = 672;
        break;
      }
     case 672:
      var $667 = HEAP32[_read_ptr >> 2];
      var $668 = HEAP32[_read_info_ptr >> 2];
      var $call2988 = _png_get_sBIT($667, $668, $167);
      if (($call2988 | 0) == 0) {
        __label__ = 685;
        break;
      } else {
        __label__ = 673;
        break;
      }
     case 673:
      var $call2991 = _keep_chunk(STRING_TABLE.__str49 | 0, $argv);
      if (($call2991 | 0) == 0) {
        __label__ = 685;
        break;
      } else {
        __label__ = 674;
        break;
      }
     case 674:
      var $669 = HEAPU32[_input_color_type >> 2];
      if (($669 | 0) == 4 || ($669 | 0) == 0) {
        __label__ = 675;
        break;
      } else {
        __label__ = 677;
        break;
      }
     case 675:
      if (($468 | 0) == 6 || ($468 | 0) == 3 || ($468 | 0) == 2) {
        __label__ = 676;
        break;
      } else {
        __label__ = 678;
        break;
      }
     case 676:
      var $670 = HEAP32[$sig_bit >> 2];
      var $671 = HEAP8[$670 + 3 | 0];
      HEAP8[$670 + 2 | 0] = $671;
      HEAP8[HEAP32[$sig_bit >> 2] + 1 | 0] = $671;
      HEAP8[HEAP32[$sig_bit >> 2] | 0] = $671;
      __label__ = 677;
      break;
     case 677:
      if (($468 | 0) == 3) {
        __label__ = 681;
        break;
      } else {
        __label__ = 678;
        break;
      }
     case 678:
      if (($669 | 0) == 6 || ($669 | 0) == 2) {
        __label__ = 679;
        break;
      } else if (($669 | 0) == 0) {
        __label__ = 682;
        break;
      } else {
        __label__ = 684;
        break;
      }
     case 679:
      if (($468 | 0) == 4 || ($468 | 0) == 0) {
        __label__ = 680;
        break;
      } else {
        __label__ = 681;
        break;
      }
     case 680:
      var $674 = HEAP32[$sig_bit >> 2];
      var $675 = HEAP8[$674 + 1 | 0];
      HEAP8[$674 + 3 | 0] = $675;
      __label__ = 681;
      break;
     case 681:
      if (($669 | 0) == 2 || ($669 | 0) == 0) {
        __label__ = 682;
        break;
      } else {
        __label__ = 684;
        break;
      }
     case 682:
      if (($468 | 0) == 6 || ($468 | 0) == 4) {
        __label__ = 683;
        break;
      } else {
        __label__ = 684;
        break;
      }
     case 683:
      HEAP8[HEAP32[$sig_bit >> 2] + 4 | 0] = 1;
      __label__ = 684;
      break;
     case 684:
      var $677 = HEAP32[_write_ptr >> 2];
      var $678 = HEAP32[_write_info_ptr >> 2];
      var $680 = HEAP32[$sig_bit >> 2];
      _png_set_sBIT($677, $678, $680);
      __label__ = 685;
      break;
     case 685:
      var $681 = HEAP32[_read_ptr >> 2];
      var $682 = HEAP32[_read_info_ptr >> 2];
      var $call3047 = _png_get_sCAL($681, $682, $unit, $scal_width, $scal_height);
      if (($call3047 | 0) == 0) {
        var $689 = $681;
        var $688 = $682;
        __label__ = 687;
        break;
      } else {
        __label__ = 686;
        break;
      }
     case 686:
      var $683 = HEAP32[_write_ptr >> 2];
      var $684 = HEAP32[_write_info_ptr >> 2];
      var $685 = HEAP32[$unit >> 2];
      var $686 = (tempDoubleI32[0] = HEAP32[$scal_width >> 2], tempDoubleI32[1] = HEAP32[$scal_width + 4 >> 2], tempDoubleF64[0]);
      var $687 = (tempDoubleI32[0] = HEAP32[$scal_height >> 2], tempDoubleI32[1] = HEAP32[$scal_height + 4 >> 2], tempDoubleF64[0]);
      _png_set_sCAL($683, $684, $685, $686, $687);
      var $689 = HEAP32[_read_ptr >> 2];
      var $688 = HEAP32[_read_info_ptr >> 2];
      __label__ = 687;
      break;
     case 687:
      var $688;
      var $689;
      var $call3051 = _png_get_sPLT($689, $688, $168);
      if (($call3051 | 0) == 0) {
        var $697 = $689;
        var $696 = $688;
        __label__ = 691;
        break;
      } else {
        __label__ = 688;
        break;
      }
     case 688:
      var $call3054 = _keep_chunk(STRING_TABLE.__str29 | 0, $argv);
      if (($call3054 | 0) == 0) {
        __label__ = 690;
        break;
      } else {
        __label__ = 689;
        break;
      }
     case 689:
      var $690 = HEAP32[_write_ptr >> 2];
      var $691 = HEAP32[_write_info_ptr >> 2];
      var $693 = HEAP32[$entries >> 2];
      _png_set_sPLT($690, $691, $693, $call3051);
      __label__ = 690;
      break;
     case 690:
      var $694 = HEAP32[_read_ptr >> 2];
      var $695 = HEAP32[_read_info_ptr >> 2];
      _png_free_data($694, $695, 32, $call3051);
      var $697 = HEAP32[_read_ptr >> 2];
      var $696 = HEAP32[_read_info_ptr >> 2];
      __label__ = 691;
      break;
     case 691:
      var $696;
      var $697;
      HEAP32[$num_text >> 2] = 0;
      var $call3059 = _png_get_text($697, $696, $169, $num_text);
      if (($call3059 | $25 | 0) == 0) {
        __label__ = 728;
        break;
      } else {
        __label__ = 692;
        break;
      }
     case 692:
      var $701 = HEAP32[$num_text >> 2];
      if ((HEAP32[_verbose >> 2] | 0) > 1) {
        __label__ = 693;
        break;
      } else {
        var $718 = $701;
        __label__ = 701;
        break;
      }
     case 693:
      var $call3068 = _printf(STRING_TABLE.__str260 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $701, tempInt));
      var $702 = HEAP32[$num_text >> 2];
      if ((HEAP32[_verbose >> 2] | 0) > 1 & HEAPU8[_first_trial_b]) {
        __label__ = 694;
        break;
      } else {
        var $718 = $702;
        __label__ = 701;
        break;
      }
     case 694:
      if (($702 | 0) > 0) {
        var $ntext_0476 = 0;
        __label__ = 695;
        break;
      } else {
        __label__ = 718;
        break;
      }
     case 695:
      var $ntext_0476;
      var $703 = HEAP32[_stdout >> 2];
      var $705 = HEAP32[HEAP32[$text_ptr >> 2] + $ntext_0476 * 28 + 4 >> 2];
      var $call3083 = _fprintf($703, STRING_TABLE.__str261 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $ntext_0476, HEAP32[tempInt + 4 >> 2] = $705, tempInt));
      var $706 = HEAP32[$text_ptr >> 2];
      if ((HEAP32[$706 + $ntext_0476 * 28 + 12 >> 2] | 0) == 0) {
        __label__ = 697;
        break;
      } else {
        __label__ = 696;
        break;
      }
     case 696:
      var $708 = HEAP32[_stdout >> 2];
      var $709 = HEAP32[$706 + $ntext_0476 * 28 + 8 >> 2];
      var $call3088 = _fprintf($708, STRING_TABLE.__str262 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $709, tempInt));
      __label__ = 700;
      break;
     case 697:
      var $711 = HEAP32[_stdout >> 2];
      if ((HEAP32[$706 + $ntext_0476 * 28 + 16 >> 2] | 0) == 0) {
        __label__ = 699;
        break;
      } else {
        __label__ = 698;
        break;
      }
     case 698:
      var $712 = HEAP32[$706 + $ntext_0476 * 28 + 20 >> 2];
      var $713 = HEAP32[$706 + $ntext_0476 * 28 + 24 >> 2];
      var $call3095 = _fprintf($711, STRING_TABLE.__str263 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $712, HEAP32[tempInt + 4 >> 2] = $713, tempInt));
      var $714 = HEAP32[_stdout >> 2];
      var $716 = HEAP32[HEAP32[$text_ptr >> 2] + $ntext_0476 * 28 + 8 >> 2];
      var $call3098 = _fprintf($714, STRING_TABLE.__str264 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $716, tempInt));
      __label__ = 700;
      break;
     case 699:
      var $fputc379 = _fputc(10, $711);
      __label__ = 700;
      break;
     case 700:
      var $inc3104 = $ntext_0476 + 1 | 0;
      var $717 = HEAP32[$num_text >> 2];
      if (($inc3104 | 0) < ($717 | 0)) {
        var $ntext_0476 = $inc3104;
        __label__ = 695;
        break;
      } else {
        var $718 = $717;
        __label__ = 701;
        break;
      }
     case 701:
      var $718;
      if (($718 | 0) > 0) {
        __label__ = 702;
        break;
      } else {
        __label__ = 718;
        break;
      }
     case 702:
      var $call3110 = _keep_chunk(STRING_TABLE.__str511184 | 0, $argv);
      if (($call3110 | 0) == 0) {
        __label__ = 718;
        break;
      } else {
        __label__ = 703;
        break;
      }
     case 703:
      var $719 = HEAP32[$num_text >> 2];
      if (($719 | 0) > 0) {
        var $ntext_1441 = 0;
        var $num_to_write_0442 = $719;
        __label__ = 704;
        break;
      } else {
        __label__ = 718;
        break;
      }
     case 704:
      var $num_to_write_0442;
      var $ntext_1441;
      if (HEAPU8[_first_trial_b] & (HEAP32[_verbose >> 2] | 0) > 2) {
        __label__ = 705;
        break;
      } else {
        __label__ = 706;
        break;
      }
     case 705:
      var $722 = HEAP32[HEAP32[$text_ptr >> 2] + $ntext_1441 * 28 >> 2];
      var $call3123 = _printf(STRING_TABLE.__str266 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $722, tempInt));
      __label__ = 706;
      break;
     case 706:
      if ((HEAP32[HEAP32[$text_ptr >> 2] + $ntext_1441 * 28 >> 2] | 0) == -1) {
        __label__ = 707;
        break;
      } else {
        var $num_to_write_1 = $num_to_write_0442;
        __label__ = 709;
        break;
      }
     case 707:
      var $call3131 = _keep_chunk(STRING_TABLE.__str55 | 0, $argv);
      if (($call3131 | 0) == 0) {
        __label__ = 708;
        break;
      } else {
        var $num_to_write_1 = $num_to_write_0442;
        __label__ = 709;
        break;
      }
     case 708:
      HEAP8[HEAP32[HEAP32[$text_ptr >> 2] + $ntext_1441 * 28 + 4 >> 2]] = 0;
      var $num_to_write_1 = $num_to_write_0442 - 1 | 0;
      __label__ = 709;
      break;
     case 709:
      var $num_to_write_1;
      if ((HEAP32[HEAP32[$text_ptr >> 2] + $ntext_1441 * 28 >> 2] | 0) == 0) {
        __label__ = 710;
        break;
      } else {
        var $num_to_write_2 = $num_to_write_1;
        __label__ = 712;
        break;
      }
     case 710:
      var $call3145 = _keep_chunk(STRING_TABLE.__str58 | 0, $argv);
      if (($call3145 | 0) == 0) {
        __label__ = 711;
        break;
      } else {
        var $num_to_write_2 = $num_to_write_1;
        __label__ = 712;
        break;
      }
     case 711:
      HEAP8[HEAP32[HEAP32[$text_ptr >> 2] + $ntext_1441 * 28 + 4 >> 2]] = 0;
      var $num_to_write_2 = $num_to_write_1 - 1 | 0;
      __label__ = 712;
      break;
     case 712:
      var $num_to_write_2;
      if ((HEAP32[HEAP32[$text_ptr >> 2] + $ntext_1441 * 28 >> 2] - 1 | 0) >>> 0 < 2) {
        __label__ = 713;
        break;
      } else {
        var $num_to_write_3 = $num_to_write_2;
        __label__ = 715;
        break;
      }
     case 713:
      var $call3164 = _keep_chunk(STRING_TABLE.__str43 | 0, $argv);
      if (($call3164 | 0) == 0) {
        __label__ = 714;
        break;
      } else {
        var $num_to_write_3 = $num_to_write_2;
        __label__ = 715;
        break;
      }
     case 714:
      HEAP8[HEAP32[HEAP32[$text_ptr >> 2] + $ntext_1441 * 28 + 4 >> 2]] = 0;
      var $num_to_write_3 = $num_to_write_2 - 1 | 0;
      __label__ = 715;
      break;
     case 715:
      var $num_to_write_3;
      var $inc3174 = $ntext_1441 + 1 | 0;
      var $735 = HEAP32[$num_text >> 2];
      if (($inc3174 | 0) < ($735 | 0)) {
        var $ntext_1441 = $inc3174;
        var $num_to_write_0442 = $num_to_write_3;
        __label__ = 704;
        break;
      } else {
        __label__ = 716;
        break;
      }
     case 716:
      if (($num_to_write_3 | 0) > 0) {
        __label__ = 717;
        break;
      } else {
        __label__ = 718;
        break;
      }
     case 717:
      var $736 = HEAP32[_write_ptr >> 2];
      var $737 = HEAP32[_write_info_ptr >> 2];
      var $739 = HEAP32[$text_ptr >> 2];
      _png_set_text($736, $737, $739, $735);
      __label__ = 718;
      break;
     case 718:
      if ($cmp3842488) {
        var $ntext_2479 = 0;
        __label__ = 719;
        break;
      } else {
        __label__ = 728;
        break;
      }
     case 719:
      var $ntext_2479;
      if ((HEAP32[_text_where + ($ntext_2479 << 2) >> 2] | 0) == 1) {
        __label__ = 720;
        break;
      } else {
        __label__ = 727;
        break;
      }
     case 720:
      var $742 = HEAP32[_write_ptr >> 2];
      var $call3190 = _png_malloc($742, 28);
      var $mul3191 = $ntext_2479 * 80 | 0;
      var $743 = $call3190 + 4 | 0;
      HEAP32[$743 >> 2] = _text_keyword + $mul3191 | 0;
      var $744 = $call3190 + 20 | 0;
      HEAP32[$744 >> 2] = _text_lang + $mul3191 | 0;
      var $745 = $call3190 + 24 | 0;
      HEAP32[$745 >> 2] = _text_lang_key + $mul3191 | 0;
      var $746 = $call3190 + 8 | 0;
      HEAP32[$746 >> 2] = _text_text + ($ntext_2479 << 11) | 0;
      var $747 = HEAP32[_text_compression + ($ntext_2479 << 2) >> 2];
      var $compression3209 = $call3190;
      HEAP32[$compression3209 >> 2] = $747;
      var $748 = HEAP32[_write_ptr >> 2];
      var $749 = HEAP32[_write_info_ptr >> 2];
      var $750 = $call3190;
      _png_set_text($748, $749, $750, 1);
      if ((HEAP32[_verbose >> 2] | 0) > 0 & HEAPU8[_first_trial_b]) {
        __label__ = 721;
        break;
      } else {
        __label__ = 726;
        break;
      }
     case 721:
      var $752 = HEAP32[$compression3209 >> 2];
      if (($752 | 0) < 0) {
        __label__ = 722;
        break;
      } else {
        __label__ = 723;
        break;
      }
     case 722:
      var $puts380 = _puts(STRING_TABLE._str47 | 0);
      __label__ = 726;
      break;
     case 723:
      if (($752 | 0) == 0) {
        __label__ = 724;
        break;
      } else {
        __label__ = 725;
        break;
      }
     case 724:
      var $puts381 = _puts(STRING_TABLE._str48 | 0);
      __label__ = 726;
      break;
     case 725:
      var $cond = ($752 | 0) == 1 ? STRING_TABLE.__str270 | 0 : STRING_TABLE.__str271 | 0;
      var $call3233 = _printf(STRING_TABLE.__str269 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $cond, tempInt));
      __label__ = 726;
      break;
     case 726:
      var $754 = HEAP32[_write_ptr >> 2];
      _png_free($754, $call3190);
      __label__ = 727;
      break;
     case 727:
      var $inc3239 = $ntext_2479 + 1 | 0;
      if (($inc3239 | 0) == ($25 | 0)) {
        __label__ = 728;
        break;
      } else {
        var $ntext_2479 = $inc3239;
        __label__ = 719;
        break;
      }
     case 728:
      var $755 = HEAP32[_read_ptr >> 2];
      var $756 = HEAP32[_read_info_ptr >> 2];
      var $call3242 = _png_get_tIME($755, $756, $170);
      if (($call3242 | 0) == 0) {
        __label__ = 731;
        break;
      } else {
        __label__ = 729;
        break;
      }
     case 729:
      var $call3245 = _keep_chunk(STRING_TABLE.__str31 | 0, $argv);
      if (($call3245 | 0) == 0) {
        __label__ = 731;
        break;
      } else {
        __label__ = 730;
        break;
      }
     case 730:
      var $757 = HEAP32[_write_ptr >> 2];
      var $758 = HEAP32[_write_info_ptr >> 2];
      var $760 = HEAP32[$mod_time >> 2];
      _png_set_tIME($757, $758, $760);
      __label__ = 731;
      break;
     case 731:
      var $761 = HEAP32[_read_ptr >> 2];
      var $762 = HEAP32[_read_info_ptr >> 2];
      var $call3250 = _png_get_unknown_chunks($761, $762, $171);
      if ((HEAP32[_nosave >> 2] | 0) == 0 & $cmp3254) {
        __label__ = 732;
        break;
      } else {
        var $num_unknowns_0 = $call3250;
        __label__ = 735;
        break;
      }
     case 732:
      if ((HEAP32[_verbose >> 2] | 0) > 1) {
        __label__ = 733;
        break;
      } else {
        var $765 = $761;
        __label__ = 734;
        break;
      }
     case 733:
      var $call3260 = _printf(STRING_TABLE.__str272 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $call3250, tempInt));
      var $765 = HEAP32[_read_ptr >> 2];
      __label__ = 734;
      break;
     case 734:
      var $765;
      var $call3262 = _png_malloc($765, 20);
      HEAP8[$call3262] = HEAP8[STRING_TABLE.__str53 | 0];
      HEAP8[$call3262 + 1] = HEAP8[(STRING_TABLE.__str53 | 0) + 1];
      HEAP8[$call3262 + 2] = HEAP8[(STRING_TABLE.__str53 | 0) + 2];
      HEAP8[$call3262 + 3] = HEAP8[(STRING_TABLE.__str53 | 0) + 3];
      HEAP8[$call3262 + 4] = HEAP8[(STRING_TABLE.__str53 | 0) + 4];
      HEAP32[$call3262 + 12 >> 2] = 1;
      var $769 = HEAP32[_read_ptr >> 2];
      var $call3267 = _png_malloc($769, 1);
      var $770 = $call3262 + 8 | 0;
      HEAP32[$770 >> 2] = $call3267;
      HEAP8[$call3267] = $conv3269;
      var $771 = HEAP32[_read_ptr >> 2];
      var $772 = HEAP32[_read_info_ptr >> 2];
      var $773 = $call3262;
      _png_set_unknown_chunks($771, $772, $773, 1);
      var $775 = HEAP32[$770 >> 2];
      var $776 = HEAP32[_read_ptr >> 2];
      _png_free($776, $775);
      var $778 = HEAP32[_read_ptr >> 2];
      _png_free($778, $call3262);
      var $num_unknowns_0 = $call3250 + 1 | 0;
      __label__ = 735;
      break;
     case 735:
      var $num_unknowns_0;
      if ($cmp3254) {
        __label__ = 736;
        break;
      } else {
        __label__ = 737;
        break;
      }
     case 736:
      var $779 = HEAP32[_read_ptr >> 2];
      var $780 = HEAP32[_read_info_ptr >> 2];
      _png_set_unknown_chunk_location($779, $780, $num_unknowns_0 - 1 | 0, 1);
      __label__ = 737;
      break;
     case 737:
      if ((HEAP32[_verbose >> 2] | 0) > 1) {
        __label__ = 738;
        break;
      } else {
        __label__ = 739;
        break;
      }
     case 738:
      var $call3285 = _printf(STRING_TABLE.__str273 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $num_unknowns_0, tempInt));
      __label__ = 739;
      break;
     case 739:
      if ((HEAP32[_nosave >> 2] | 0) != 0 | ($num_unknowns_0 | 0) == 0) {
        __label__ = 755;
        break;
      } else {
        __label__ = 740;
        break;
      }
     case 740:
      var $784 = HEAP32[_write_ptr >> 2];
      var $call3293 = _png_malloc($784, $num_unknowns_0 * 20 | 0);
      var $785 = $call3293;
      var $786 = HEAP32[_verbose >> 2];
      if (($786 | 0) > 1) {
        __label__ = 741;
        break;
      } else {
        var $i_8 = 0;
        var $num_unknowns_keep_0 = 0;
        var $787 = $786;
        __label__ = 743;
        break;
      }
     case 741:
      var $call3297 = _printf(STRING_TABLE.__str274 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $num_unknowns_0, tempInt));
      var $i_8_ph = 0;
      var $num_unknowns_keep_0_ph = 0;
      __label__ = 742;
      break;
     case 742:
      var $num_unknowns_keep_0_ph;
      var $i_8_ph;
      var $i_8 = $i_8_ph;
      var $num_unknowns_keep_0 = $num_unknowns_keep_0_ph;
      var $787 = HEAP32[_verbose >> 2];
      __label__ = 743;
      break;
     case 743:
      var $787;
      var $num_unknowns_keep_0;
      var $i_8;
      var $cmp3303 = ($787 | 0) > 1;
      if (($i_8 | 0) < ($num_unknowns_0 | 0)) {
        __label__ = 744;
        break;
      } else {
        __label__ = 750;
        break;
      }
     case 744:
      if ($cmp3303) {
        __label__ = 745;
        break;
      } else {
        __label__ = 747;
        break;
      }
     case 745:
      var $arraydecay3308 = HEAP32[$unknowns >> 2] + $i_8 * 20 | 0;
      var $call3309 = _printf(STRING_TABLE.__str275 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $i_8, HEAP32[tempInt + 4 >> 2] = $arraydecay3308, tempInt));
      if ((HEAP32[_verbose >> 2] | 0) > 2) {
        __label__ = 746;
        break;
      } else {
        __label__ = 747;
        break;
      }
     case 746:
      var $789 = HEAP32[$unknowns >> 2];
      var $arraydecay3316 = $789 + $i_8 * 20 | 0;
      var $790 = HEAP32[$789 + $i_8 * 20 + 12 >> 2];
      var $conv3320 = HEAPU8[$789 + $i_8 * 20 + 16 | 0] & 255;
      var $call3321 = _printf(STRING_TABLE.__str276 | 0, (tempInt = STACKTOP, STACKTOP += 16, HEAP32[tempInt >> 2] = $i_8, HEAP32[tempInt + 4 >> 2] = $arraydecay3316, HEAP32[tempInt + 8 >> 2] = $790, HEAP32[tempInt + 12 >> 2] = $conv3320, tempInt));
      __label__ = 747;
      break;
     case 747:
      var $arraydecay3325 = HEAP32[$unknowns >> 2] + $i_8 * 20 | 0;
      var $call3326 = _keep_chunk($arraydecay3325, $argv);
      if (($call3326 | 0) == 0) {
        var $num_unknowns_keep_1 = $num_unknowns_keep_0;
        __label__ = 749;
        break;
      } else {
        __label__ = 748;
        break;
      }
     case 748:
      var $793 = $785 + $num_unknowns_keep_0 * 20 | 0;
      var $795 = HEAP32[$unknowns >> 2] + $i_8 * 20 | 0;
      _memcpy($793, $795, 20, 1);
      var $num_unknowns_keep_1 = $num_unknowns_keep_0 + 1 | 0;
      __label__ = 749;
      break;
     case 749:
      var $num_unknowns_keep_1;
      var $i_8_ph = $i_8 + 1 | 0;
      var $num_unknowns_keep_0_ph = $num_unknowns_keep_1;
      __label__ = 742;
      break;
     case 750:
      if ($cmp3303) {
        __label__ = 751;
        break;
      } else {
        __label__ = 752;
        break;
      }
     case 751:
      var $call3339 = _printf(STRING_TABLE.__str277 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $num_unknowns_keep_0, tempInt));
      __label__ = 752;
      break;
     case 752:
      var $796 = HEAP32[_write_ptr >> 2];
      var $797 = HEAP32[_write_info_ptr >> 2];
      var $798 = $call3293;
      _png_set_unknown_chunks($796, $797, $798, $num_unknowns_keep_0);
      var $799 = HEAPU32[_write_ptr >> 2];
      if (($num_unknowns_keep_0 | 0) > 0) {
        var $i_9482 = 0;
        var $800 = $799;
        __label__ = 753;
        break;
      } else {
        var $_lcssa480 = $799;
        __label__ = 754;
        break;
      }
     case 753:
      var $800;
      var $i_9482;
      var $801 = HEAP32[_write_info_ptr >> 2];
      var $conv3347 = HEAPU8[$785 + $i_9482 * 20 + 16 | 0] & 255;
      _png_set_unknown_chunk_location($800, $801, $i_9482, $conv3347);
      var $inc3349 = $i_9482 + 1 | 0;
      var $803 = HEAP32[_write_ptr >> 2];
      if (($inc3349 | 0) == ($num_unknowns_keep_0 | 0)) {
        var $_lcssa480 = $803;
        __label__ = 754;
        break;
      } else {
        var $i_9482 = $inc3349;
        var $800 = $803;
        __label__ = 753;
        break;
      }
     case 754:
      var $_lcssa480;
      _png_free($_lcssa480, $call3293);
      __label__ = 755;
      break;
     case 755:
      if ((HEAP32[_verbose >> 2] | 0) > 1) {
        __label__ = 756;
        break;
      } else {
        __label__ = 757;
        break;
      }
     case 756:
      var $puts382 = _puts(STRING_TABLE._str49 | 0);
      __label__ = 757;
      break;
     case 757:
      var $806 = HEAP32[_read_ptr >> 2];
      var $807 = HEAP32[_read_info_ptr >> 2];
      _png_read_transform_info($806, $807);
      if ((HEAP32[_nosave >> 2] | 0) == 0) {
        __label__ = 758;
        break;
      } else {
        __label__ = 794;
        break;
      }
     case 758:
      if (($296 | 0) == 0) {
        __label__ = 759;
        break;
      } else if (($296 | 0) == 1) {
        __label__ = 760;
        break;
      } else if (($296 | 0) == 2) {
        __label__ = 761;
        break;
      } else if (($296 | 0) == 3) {
        __label__ = 762;
        break;
      } else if (($296 | 0) == 4) {
        __label__ = 763;
        break;
      } else {
        __label__ = 764;
        break;
      }
     case 759:
      var $810 = HEAP32[_write_ptr >> 2];
      _png_set_filter($810, 8);
      __label__ = 767;
      break;
     case 760:
      var $812 = HEAP32[_write_ptr >> 2];
      _png_set_filter($812, 16);
      __label__ = 767;
      break;
     case 761:
      var $814 = HEAP32[_write_ptr >> 2];
      _png_set_filter($814, 32);
      __label__ = 767;
      break;
     case 762:
      var $816 = HEAP32[_write_ptr >> 2];
      _png_set_filter($816, 64);
      __label__ = 767;
      break;
     case 763:
      var $818 = HEAP32[_write_ptr >> 2];
      _png_set_filter($818, 128);
      __label__ = 767;
      break;
     case 764:
      var $820 = HEAP32[_write_ptr >> 2];
      if (($296 | 0) == 5) {
        __label__ = 765;
        break;
      } else {
        __label__ = 766;
        break;
      }
     case 765:
      _png_set_filter($820, 248);
      __label__ = 767;
      break;
     case 766:
      _png_set_filter($820, 8);
      __label__ = 767;
      break;
     case 767:
      if ($tobool3390) {
        __label__ = 771;
        break;
      } else {
        __label__ = 768;
        break;
      }
     case 768:
      var $st$2$0 = $mng_signature3392 | 0;
      HEAP32[$st$2$0 >> 2] = 1196313994;
      var $st$2$1 = $mng_signature3392 + 4 | 0;
      HEAP32[$st$2$1 >> 2] = 169478669;
      var $call3393 = _strlen($204);
      if (HEAP8[$204 + ($call3393 - 3) | 0] << 24 >> 24 == 112) {
        __label__ = 769;
        break;
      } else {
        __label__ = 770;
        break;
      }
     case 769:
      var $823 = HEAP32[_read_ptr >> 2];
      _png_warning($823, STRING_TABLE.__str280 | 0);
      __label__ = 770;
      break;
     case 770:
      var $824 = HEAP32[_write_ptr >> 2];
      _png_defaultwrite_data($824, $arrayidx3401);
      var $825 = HEAP32[_write_ptr >> 2];
      _png_set_sig_bytes($825, 8);
      var $826 = HEAPU32[_width >> 2];
      HEAP8[$arrayidx3403] = $826 >>> 24 & 255;
      HEAP8[$arrayidx3407] = $826 >>> 16 & 255;
      HEAP8[$arrayidx3411] = $826 >>> 8 & 255;
      HEAP8[$arrayidx3414] = $826 & 255;
      var $827 = HEAPU32[_height >> 2];
      HEAP8[$arrayidx3418] = $827 >>> 24 & 255;
      HEAP8[$arrayidx3422] = $827 >>> 16 & 255;
      HEAP8[$arrayidx3426] = $827 >>> 8 & 255;
      HEAP8[$arrayidx3429] = $827 & 255;
      for (var $$dest = $scevgep1561, $$stop = $$dest + 19; $$dest < $$stop; $$dest++) {
        HEAP8[$$dest] = 0;
      }
      HEAP8[$arrayidx3438] = 2;
      HEAP8[$arrayidx3439] = 1;
      var $_172 = ($468 | 0) == 6 ? 9 : 1;
      HEAP8[$arrayidx3443] = $_172;
      var $829 = HEAP32[_write_ptr >> 2];
      _png_write_chunk($829, STRING_TABLE._main_png_MHDR | 0, $arrayidx3403, 28);
      __label__ = 771;
      break;
     case 771:
      _pngcrush_pause();
      if ((HEAP32[_found_CgBI >> 2] | 0) == 0) {
        __label__ = 773;
        break;
      } else {
        __label__ = 772;
        break;
      }
     case 772:
      var $832 = HEAP32[_read_ptr >> 2];
      _png_warning($832, STRING_TABLE.__str281 | 0);
      var $834 = HEAP32[_read_ptr >> 2];
      _png_error($834, STRING_TABLE.__str282 | 0);
      __label__ = 773;
      break;
     case 773:
      if ((HEAP32[_verbose >> 2] | 0) > 1) {
        __label__ = 774;
        break;
      } else {
        __label__ = 775;
        break;
      }
     case 774:
      var $puts383 = _puts(STRING_TABLE._str50 | 0);
      __label__ = 775;
      break;
     case 775:
      _pngcrush_pause();
      var $837 = HEAP32[_write_ptr >> 2];
      _png_set_compression_strategy($837, $298);
      var $839 = HEAP32[_write_ptr >> 2];
      _png_set_compression_mem_level($839, $call1169206);
      var $cmp3457 = ($468 | 0) == 0;
      var $channels_1 = ($468 | 0) == 2 ? 3 : $cmp3457 & 1;
      var $channels_2 = ($468 | 0) == 3 ? 1 : $channels_1;
      var $channels_3 = ($468 | 0) == 4 ? 2 : $channels_2;
      var $channels_4 = ($468 | 0) == 6 ? 4 : $channels_3;
      var $add3482 = ((HEAP32[_width >> 2] * $channels_4 * HEAP32[$bit_depth >> 2] + 15 | 0) >>> 3) * HEAP32[_height >> 2] + 262 | 0;
      var $843 = HEAPU32[_write_ptr >> 2];
      var $call3483 = _png_get_compression_buffer_size($843);
      if (($call3483 | 0) == ($call603255 | 0)) {
        __label__ = 779;
        break;
      } else {
        __label__ = 776;
        break;
      }
     case 776:
      var $max_possible_size_0 = $add3482 >>> 0 > $call603255 >>> 0 ? $call603255 : $add3482;
      if ((HEAP32[_verbose >> 2] | 0) > 2) {
        __label__ = 777;
        break;
      } else {
        var $845 = $843;
        __label__ = 778;
        break;
      }
     case 777:
      var $call3494 = _printf(STRING_TABLE.__str284 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $max_possible_size_0, tempInt));
      var $845 = HEAP32[_write_ptr >> 2];
      __label__ = 778;
      break;
     case 778:
      var $845;
      _png_set_compression_buffer_size($845, $max_possible_size_0);
      __label__ = 779;
      break;
     case 779:
      if ($add3482 >>> 0 < 513) {
        var $compression_window_0 = 9;
        __label__ = 785;
        break;
      } else {
        __label__ = 780;
        break;
      }
     case 780:
      if ($add3482 >>> 0 < 1025) {
        var $compression_window_0 = 10;
        __label__ = 785;
        break;
      } else {
        __label__ = 781;
        break;
      }
     case 781:
      if ($add3482 >>> 0 < 2049) {
        var $compression_window_0 = 11;
        __label__ = 785;
        break;
      } else {
        __label__ = 782;
        break;
      }
     case 782:
      if ($add3482 >>> 0 < 4097) {
        var $compression_window_0 = 12;
        __label__ = 785;
        break;
      } else {
        __label__ = 783;
        break;
      }
     case 783:
      if ($add3482 >>> 0 < 8193) {
        var $compression_window_0 = 13;
        __label__ = 785;
        break;
      } else {
        __label__ = 784;
        break;
      }
     case 784:
      var $_173 = $add3482 >>> 0 < 16385 ? 14 : 15;
      var $compression_window_0 = $_173;
      __label__ = 785;
      break;
     case 785:
      var $compression_window_0;
      var $compression_window_1 = $compression_window_0 >>> 0 > $call1159210 >>> 0 | $tobool3530 ? $call1159210 : $compression_window_0;
      if ((HEAP32[_verbose >> 2] | 0) > 1 & HEAPU8[_first_trial_b]) {
        __label__ = 786;
        break;
      } else {
        __label__ = 788;
        break;
      }
     case 786:
      if (($compression_window_1 | 0) != 15 | $tobool3530) {
        __label__ = 787;
        break;
      } else {
        __label__ = 788;
        break;
      }
     case 787:
      var $847 = HEAP32[_stdout >> 2];
      var $call3543 = _fprintf($847, STRING_TABLE.__str285 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = 1 << $compression_window_1, tempInt));
      __label__ = 788;
      break;
     case 788:
      var $849 = HEAP32[_write_ptr >> 2];
      _png_set_compression_window_bits($849, $compression_window_1);
      var $851 = HEAP32[_write_ptr >> 2];
      _png_set_compression_level($851, $297);
      var $854 = HEAP32[_write_ptr >> 2];
      var $855 = HEAP32[_write_info_ptr >> 2];
      _png_write_info($854, $855);
      if ((HEAP32[_verbose >> 2] | 0) > 1) {
        __label__ = 789;
        break;
      } else {
        __label__ = 790;
        break;
      }
     case 789:
      var $puts384 = _puts(STRING_TABLE._str51 | 0);
      __label__ = 790;
      break;
     case 790:
      if (($469 | 0) < 8) {
        __label__ = 791;
        break;
      } else {
        __label__ = 794;
        break;
      }
     case 791:
      if ($cmp3457) {
        __label__ = 792;
        break;
      } else {
        __label__ = 793;
        break;
      }
     case 792:
      HEAP8[$gray3558] = $469 & 255;
      var $858 = HEAP32[_write_ptr >> 2];
      _png_set_shift($858, $172);
      __label__ = 793;
      break;
     case 793:
      var $860 = HEAP32[_write_ptr >> 2];
      _png_set_packing($860);
      __label__ = 794;
      break;
     case 794:
      var $861 = HEAPU32[_read_ptr >> 2];
      var $862 = HEAP32[_read_info_ptr >> 2];
      var $call3562 = _png_get_rowbytes($861, $862);
      var $863 = HEAP32[_write_ptr >> 2];
      var $864 = HEAP32[_write_info_ptr >> 2];
      var $call3563 = _png_get_rowbytes($863, $864);
      var $cond3566 = $call3562 >>> 0 > $call3563 >>> 0 ? $call3562 : $call3563;
      var $add3567 = $cond3566 + 64 | 0;
      var $865 = $861;
      var $call3568 = _png_malloc($865, $add3567);
      var $cmp3569 = ($call3568 | 0) == 0;
      if ($cmp3569) {
        __label__ = 795;
        break;
      } else {
        __label__ = 796;
        break;
      }
     case 795:
      var $867 = HEAP32[_read_ptr >> 2];
      _png_error($867, STRING_TABLE.__str287 | 0);
      __label__ = 796;
      break;
     case 796:
      if ((HEAP32[_verbose >> 2] | 0) > 2) {
        __label__ = 797;
        break;
      } else {
        __label__ = 798;
        break;
      }
     case 797:
      var $puts385 = _puts(STRING_TABLE._str52 | 0);
      __label__ = 798;
      break;
     case 798:
      _pngcrush_pause();
      var $870 = HEAP32[_read_ptr >> 2];
      var $call3578 = _png_set_interlace_handling($870);
      if ((HEAP32[_nosave >> 2] | 0) == 0) {
        __label__ = 799;
        break;
      } else {
        __label__ = 800;
        break;
      }
     case 799:
      var $873 = HEAP32[_write_ptr >> 2];
      var $call3582 = _png_set_interlace_handling($873);
      __label__ = 800;
      break;
     case 800:
      var $call3584 = _clock();
      var $conv3585 = $call3584 >>> 0;
      HEAPF32[_t_stop >> 2] = $conv3585;
      var $874 = HEAPF32[_t_start >> 2];
      var $add3587 = HEAPF32[_t_misc >> 2] + ($conv3585 - $874);
      HEAPF32[_t_misc >> 2] = $add3587;
      if ($conv3585 < $874) {
        __label__ = 801;
        break;
      } else {
        __label__ = 803;
        break;
      }
     case 801:
      var $add3591 = $add3587 + 2147483648;
      HEAPF32[_t_misc >> 2] = $add3591;
      if ($conv3585 < 0) {
        __label__ = 802;
        break;
      } else {
        __label__ = 803;
        break;
      }
     case 802:
      var $add3595 = $add3591 + 2147483648;
      HEAPF32[_t_misc >> 2] = $add3595;
      __label__ = 803;
      break;
     case 803:
      HEAPF32[_t_start >> 2] = $conv3585;
      if (($call3578 | 0) > 0) {
        var $pass_0487 = 0;
        __label__ = 804;
        break;
      } else {
        __label__ = 819;
        break;
      }
     case 804:
      var $pass_0487;
      if ((HEAP32[_verbose >> 2] | 0) > 1) {
        __label__ = 805;
        break;
      } else {
        __label__ = 806;
        break;
      }
     case 805:
      var $call3605 = _printf(STRING_TABLE.__str289 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $pass_0487, tempInt));
      __label__ = 806;
      break;
     case 806:
      if ((HEAP32[_height >> 2] | 0) == 0) {
        __label__ = 816;
        break;
      } else {
        var $y_0485 = 0;
        __label__ = 807;
        break;
      }
     case 807:
      var $y_0485;
      var $878 = HEAP32[_read_ptr >> 2];
      _png_read_row($878, $call3568);
      if ((HEAP32[_nosave >> 2] | 0) == 0) {
        __label__ = 808;
        break;
      } else {
        __label__ = 815;
        break;
      }
     case 808:
      var $call3614 = _clock();
      var $conv3615 = $call3614 >>> 0;
      HEAPF32[_t_stop >> 2] = $conv3615;
      var $880 = HEAPF32[_t_start >> 2];
      var $add3617 = HEAPF32[_t_decode >> 2] + ($conv3615 - $880);
      HEAPF32[_t_decode >> 2] = $add3617;
      if ($conv3615 < $880) {
        __label__ = 809;
        break;
      } else {
        __label__ = 811;
        break;
      }
     case 809:
      var $add3621 = $add3617 + 2147483648;
      HEAPF32[_t_decode >> 2] = $add3621;
      if ($conv3615 < 0) {
        __label__ = 810;
        break;
      } else {
        __label__ = 811;
        break;
      }
     case 810:
      var $add3625 = $add3621 + 2147483648;
      HEAPF32[_t_decode >> 2] = $add3625;
      __label__ = 811;
      break;
     case 811:
      HEAPF32[_t_start >> 2] = $conv3615;
      var $883 = HEAP32[_write_ptr >> 2];
      _png_write_row($883, $call3568);
      var $call3628 = _clock();
      var $conv3629 = $call3628 >>> 0;
      HEAPF32[_t_stop >> 2] = $conv3629;
      var $884 = HEAPF32[_t_start >> 2];
      var $add3631 = HEAPF32[_t_encode >> 2] + ($conv3629 - $884);
      HEAPF32[_t_encode >> 2] = $add3631;
      if ($conv3629 < $884) {
        __label__ = 812;
        break;
      } else {
        __label__ = 814;
        break;
      }
     case 812:
      var $add3635 = $add3631 + 2147483648;
      HEAPF32[_t_encode >> 2] = $add3635;
      if ($conv3629 < 0) {
        __label__ = 813;
        break;
      } else {
        __label__ = 814;
        break;
      }
     case 813:
      var $add3639 = $add3635 + 2147483648;
      HEAPF32[_t_encode >> 2] = $add3639;
      __label__ = 814;
      break;
     case 814:
      HEAPF32[_t_start >> 2] = $conv3629;
      __label__ = 815;
      break;
     case 815:
      var $inc3644 = $y_0485 + 1 | 0;
      if ($inc3644 >>> 0 < HEAPU32[_height >> 2] >>> 0) {
        var $y_0485 = $inc3644;
        __label__ = 807;
        break;
      } else {
        __label__ = 816;
        break;
      }
     case 816:
      if ((HEAP32[_verbose >> 2] | 0) > 2) {
        __label__ = 817;
        break;
      } else {
        __label__ = 818;
        break;
      }
     case 817:
      var $call3649 = _printf(STRING_TABLE.__str290 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $pass_0487, tempInt));
      __label__ = 818;
      break;
     case 818:
      var $inc3652 = $pass_0487 + 1 | 0;
      if (($inc3652 | 0) == ($call3578 | 0)) {
        __label__ = 819;
        break;
      } else {
        var $pass_0487 = $inc3652;
        __label__ = 804;
        break;
      }
     case 819:
      if ((HEAP32[_nosave >> 2] | 0) == 0) {
        __label__ = 824;
        break;
      } else {
        __label__ = 820;
        break;
      }
     case 820:
      var $call3656 = _clock();
      var $conv3657 = $call3656 >>> 0;
      HEAPF32[_t_stop >> 2] = $conv3657;
      var $889 = HEAPF32[_t_start >> 2];
      var $add3659 = HEAPF32[_t_decode >> 2] + ($conv3657 - $889);
      HEAPF32[_t_decode >> 2] = $add3659;
      if ($conv3657 < $889) {
        __label__ = 821;
        break;
      } else {
        __label__ = 823;
        break;
      }
     case 821:
      var $add3663 = $add3659 + 2147483648;
      HEAPF32[_t_decode >> 2] = $add3663;
      if ($conv3657 < 0) {
        __label__ = 822;
        break;
      } else {
        __label__ = 823;
        break;
      }
     case 822:
      var $add3667 = $add3663 + 2147483648;
      HEAPF32[_t_decode >> 2] = $add3667;
      __label__ = 823;
      break;
     case 823:
      HEAPF32[_t_start >> 2] = $conv3657;
      __label__ = 824;
      break;
     case 824:
      var $891 = HEAP32[$color_type >> 2];
      if (($891 | 0) == 6 || ($891 | 0) == 3 || ($891 | 0) == 2) {
        __label__ = 825;
        break;
      } else {
        __label__ = 828;
        break;
      }
     case 825:
      if (($468 | 0) == 4 || ($468 | 0) == 0) {
        __label__ = 826;
        break;
      } else {
        __label__ = 828;
        break;
      }
     case 826:
      var $892 = HEAP32[_read_ptr >> 2];
      var $call3686 = _png_get_rgb_to_gray_status($892);
      if ($call3686 << 24 >> 24 == 0 | HEAPU8[_first_trial_b] & (HEAP32[_verbose >> 2] | 0) > 0 ^ 1) {
        __label__ = 828;
        break;
      } else {
        __label__ = 827;
        break;
      }
     case 827:
      var $puts386 = _puts(STRING_TABLE._str53 | 0);
      __label__ = 828;
      break;
     case 828:
      var $894 = HEAP32[_read_ptr >> 2];
      var $895 = HEAP32[_read_info_ptr >> 2];
      _png_free_data($894, $895, 512, -1);
      var $896 = HEAP32[_write_ptr >> 2];
      var $897 = HEAP32[_write_info_ptr >> 2];
      _png_free_data($896, $897, 512, -1);
      if ((HEAP32[_verbose >> 2] | 0) > 1) {
        __label__ = 829;
        break;
      } else {
        __label__ = 830;
        break;
      }
     case 829:
      var $puts387 = _puts(STRING_TABLE._str54 | 0);
      __label__ = 830;
      break;
     case 830:
      var $899 = HEAP32[_read_ptr >> 2];
      var $900 = HEAP32[_end_info_ptr >> 2];
      _png_read_end($899, $900);
      HEAP32[$num_text3704 >> 2] = 0;
      var $901 = HEAP32[_read_ptr >> 2];
      var $902 = HEAP32[_end_info_ptr >> 2];
      var $call3705 = _png_get_text($901, $902, $173, $num_text3704);
      if (($call3705 | $25 | 0) == 0) {
        __label__ = 871;
        break;
      } else {
        __label__ = 831;
        break;
      }
     case 831:
      if ((HEAP32[_verbose >> 2] | 0) > 1) {
        __label__ = 832;
        break;
      } else {
        __label__ = 841;
        break;
      }
     case 832:
      var $906 = HEAP32[$num_text3704 >> 2];
      var $call3715 = _printf(STRING_TABLE.__str293 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $906, tempInt));
      if ((HEAP32[_verbose >> 2] | 0) > 1) {
        __label__ = 833;
        break;
      } else {
        __label__ = 841;
        break;
      }
     case 833:
      var $907 = HEAP32[_nosave >> 2];
      if (($907 | 0) == 0 | HEAPU8[_first_trial_b]) {
        __label__ = 834;
        break;
      } else {
        var $925 = $907;
        __label__ = 842;
        break;
      }
     case 834:
      if ((HEAP32[$num_text3704 >> 2] | 0) > 0) {
        var $ntext3711_0437 = 0;
        __label__ = 835;
        break;
      } else {
        __label__ = 841;
        break;
      }
     case 835:
      var $ntext3711_0437;
      var $910 = HEAP32[_stdout >> 2];
      var $912 = HEAP32[HEAP32[$text_ptr3703 >> 2] + $ntext3711_0437 * 28 + 4 >> 2];
      var $call3733 = _fprintf($910, STRING_TABLE.__str261 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $ntext3711_0437, HEAP32[tempInt + 4 >> 2] = $912, tempInt));
      var $913 = HEAP32[$text_ptr3703 >> 2];
      if ((HEAP32[$913 + $ntext3711_0437 * 28 + 12 >> 2] | 0) == 0) {
        __label__ = 837;
        break;
      } else {
        __label__ = 836;
        break;
      }
     case 836:
      var $915 = HEAP32[_stdout >> 2];
      var $916 = HEAP32[$913 + $ntext3711_0437 * 28 + 8 >> 2];
      var $call3740 = _fprintf($915, STRING_TABLE.__str262 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $916, tempInt));
      __label__ = 840;
      break;
     case 837:
      var $918 = HEAP32[_stdout >> 2];
      if ((HEAP32[$913 + $ntext3711_0437 * 28 + 16 >> 2] | 0) == 0) {
        __label__ = 839;
        break;
      } else {
        __label__ = 838;
        break;
      }
     case 838:
      var $919 = HEAP32[$913 + $ntext3711_0437 * 28 + 20 >> 2];
      var $920 = HEAP32[$913 + $ntext3711_0437 * 28 + 24 >> 2];
      var $call3750 = _fprintf($918, STRING_TABLE.__str263 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $919, HEAP32[tempInt + 4 >> 2] = $920, tempInt));
      var $921 = HEAP32[_stdout >> 2];
      var $923 = HEAP32[HEAP32[$text_ptr3703 >> 2] + $ntext3711_0437 * 28 + 8 >> 2];
      var $call3753 = _fprintf($921, STRING_TABLE.__str264 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $923, tempInt));
      __label__ = 840;
      break;
     case 839:
      var $fputc390 = _fputc(10, $918);
      __label__ = 840;
      break;
     case 840:
      var $inc3759 = $ntext3711_0437 + 1 | 0;
      if (($inc3759 | 0) < (HEAP32[$num_text3704 >> 2] | 0)) {
        var $ntext3711_0437 = $inc3759;
        __label__ = 835;
        break;
      } else {
        __label__ = 841;
        break;
      }
     case 841:
      var $925 = HEAP32[_nosave >> 2];
      __label__ = 842;
      break;
     case 842:
      var $925;
      if (($925 | 0) == 0) {
        __label__ = 871;
        break;
      } else {
        __label__ = 843;
        break;
      }
     case 843:
      if ((HEAP32[$num_text3704 >> 2] | 0) > 0) {
        __label__ = 844;
        break;
      } else {
        __label__ = 860;
        break;
      }
     case 844:
      var $call3767 = _keep_chunk(STRING_TABLE.__str511184 | 0, $argv);
      if (($call3767 | 0) == 0) {
        __label__ = 860;
        break;
      } else {
        __label__ = 845;
        break;
      }
     case 845:
      var $927 = HEAP32[$num_text3704 >> 2];
      if (($927 | 0) > 0) {
        var $ntext3711_1433 = 0;
        var $num_to_write3770_0434 = $927;
        __label__ = 846;
        break;
      } else {
        __label__ = 860;
        break;
      }
     case 846:
      var $num_to_write3770_0434;
      var $ntext3711_1433;
      if (HEAPU8[_first_trial_b] & (HEAP32[_verbose >> 2] | 0) > 2) {
        __label__ = 847;
        break;
      } else {
        __label__ = 848;
        break;
      }
     case 847:
      var $930 = HEAP32[HEAP32[$text_ptr3703 >> 2] + $ntext3711_1433 * 28 >> 2];
      var $call3782 = _printf(STRING_TABLE.__str294 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $930, tempInt));
      __label__ = 848;
      break;
     case 848:
      if ((HEAP32[HEAP32[$text_ptr3703 >> 2] + $ntext3711_1433 * 28 >> 2] | 0) == -1) {
        __label__ = 849;
        break;
      } else {
        var $num_to_write3770_1 = $num_to_write3770_0434;
        __label__ = 851;
        break;
      }
     case 849:
      var $call3790 = _keep_chunk(STRING_TABLE.__str55 | 0, $argv);
      if (($call3790 | 0) == 0) {
        __label__ = 850;
        break;
      } else {
        var $num_to_write3770_1 = $num_to_write3770_0434;
        __label__ = 851;
        break;
      }
     case 850:
      HEAP8[HEAP32[HEAP32[$text_ptr3703 >> 2] + $ntext3711_1433 * 28 + 4 >> 2]] = 0;
      var $num_to_write3770_1 = $num_to_write3770_0434 - 1 | 0;
      __label__ = 851;
      break;
     case 851:
      var $num_to_write3770_1;
      if ((HEAP32[HEAP32[$text_ptr3703 >> 2] + $ntext3711_1433 * 28 >> 2] | 0) == 0) {
        __label__ = 852;
        break;
      } else {
        var $num_to_write3770_2 = $num_to_write3770_1;
        __label__ = 854;
        break;
      }
     case 852:
      var $call3804 = _keep_chunk(STRING_TABLE.__str58 | 0, $argv);
      if (($call3804 | 0) == 0) {
        __label__ = 853;
        break;
      } else {
        var $num_to_write3770_2 = $num_to_write3770_1;
        __label__ = 854;
        break;
      }
     case 853:
      HEAP8[HEAP32[HEAP32[$text_ptr3703 >> 2] + $ntext3711_1433 * 28 + 4 >> 2]] = 0;
      var $num_to_write3770_2 = $num_to_write3770_1 - 1 | 0;
      __label__ = 854;
      break;
     case 854:
      var $num_to_write3770_2;
      if ((HEAP32[HEAP32[$text_ptr3703 >> 2] + $ntext3711_1433 * 28 >> 2] - 1 | 0) >>> 0 < 2) {
        __label__ = 855;
        break;
      } else {
        var $num_to_write3770_3 = $num_to_write3770_2;
        __label__ = 857;
        break;
      }
     case 855:
      var $call3823 = _keep_chunk(STRING_TABLE.__str43 | 0, $argv);
      if (($call3823 | 0) == 0) {
        __label__ = 856;
        break;
      } else {
        var $num_to_write3770_3 = $num_to_write3770_2;
        __label__ = 857;
        break;
      }
     case 856:
      HEAP8[HEAP32[HEAP32[$text_ptr3703 >> 2] + $ntext3711_1433 * 28 + 4 >> 2]] = 0;
      var $num_to_write3770_3 = $num_to_write3770_2 - 1 | 0;
      __label__ = 857;
      break;
     case 857:
      var $num_to_write3770_3;
      var $inc3833 = $ntext3711_1433 + 1 | 0;
      var $943 = HEAP32[$num_text3704 >> 2];
      if (($inc3833 | 0) < ($943 | 0)) {
        var $ntext3711_1433 = $inc3833;
        var $num_to_write3770_0434 = $num_to_write3770_3;
        __label__ = 846;
        break;
      } else {
        __label__ = 858;
        break;
      }
     case 858:
      if (($num_to_write3770_3 | 0) > 0) {
        __label__ = 859;
        break;
      } else {
        __label__ = 860;
        break;
      }
     case 859:
      var $944 = HEAP32[_write_ptr >> 2];
      var $945 = HEAP32[_write_end_info_ptr >> 2];
      var $947 = HEAP32[$text_ptr3703 >> 2];
      _png_set_text($944, $945, $947, $943);
      __label__ = 860;
      break;
     case 860:
      if ($cmp3842488) {
        var $ntext3711_2489 = 0;
        __label__ = 861;
        break;
      } else {
        __label__ = 871;
        break;
      }
     case 861:
      var $ntext3711_2489;
      if ((HEAP32[_text_where + ($ntext3711_2489 << 2) >> 2] | 0) == 2) {
        __label__ = 862;
        break;
      } else {
        __label__ = 870;
        break;
      }
     case 862:
      var $950 = HEAP32[_write_ptr >> 2];
      var $call3850 = _png_malloc($950, 28);
      var $mul3851 = $ntext3711_2489 * 80 | 0;
      var $951 = $call3850 + 4 | 0;
      HEAP32[$951 >> 2] = _text_keyword + $mul3851 | 0;
      var $952 = $call3850 + 20 | 0;
      HEAP32[$952 >> 2] = _text_lang + $mul3851 | 0;
      var $953 = $call3850 + 24 | 0;
      HEAP32[$953 >> 2] = _text_lang_key + $mul3851 | 0;
      var $954 = $call3850 + 8 | 0;
      HEAP32[$954 >> 2] = _text_text + ($ntext3711_2489 << 11) | 0;
      var $955 = HEAP32[_text_compression + ($ntext3711_2489 << 2) >> 2];
      var $compression3869 = $call3850;
      HEAP32[$compression3869 >> 2] = $955;
      var $956 = HEAP32[_write_ptr >> 2];
      var $957 = HEAP32[_write_end_info_ptr >> 2];
      var $958 = $call3850;
      _png_set_text($956, $957, $958, 1);
      if ((HEAP32[_verbose >> 2] | 0) > 0 & HEAPU8[_first_trial_b]) {
        __label__ = 863;
        break;
      } else {
        __label__ = 869;
        break;
      }
     case 863:
      var $960 = HEAP32[$compression3869 >> 2];
      if (($960 | 0) < 0) {
        __label__ = 864;
        break;
      } else {
        __label__ = 865;
        break;
      }
     case 864:
      var $puts391 = _puts(STRING_TABLE._str55 | 0);
      __label__ = 869;
      break;
     case 865:
      if (($960 | 0) == 0) {
        __label__ = 866;
        break;
      } else if (($960 | 0) == 1) {
        __label__ = 867;
        break;
      } else {
        __label__ = 868;
        break;
      }
     case 866:
      var $puts392 = _puts(STRING_TABLE._str56 | 0);
      __label__ = 869;
      break;
     case 867:
      var $puts393 = _puts(STRING_TABLE._str57 | 0);
      __label__ = 869;
      break;
     case 868:
      var $puts394 = _puts(STRING_TABLE._str58 | 0);
      __label__ = 869;
      break;
     case 869:
      var $962 = HEAP32[_write_ptr >> 2];
      _png_free($962, $call3850);
      __label__ = 870;
      break;
     case 870:
      var $inc3903 = $ntext3711_2489 + 1 | 0;
      if (($inc3903 | 0) == ($25 | 0)) {
        __label__ = 871;
        break;
      } else {
        var $ntext3711_2489 = $inc3903;
        __label__ = 861;
        break;
      }
     case 871:
      var $963 = HEAP32[_read_ptr >> 2];
      var $964 = HEAP32[_end_info_ptr >> 2];
      var $call3908 = _png_get_tIME($963, $964, $174);
      if (($call3908 | 0) == 0) {
        __label__ = 874;
        break;
      } else {
        __label__ = 872;
        break;
      }
     case 872:
      var $call3911 = _keep_chunk(STRING_TABLE.__str31 | 0, $argv);
      if (($call3911 | 0) == 0) {
        __label__ = 874;
        break;
      } else {
        __label__ = 873;
        break;
      }
     case 873:
      var $965 = HEAP32[_write_ptr >> 2];
      var $966 = HEAP32[_write_end_info_ptr >> 2];
      var $968 = HEAP32[$mod_time3907 >> 2];
      _png_set_tIME($965, $966, $968);
      __label__ = 874;
      break;
     case 874:
      var $969 = HEAP32[_read_ptr >> 2];
      var $970 = HEAP32[_end_info_ptr >> 2];
      var $call3918 = _png_get_unknown_chunks($969, $970, $175);
      var $971 = HEAPU32[_nosave >> 2];
      if (($call3918 | 0) != 0 & ($971 | 0) == 0) {
        __label__ = 875;
        break;
      } else {
        var $979 = $971;
        __label__ = 879;
        break;
      }
     case 875:
      var $call3924 = _printf(STRING_TABLE.__str297 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $call3918, tempInt));
      var $972 = HEAP32[_write_ptr >> 2];
      var $973 = HEAP32[_write_end_info_ptr >> 2];
      var $975 = HEAP32[$unknowns3916 >> 2];
      _png_set_unknown_chunks($972, $973, $975, $call3918);
      if (($call3918 | 0) > 0) {
        __label__ = 876;
        break;
      } else {
        __label__ = 878;
        break;
      }
     case 876:
      var $_pre15 = HEAP32[_write_end_info_ptr >> 2];
      var $i_11431 = 0;
      __label__ = 877;
      break;
     case 877:
      var $i_11431;
      var $976 = HEAP32[_write_ptr >> 2];
      var $conv3931 = HEAPU8[HEAP32[$unknowns3916 >> 2] + $i_11431 * 20 + 16 | 0] & 255;
      _png_set_unknown_chunk_location($976, $_pre15, $i_11431, $conv3931);
      var $inc3933 = $i_11431 + 1 | 0;
      if (($inc3933 | 0) == ($call3918 | 0)) {
        __label__ = 878;
        break;
      } else {
        var $i_11431 = $inc3933;
        __label__ = 877;
        break;
      }
     case 878:
      var $979 = HEAP32[_nosave >> 2];
      __label__ = 879;
      break;
     case 879:
      var $979;
      if (($979 | 0) == 0) {
        __label__ = 880;
        break;
      } else {
        __label__ = 881;
        break;
      }
     case 880:
      var $982 = HEAP32[_write_ptr >> 2];
      var $983 = HEAP32[_write_end_info_ptr >> 2];
      _png_write_end($982, $983);
      __label__ = 881;
      break;
     case 881:
      if ((HEAP32[_verbose >> 2] | 0) > 1) {
        __label__ = 882;
        break;
      } else {
        __label__ = 883;
        break;
      }
     case 882:
      var $puts395 = _puts(STRING_TABLE._str59 | 0);
      __label__ = 883;
      break;
     case 883:
      if ($cmp3569) {
        __label__ = 885;
        break;
      } else {
        __label__ = 884;
        break;
      }
     case 884:
      var $986 = HEAP32[_read_ptr >> 2];
      _png_free($986, $call3568);
      __label__ = 885;
      break;
     case 885:
      _png_destroy_read_struct();
      if ((HEAP32[_nosave >> 2] | 0) == 0) {
        __label__ = 886;
        break;
      } else {
        __label__ = 889;
        break;
      }
     case 886:
      if ($tobool3390) {
        __label__ = 888;
        break;
      } else {
        __label__ = 887;
        break;
      }
     case 887:
      var $989 = HEAP32[_write_ptr >> 2];
      _png_write_chunk($989, STRING_TABLE._main_png_MEND | 0, 0, 0);
      __label__ = 888;
      break;
     case 888:
      var $990 = HEAP32[_write_ptr >> 2];
      _png_destroy_info_struct($990);
      _png_destroy_write_struct(_write_ptr, _write_info_ptr);
      __label__ = 889;
      break;
     case 889:
      HEAP32[_the_exception_context + 4 >> 2] = 0;
      HEAP32[_the_exception_context >> 2] = $314;
      var $storemerge149187 = $storemerge149;
      var $ia_1052 = $ia_9;
      var $conv112024053 = $conv1120241;
      var $conv112423154 = $conv1124232;
      var $conv112822255 = $conv1128223;
      var $conv113221356 = $conv1132214;
      var $1004 = $467;
      var $1003 = $468;
      var $1002 = $469;
      __label__ = 897;
      break;
     case 890:
      HEAP32[_the_exception_context + 4 >> 2] = 1;
      HEAP32[_the_exception_context >> 2] = $314;
      var $991 = HEAP32[_the_exception_context + 8 >> 2];
      HEAP32[_msg >> 2] = $991;
      var $993 = HEAP32[_stderr >> 2];
      var $994 = HEAP32[_inname >> 2];
      if ((HEAP32[_nosave >> 2] | 0) == 0) {
        __label__ = 891;
        break;
      } else {
        __label__ = 892;
        break;
      }
     case 891:
      var $call3966 = _fprintf($993, STRING_TABLE.__str299 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $994, HEAP32[tempInt + 4 >> 2] = $204, tempInt));
      __label__ = 893;
      break;
     case 892:
      var $call3968 = _fprintf($993, STRING_TABLE.__str300 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $994, tempInt));
      __label__ = 893;
      break;
     case 893:
      var $995 = HEAP32[_stderr >> 2];
      var $996 = HEAP32[_msg >> 2];
      var $call3970 = _fprintf($995, STRING_TABLE.__str301 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $996, tempInt));
      if ((HEAP32[_nosave >> 2] | 0) == 0) {
        __label__ = 894;
        break;
      } else {
        __label__ = 895;
        break;
      }
     case 894:
      var $998 = HEAP32[_write_ptr >> 2];
      _png_destroy_info_struct($998);
      _png_destroy_write_struct(_write_ptr, _write_info_ptr);
      __label__ = 895;
      break;
     case 895:
      _png_destroy_read_struct();
      if ((HEAP32[_verbose >> 2] | 0) > 1) {
        __label__ = 896;
        break;
      } else {
        var $storemerge149187 = 201;
        var $ia_1052 = $ia_1;
        var $conv112024053 = $conv1120242;
        var $conv112423154 = $conv1124233;
        var $conv112822255 = $conv1128224;
        var $conv113221356 = $conv1132215;
        var $1004 = $252;
        var $1003 = $253;
        var $1002 = $254;
        __label__ = 897;
        break;
      }
     case 896:
      var $1000 = HEAP32[_stderr >> 2];
      var $1001 = _fwrite(STRING_TABLE.__str302 | 0, 24, 1, $1000);
      var $storemerge149187 = 201;
      var $ia_1052 = $ia_1;
      var $conv112024053 = $conv1120242;
      var $conv112423154 = $conv1124233;
      var $conv112822255 = $conv1128224;
      var $conv113221356 = $conv1132215;
      var $1004 = $252;
      var $1003 = $253;
      var $1002 = $254;
      __label__ = 897;
      break;
     case 897:
      var $1002;
      var $1003;
      var $1004;
      var $conv113221356;
      var $conv112822255;
      var $conv112423154;
      var $conv112024053;
      var $ia_1052;
      var $storemerge149187;
      HEAP32[_read_ptr >> 2] = 0;
      HEAP32[_write_ptr >> 2] = 0;
      var $call3984 = _fclose($call1996);
      if ((HEAP32[_nosave >> 2] | 0) == 0) {
        __label__ = 898;
        break;
      } else {
        var $call1816179 = $call1816182;
        var $1020 = $295;
        var $1019 = $1004;
        var $conv1132211 = $conv113221356;
        var $conv1128220 = $conv112822255;
        var $conv1124229 = $conv112423154;
        var $conv1120238 = $conv112024053;
        var $1018 = $312 - 1 | 0;
        var $best_8 = $best_6;
        var $ia_12 = $ia_1052;
        __label__ = 906;
        break;
      }
     case 898:
      var $call3989 = _fclose($call1816182);
      var $dec3990 = $312 - 2 | 0;
      if ((HEAP32[_nosave >> 2] | 0) == 0) {
        __label__ = 899;
        break;
      } else {
        var $call1816179 = 0;
        var $1020 = $295;
        var $1019 = $1004;
        var $conv1132211 = $conv113221356;
        var $conv1128220 = $conv112822255;
        var $conv1124229 = $conv112423154;
        var $conv1120238 = $conv112024053;
        var $1018 = $dec3990;
        var $best_8 = $best_6;
        var $ia_12 = $ia_1052;
        __label__ = 906;
        break;
      }
     case 899:
      HEAP8[_first_trial_b] = 0;
      if ((HEAP32[_verbose >> 2] | 0) > 1) {
        __label__ = 900;
        break;
      } else {
        __label__ = 901;
        break;
      }
     case 900:
      var $puts396 = _puts(STRING_TABLE._str60 | 0);
      __label__ = 901;
      break;
     case 901:
      var $call4003 = _fopen($204, STRING_TABLE.__str101 | 0);
      if (($call4003 | 0) == 0) {
        __label__ = 902;
        break;
      } else {
        __label__ = 903;
        break;
      }
     case 902:
      var $1007 = HEAP32[_stdout >> 2];
      var $call4007 = _fprintf($1007, STRING_TABLE.__str304 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $204, tempInt));
      _exit(1);
      throw "Reached an unreachable!";
     case 903:
      var $call4014 = _measure_idats($call4003);
      HEAP32[_idat_length + ($storemerge149187 << 2) >> 2] = $call4014;
      var $call4016 = _fclose($call4003);
      if ((HEAP32[_verbose >> 2] | 0) > 0 & ($storemerge149187 | 0) != 200) {
        __label__ = 904;
        break;
      } else {
        var $call1816180 = 0;
        var $1017 = $295;
        var $storemerge149189 = $storemerge149187;
        var $1016 = $294;
        var $1015 = $1002;
        var $1014 = $1003;
        var $1013 = $1004;
        var $conv1132212 = $conv113221356;
        var $conv1128221 = $conv112822255;
        var $conv1124230 = $conv112423154;
        var $conv1120239 = $conv112024053;
        var $1012 = $dec3990;
        var $best_7 = $best_6;
        var $ia_11 = $ia_1052;
        __label__ = 905;
        break;
      }
     case 904:
      var $1009 = HEAP32[_stdout >> 2];
      var $1010 = HEAP32[_idat_length + ($storemerge149187 << 2) >> 2];
      var $call4026 = _fprintf($1009, STRING_TABLE.__str305 | 0, (tempInt = STACKTOP, STACKTOP += 20, HEAP32[tempInt >> 2] = $storemerge149187, HEAP32[tempInt + 4 >> 2] = $296, HEAP32[tempInt + 8 >> 2] = $297, HEAP32[tempInt + 12 >> 2] = $298, HEAP32[tempInt + 16 >> 2] = $1010, tempInt));
      var $1011 = HEAP32[_stdout >> 2];
      var $call4027 = _fflush($1011);
      var $call1816180 = 0;
      var $1017 = $295;
      var $storemerge149189 = $storemerge149187;
      var $1016 = $294;
      var $1015 = $1002;
      var $1014 = $1003;
      var $1013 = $1004;
      var $conv1132212 = $conv113221356;
      var $conv1128221 = $conv112822255;
      var $conv1124230 = $conv112423154;
      var $conv1120239 = $conv112024053;
      var $1012 = $dec3990;
      var $best_7 = $best_6;
      var $ia_11 = $ia_1052;
      __label__ = 905;
      break;
     case 905:
      var $ia_11;
      var $best_7;
      var $1012;
      var $conv1120239;
      var $conv1124230;
      var $conv1128221;
      var $conv1132212;
      var $1013;
      var $1014;
      var $1015;
      var $1016;
      var $storemerge149189;
      var $1017;
      var $call1816180;
      var $storemerge149 = $storemerge149189 + 1 | 0;
      var $call1816183 = $call1816180;
      var $256 = $1017;
      var $255 = $1016;
      var $254 = $1015;
      var $253 = $1014;
      var $252 = $1013;
      var $conv1132215 = $conv1132212;
      var $conv1128224 = $conv1128221;
      var $conv1124233 = $conv1124230;
      var $conv1120242 = $conv1120239;
      var $251 = $1012;
      var $best_0 = $best_7;
      var $ia_1 = $ia_11;
      __label__ = 341;
      break;
     case 906:
      var $ia_12;
      var $best_8;
      var $1018;
      var $conv1120238;
      var $conv1124229;
      var $conv1128220;
      var $conv1132211;
      var $1019;
      var $1020;
      var $call1816179;
      if ((HEAP32[_verbose >> 2] | 0) > 1) {
        __label__ = 907;
        break;
      } else {
        var $call1816185 = $call1816179;
        var $1024 = $1020;
        var $1023 = $1019;
        var $conv1132216 = $conv1132211;
        var $conv1128225 = $conv1128220;
        var $conv1124234 = $conv1124229;
        var $conv1120243 = $conv1120238;
        var $call272262 = $call272266;
        var $call248268 = $call248269;
        var $1022 = $1018;
        var $best_9 = $best_8;
        var $ia_13 = $ia_12;
        __label__ = 908;
        break;
      }
     case 907:
      var $call4035 = _printf(STRING_TABLE.__str306 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = 200, tempInt));
      var $call1816185 = $call1816179;
      var $1024 = $1020;
      var $1023 = $1019;
      var $conv1132216 = $conv1132211;
      var $conv1128225 = $conv1128220;
      var $conv1124234 = $conv1124229;
      var $conv1120243 = $conv1120238;
      var $call272262 = $call272266;
      var $call248268 = $call248269;
      var $1022 = $1018;
      var $best_9 = $best_8;
      var $ia_13 = $ia_12;
      __label__ = 908;
      break;
     case 908:
      var $ia_13;
      var $best_9;
      var $1022;
      var $call248268;
      var $call272262;
      var $conv1120243;
      var $conv1124234;
      var $conv1128225;
      var $conv1132216;
      var $1023;
      var $1024;
      var $call1816185;
      var $1025 = HEAP32[_nosave >> 2];
      if (($1025 | 0) == 0 & ($call1816185 | 0) != 0) {
        __label__ = 909;
        break;
      } else {
        var $call1816184 = $call1816185;
        var $1027 = $1022;
        var $1026 = $1025;
        __label__ = 910;
        break;
      }
     case 909:
      var $call4048 = _fclose($call1816185);
      var $call1816184 = 0;
      var $1027 = $1022 - 1 | 0;
      var $1026 = HEAP32[_nosave >> 2];
      __label__ = 910;
      break;
     case 910:
      var $1026;
      var $1027;
      var $call1816184;
      if (($1026 | 0) == 0 & ($198 | 0) != 0) {
        __label__ = 911;
        break;
      } else {
        var $1033 = $1026;
        __label__ = 916;
        break;
      }
     case 911:
      var $1028 = HEAP32[_inname >> 2];
      var $call4057 = _rename($204, $1028);
      if (($call4057 | 0) == 0) {
        __label__ = 913;
        break;
      } else {
        __label__ = 912;
        break;
      }
     case 912:
      var $1029 = HEAP32[_stdout >> 2];
      var $1030 = HEAP32[_inname >> 2];
      var $call4061 = _fprintf($1029, STRING_TABLE.__str307 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $204, HEAP32[tempInt + 4 >> 2] = $1030, tempInt));
      _exit(1);
      throw "Reached an unreachable!";
     case 913:
      if ((HEAP32[_verbose >> 2] | 0) > 2) {
        __label__ = 914;
        break;
      } else {
        __label__ = 915;
        break;
      }
     case 914:
      var $1032 = HEAP32[_inname >> 2];
      var $call4066 = _printf(STRING_TABLE.__str308 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $204, HEAP32[tempInt + 4 >> 2] = $1032, tempInt));
      __label__ = 915;
      break;
     case 915:
      var $1033 = HEAP32[_nosave >> 2];
      __label__ = 916;
      break;
     case 916:
      var $1033;
      if (($1033 | 0) == 0) {
        __label__ = 917;
        break;
      } else {
        var $total_input_length_0 = $total_input_length_1;
        __label__ = 936;
        break;
      }
     case 917:
      var $1034 = HEAP32[_inname >> 2];
      var $call4074 = _stat($1034, $stat_buf4073);
      var $1035 = HEAPU32[$st_size4075 >> 2];
      var $1036 = HEAP32[$st_atime >> 2];
      HEAP32[$actime >> 2] = $1036;
      var $1037 = HEAP32[$st_mtime >> 2];
      HEAP32[$modtime >> 2] = $1037;
      var $call4076 = _stat($204, $stat_buf4073);
      var $1038 = HEAPU32[$st_size4075 >> 2];
      if ($cmp4078) {
        __label__ = 918;
        break;
      } else {
        __label__ = 919;
        break;
      }
     case 918:
      var $call4081 = _utime($204, $utim);
      __label__ = 919;
      break;
     case 919:
      if ((HEAP32[_verbose >> 2] | 0) > 0) {
        __label__ = 920;
        break;
      } else {
        var $total_input_length_0 = $total_input_length_1;
        __label__ = 936;
        break;
      }
     case 920:
      var $add4087 = $1038 + $1035 + $total_input_length_1 | 0;
      if (($best_9 | 0) == 0) {
        __label__ = 921;
        break;
      } else {
        __label__ = 922;
        break;
      }
     case 921:
      var $1040 = HEAP32[_stdout >> 2];
      var $call4091 = _fprintf($1040, STRING_TABLE.__str309 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $204, tempInt));
      __label__ = 924;
      break;
     case 922:
      if ((HEAP32[_already_crushed >> 2] | 0) != 0 | HEAPU8[_image_is_immutable_b]) {
        __label__ = 924;
        break;
      } else {
        __label__ = 923;
        break;
      }
     case 923:
      var $1042 = HEAP32[_stdout >> 2];
      var $1043 = HEAP32[$fm + ($best_9 << 2) >> 2];
      var $1044 = HEAP32[$lv + ($best_9 << 2) >> 2];
      var $1045 = HEAP32[$zs + ($best_9 << 2) >> 2];
      var $call4100 = _fprintf($1042, STRING_TABLE.__str310 | 0, (tempInt = STACKTOP, STACKTOP += 20, HEAP32[tempInt >> 2] = $best_9, HEAP32[tempInt + 4 >> 2] = $1043, HEAP32[tempInt + 8 >> 2] = $1044, HEAP32[tempInt + 12 >> 2] = $1045, HEAP32[tempInt + 16 >> 2] = $204, tempInt));
      __label__ = 924;
      break;
     case 924:
      var $1046 = HEAPU32[_idat_length >> 2];
      var $1047 = HEAPU32[_idat_length + ($best_9 << 2) >> 2];
      if (($1046 | 0) == ($1047 | 0)) {
        __label__ = 925;
        break;
      } else {
        __label__ = 926;
        break;
      }
     case 925:
      var $1048 = HEAP32[_stdout >> 2];
      var $1049 = _fwrite(STRING_TABLE.__str311 | 0, 22, 1, $1048);
      __label__ = 929;
      break;
     case 926:
      var $1050 = HEAP32[_stdout >> 2];
      var $sub4118 = 100 - ($1047 >>> 0) * 100 / ($1046 >>> 0);
      if ($1046 >>> 0 > $1047 >>> 0) {
        __label__ = 927;
        break;
      } else {
        __label__ = 928;
        break;
      }
     case 927:
      var $call4119 = _fprintf($1050, STRING_TABLE.__str312 | 0, (tempInt = STACKTOP, STACKTOP += 8, tempDoubleF64[0] = $sub4118, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempInt));
      __label__ = 929;
      break;
     case 928:
      var $sub4127 = -$sub4118;
      var $call4128 = _fprintf($1050, STRING_TABLE.__str313 | 0, (tempInt = STACKTOP, STACKTOP += 8, tempDoubleF64[0] = $sub4127, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempInt));
      __label__ = 929;
      break;
     case 929:
      if (($1035 | 0) == ($1038 | 0)) {
        __label__ = 930;
        break;
      } else {
        __label__ = 931;
        break;
      }
     case 930:
      var $1051 = HEAP32[_stdout >> 2];
      var $1052 = _fwrite(STRING_TABLE.__str314 | 0, 27, 1, $1051);
      __label__ = 934;
      break;
     case 931:
      var $1053 = HEAP32[_stdout >> 2];
      var $sub4143 = 100 - ($1038 >>> 0) * 100 / ($1035 >>> 0);
      if ($1035 >>> 0 > $1038 >>> 0) {
        __label__ = 932;
        break;
      } else {
        __label__ = 933;
        break;
      }
     case 932:
      var $call4144 = _fprintf($1053, STRING_TABLE.__str315 | 0, (tempInt = STACKTOP, STACKTOP += 8, tempDoubleF64[0] = $sub4143, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempInt));
      __label__ = 934;
      break;
     case 933:
      var $sub4151 = -$sub4143;
      var $call4152 = _fprintf($1053, STRING_TABLE.__str316 | 0, (tempInt = STACKTOP, STACKTOP += 8, tempDoubleF64[0] = $sub4151, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempInt));
      __label__ = 934;
      break;
     case 934:
      if ((HEAP32[_verbose >> 2] | 0) > 2) {
        __label__ = 935;
        break;
      } else {
        var $total_input_length_0 = $add4087;
        __label__ = 936;
        break;
      }
     case 935:
      var $1055 = HEAP32[_stdout >> 2];
      var $call4158 = _fprintf($1055, STRING_TABLE.__str317 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $1027, tempInt));
      var $total_input_length_0 = $add4087;
      __label__ = 936;
      break;
     case 936:
      var $total_input_length_0;
      if ($cmp1353) {
        __label__ = 938;
        break;
      } else {
        var $call1816186_ph_ph = $call1816184;
        var $_ph585_ph = $1024;
        var $call1627192_ph_ph = $call1627191;
        var $_ph584_ph = $1023;
        var $_ph583_ph = $204;
        var $conv1132217_ph_ph = $conv1132216;
        var $conv1128226_ph_ph = $conv1128225;
        var $conv1124235_ph_ph = $conv1124234;
        var $conv1120244_ph_ph = $conv1120243;
        var $_ph582_ph = $211;
        var $_ph581_ph = $198;
        var $_ph580_ph = $195;
        var $call272263_ph_ph = $call272262;
        var $call248267_ph_ph = $call248268;
        var $_ph579_ph = $inc1397;
        var $_ph578_ph = $1027;
        var $best_10 = $best_9;
        var $ia_14 = $ia_13;
        var $total_input_length_1 = $total_input_length_0;
        __label__ = 937;
        break;
      }
     case 937:
      var $total_input_length_1;
      var $ia_14;
      var $best_10;
      var $_ph578_ph;
      var $_ph579_ph;
      var $call248267_ph_ph;
      var $call272263_ph_ph;
      var $_ph580_ph;
      var $_ph581_ph;
      var $_ph582_ph;
      var $conv1120244_ph_ph;
      var $conv1124235_ph_ph;
      var $conv1128226_ph_ph;
      var $conv1132217_ph_ph;
      var $_ph583_ph;
      var $_ph584_ph;
      var $call1627192_ph_ph;
      var $_ph585_ph;
      var $call1816186_ph_ph;
      var $call1627192_ph = $call1627192_ph_ph;
      var $_ph584 = $_ph584_ph;
      var $_ph583 = $_ph583_ph;
      var $_ph582 = $_ph582_ph;
      var $_ph581 = $_ph581_ph;
      var $_ph580 = $_ph580_ph;
      var $_ph579 = $_ph579_ph;
      var $_ph578 = $_ph578_ph;
      __label__ = 320;
      break;
     case 938:
      if ((HEAP32[_verbose >> 2] | 0) > 0) {
        __label__ = 939;
        break;
      } else {
        __label__ = 940;
        break;
      }
     case 939:
      _show_result();
      __label__ = 940;
      break;
     case 940:
      if ($tobool2635) {
        __label__ = 942;
        break;
      } else {
        __label__ = 941;
        break;
      }
     case 941:
      _free($iccp_text_0);
      __label__ = 942;
      break;
     case 942:
      if (($14 | 0) == 0) {
        __label__ = 944;
        break;
      } else {
        __label__ = 943;
        break;
      }
     case 943:
      _exit(0);
      throw "Reached an unreachable!";
     case 944:
      STACKTOP = __stackBase__;
      return 0;
     case 945:
      var $lev_2618;
      var $storemerge164290617;
      var $1057 = HEAP32[_brute_force_levels + ($lev_2618 << 2) >> 2];
      var $or385 = $41 | $1057;
      var $or387 = $or385 | $47;
      HEAP32[$try_method + ($storemerge164290617 << 2) >> 2] = $or387;
      var $or385_1 = $42 | $1057;
      var $or387_1 = $or385_1 | $47;
      HEAP32[$try_method + ($storemerge164290617 + 1 << 2) >> 2] = $or387_1;
      var $or385_2 = $43 | $1057;
      var $or387_2 = $or385_2 | $47;
      HEAP32[$try_method + ($storemerge164290617 + 2 << 2) >> 2] = $or387_2;
      var $or385_3 = $44 | $1057;
      var $or387_3 = $or385_3 | $47;
      HEAP32[$try_method + ($storemerge164290617 + 3 << 2) >> 2] = $or387_3;
      var $or385_4 = $45 | $1057;
      var $or387_4 = $or385_4 | $47;
      HEAP32[$try_method + ($storemerge164290617 + 4 << 2) >> 2] = $or387_4;
      var $or385_5 = $46 | $1057;
      var $or387_5 = $or385_5 | $47;
      HEAP32[$try_method + ($storemerge164290617 + 5 << 2) >> 2] = $or387_5;
      var $or387_11720 = $or385 | $48;
      HEAP32[$try_method + ($storemerge164290617 + 6 << 2) >> 2] = $or387_11720;
      var $or387_1_1 = $or385_1 | $48;
      HEAP32[$try_method + ($storemerge164290617 + 7 << 2) >> 2] = $or387_1_1;
      var $or387_2_1 = $or385_2 | $48;
      HEAP32[$try_method + ($storemerge164290617 + 8 << 2) >> 2] = $or387_2_1;
      var $or387_3_1 = $or385_3 | $48;
      HEAP32[$try_method + ($storemerge164290617 + 9 << 2) >> 2] = $or387_3_1;
      var $or387_4_1 = $or385_4 | $48;
      HEAP32[$try_method + ($storemerge164290617 + 10 << 2) >> 2] = $or387_4_1;
      var $or387_5_1 = $or385_5 | $48;
      HEAP32[$try_method + ($storemerge164290617 + 11 << 2) >> 2] = $or387_5_1;
      var $inc397 = $lev_2618 + 1 | 0;
      if (($inc397 | 0) == 10) {
        __label__ = 56;
        break;
      } else {
        __label__ = 946;
        break;
      }
     case 946:
      var $storemerge164290617 = $storemerge164290617 + 12 | 0;
      var $lev_2618 = $inc397;
      __label__ = 945;
      break;
     case 947:
      var $lev_4627;
      var $storemerge164294626;
      var $1060 = HEAP32[_brute_force_levels + ($lev_4627 << 2) >> 2];
      var $or463 = $52 | $1060;
      var $or465 = $or463 | $51;
      HEAP32[$try_method + ($storemerge164294626 << 2) >> 2] = $or465;
      var $or463_1 = $53 | $1060;
      var $or465_1 = $or463_1 | $51;
      HEAP32[$try_method + ($storemerge164294626 + 1 << 2) >> 2] = $or465_1;
      var $or463_2 = $54 | $1060;
      var $or465_2 = $or463_2 | $51;
      HEAP32[$try_method + ($storemerge164294626 + 2 << 2) >> 2] = $or465_2;
      var $or463_3 = $55 | $1060;
      var $or465_3 = $or463_3 | $51;
      HEAP32[$try_method + ($storemerge164294626 + 3 << 2) >> 2] = $or465_3;
      var $or463_4 = $56 | $1060;
      var $or465_4 = $or463_4 | $51;
      HEAP32[$try_method + ($storemerge164294626 + 4 << 2) >> 2] = $or465_4;
      var $or463_5 = $57 | $1060;
      var $or465_5 = $or463_5 | $51;
      HEAP32[$try_method + ($storemerge164294626 + 5 << 2) >> 2] = $or465_5;
      var $or465_11731 = $or463 | $58;
      HEAP32[$try_method + ($storemerge164294626 + 6 << 2) >> 2] = $or465_11731;
      var $or465_1_1 = $or463_1 | $58;
      HEAP32[$try_method + ($storemerge164294626 + 7 << 2) >> 2] = $or465_1_1;
      var $or465_2_1 = $or463_2 | $58;
      HEAP32[$try_method + ($storemerge164294626 + 8 << 2) >> 2] = $or465_2_1;
      var $or465_3_1 = $or463_3 | $58;
      HEAP32[$try_method + ($storemerge164294626 + 9 << 2) >> 2] = $or465_3_1;
      var $or465_4_1 = $or463_4 | $58;
      HEAP32[$try_method + ($storemerge164294626 + 10 << 2) >> 2] = $or465_4_1;
      var $or465_5_1 = $or463_5 | $58;
      HEAP32[$try_method + ($storemerge164294626 + 11 << 2) >> 2] = $or465_5_1;
      var $inc475 = $lev_4627 + 1 | 0;
      if (($inc475 | 0) == 10) {
        __label__ = 64;
        break;
      } else {
        var $storemerge164294626 = $storemerge164294626 + 12 | 0;
        var $lev_4627 = $inc475;
        __label__ = 947;
        break;
      }
     case 948:
      HEAP32[$scevgep1757 >> 2] = 1;
      HEAP32[$arrayidx366_1 >> 2] = 1;
      HEAP32[$arrayidx366_2 >> 2] = 1;
      HEAP32[$arrayidx366_3 >> 2] = 1;
      HEAP32[$arrayidx366_4 >> 2] = 1;
      HEAP32[$arrayidx123 >> 2] = 1;
      __label__ = 949;
      break;
     case 949:
      var $1063 = HEAP32[_brute_force_strategies >> 2];
      var $1064 = HEAP32[_brute_force_filters >> 2];
      var $1065 = HEAP32[_brute_force_filters + 4 >> 2];
      var $1066 = HEAP32[_brute_force_filters + 8 >> 2];
      var $1067 = HEAP32[_brute_force_filters + 12 >> 2];
      var $1068 = HEAP32[_brute_force_filters + 16 >> 2];
      var $1069 = HEAP32[_brute_force_filters + 20 >> 2];
      var $1070 = HEAP32[_brute_force_strategies + 4 >> 2];
      var $storemerge164298640 = 17;
      var $lev_5641 = 1;
      __label__ = 950;
      break;
     case 950:
      var $lev_5641;
      var $storemerge164298640;
      var $1071 = HEAP32[_brute_force_levels + ($lev_5641 << 2) >> 2];
      var $or1232 = $1064 | $1071;
      var $or1234 = $or1232 | $1063;
      HEAP32[$try_method + ($storemerge164298640 << 2) >> 2] = $or1234;
      var $or1232_1 = $1065 | $1071;
      var $or1234_1 = $or1232_1 | $1063;
      HEAP32[$try_method + ($storemerge164298640 + 1 << 2) >> 2] = $or1234_1;
      var $or1232_2 = $1066 | $1071;
      var $or1234_2 = $or1232_2 | $1063;
      HEAP32[$try_method + ($storemerge164298640 + 2 << 2) >> 2] = $or1234_2;
      var $or1232_3 = $1067 | $1071;
      var $or1234_3 = $or1232_3 | $1063;
      HEAP32[$try_method + ($storemerge164298640 + 3 << 2) >> 2] = $or1234_3;
      var $or1232_4 = $1068 | $1071;
      var $or1234_4 = $or1232_4 | $1063;
      HEAP32[$try_method + ($storemerge164298640 + 4 << 2) >> 2] = $or1234_4;
      var $or1232_5 = $1069 | $1071;
      var $or1234_5 = $or1232_5 | $1063;
      HEAP32[$try_method + ($storemerge164298640 + 5 << 2) >> 2] = $or1234_5;
      var $or1234_11742 = $or1232 | $1070;
      HEAP32[$try_method + ($storemerge164298640 + 6 << 2) >> 2] = $or1234_11742;
      var $or1234_1_1 = $or1232_1 | $1070;
      HEAP32[$try_method + ($storemerge164298640 + 7 << 2) >> 2] = $or1234_1_1;
      var $or1234_2_1 = $or1232_2 | $1070;
      HEAP32[$try_method + ($storemerge164298640 + 8 << 2) >> 2] = $or1234_2_1;
      var $or1234_3_1 = $or1232_3 | $1070;
      HEAP32[$try_method + ($storemerge164298640 + 9 << 2) >> 2] = $or1234_3_1;
      var $or1234_4_1 = $or1232_4 | $1070;
      HEAP32[$try_method + ($storemerge164298640 + 10 << 2) >> 2] = $or1234_4_1;
      var $or1234_5_1 = $or1232_5 | $1070;
      HEAP32[$try_method + ($storemerge164298640 + 11 << 2) >> 2] = $or1234_5_1;
      var $inc1244 = $lev_5641 + 1 | 0;
      if (($inc1244 | 0) == 10) {
        var $storemerge164285 = 125;
        __label__ = 231;
        break;
      } else {
        __label__ = 951;
        break;
      }
     case 951:
      var $storemerge164298640 = $storemerge164298640 + 12 | 0;
      var $lev_5641 = $inc1244;
      __label__ = 950;
      break;
     case 952:
      var $lev_01521;
      var $storemerge1642801520;
      HEAP32[$fm + ($storemerge1642801520 << 2) >> 2] = 0;
      HEAP32[$lv + ($storemerge1642801520 << 2) >> 2] = $lev_01521;
      HEAP32[$zs + ($storemerge1642801520 << 2) >> 2] = 0;
      var $inc77 = $storemerge1642801520 + 1 | 0;
      HEAP32[$fm + ($inc77 << 2) >> 2] = 1;
      HEAP32[$lv + ($inc77 << 2) >> 2] = $lev_01521;
      HEAP32[$zs + ($inc77 << 2) >> 2] = 0;
      var $inc77_1 = $storemerge1642801520 + 2 | 0;
      HEAP32[$fm + ($inc77_1 << 2) >> 2] = 2;
      HEAP32[$lv + ($inc77_1 << 2) >> 2] = $lev_01521;
      HEAP32[$zs + ($inc77_1 << 2) >> 2] = 0;
      var $inc77_2 = $storemerge1642801520 + 3 | 0;
      HEAP32[$fm + ($inc77_2 << 2) >> 2] = 3;
      HEAP32[$lv + ($inc77_2 << 2) >> 2] = $lev_01521;
      HEAP32[$zs + ($inc77_2 << 2) >> 2] = 0;
      var $inc77_3 = $storemerge1642801520 + 4 | 0;
      HEAP32[$fm + ($inc77_3 << 2) >> 2] = 4;
      HEAP32[$lv + ($inc77_3 << 2) >> 2] = $lev_01521;
      HEAP32[$zs + ($inc77_3 << 2) >> 2] = 0;
      var $inc77_4 = $storemerge1642801520 + 5 | 0;
      HEAP32[$fm + ($inc77_4 << 2) >> 2] = 5;
      HEAP32[$lv + ($inc77_4 << 2) >> 2] = $lev_01521;
      HEAP32[$zs + ($inc77_4 << 2) >> 2] = 0;
      var $1074 = $storemerge1642801520 + 6 | 0;
      HEAP32[$fm + ($1074 << 2) >> 2] = 0;
      HEAP32[$lv + ($1074 << 2) >> 2] = $lev_01521;
      HEAP32[$zs + ($1074 << 2) >> 2] = 1;
      var $inc77_12612 = $storemerge1642801520 + 7 | 0;
      HEAP32[$fm + ($inc77_12612 << 2) >> 2] = 1;
      HEAP32[$lv + ($inc77_12612 << 2) >> 2] = $lev_01521;
      HEAP32[$zs + ($inc77_12612 << 2) >> 2] = 1;
      var $inc77_1_1 = $storemerge1642801520 + 8 | 0;
      HEAP32[$fm + ($inc77_1_1 << 2) >> 2] = 2;
      HEAP32[$lv + ($inc77_1_1 << 2) >> 2] = $lev_01521;
      HEAP32[$zs + ($inc77_1_1 << 2) >> 2] = 1;
      var $inc77_2_1 = $storemerge1642801520 + 9 | 0;
      HEAP32[$fm + ($inc77_2_1 << 2) >> 2] = 3;
      HEAP32[$lv + ($inc77_2_1 << 2) >> 2] = $lev_01521;
      HEAP32[$zs + ($inc77_2_1 << 2) >> 2] = 1;
      var $inc77_3_1 = $storemerge1642801520 + 10 | 0;
      HEAP32[$fm + ($inc77_3_1 << 2) >> 2] = 4;
      HEAP32[$lv + ($inc77_3_1 << 2) >> 2] = $lev_01521;
      HEAP32[$zs + ($inc77_3_1 << 2) >> 2] = 1;
      var $inc77_4_1 = $storemerge1642801520 + 11 | 0;
      HEAP32[$fm + ($inc77_4_1 << 2) >> 2] = 5;
      HEAP32[$lv + ($inc77_4_1 << 2) >> 2] = $lev_01521;
      HEAP32[$zs + ($inc77_4_1 << 2) >> 2] = 1;
      var $inc85 = $lev_01521 + 1 | 0;
      if (($inc85 | 0) == 10) {
        __label__ = 9;
        break;
      } else {
        var $storemerge1642801520 = $storemerge1642801520 + 12 | 0;
        var $lev_01521 = $inc85;
        __label__ = 952;
        break;
      }
     default:
      assert(0, "bad label: " + __label__);
    }
  } catch (e) {
    if (!e.longjmp) throw e;
    setjmpTable[e.label](e.value);
  }
}

Module["_main"] = _main;

_main["X"] = 1;

function _print_version_info() {
  var __stackBase__ = STACKTOP;
  var $0 = HEAP32[_stdout >> 2];
  var $1 = HEAP32[_progname >> 2];
  var $call1 = _fprintf($0, STRING_TABLE.__str355 | 0, (tempInt = STACKTOP, STACKTOP += 20, HEAP32[tempInt >> 2] = STRING_TABLE.__str156 | 0, HEAP32[tempInt + 4 >> 2] = $1, HEAP32[tempInt + 8 >> 2] = STRING_TABLE.__str72 | 0, HEAP32[tempInt + 12 >> 2] = STRING_TABLE.__str9288 | 0, HEAP32[tempInt + 16 >> 2] = STRING_TABLE.__str501183 | 0, tempInt));
  var $2 = HEAP32[_stdout >> 2];
  var $call2 = _fprintf($2, STRING_TABLE.__str356 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = STRING_TABLE.__str357 | 0, tempInt));
  var $3 = HEAP32[_stdout >> 2];
  var $4 = _fwrite(STRING_TABLE.__str358 | 0, 2, 1, $3);
  var $5 = HEAP32[_stdout >> 2];
  var $fputc = _fputc(10, $5);
  STACKTOP = __stackBase__;
  return;
}

function _measure_idats($fp_in) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 40;
  var __label__;
  __label__ = 1;
  var setjmpTable = {
    "5": (function(value) {
      __label__ = 17;
      $call5 = value;
    }),
    dummy: 0
  };
  while (1) try {
    switch (__label__) {
     case 1:
      var $exception__env = __stackBase__;
      var $0 = HEAP32[_verbose >> 2];
      if (($0 | 0) > 2) {
        __label__ = 2;
        break;
      } else {
        var $1 = $0;
        __label__ = 3;
        break;
      }
     case 2:
      var $puts = _puts(STRING_TABLE._str4 | 0);
      var $1 = HEAP32[_verbose >> 2];
      __label__ = 3;
      break;
     case 3:
      var $1;
      if (($1 | 0) > 1) {
        __label__ = 4;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 4:
      var $puts1 = _puts(STRING_TABLE._str5 | 0);
      __label__ = 5;
      break;
     case 5:
      var $2 = HEAP32[_the_exception_context >> 2];
      HEAP32[_the_exception_context >> 2] = $exception__env;
      var $call5 = (HEAP32[$exception__env >> 2] = __label__, 0);
      __label__ = 17;
      break;
     case 17:
      if (($call5 | 0) == 0) {
        __label__ = 6;
        break;
      } else {
        __label__ = 13;
        break;
      }
     case 6:
      var $call8 = _png_create_read_struct();
      HEAP32[_read_ptr >> 2] = $call8;
      if ((HEAP32[_verbose >> 2] | 0) > 1) {
        __label__ = 7;
        break;
      } else {
        var $4 = $call8;
        __label__ = 8;
        break;
      }
     case 7:
      var $puts2 = _puts(STRING_TABLE._str6 | 0);
      var $4 = HEAP32[_read_ptr >> 2];
      __label__ = 8;
      break;
     case 8:
      var $4;
      var $call13 = _png_create_info_struct($4);
      HEAP32[_read_info_ptr >> 2] = $call13;
      var $5 = HEAP32[_read_ptr >> 2];
      var $call14 = _png_create_info_struct($5);
      HEAP32[_end_info_ptr >> 2] = $call14;
      var $6 = HEAP32[_read_ptr >> 2];
      _png_init_io($6, $fp_in);
      _png_set_sig_bytes($6, 0);
      var $7 = HEAP32[_read_ptr >> 2];
      var $call15 = _png_measure_idat($7);
      HEAP32[_measured_idat_length >> 2] = $call15;
      var $8 = HEAP32[_verbose >> 2];
      if (($8 | 0) > 2) {
        __label__ = 9;
        break;
      } else {
        var $9 = $8;
        __label__ = 10;
        break;
      }
     case 9:
      var $call18 = _printf(STRING_TABLE.__str321 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $call15, tempInt));
      var $9 = HEAP32[_verbose >> 2];
      __label__ = 10;
      break;
     case 10:
      var $9;
      if (($9 | 0) > 1) {
        __label__ = 11;
        break;
      } else {
        __label__ = 12;
        break;
      }
     case 11:
      var $puts3 = _puts(STRING_TABLE._str7 | 0);
      __label__ = 12;
      break;
     case 12:
      _png_destroy_read_struct();
      HEAP32[_the_exception_context + 4 >> 2] = 0;
      HEAP32[_the_exception_context >> 2] = $2;
      var $16 = HEAP32[_measured_idat_length >> 2];
      __label__ = 16;
      break;
     case 13:
      HEAP32[_the_exception_context + 4 >> 2] = 1;
      HEAP32[_the_exception_context >> 2] = $2;
      var $10 = HEAP32[_the_exception_context + 8 >> 2];
      HEAP32[_msg >> 2] = $10;
      var $11 = HEAP32[_stdout >> 2];
      var $12 = HEAP32[_inname >> 2];
      var $call28 = _fprintf($11, STRING_TABLE.__str322 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $12, tempInt));
      var $13 = HEAP32[_stdout >> 2];
      var $14 = HEAP32[_msg >> 2];
      var $call29 = _fprintf($13, STRING_TABLE.__str323 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $14, tempInt));
      _png_destroy_read_struct();
      if ((HEAP32[_verbose >> 2] | 0) > 1) {
        __label__ = 14;
        break;
      } else {
        __label__ = 15;
        break;
      }
     case 14:
      var $puts4 = _puts(STRING_TABLE._str8 | 0);
      __label__ = 15;
      break;
     case 15:
      HEAP32[_measured_idat_length >> 2] = 0;
      var $16 = 0;
      __label__ = 16;
      break;
     case 16:
      var $16;
      STACKTOP = __stackBase__;
      return $16;
     default:
      assert(0, "bad label: " + __label__);
    }
  } catch (e) {
    if (!e.longjmp) throw e;
    setjmpTable[e.label](e.value);
  }
}

_measure_idats["X"] = 1;

function _print_usage($retval) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if ((HEAP32[_verbose >> 2] | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      var $j_03 = 0;
      __label__ = 2;
      break;
    }
   case 2:
    var $j_03;
    var $1 = HEAP32[_stdout >> 2];
    var $2 = HEAP32[_pngcrush_legal + ($j_03 << 2) >> 2];
    var $call = _fprintf($1, STRING_TABLE.__str264 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $2, tempInt));
    var $inc = $j_03 + 1 | 0;
    if (($inc | 0) == 32) {
      __label__ = 3;
      break;
    } else {
      var $j_03 = $inc;
      __label__ = 2;
      break;
    }
   case 3:
    var $3 = HEAP32[_stdout >> 2];
    var $4 = HEAP32[_progname >> 2];
    var $call5 = _fprintf($3, STRING_TABLE.__str542 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $4, tempInt));
    var $5 = HEAP32[_stdout >> 2];
    var $6 = HEAP32[_progname >> 2];
    var $call5_1 = _fprintf($5, STRING_TABLE.__str543 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $6, tempInt));
    var $7 = HEAP32[_stdout >> 2];
    var $8 = HEAP32[_progname >> 2];
    var $call5_2 = _fprintf($7, STRING_TABLE.__str544 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $8, tempInt));
    if ((HEAP32[_verbose >> 2] | 0) > 1) {
      __label__ = 4;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 4:
    _pngcrush_pause();
    var $9 = HEAP32[_stdout >> 2];
    var $10 = _fwrite(STRING_TABLE.__str539 | 0, 192, 1, $9);
    __label__ = 6;
    break;
   case 5:
    var $11 = HEAP32[_stdout >> 2];
    var $12 = _fwrite(STRING_TABLE.__str540 | 0, 9, 1, $11);
    __label__ = 6;
    break;
   case 6:
    var $j_24 = 0;
    var $14 = HEAP32[_verbose >> 2];
    __label__ = 7;
    break;
   case 7:
    var $14;
    var $j_24;
    if (($14 | 0) < (HEAP32[_pngcrush_options + ($j_24 << 3) >> 2] | 0)) {
      __label__ = 11;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    var $16 = HEAP32[_pngcrush_options + ($j_24 << 3) + 4 >> 2];
    if (HEAP8[$16] << 24 >> 24 == 80) {
      __label__ = 9;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 9:
    _pngcrush_pause();
    __label__ = 11;
    break;
   case 10:
    var $18 = HEAP32[_stdout >> 2];
    var $call29 = _fprintf($18, STRING_TABLE.__str264 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $16, tempInt));
    __label__ = 11;
    break;
   case 11:
    var $inc33 = $j_24 + 1 | 0;
    var $19 = HEAP32[_verbose >> 2];
    if (($inc33 | 0) == 273) {
      __label__ = 12;
      break;
    } else {
      var $j_24 = $inc33;
      var $14 = $19;
      __label__ = 7;
      break;
    }
   case 12:
    if (($19 | 0) > 1) {
      __label__ = 13;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 13:
    var $20 = HEAP32[_stdout >> 2];
    var $21 = HEAP32[_progname >> 2];
    var $call38 = _fprintf($20, STRING_TABLE.__str541 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $21, tempInt));
    __label__ = 14;
    break;
   case 14:
    _exit($retval);
    throw "Reached an unreachable!";
   default:
    assert(0, "bad label: " + __label__);
  }
}

_print_usage["X"] = 1;

function _png_cexcept_error($png_ptr, $err_msg) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $call = _strcmp($err_msg, STRING_TABLE.__str570 | 0);
    if (($call | 0) == 0) {
      __label__ = 2;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 2:
    var $0 = HEAP32[_stderr >> 2];
    var $1 = HEAP32[_inname >> 2];
    var $call3 = _fprintf($0, STRING_TABLE.__str571 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $1, tempInt));
    return;
   case 3:
    HEAP32[_the_exception_context + 8 >> 2] = $err_msg;
    var $arraydecay = HEAP32[_the_exception_context >> 2] | 0;
    _longjmp($arraydecay, 1);
    throw "Reached an unreachable!";
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_measure_idat($png_ptr) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 56;
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $png_signature = __stackBase__;
    var $mng_signature = __stackBase__ + 8;
    var $buff = __stackBase__ + 16;
    var $buff21 = $buff | 0;
    var $chunk_name = STACKTOP;
    STACKTOP += 5;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $chunk_length = STACKTOP;
    STACKTOP += 4;
    var $buff160 = STACKTOP;
    STACKTOP += 32;
    HEAP32[$png_signature >> 2] = 1196314761;
    HEAP32[$png_signature + 4 >> 2] = 169478669;
    HEAP32[$mng_signature >> 2] = 1196313994;
    HEAP32[$mng_signature + 4 >> 2] = 169478669;
    var $arraydecay = $png_signature;
    _pngcrush_default_read_data($png_ptr, $arraydecay, 8);
    _png_set_sig_bytes($png_ptr, 8);
    var $arraydecay1 = $mng_signature;
    var $call = _memcmp($arraydecay1, $arraydecay, 8);
    if (($call | 0) == 0) {
      __label__ = 2;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 2:
    var $0 = HEAP32[_read_ptr >> 2];
    _pngcrush_default_read_data($0, $buff21, 4);
    var $arrayidx = $buff + 3 | 0;
    var $arrayidx4 = $buff + 2 | 0;
    var $arrayidx6 = $buff + 1 | 0;
    var $add13 = (HEAPU8[$arrayidx4] & 255) << 8 | HEAPU8[$arrayidx] & 255 | (HEAPU8[$arrayidx6] & 255) << 16 | (HEAPU8[$buff21] & 255) << 24;
    var $5 = HEAP32[_read_ptr >> 2];
    _pngcrush_default_read_data($5, $buff21, 4);
    if ((HEAP32[_verbose >> 2] | 0) > 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $conv18 = HEAPU8[$buff21] & 255;
    var $conv20 = HEAPU8[$arrayidx6] & 255;
    var $conv22 = HEAPU8[$arrayidx4] & 255;
    var $conv24 = HEAPU8[$arrayidx] & 255;
    var $call25 = _printf(STRING_TABLE.__str325 | 0, (tempInt = STACKTOP, STACKTOP += 16, HEAP32[tempInt >> 2] = $conv18, HEAP32[tempInt + 4 >> 2] = $conv20, HEAP32[tempInt + 8 >> 2] = $conv22, HEAP32[tempInt + 12 >> 2] = $conv24, tempInt));
    __label__ = 4;
    break;
   case 4:
    _memset($buff21, 0, 40, 1);
    var $11 = HEAP32[_read_ptr >> 2];
    _pngcrush_default_read_data($11, $buff21, $add13);
    if ((HEAP32[_verbose >> 2] | 0) == 0) {
      __label__ = 6;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $add45 = (HEAPU8[$arrayidx4] & 255) << 8 | HEAPU8[$arrayidx] & 255 | (HEAPU8[$arrayidx6] & 255) << 16 | (HEAPU8[$buff21] & 255) << 24;
    var $call46 = _printf(STRING_TABLE.__str326 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $add45, tempInt));
    var $add60 = (HEAPU8[$buff + 6 | 0] & 255) << 8 | HEAPU8[$buff + 7 | 0] & 255 | (HEAPU8[$buff + 5 | 0] & 255) << 16 | (HEAPU8[$buff + 4 | 0] & 255) << 24;
    var $call61 = _printf(STRING_TABLE.__str327 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $add60, tempInt));
    var $add75 = (HEAPU8[$buff + 10 | 0] & 255) << 8 | HEAPU8[$buff + 11 | 0] & 255 | (HEAPU8[$buff + 9 | 0] & 255) << 16 | (HEAPU8[$buff + 8 | 0] & 255) << 24;
    var $call76 = _printf(STRING_TABLE.__str328 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $add75, tempInt));
    var $add90 = (HEAPU8[$buff + 14 | 0] & 255) << 8 | HEAPU8[$buff + 15 | 0] & 255 | (HEAPU8[$buff + 13 | 0] & 255) << 16 | (HEAPU8[$buff + 12 | 0] & 255) << 24;
    var $call91 = _printf(STRING_TABLE.__str329 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $add90, tempInt));
    var $add105 = (HEAPU8[$buff + 18 | 0] & 255) << 8 | HEAPU8[$buff + 19 | 0] & 255 | (HEAPU8[$buff + 17 | 0] & 255) << 16 | (HEAPU8[$buff + 16 | 0] & 255) << 24;
    var $call106 = _printf(STRING_TABLE.__str330 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $add105, tempInt));
    var $add120 = (HEAPU8[$buff + 22 | 0] & 255) << 8 | HEAPU8[$buff + 23 | 0] & 255 | (HEAPU8[$buff + 21 | 0] & 255) << 16 | (HEAPU8[$buff + 20 | 0] & 255) << 24;
    var $call121 = _printf(STRING_TABLE.__str331 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $add120, tempInt));
    var $add135 = (HEAPU8[$buff + 26 | 0] & 255) << 8 | HEAPU8[$buff + 27 | 0] & 255 | (HEAPU8[$buff + 25 | 0] & 255) << 16 | (HEAPU8[$buff + 24 | 0] & 255) << 24;
    var $call136 = _printf(STRING_TABLE.__str332 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $add135, tempInt));
    __label__ = 6;
    break;
   case 6:
    if ((HEAP32[_new_mng >> 2] | 0) == 0) {
      __label__ = 8;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    var $42 = HEAP32[_mng_ptr >> 2];
    _png_defaultwrite_data($42, $arraydecay1);
    var $44 = HEAP32[_mng_ptr >> 2];
    _png_write_chunk($44, STRING_TABLE._png_measure_idat_png_MHDR | 0, $buff21, 28);
    __label__ = 8;
    break;
   case 8:
    var $45 = HEAP32[_read_ptr >> 2];
    _pngcrush_default_read_data($45, $buff21, 4);
    HEAP8[_input_format_b] = 1;
    __label__ = 13;
    break;
   case 9:
    var $call145 = _png_sig_cmp($arraydecay, 0, 8);
    if (($call145 | 0) == 0) {
      __label__ = 13;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 10:
    var $call149 = _png_sig_cmp($arraydecay, 0, 4);
    var $46 = $png_ptr;
    if (($call149 | 0) == 0) {
      __label__ = 12;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    _png_error($46, STRING_TABLE.__str333 | 0);
    __label__ = 13;
    break;
   case 12:
    _png_error($46, STRING_TABLE.__str2751 | 0);
    __label__ = 13;
    break;
   case 13:
    if ((HEAP32[_fix >> 2] | 0) == 0) {
      __label__ = 15;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 14:
    _png_set_crc_action($png_ptr, 3, 3);
    __label__ = 15;
    break;
   case 15:
    var $arraydecay162 = $chunk_length | 0;
    var $arraydecay165 = $chunk_name | 0;
    var $add_ptr = $chunk_name + 1 | 0;
    var $add_ptr416 = $chunk_name + 2 | 0;
    var $add_ptr421 = $chunk_name + 3 | 0;
    var $arrayidx458 = $chunk_name + 4 | 0;
    var $arraydecay512 = $buff160 | 0;
    var $arrayidx513 = $buff160 + 9 | 0;
    var $arrayidx614 = $buff160 + 23 | 0;
    var $sum_idat_length_0 = 0;
    var $bb_0 = 0;
    var $malloced_length_0 = 0;
    __label__ = 16;
    break;
   case 16:
    var $malloced_length_0;
    var $bb_0;
    var $sum_idat_length_0;
    _pngcrush_default_read_data($png_ptr, $arraydecay162, 4);
    var $call164 = _png_get_uint_31($png_ptr, $arraydecay162);
    _png_reset_crc($png_ptr);
    _png_crc_read($png_ptr, $arraydecay165, 4);
    if ((HEAP32[_new_mng >> 2] | 0) == 0) {
      __label__ = 39;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 17:
    var $call169 = _memcmp($arraydecay165, STRING_TABLE._png_measure_idat_png_nEED | 0, 4);
    var $cmp186 = (HEAP32[_verbose >> 2] | 0) > 0;
    if (($call169 | 0) == 0) {
      __label__ = 18;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 18:
    if ($cmp186) {
      __label__ = 19;
      break;
    } else {
      var $sum_idat_length_2 = $sum_idat_length_0;
      var $bb_2 = $bb_0;
      var $malloced_length_2 = $malloced_length_0;
      var $length161_0 = $call164;
      __label__ = 55;
      break;
    }
   case 19:
    var $conv176 = HEAPU8[$arraydecay165] & 255;
    var $conv178 = HEAPU8[$add_ptr] & 255;
    var $conv180 = HEAPU8[$add_ptr416] & 255;
    var $conv182 = HEAPU8[$add_ptr421] & 255;
    var $call183 = _printf(STRING_TABLE.__str334 | 0, (tempInt = STACKTOP, STACKTOP += 20, HEAP32[tempInt >> 2] = $conv176, HEAP32[tempInt + 4 >> 2] = $conv178, HEAP32[tempInt + 8 >> 2] = $conv180, HEAP32[tempInt + 12 >> 2] = $conv182, HEAP32[tempInt + 16 >> 2] = $call164, tempInt));
    var $sum_idat_length_2 = $sum_idat_length_0;
    var $bb_2 = $bb_0;
    var $malloced_length_2 = $malloced_length_0;
    var $length161_0 = $call164;
    __label__ = 55;
    break;
   case 20:
    if ($cmp186) {
      __label__ = 21;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 21:
    var $conv190 = HEAPU8[$arraydecay165] & 255;
    var $conv192 = HEAPU8[$add_ptr] & 255;
    var $conv194 = HEAPU8[$add_ptr416] & 255;
    var $conv196 = HEAPU8[$add_ptr421] & 255;
    var $call197 = _printf(STRING_TABLE.__str335 | 0, (tempInt = STACKTOP, STACKTOP += 20, HEAP32[tempInt >> 2] = $conv190, HEAP32[tempInt + 4 >> 2] = $conv192, HEAP32[tempInt + 8 >> 2] = $conv194, HEAP32[tempInt + 12 >> 2] = $conv196, HEAP32[tempInt + 16 >> 2] = $call164, tempInt));
    __label__ = 22;
    break;
   case 22:
    if ($call164 >>> 0 > $malloced_length_0 >>> 0) {
      __label__ = 23;
      break;
    } else {
      var $bb_1 = $bb_0;
      var $malloced_length_1 = $malloced_length_0;
      __label__ = 26;
      break;
    }
   case 23:
    var $59 = HEAP32[_mng_ptr >> 2];
    _png_free($59, $bb_0);
    if ((HEAP32[_verbose >> 2] | 0) > 0) {
      __label__ = 24;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 24:
    var $call205 = _printf(STRING_TABLE.__str336 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $call164, tempInt));
    __label__ = 25;
    break;
   case 25:
    var $62 = HEAP32[_mng_ptr >> 2];
    var $call207 = _png_malloc($62, $call164);
    var $bb_1 = $call207;
    var $malloced_length_1 = $call164;
    __label__ = 26;
    break;
   case 26:
    var $malloced_length_1;
    var $bb_1;
    _png_crc_read($png_ptr, $bb_1, $call164);
    var $64 = HEAP32[_mng_ptr >> 2];
    _png_write_chunk($64, $arraydecay165, $bb_1, $call164);
    if ((HEAP32[_verbose >> 2] | 0) > 1) {
      __label__ = 27;
      break;
    } else {
      var $sum_idat_length_2 = $sum_idat_length_0;
      var $bb_2 = $bb_1;
      var $malloced_length_2 = $malloced_length_1;
      var $length161_0 = $call164;
      __label__ = 55;
      break;
    }
   case 27:
    var $call213 = _memcmp($arraydecay165, STRING_TABLE._png_measure_idat_png_DHDR | 0, 4);
    if (($call213 | 0) == 0) {
      __label__ = 28;
      break;
    } else {
      __label__ = 29;
      break;
    }
   case 28:
    var $add221 = (HEAPU8[$bb_1] & 255) << 8 | HEAPU8[$bb_1 + 1 | 0] & 255;
    var $call222 = _printf(STRING_TABLE.__str337 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $add221, tempInt));
    var $conv224 = HEAPU8[$bb_1 + 2 | 0] & 255;
    var $call225 = _printf(STRING_TABLE.__str338 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $conv224, tempInt));
    var $conv227 = HEAPU8[$bb_1 + 3 | 0] & 255;
    var $call228 = _printf(STRING_TABLE.__str339 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $conv227, tempInt));
    var $add242 = (HEAPU8[$bb_1 + 6 | 0] & 255) << 8 | HEAPU8[$bb_1 + 7 | 0] & 255 | (HEAPU8[$bb_1 + 5 | 0] & 255) << 16 | (HEAPU8[$bb_1 + 4 | 0] & 255) << 24;
    var $call243 = _printf(STRING_TABLE.__str326 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $add242, tempInt));
    var $add257 = (HEAPU8[$bb_1 + 10 | 0] & 255) << 8 | HEAPU8[$bb_1 + 11 | 0] & 255 | (HEAPU8[$bb_1 + 9 | 0] & 255) << 16 | (HEAPU8[$bb_1 + 8 | 0] & 255) << 24;
    var $call258 = _printf(STRING_TABLE.__str327 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $add257, tempInt));
    var $add272 = (HEAPU8[$bb_1 + 14 | 0] & 255) << 8 | HEAPU8[$bb_1 + 15 | 0] & 255 | (HEAPU8[$bb_1 + 13 | 0] & 255) << 16 | (HEAPU8[$bb_1 + 12 | 0] & 255) << 24;
    var $call273 = _printf(STRING_TABLE.__str340 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $add272, tempInt));
    var $add287 = (HEAPU8[$bb_1 + 18 | 0] & 255) << 8 | HEAPU8[$bb_1 + 19 | 0] & 255 | (HEAPU8[$bb_1 + 17 | 0] & 255) << 16 | (HEAPU8[$bb_1 + 16 | 0] & 255) << 24;
    var $call288 = _printf(STRING_TABLE.__str341 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $add287, tempInt));
    if ((HEAP32[_verbose >> 2] | 0) > 1) {
      __label__ = 29;
      break;
    } else {
      var $sum_idat_length_2 = $sum_idat_length_0;
      var $bb_2 = $bb_1;
      var $malloced_length_2 = $malloced_length_1;
      var $length161_0 = $call164;
      __label__ = 55;
      break;
    }
   case 29:
    var $call294 = _memcmp($arraydecay165, STRING_TABLE._png_measure_idat_png_DEFI | 0, 4);
    if (($call294 | 0) == 0) {
      __label__ = 30;
      break;
    } else {
      __label__ = 33;
      break;
    }
   case 30:
    var $add302 = (HEAPU8[$bb_1] & 255) << 8 | HEAPU8[$bb_1 + 1 | 0] & 255;
    var $call303 = _printf(STRING_TABLE.__str337 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $add302, tempInt));
    var $conv305 = HEAPU8[$bb_1 + 2 | 0] & 255;
    var $call306 = _printf(STRING_TABLE.__str342 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $conv305, tempInt));
    var $conv308 = HEAPU8[$bb_1 + 3 | 0] & 255;
    var $call309 = _printf(STRING_TABLE.__str343 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $conv308, tempInt));
    if ($call164 >>> 0 > 4) {
      __label__ = 31;
      break;
    } else {
      __label__ = 33;
      break;
    }
   case 31:
    var $add326 = (HEAPU8[$bb_1 + 14 | 0] & 255) << 8 | HEAPU8[$bb_1 + 15 | 0] & 255 | (HEAPU8[$bb_1 + 13 | 0] & 255) << 16 | (HEAPU8[$bb_1 + 12 | 0] & 255) << 24;
    var $call327 = _printf(STRING_TABLE.__str340 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $add326, tempInt));
    var $arrayidx328 = $bb_1 + 19 | 0;
    var $arrayidx330 = $bb_1 + 18 | 0;
    var $arrayidx334 = $bb_1 + 17 | 0;
    var $add341 = (HEAPU8[$arrayidx330] & 255) << 8 | HEAPU8[$arrayidx328] & 255 | (HEAPU8[$arrayidx334] & 255) << 16 | (HEAPU8[$bb_1 + 16 | 0] & 255) << 24;
    var $call342 = _printf(STRING_TABLE.__str341 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $add341, tempInt));
    if ($call164 >>> 0 > 12) {
      __label__ = 32;
      break;
    } else {
      __label__ = 33;
      break;
    }
   case 32:
    var $add359 = (HEAPU8[$arrayidx328] & 255) << 8 | HEAPU8[$bb_1 + 20 | 0] & 255 | (HEAPU8[$arrayidx330] & 255) << 16 | (HEAPU8[$arrayidx334] & 255) << 24;
    var $call360 = _printf(STRING_TABLE.__str344 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $add359, tempInt));
    var $add374 = (HEAPU8[$bb_1 + 23 | 0] & 255) << 8 | HEAPU8[$bb_1 + 24 | 0] & 255 | (HEAPU8[$bb_1 + 22 | 0] & 255) << 16 | (HEAPU8[$bb_1 + 21 | 0] & 255) << 24;
    var $call375 = _printf(STRING_TABLE.__str345 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $add374, tempInt));
    __label__ = 33;
    break;
   case 33:
    if ((HEAP32[_verbose >> 2] | 0) > 1) {
      __label__ = 34;
      break;
    } else {
      var $sum_idat_length_2 = $sum_idat_length_0;
      var $bb_2 = $bb_1;
      var $malloced_length_2 = $malloced_length_1;
      var $length161_0 = $call164;
      __label__ = 55;
      break;
    }
   case 34:
    var $call383 = _memcmp($arraydecay165, STRING_TABLE._png_measure_idat_png_FRAM | 0, 4);
    if (($call383 | 0) == 0) {
      __label__ = 35;
      break;
    } else {
      var $sum_idat_length_2 = $sum_idat_length_0;
      var $bb_2 = $bb_1;
      var $malloced_length_2 = $malloced_length_1;
      var $length161_0 = $call164;
      __label__ = 55;
      break;
    }
   case 35:
    var $conv387 = HEAPU8[$bb_1] & 255;
    var $call388 = _printf(STRING_TABLE.__str346 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $conv387, tempInt));
    if ($call164 >>> 0 > 1) {
      __label__ = 36;
      break;
    } else {
      var $sum_idat_length_2 = $sum_idat_length_0;
      var $bb_2 = $bb_1;
      var $malloced_length_2 = $malloced_length_1;
      var $length161_0 = 0;
      __label__ = 55;
      break;
    }
   case 36:
    var $call392 = _printf(STRING_TABLE.__str347 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
    var $107 = HEAPU8[$bb_1];
    if ($107 << 24 >> 24 == 0) {
      __label__ = 38;
      break;
    } else {
      var $ib_015 = 0;
      var $108 = $107;
      __label__ = 37;
      break;
    }
   case 37:
    var $108;
    var $ib_015;
    var $putchar = _putchar($108 & 255);
    var $inc401 = $ib_015 + 1 | 0;
    var $109 = HEAPU8[$bb_1 + $inc401 | 0];
    if ($109 << 24 >> 24 == 0) {
      __label__ = 38;
      break;
    } else {
      var $ib_015 = $inc401;
      var $108 = $109;
      __label__ = 37;
      break;
    }
   case 38:
    var $putchar5 = _putchar(10);
    var $sum_idat_length_2 = $sum_idat_length_0;
    var $bb_2 = $bb_1;
    var $malloced_length_2 = $malloced_length_1;
    var $length161_0 = 0;
    __label__ = 55;
    break;
   case 39:
    var $110 = HEAPU8[$arraydecay165];
    var $111 = HEAPU8[$add_ptr];
    var $112 = HEAPU8[$add_ptr416];
    var $113 = HEAPU8[$add_ptr421];
    var $add423 = ($111 & 255) << 16 | ($110 & 255) << 24 | $113 & 255 | ($112 & 255) << 8;
    if (($add423 | 0) == 1633899596) {
      __label__ = 40;
      break;
    } else if (($add423 | 0) == 1229209940) {
      __label__ = 41;
      break;
    } else {
      var $sum_idat_length_1 = $sum_idat_length_0;
      __label__ = 43;
      break;
    }
   case 40:
    HEAP32[_found_acTL_chunk >> 2] = 1;
    var $sum_idat_length_2 = $sum_idat_length_0;
    var $bb_2 = $bb_0;
    var $malloced_length_2 = $malloced_length_0;
    var $length161_0 = $call164;
    __label__ = 55;
    break;
   case 41:
    var $add448 = $call164 + $sum_idat_length_0 | 0;
    if ($call164 >>> 0 > HEAPU32[_crushed_idat_size >> 2] >>> 0) {
      __label__ = 42;
      break;
    } else {
      var $sum_idat_length_1 = $add448;
      __label__ = 43;
      break;
    }
   case 42:
    var $inc452 = HEAP32[_already_crushed >> 2] + 1 | 0;
    HEAP32[_already_crushed >> 2] = $inc452;
    var $sum_idat_length_1 = $add448;
    __label__ = 43;
    break;
   case 43:
    var $sum_idat_length_1;
    if ((HEAP32[_verbose >> 2] | 0) > 1) {
      __label__ = 44;
      break;
    } else {
      var $120 = $110;
      var $119 = $111;
      var $118 = $112;
      var $117 = $113;
      __label__ = 45;
      break;
    }
   case 44:
    HEAP8[$arrayidx458] = 0;
    var $call460 = _printf(STRING_TABLE.__str349 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $arraydecay165, HEAP32[tempInt + 4 >> 2] = $call164, tempInt));
    var $120 = HEAP8[$arraydecay165];
    var $119 = HEAP8[$add_ptr];
    var $118 = HEAP8[$add_ptr416];
    var $117 = HEAP8[$add_ptr421];
    __label__ = 45;
    break;
   case 45:
    var $117;
    var $118;
    var $119;
    var $120;
    if ((($119 & 255) << 16 | ($120 & 255) << 24 | $117 & 255 | ($118 & 255) << 8 | 0) == 1130840649) {
      __label__ = 46;
      break;
    } else {
      var $127 = $120;
      var $126 = $119;
      var $125 = $118;
      var $124 = $117;
      __label__ = 50;
      break;
    }
   case 46:
    var $puts = _puts(STRING_TABLE._str | 0);
    if ((HEAP32[_fix >> 2] | 0) == 0) {
      __label__ = 48;
      break;
    } else {
      __label__ = 47;
      break;
    }
   case 47:
    var $puts6 = _puts(STRING_TABLE._str1 | 0);
    __label__ = 49;
    break;
   case 48:
    var $puts7 = _puts(STRING_TABLE._str2 | 0);
    __label__ = 49;
    break;
   case 49:
    var $inc489 = HEAP32[_found_CgBI >> 2] + 1 | 0;
    HEAP32[_found_CgBI >> 2] = $inc489;
    var $inc490 = HEAP32[_nosave >> 2] + 1 | 0;
    HEAP32[_nosave >> 2] = $inc490;
    var $127 = HEAP8[$arraydecay165];
    var $126 = HEAP8[$add_ptr];
    var $125 = HEAP8[$add_ptr416];
    var $124 = HEAP8[$add_ptr421];
    __label__ = 50;
    break;
   case 50:
    var $124;
    var $125;
    var $126;
    var $127;
    var $add508 = ($126 & 255) << 16 | ($127 & 255) << 24 | $124 & 255 | ($125 & 255) << 8;
    if (($add508 | 0) == 1229472850) {
      __label__ = 51;
      break;
    } else if (($add508 | 0) == 1683179847) {
      __label__ = 52;
      break;
    } else {
      __label__ = 54;
      break;
    }
   case 51:
    _png_crc_read($png_ptr, $arraydecay512, 13);
    var $sub = $call164 - 13 | 0;
    HEAP32[_input_color_type >> 2] = HEAPU8[$arrayidx513] & 255;
    var $sum_idat_length_2 = $sum_idat_length_1;
    var $bb_2 = $bb_0;
    var $malloced_length_2 = $malloced_length_0;
    var $length161_0 = $sub;
    __label__ = 55;
    break;
   case 52:
    if (HEAPU8[_found_any_chunk_b] | (HEAP32[_all_chunks_are_safe >> 2] | 0) != 0) {
      var $sum_idat_length_2 = $sum_idat_length_1;
      var $bb_2 = $bb_0;
      var $malloced_length_2 = $malloced_length_0;
      var $length161_0 = $call164;
      __label__ = 55;
      break;
    } else {
      __label__ = 53;
      break;
    }
   case 53:
    HEAP8[_image_is_immutable_b] = 1;
    var $sum_idat_length_2 = $sum_idat_length_1;
    var $bb_2 = $bb_0;
    var $malloced_length_2 = $malloced_length_0;
    var $length161_0 = $call164;
    __label__ = 55;
    break;
   case 54:
    HEAP8[_found_any_chunk_b] = 1;
    var $sum_idat_length_2 = $sum_idat_length_1;
    var $bb_2 = $bb_0;
    var $malloced_length_2 = $malloced_length_0;
    var $length161_0 = $call164;
    __label__ = 55;
    break;
   case 55:
    var $length161_0;
    var $malloced_length_2;
    var $bb_2;
    var $sum_idat_length_2;
    var $add563 = (HEAPU8[$add_ptr] & 255) << 16 | (HEAPU8[$arraydecay165] & 255) << 24 | HEAPU8[$add_ptr421] & 255 | (HEAPU8[$add_ptr416] & 255) << 8;
    if (($add563 | 0) == 1732332865) {
      __label__ = 56;
      break;
    } else if (($add563 | 0) == 1665684045) {
      __label__ = 57;
      break;
    } else {
      __label__ = 58;
      break;
    }
   case 56:
    HEAP8[_found_gAMA_b] = 1;
    var $length161_1 = $length161_0;
    __label__ = 61;
    break;
   case 57:
    HEAP8[_found_cHRM_b] = 1;
    var $length161_1 = $length161_0;
    __label__ = 61;
    break;
   case 58:
    if (($add563 | 0) == 1766015824 & ($length161_0 | 0) == 2615) {
      __label__ = 59;
      break;
    } else {
      var $length161_1 = $length161_0;
      __label__ = 61;
      break;
    }
   case 59:
    _png_crc_read($png_ptr, $arraydecay512, 22);
    HEAP8[$arrayidx614] = 0;
    var $call616 = _strncmp($arraydecay512, STRING_TABLE.__str353 | 0, 21);
    if (($call616 | 0) == 0) {
      __label__ = 60;
      break;
    } else {
      var $length161_1 = 2593;
      __label__ = 61;
      break;
    }
   case 60:
    var $puts8 = _puts(STRING_TABLE._str3 | 0);
    HEAP8[_image_specified_gamma_b] = 1;
    HEAP32[_intent >> 2] = 0;
    var $length161_1 = 2593;
    __label__ = 61;
    break;
   case 61:
    var $length161_1;
    var $call623 = _png_crc_finish($png_ptr, $length161_1);
    var $call625 = _memcmp($arraydecay165, STRING_TABLE._png_measure_idat_png_MEND | 0, 4);
    if (($call625 | 0) == 0) {
      __label__ = 62;
      break;
    } else {
      __label__ = 64;
      break;
    }
   case 62:
    if ((HEAP32[_new_mng >> 2] | 0) == 0) {
      var $retval_0 = $sum_idat_length_2;
      __label__ = 67;
      break;
    } else {
      __label__ = 63;
      break;
    }
   case 63:
    var $136 = HEAP32[_mng_ptr >> 2];
    _png_free($136, $bb_2);
    var $retval_0 = 0;
    __label__ = 67;
    break;
   case 64:
    if (HEAPU8[_input_format_b]) {
      var $sum_idat_length_0 = $sum_idat_length_2;
      var $bb_0 = $bb_2;
      var $malloced_length_0 = $malloced_length_2;
      __label__ = 16;
      break;
    } else {
      __label__ = 65;
      break;
    }
   case 65:
    if (((HEAPU8[$add_ptr] & 255) << 16 | (HEAPU8[$arraydecay165] & 255) << 24 | HEAPU8[$add_ptr421] & 255 | (HEAPU8[$add_ptr416] & 255) << 8 | 0) == 1229278788) {
      __label__ = 66;
      break;
    } else {
      var $sum_idat_length_0 = $sum_idat_length_2;
      var $bb_0 = $bb_2;
      var $malloced_length_0 = $malloced_length_2;
      __label__ = 16;
      break;
    }
   case 66:
    var $_sum_idat_length_2 = (HEAP32[_fix >> 2] | 0) == 0 & (HEAP32[_found_CgBI >> 2] | 0) != 0 ? 0 : $sum_idat_length_2;
    var $retval_0 = $_sum_idat_length_2;
    __label__ = 67;
    break;
   case 67:
    var $retval_0;
    STACKTOP = __stackBase__;
    return $retval_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_measure_idat["X"] = 1;

function _png_set_sig_bytes($png_ptr, $num_bytes) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    if (($num_bytes | 0) > 8) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $0 = $png_ptr;
    _png_error($0, STRING_TABLE.__str279 | 0);
    __label__ = 4;
    break;
   case 4:
    var $conv = ($num_bytes | 0) < 0 ? 0 : $num_bytes & 255;
    HEAP8[$png_ptr + 297 | 0] = $conv;
    __label__ = 5;
    break;
   case 5:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_sig_cmp($sig, $start, $num_to_check) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 8;
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $png_signature = __stackBase__;
    var $tmpcast = $png_signature;
    HEAP32[$png_signature >> 2] = 1196314761;
    HEAP32[$png_signature + 4 >> 2] = 169478669;
    if ($num_to_check >>> 0 > 8) {
      var $num_to_check_addr_0 = 8;
      __label__ = 3;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    if (($num_to_check | 0) == 0) {
      var $retval_0 = -1;
      __label__ = 5;
      break;
    } else {
      var $num_to_check_addr_0 = $num_to_check;
      __label__ = 3;
      break;
    }
   case 3:
    var $num_to_check_addr_0;
    if ($start >>> 0 > 7) {
      var $retval_0 = -1;
      __label__ = 5;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $sub_num_to_check_addr_0 = ($num_to_check_addr_0 + $start | 0) >>> 0 > 8 ? 8 - $start | 0 : $num_to_check_addr_0;
    var $arrayidx = $sig + $start | 0;
    var $arrayidx10 = $tmpcast + $start | 0;
    var $call = _memcmp($arrayidx, $arrayidx10, $sub_num_to_check_addr_0);
    var $retval_0 = $call;
    __label__ = 5;
    break;
   case 5:
    var $retval_0;
    STACKTOP = __stackBase__;
    return $retval_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_zalloc($png_ptr, $items, $size) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $0 = $png_ptr + 88 | 0;
    var $1 = HEAP32[$0 >> 2];
    if (($png_ptr | 0) == 0) {
      var $retval_0 = 0;
      __label__ = 5;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $div = Math.floor(4294967295 / ($size >>> 0));
    if ($div >>> 0 < $items >>> 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $2 = $png_ptr;
    _png_warning($2, STRING_TABLE.__str1280 | 0);
    var $retval_0 = 0;
    __label__ = 5;
    break;
   case 4:
    var $mul = $size * $items | 0;
    var $or = $1 | 1048576;
    HEAP32[$0 >> 2] = $or;
    var $3 = $png_ptr;
    var $call = _png_malloc($3, $mul);
    HEAP32[$0 >> 2] = $1;
    var $retval_0 = $call;
    __label__ = 5;
    break;
   case 5:
    var $retval_0;
    return $retval_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_zfree($png_ptr, $ptr) {
  var $0 = $png_ptr;
  _png_free($0, $ptr);
  return;
}

function _png_reset_crc($png_ptr) {
  var $call = _crc32(0, 0, 0);
  HEAP32[$png_ptr + 268 >> 2] = $call;
  return;
}

function _png_calculate_crc($png_ptr, $ptr, $length) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $1 = HEAP32[$png_ptr + 88 >> 2];
    if ((HEAP32[$png_ptr + 232 >> 2] & 536870912 | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    if (($1 & 768 | 0) == 768 | ($length | 0) == 0) {
      __label__ = 7;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    if (($1 & 2048 | 0) != 0 | ($length | 0) == 0) {
      __label__ = 7;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $crc12 = $png_ptr + 268 | 0;
    var $ptr_addr_0 = $ptr;
    var $length_addr_0 = $length;
    var $crc_0 = HEAP32[$crc12 >> 2];
    __label__ = 5;
    break;
   case 5:
    var $crc_0;
    var $length_addr_0;
    var $ptr_addr_0;
    var $safeLength_0 = ($length_addr_0 | 0) == 0 ? -1 : $length_addr_0;
    var $call = _crc32($crc_0, $ptr_addr_0, $safeLength_0);
    if (($length_addr_0 | 0) == ($safeLength_0 | 0)) {
      __label__ = 6;
      break;
    } else {
      var $ptr_addr_0 = $ptr_addr_0 + $safeLength_0 | 0;
      var $length_addr_0 = $length_addr_0 - $safeLength_0 | 0;
      var $crc_0 = $call;
      __label__ = 5;
      break;
    }
   case 6:
    HEAP32[$crc12 >> 2] = $call;
    __label__ = 7;
    break;
   case 7:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_create_info_struct($png_ptr) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0) {
      var $retval_0 = 0;
      __label__ = 4;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $1 = HEAP32[$png_ptr + 584 >> 2];
    var $2 = HEAP32[$png_ptr + 588 >> 2];
    var $call = _png_create_struct_2(2, $2, $1);
    var $3 = $call;
    if (($call | 0) == 0) {
      var $retval_0 = $3;
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    _png_info_init_3($3);
    var $retval_0 = $3;
    __label__ = 4;
    break;
   case 4:
    var $retval_0;
    return $retval_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_64bit_product($v1, $v2, $hi_product, $lo_product) {
  var $shr1 = $v1 >>> 16;
  var $and1 = $v1 & 65535;
  var $shr22 = $v2 >>> 16;
  var $and4 = $v2 & 65535;
  var $mul = $and4 * $and1 | 0;
  var $add9 = $and4 * $shr1 + $shr22 * $and1 + ($mul >>> 16) | 0;
  var $or = $add9 << 16 | $mul & 65535;
  HEAP32[$hi_product >> 2] = ($add9 >>> 16) + $shr22 * $shr1 | 0;
  HEAP32[$lo_product >> 2] = $or;
  return;
}

function _png_get_io_ptr($png_ptr) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0) {
      var $retval_0 = 0;
      __label__ = 3;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $retval_0 = HEAP32[$png_ptr + 64 >> 2];
    __label__ = 3;
    break;
   case 3:
    var $retval_0;
    return $retval_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_init_io($png_ptr, $fp) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    HEAP32[$png_ptr + 64 >> 2] = $fp;
    __label__ = 3;
    break;
   case 3:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_info_init_3($ptr_ptr_val) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($ptr_ptr_val | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $0 = $ptr_ptr_val;
    _memset($0, 0, 236, 1);
    __label__ = 3;
    break;
   case 3:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_destroy_info_struct($png_ptr) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $0 = HEAP32[_write_end_info_ptr >> 2];
    if (($0 | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    _png_info_destroy($png_ptr, $0);
    var $1 = $0;
    var $3 = HEAP32[$png_ptr + 584 >> 2];
    var $4 = HEAP32[$png_ptr + 592 >> 2];
    _png_destroy_struct_2($1, $4, $3);
    HEAP32[_write_end_info_ptr >> 2] = 0;
    __label__ = 4;
    break;
   case 4:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_info_destroy($png_ptr, $info_ptr) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    _png_free_data($png_ptr, $info_ptr, 32767, -1);
    var $num_chunk_list = $png_ptr + 560 | 0;
    if ((HEAP32[$num_chunk_list >> 2] | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $chunk_list = $png_ptr + 564 | 0;
    var $1 = HEAP32[$chunk_list >> 2];
    var $2 = $png_ptr;
    _png_free($2, $1);
    HEAP32[$chunk_list >> 2] = 0;
    HEAP32[$num_chunk_list >> 2] = 0;
    __label__ = 3;
    break;
   case 3:
    _png_info_init_3($info_ptr);
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_free_data($png_ptr, $info_ptr, $mask, $num) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0 | ($info_ptr | 0) == 0) {
      __label__ = 52;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $free_me = $info_ptr + 184 | 0;
    if (($mask & 16384 & HEAP32[$free_me >> 2] | 0) == 0) {
      __label__ = 10;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    if (($num | 0) == -1) {
      __label__ = 4;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 4:
    var $num_text = $info_ptr + 48 | 0;
    if ((HEAP32[$num_text >> 2] | 0) > 0) {
      var $i_02 = 0;
      __label__ = 8;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 5:
    var $text = $info_ptr + 56 | 0;
    var $2 = HEAP32[$text >> 2];
    if (($2 | 0) == 0) {
      __label__ = 10;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    var $3 = HEAP32[$2 + $num * 28 + 4 >> 2];
    if (($3 | 0) == 0) {
      __label__ = 10;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    var $4 = $png_ptr;
    _png_free($4, $3);
    var $key15 = HEAP32[$text >> 2] + $num * 28 + 4 | 0;
    HEAP32[$key15 >> 2] = 0;
    __label__ = 10;
    break;
   case 8:
    var $i_02;
    _png_free_data($png_ptr, $info_ptr, 16384, $i_02);
    var $inc = $i_02 + 1 | 0;
    if (($inc | 0) < (HEAP32[$num_text >> 2] | 0)) {
      var $i_02 = $inc;
      __label__ = 8;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    var $text18 = $info_ptr + 56 | 0;
    var $8 = HEAP32[$text18 >> 2];
    var $9 = $png_ptr;
    _png_free($9, $8);
    HEAP32[$text18 >> 2] = 0;
    HEAP32[$num_text >> 2] = 0;
    __label__ = 10;
    break;
   case 10:
    var $10 = HEAP32[$free_me >> 2];
    if (($mask & 8192 & $10 | 0) == 0) {
      var $14 = $10;
      __label__ = 12;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    var $trans_alpha = $info_ptr + 76 | 0;
    var $11 = HEAP32[$trans_alpha >> 2];
    var $12 = $png_ptr;
    _png_free($12, $11);
    HEAP32[$trans_alpha >> 2] = 0;
    var $valid = $info_ptr + 8 | 0;
    var $and29 = HEAP32[$valid >> 2] & -17;
    HEAP32[$valid >> 2] = $and29;
    var $14 = HEAP32[$free_me >> 2];
    __label__ = 12;
    break;
   case 12:
    var $14;
    if (($mask & 256 & $14 | 0) == 0) {
      var $19 = $14;
      __label__ = 14;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 13:
    var $scal_s_width = $info_ptr + 224 | 0;
    var $15 = HEAP32[$scal_s_width >> 2];
    var $16 = $png_ptr;
    _png_free($16, $15);
    var $scal_s_height = $info_ptr + 228 | 0;
    var $17 = HEAP32[$scal_s_height >> 2];
    _png_free($16, $17);
    HEAP32[$scal_s_width >> 2] = 0;
    HEAP32[$scal_s_height >> 2] = 0;
    var $valid38 = $info_ptr + 8 | 0;
    var $and39 = HEAP32[$valid38 >> 2] & -16385;
    HEAP32[$valid38 >> 2] = $and39;
    var $19 = HEAP32[$free_me >> 2];
    __label__ = 14;
    break;
   case 14:
    var $19;
    if (($mask & 128 & $19 | 0) == 0) {
      var $32 = $19;
      __label__ = 20;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 15:
    var $pcal_purpose = $info_ptr + 160 | 0;
    var $20 = HEAP32[$pcal_purpose >> 2];
    var $21 = $png_ptr;
    _png_free($21, $20);
    var $pcal_units = $info_ptr + 172 | 0;
    var $22 = HEAP32[$pcal_units >> 2];
    _png_free($21, $22);
    HEAP32[$pcal_purpose >> 2] = 0;
    HEAP32[$pcal_units >> 2] = 0;
    var $pcal_params = $info_ptr + 176 | 0;
    var $23 = HEAPU32[$pcal_params >> 2];
    if (($23 | 0) == 0) {
      __label__ = 19;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 16:
    var $pcal_nparams = $info_ptr + 181 | 0;
    if (HEAP8[$pcal_nparams] << 24 >> 24 == 0) {
      var $_lcssa = $23;
      __label__ = 18;
      break;
    } else {
      var $i50_05 = 0;
      var $25 = $23;
      __label__ = 17;
      break;
    }
   case 17:
    var $25;
    var $i50_05;
    var $26 = HEAP32[$25 + ($i50_05 << 2) >> 2];
    _png_free($21, $26);
    var $arrayidx58 = HEAP32[$pcal_params >> 2] + ($i50_05 << 2) | 0;
    HEAP32[$arrayidx58 >> 2] = 0;
    var $inc60 = $i50_05 + 1 | 0;
    var $29 = HEAP32[$pcal_params >> 2];
    if (($inc60 | 0) < (HEAPU8[$pcal_nparams] & 255 | 0)) {
      var $i50_05 = $inc60;
      var $25 = $29;
      __label__ = 17;
      break;
    } else {
      var $_lcssa = $29;
      __label__ = 18;
      break;
    }
   case 18:
    var $_lcssa;
    _png_free($21, $_lcssa);
    HEAP32[$pcal_params >> 2] = 0;
    __label__ = 19;
    break;
   case 19:
    var $valid65 = $info_ptr + 8 | 0;
    var $and66 = HEAP32[$valid65 >> 2] & -1025;
    HEAP32[$valid65 >> 2] = $and66;
    var $32 = HEAP32[$free_me >> 2];
    __label__ = 20;
    break;
   case 20:
    var $32;
    if (($mask & 16 & $32 | 0) == 0) {
      var $37 = $32;
      __label__ = 22;
      break;
    } else {
      __label__ = 21;
      break;
    }
   case 21:
    var $iccp_name = $info_ptr + 196 | 0;
    var $33 = HEAP32[$iccp_name >> 2];
    var $34 = $png_ptr;
    _png_free($34, $33);
    var $iccp_profile = $info_ptr + 200 | 0;
    var $35 = HEAP32[$iccp_profile >> 2];
    _png_free($34, $35);
    HEAP32[$iccp_name >> 2] = 0;
    HEAP32[$iccp_profile >> 2] = 0;
    var $valid75 = $info_ptr + 8 | 0;
    var $and76 = HEAP32[$valid75 >> 2] & -4097;
    HEAP32[$valid75 >> 2] = $and76;
    var $37 = HEAP32[$free_me >> 2];
    __label__ = 22;
    break;
   case 22:
    var $37;
    if (($mask & 32 & $37 | 0) == 0) {
      __label__ = 31;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 23:
    if (($num | 0) == -1) {
      __label__ = 26;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 24:
    var $splt_palettes = $info_ptr + 212 | 0;
    var $38 = HEAP32[$splt_palettes >> 2];
    if (($38 | 0) == 0) {
      __label__ = 31;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 25:
    var $39 = HEAP32[$38 + ($num << 4) >> 2];
    var $40 = $png_ptr;
    _png_free($40, $39);
    var $43 = HEAP32[HEAP32[$splt_palettes >> 2] + ($num << 4) + 8 >> 2];
    _png_free($40, $43);
    var $name94 = HEAP32[$splt_palettes >> 2] + ($num << 4) | 0;
    HEAP32[$name94 >> 2] = 0;
    var $entries97 = HEAP32[$splt_palettes >> 2] + ($num << 4) + 8 | 0;
    HEAP32[$entries97 >> 2] = 0;
    __label__ = 31;
    break;
   case 26:
    var $splt_palettes_num = $info_ptr + 216 | 0;
    var $46 = HEAP32[$splt_palettes_num >> 2];
    if (($46 | 0) == 0) {
      __label__ = 30;
      break;
    } else {
      __label__ = 27;
      break;
    }
   case 27:
    if (($46 | 0) > 0) {
      var $i102_08 = 0;
      __label__ = 28;
      break;
    } else {
      __label__ = 29;
      break;
    }
   case 28:
    var $i102_08;
    _png_free_data($png_ptr, $info_ptr, 32, $i102_08);
    var $inc109 = $i102_08 + 1 | 0;
    if (($inc109 | 0) < (HEAP32[$splt_palettes_num >> 2] | 0)) {
      var $i102_08 = $inc109;
      __label__ = 28;
      break;
    } else {
      __label__ = 29;
      break;
    }
   case 29:
    var $splt_palettes111 = $info_ptr + 212 | 0;
    var $49 = HEAP32[$splt_palettes111 >> 2];
    var $50 = $png_ptr;
    _png_free($50, $49);
    HEAP32[$splt_palettes111 >> 2] = 0;
    HEAP32[$splt_palettes_num >> 2] = 0;
    __label__ = 30;
    break;
   case 30:
    var $valid115 = $info_ptr + 8 | 0;
    var $and116 = HEAP32[$valid115 >> 2] & -8193;
    HEAP32[$valid115 >> 2] = $and116;
    __label__ = 31;
    break;
   case 31:
    var $data = $png_ptr + 640 | 0;
    var $52 = HEAP32[$data >> 2];
    if (($52 | 0) == 0) {
      __label__ = 33;
      break;
    } else {
      __label__ = 32;
      break;
    }
   case 32:
    var $53 = $png_ptr;
    _png_free($53, $52);
    HEAP32[$data >> 2] = 0;
    __label__ = 33;
    break;
   case 33:
    if (($mask & 512 & HEAP32[$free_me >> 2] | 0) == 0) {
      __label__ = 41;
      break;
    } else {
      __label__ = 34;
      break;
    }
   case 34:
    if (($num | 0) == -1) {
      __label__ = 37;
      break;
    } else {
      __label__ = 35;
      break;
    }
   case 35:
    var $unknown_chunks = $info_ptr + 188 | 0;
    var $55 = HEAP32[$unknown_chunks >> 2];
    if (($55 | 0) == 0) {
      __label__ = 41;
      break;
    } else {
      __label__ = 36;
      break;
    }
   case 36:
    var $56 = HEAP32[$55 + $num * 20 + 8 >> 2];
    var $57 = $png_ptr;
    _png_free($57, $56);
    var $data141 = HEAP32[$unknown_chunks >> 2] + $num * 20 + 8 | 0;
    HEAP32[$data141 >> 2] = 0;
    __label__ = 41;
    break;
   case 37:
    var $unknown_chunks_num = $info_ptr + 192 | 0;
    var $59 = HEAP32[$unknown_chunks_num >> 2];
    if (($59 | 0) == 0) {
      __label__ = 41;
      break;
    } else {
      __label__ = 38;
      break;
    }
   case 38:
    if (($59 | 0) > 0) {
      var $i144_010 = 0;
      __label__ = 39;
      break;
    } else {
      __label__ = 40;
      break;
    }
   case 39:
    var $i144_010;
    _png_free_data($png_ptr, $info_ptr, 512, $i144_010);
    var $inc153 = $i144_010 + 1 | 0;
    if (($inc153 | 0) < (HEAP32[$unknown_chunks_num >> 2] | 0)) {
      var $i144_010 = $inc153;
      __label__ = 39;
      break;
    } else {
      __label__ = 40;
      break;
    }
   case 40:
    var $unknown_chunks155 = $info_ptr + 188 | 0;
    var $62 = HEAP32[$unknown_chunks155 >> 2] | 0;
    var $63 = $png_ptr;
    _png_free($63, $62);
    HEAP32[$unknown_chunks155 >> 2] = 0;
    HEAP32[$unknown_chunks_num >> 2] = 0;
    __label__ = 41;
    break;
   case 41:
    var $64 = HEAP32[$free_me >> 2];
    if (($mask & 8 & $64 | 0) == 0) {
      var $69 = $64;
      __label__ = 43;
      break;
    } else {
      __label__ = 42;
      break;
    }
   case 42:
    var $hist = $info_ptr + 124 | 0;
    var $66 = HEAP32[$hist >> 2];
    var $67 = $png_ptr;
    _png_free($67, $66);
    HEAP32[$hist >> 2] = 0;
    var $valid167 = $info_ptr + 8 | 0;
    var $and168 = HEAP32[$valid167 >> 2] & -65;
    HEAP32[$valid167 >> 2] = $and168;
    var $69 = HEAP32[$free_me >> 2];
    __label__ = 43;
    break;
   case 43:
    var $69;
    if (($mask & 4096 & $69 | 0) == 0) {
      var $74 = $69;
      __label__ = 45;
      break;
    } else {
      __label__ = 44;
      break;
    }
   case 44:
    var $70 = $png_ptr;
    var $palette = $info_ptr + 16 | 0;
    var $72 = HEAP32[$palette >> 2] | 0;
    _png_zfree($70, $72);
    HEAP32[$palette >> 2] = 0;
    var $valid176 = $info_ptr + 8 | 0;
    var $and177 = HEAP32[$valid176 >> 2] & -9;
    HEAP32[$valid176 >> 2] = $and177;
    HEAP16[$info_ptr + 20 >> 1] = 0;
    var $74 = HEAP32[$free_me >> 2];
    __label__ = 45;
    break;
   case 45:
    var $74;
    if (($mask & 64 & $74 | 0) == 0) {
      var $85 = $74;
      __label__ = 51;
      break;
    } else {
      __label__ = 46;
      break;
    }
   case 46:
    var $row_pointers = $info_ptr + 232 | 0;
    var $75 = HEAP32[$row_pointers >> 2];
    if (($75 | 0) == 0) {
      var $_pre6 = $74;
      __label__ = 50;
      break;
    } else {
      __label__ = 47;
      break;
    }
   case 47:
    var $height = $info_ptr + 4 | 0;
    var $77 = $png_ptr;
    if ((HEAP32[$height >> 2] | 0) > 0) {
      var $row_013 = 0;
      var $78 = $75;
      __label__ = 48;
      break;
    } else {
      var $_lcssa11 = $75;
      var $_pre_phi = $77;
      __label__ = 49;
      break;
    }
   case 48:
    var $78;
    var $row_013;
    var $79 = HEAP32[$78 + ($row_013 << 2) >> 2];
    _png_free($77, $79);
    var $arrayidx193 = HEAP32[$row_pointers >> 2] + ($row_013 << 2) | 0;
    HEAP32[$arrayidx193 >> 2] = 0;
    var $inc195 = $row_013 + 1 | 0;
    var $82 = HEAP32[$row_pointers >> 2];
    if (($inc195 | 0) < (HEAP32[$height >> 2] | 0)) {
      var $row_013 = $inc195;
      var $78 = $82;
      __label__ = 48;
      break;
    } else {
      var $_lcssa11 = $82;
      var $_pre_phi = $77;
      __label__ = 49;
      break;
    }
   case 49:
    var $_pre_phi;
    var $_lcssa11;
    _png_free($_pre_phi, $_lcssa11);
    HEAP32[$row_pointers >> 2] = 0;
    var $_pre6 = HEAP32[$free_me >> 2];
    __label__ = 50;
    break;
   case 50:
    var $_pre6;
    var $valid200 = $info_ptr + 8 | 0;
    var $and201 = HEAP32[$valid200 >> 2] & -32769;
    HEAP32[$valid200 >> 2] = $and201;
    var $85 = $_pre6;
    __label__ = 51;
    break;
   case 51:
    var $85;
    var $mask_and206 = ($num | 0) == -1 ? $mask : $mask & -16929;
    HEAP32[$free_me >> 2] = $85 & ($mask_and206 ^ -1);
    __label__ = 52;
    break;
   case 52:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_free_data["X"] = 1;

function _png_handle_as_unknown($png_ptr, $chunk_name) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0 | ($chunk_name | 0) == 0) {
      var $retval_0 = 0;
      __label__ = 7;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $0 = HEAP32[$png_ptr + 560 >> 2];
    if (($0 | 0) < 1) {
      var $retval_0 = 0;
      __label__ = 7;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $1 = HEAPU32[$png_ptr + 564 >> 2];
    var $p_0 = $1 + $0 * 5 | 0;
    __label__ = 4;
    break;
   case 4:
    var $p_0;
    var $add_ptr5 = $p_0 - 5 | 0;
    var $call = _memcmp($chunk_name, $add_ptr5, 4);
    if (($call | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    var $retval_0 = HEAPU8[$p_0 - 1 | 0] & 255;
    __label__ = 7;
    break;
   case 6:
    if ($add_ptr5 >>> 0 > $1 >>> 0) {
      var $p_0 = $add_ptr5;
      __label__ = 4;
      break;
    } else {
      var $retval_0 = 0;
      __label__ = 7;
      break;
    }
   case 7:
    var $retval_0;
    return $retval_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_chunk_unknown_handling($png_ptr, $chunk_name) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 8;
  var $chunk_string = __stackBase__;
  var $arraydecay = $chunk_string | 0;
  HEAP8[$arraydecay] = $chunk_name >>> 24 & 255;
  HEAP8[$chunk_string + 1 | 0] = $chunk_name >>> 16 & 255;
  HEAP8[$chunk_string + 2 | 0] = $chunk_name >>> 8 & 255;
  HEAP8[$chunk_string + 3 | 0] = $chunk_name & 255;
  HEAP8[$chunk_string + 4 | 0] = 0;
  var $call = _png_handle_as_unknown($png_ptr, $arraydecay);
  STACKTOP = __stackBase__;
  return $call;
}

function _png_check_cHRM_fixed($png_ptr, $white_x, $white_y, $red_x, $red_y, $green_x, $green_y, $blue_x, $blue_y) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 16;
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $xy_hi = __stackBase__;
    var $xy_lo = __stackBase__ + 4;
    var $yx_hi = __stackBase__ + 8;
    var $yx_lo = __stackBase__ + 12;
    if (($png_ptr | 0) == 0) {
      var $retval_0 = 0;
      __label__ = 15;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    if (($white_x | 0) < 0 | ($white_y | 0) < 1 | ($red_x | 0) < 0 | ($red_y | 0) < 0 | ($green_x | 0) < 0 | ($green_y | 0) < 0 | ($blue_x | 0) < 0 | ($blue_y | 0) < 0) {
      __label__ = 3;
      break;
    } else {
      var $ret_0 = 1;
      __label__ = 4;
      break;
    }
   case 3:
    var $0 = $png_ptr;
    _png_warning($0, STRING_TABLE.__str10289 | 0);
    var $ret_0 = 0;
    __label__ = 4;
    break;
   case 4:
    var $ret_0;
    if ((1e5 - $white_y | 0) < ($white_x | 0)) {
      __label__ = 5;
      break;
    } else {
      var $ret_1 = $ret_0;
      __label__ = 6;
      break;
    }
   case 5:
    var $1 = $png_ptr;
    _png_warning($1, STRING_TABLE.__str11290 | 0);
    var $ret_1 = 0;
    __label__ = 6;
    break;
   case 6:
    var $ret_1;
    if ((1e5 - $red_y | 0) < ($red_x | 0)) {
      __label__ = 7;
      break;
    } else {
      var $ret_2 = $ret_1;
      __label__ = 8;
      break;
    }
   case 7:
    var $2 = $png_ptr;
    _png_warning($2, STRING_TABLE.__str12291 | 0);
    var $ret_2 = 0;
    __label__ = 8;
    break;
   case 8:
    var $ret_2;
    if ((1e5 - $green_y | 0) < ($green_x | 0)) {
      __label__ = 9;
      break;
    } else {
      var $ret_3 = $ret_2;
      __label__ = 10;
      break;
    }
   case 9:
    var $3 = $png_ptr;
    _png_warning($3, STRING_TABLE.__str13292 | 0);
    var $ret_3 = 0;
    __label__ = 10;
    break;
   case 10:
    var $ret_3;
    if ((1e5 - $blue_y | 0) < ($blue_x | 0)) {
      __label__ = 11;
      break;
    } else {
      var $ret_4 = $ret_3;
      __label__ = 12;
      break;
    }
   case 11:
    var $4 = $png_ptr;
    _png_warning($4, STRING_TABLE.__str14293 | 0);
    var $ret_4 = 0;
    __label__ = 12;
    break;
   case 12:
    var $ret_4;
    var $sub32 = $green_x - $red_x | 0;
    var $sub33 = $blue_y - $red_y | 0;
    _png_64bit_product($sub32, $sub33, $xy_hi, $xy_lo);
    var $sub34 = $green_y - $red_y | 0;
    var $sub35 = $blue_x - $red_x | 0;
    _png_64bit_product($sub34, $sub35, $yx_hi, $yx_lo);
    if ((HEAP32[$xy_hi >> 2] | 0) == (HEAP32[$yx_hi >> 2] | 0)) {
      __label__ = 13;
      break;
    } else {
      var $retval_0 = $ret_4;
      __label__ = 15;
      break;
    }
   case 13:
    if ((HEAP32[$xy_lo >> 2] | 0) == (HEAP32[$yx_lo >> 2] | 0)) {
      __label__ = 14;
      break;
    } else {
      var $retval_0 = $ret_4;
      __label__ = 15;
      break;
    }
   case 14:
    var $9 = $png_ptr;
    _png_warning($9, STRING_TABLE.__str15294 | 0);
    var $retval_0 = 0;
    __label__ = 15;
    break;
   case 15:
    var $retval_0;
    STACKTOP = __stackBase__;
    return $retval_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_check_cHRM_fixed["X"] = 1;

function _png_muldiv($res, $a, $times, $divisor) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($divisor | 0) == 0) {
      var $retval_0 = 0;
      __label__ = 6;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    if (($a | 0) == 0 | ($times | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    HEAP32[$res >> 2] = 0;
    var $retval_0 = 1;
    __label__ = 6;
    break;
   case 4:
    var $add = ($a | 0) * ($times | 0) / ($divisor | 0) + .5;
    var $call = _floor($add);
    if ($call <= 2147483647 & $call >= -2147483648) {
      __label__ = 5;
      break;
    } else {
      var $retval_0 = 0;
      __label__ = 6;
      break;
    }
   case 5:
    HEAP32[$res >> 2] = $call & -1;
    var $retval_0 = 1;
    __label__ = 6;
    break;
   case 6:
    var $retval_0;
    return $retval_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_XYZ_from_xy($XYZ, $xy) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 16;
  var tempParam = $xy;
  $xy = STACKTOP;
  STACKTOP += 32;
  HEAP32[$xy >> 2] = HEAP32[tempParam >> 2];
  HEAP32[$xy + 4 >> 2] = HEAP32[tempParam + 4 >> 2];
  HEAP32[$xy + 8 >> 2] = HEAP32[tempParam + 8 >> 2];
  HEAP32[$xy + 12 >> 2] = HEAP32[tempParam + 12 >> 2];
  HEAP32[$xy + 16 >> 2] = HEAP32[tempParam + 16 >> 2];
  HEAP32[$xy + 20 >> 2] = HEAP32[tempParam + 20 >> 2];
  HEAP32[$xy + 24 >> 2] = HEAP32[tempParam + 24 >> 2];
  HEAP32[$xy + 28 >> 2] = HEAP32[tempParam + 28 >> 2];
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $red_inverse = __stackBase__;
    var $green_inverse = __stackBase__ + 4;
    var $left = __stackBase__ + 8;
    var $right = __stackBase__ + 12;
    var $0 = HEAPU32[$xy >> 2];
    if ($0 >>> 0 > 1e5) {
      var $retval_0 = 1;
      __label__ = 33;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $2 = HEAPU32[$xy + 4 >> 2];
    if (($2 | 0) < 0) {
      var $retval_0 = 1;
      __label__ = 33;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $sub = 1e5 - $0 | 0;
    if (($2 | 0) > ($sub | 0)) {
      var $retval_0 = 1;
      __label__ = 33;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $3 = HEAPU32[$xy + 8 >> 2];
    if ($3 >>> 0 > 1e5) {
      var $retval_0 = 1;
      __label__ = 33;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $5 = HEAPU32[$xy + 12 >> 2];
    if (($5 | 0) < 0) {
      var $retval_0 = 1;
      __label__ = 33;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    var $sub20 = 1e5 - $3 | 0;
    if (($5 | 0) > ($sub20 | 0)) {
      var $retval_0 = 1;
      __label__ = 33;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    var $6 = HEAPU32[$xy + 16 >> 2];
    if ($6 >>> 0 > 1e5) {
      var $retval_0 = 1;
      __label__ = 33;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    var $8 = HEAPU32[$xy + 20 >> 2];
    if (($8 | 0) < 0) {
      var $retval_0 = 1;
      __label__ = 33;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    var $sub34 = 1e5 - $6 | 0;
    if (($8 | 0) > ($sub34 | 0)) {
      var $retval_0 = 1;
      __label__ = 33;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 10:
    var $9 = HEAPU32[$xy + 24 >> 2];
    if ($9 >>> 0 > 1e5) {
      var $retval_0 = 1;
      __label__ = 33;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    var $11 = HEAPU32[$xy + 28 >> 2];
    if (($11 | 0) < 0) {
      var $retval_0 = 1;
      __label__ = 33;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 12:
    if (($11 | 0) > (1e5 - $9 | 0)) {
      var $retval_0 = 1;
      __label__ = 33;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 13:
    var $sub54 = $3 - $6 | 0;
    var $sub57 = $2 - $8 | 0;
    var $call = _png_muldiv($left, $sub54, $sub57, 7);
    if (($call | 0) == 0) {
      var $retval_0 = 2;
      __label__ = 33;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 14:
    var $sub62 = $5 - $8 | 0;
    var $sub65 = $0 - $6 | 0;
    var $call66 = _png_muldiv($right, $sub62, $sub65, 7);
    if (($call66 | 0) == 0) {
      var $retval_0 = 2;
      __label__ = 33;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 15:
    var $sub70 = HEAP32[$left >> 2] - HEAP32[$right >> 2] | 0;
    var $sub76 = $11 - $8 | 0;
    var $call77 = _png_muldiv($left, $sub54, $sub76, 7);
    if (($call77 | 0) == 0) {
      var $retval_0 = 2;
      __label__ = 33;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 16:
    var $sub86 = $9 - $6 | 0;
    var $call87 = _png_muldiv($right, $sub62, $sub86, 7);
    if (($call87 | 0) == 0) {
      var $retval_0 = 2;
      __label__ = 33;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 17:
    var $sub92 = HEAP32[$left >> 2] - HEAP32[$right >> 2] | 0;
    var $call93 = _png_muldiv($red_inverse, $11, $sub70, $sub92);
    if (($call93 | 0) == 0) {
      var $retval_0 = 1;
      __label__ = 33;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 18:
    var $16 = HEAP32[$red_inverse >> 2];
    if (($16 | 0) > ($11 | 0)) {
      __label__ = 19;
      break;
    } else {
      var $retval_0 = 1;
      __label__ = 33;
      break;
    }
   case 19:
    var $call106 = _png_muldiv($left, $sub57, $sub86, 7);
    if (($call106 | 0) == 0) {
      var $retval_0 = 2;
      __label__ = 33;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 20:
    var $call116 = _png_muldiv($right, $sub65, $sub76, 7);
    if (($call116 | 0) == 0) {
      var $retval_0 = 2;
      __label__ = 33;
      break;
    } else {
      __label__ = 21;
      break;
    }
   case 21:
    var $sub121 = HEAP32[$left >> 2] - HEAP32[$right >> 2] | 0;
    var $call122 = _png_muldiv($green_inverse, $11, $sub70, $sub121);
    if (($call122 | 0) == 0) {
      var $retval_0 = 1;
      __label__ = 33;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 22:
    var $19 = HEAP32[$green_inverse >> 2];
    if (($19 | 0) > ($11 | 0)) {
      __label__ = 23;
      break;
    } else {
      var $retval_0 = 1;
      __label__ = 33;
      break;
    }
   case 23:
    var $call130 = _png_reciprocal($11);
    var $call131 = _png_reciprocal($16);
    var $sub132 = $call130 - $call131 | 0;
    var $call133 = _png_reciprocal($19);
    var $sub134 = $sub132 - $call133 | 0;
    if (($sub134 | 0) < 1) {
      var $retval_0 = 1;
      __label__ = 33;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 24:
    var $redX = $XYZ | 0;
    var $call139 = _png_muldiv($redX, $0, 1e5, $16);
    if (($call139 | 0) == 0) {
      var $retval_0 = 1;
      __label__ = 33;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 25:
    var $redY = $XYZ + 4 | 0;
    var $call144 = _png_muldiv($redY, $2, 1e5, $16);
    if (($call144 | 0) == 0) {
      var $retval_0 = 1;
      __label__ = 33;
      break;
    } else {
      __label__ = 26;
      break;
    }
   case 26:
    var $redZ = $XYZ + 8 | 0;
    var $sub151 = $sub - $2 | 0;
    var $call152 = _png_muldiv($redZ, $sub151, 1e5, $16);
    if (($call152 | 0) == 0) {
      var $retval_0 = 1;
      __label__ = 33;
      break;
    } else {
      __label__ = 27;
      break;
    }
   case 27:
    var $greenX = $XYZ + 12 | 0;
    var $call157 = _png_muldiv($greenX, $3, 1e5, $19);
    if (($call157 | 0) == 0) {
      var $retval_0 = 1;
      __label__ = 33;
      break;
    } else {
      __label__ = 28;
      break;
    }
   case 28:
    var $greenY = $XYZ + 16 | 0;
    var $call162 = _png_muldiv($greenY, $5, 1e5, $19);
    if (($call162 | 0) == 0) {
      var $retval_0 = 1;
      __label__ = 33;
      break;
    } else {
      __label__ = 29;
      break;
    }
   case 29:
    var $greenZ = $XYZ + 20 | 0;
    var $sub169 = $sub20 - $5 | 0;
    var $call170 = _png_muldiv($greenZ, $sub169, 1e5, $19);
    if (($call170 | 0) == 0) {
      var $retval_0 = 1;
      __label__ = 33;
      break;
    } else {
      __label__ = 30;
      break;
    }
   case 30:
    var $blueX = $XYZ + 24 | 0;
    var $call175 = _png_muldiv($blueX, $6, $sub134, 1e5);
    if (($call175 | 0) == 0) {
      var $retval_0 = 1;
      __label__ = 33;
      break;
    } else {
      __label__ = 31;
      break;
    }
   case 31:
    var $blueY = $XYZ + 28 | 0;
    var $call180 = _png_muldiv($blueY, $8, $sub134, 1e5);
    if (($call180 | 0) == 0) {
      var $retval_0 = 1;
      __label__ = 33;
      break;
    } else {
      __label__ = 32;
      break;
    }
   case 32:
    var $blueZ = $XYZ + 32 | 0;
    var $sub187 = $sub34 - $8 | 0;
    var $call188 = _png_muldiv($blueZ, $sub187, $sub134, 1e5);
    var $retval_0 = ($call188 | 0) == 0 & 1;
    __label__ = 33;
    break;
   case 33:
    var $retval_0;
    STACKTOP = __stackBase__;
    return $retval_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_XYZ_from_xy["X"] = 1;

function _png_reciprocal($a) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $add = 1e10 / ($a | 0) + .5;
    var $call = _floor($add);
    if ($call <= 2147483647 & $call >= -2147483648) {
      __label__ = 2;
      break;
    } else {
      var $retval_0 = 0;
      __label__ = 3;
      break;
    }
   case 2:
    var $retval_0 = $call & -1;
    __label__ = 3;
    break;
   case 3:
    var $retval_0;
    return $retval_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_XYZ_from_xy_checked($png_ptr, $XYZ, $xy) {
  var __stackBase__ = STACKTOP;
  var tempParam = $xy;
  $xy = STACKTOP;
  STACKTOP += 32;
  HEAP32[$xy >> 2] = HEAP32[tempParam >> 2];
  HEAP32[$xy + 4 >> 2] = HEAP32[tempParam + 4 >> 2];
  HEAP32[$xy + 8 >> 2] = HEAP32[tempParam + 8 >> 2];
  HEAP32[$xy + 12 >> 2] = HEAP32[tempParam + 12 >> 2];
  HEAP32[$xy + 16 >> 2] = HEAP32[tempParam + 16 >> 2];
  HEAP32[$xy + 20 >> 2] = HEAP32[tempParam + 20 >> 2];
  HEAP32[$xy + 24 >> 2] = HEAP32[tempParam + 24 >> 2];
  HEAP32[$xy + 28 >> 2] = HEAP32[tempParam + 28 >> 2];
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $call = _png_XYZ_from_xy($XYZ, $xy);
    if (($call | 0) == 1) {
      __label__ = 2;
      break;
    } else if (($call | 0) == 0) {
      var $retval_0 = 1;
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 2:
    var $0 = $png_ptr;
    _png_warning($0, STRING_TABLE.__str16295 | 0);
    var $retval_0 = 0;
    __label__ = 4;
    break;
   case 3:
    var $1 = $png_ptr;
    _png_error($1, STRING_TABLE.__str17296 | 0);
    var $retval_0 = 0;
    __label__ = 4;
    break;
   case 4:
    var $retval_0;
    STACKTOP = __stackBase__;
    return $retval_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_pow10($power) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($power | 0) < 0) {
      __label__ = 2;
      break;
    } else {
      var $power_addr_0 = $power;
      var $recip_0 = 0;
      __label__ = 4;
      break;
    }
   case 2:
    if (($power | 0) < -307) {
      var $retval_0 = 0;
      __label__ = 10;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $power_addr_0 = -$power | 0;
    var $recip_0 = 1;
    __label__ = 4;
    break;
   case 4:
    var $recip_0;
    var $power_addr_0;
    if (($power_addr_0 | 0) > 0) {
      var $power_addr_1 = $power_addr_0;
      var $d_0 = 1;
      var $mult_0 = 10;
      __label__ = 5;
      break;
    } else {
      var $retval_0 = 1;
      __label__ = 10;
      break;
    }
   case 5:
    var $mult_0;
    var $d_0;
    var $power_addr_1;
    if (($power_addr_1 & 1 | 0) == 0) {
      var $d_1 = $d_0;
      __label__ = 7;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    var $d_1 = $d_0 * $mult_0;
    __label__ = 7;
    break;
   case 7:
    var $d_1;
    var $shr = $power_addr_1 >> 1;
    if (($shr | 0) > 0) {
      var $power_addr_1 = $shr;
      var $d_0 = $d_1;
      var $mult_0 = $mult_0 * $mult_0;
      __label__ = 5;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    if (($recip_0 | 0) == 0) {
      var $retval_0 = $d_1;
      __label__ = 10;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    var $retval_0 = 1 / $d_1;
    __label__ = 10;
    break;
   case 10:
    var $retval_0;
    return $retval_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_check_fp_number($string, $size, $statep, $whereami) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $i_0 = HEAP32[$whereami >> 2];
    var $state_0 = HEAP32[$statep >> 2];
    __label__ = 2;
    break;
   case 2:
    var $state_0;
    var $i_0;
    if ($i_0 >>> 0 < $size >>> 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 28;
      break;
    }
   case 3:
    var $conv = HEAP8[$string + $i_0 | 0] << 24 >> 24;
    if (($conv | 0) == 45) {
      __label__ = 4;
      break;
    } else if (($conv | 0) == 46) {
      __label__ = 5;
      break;
    } else if (($conv | 0) == 48) {
      __label__ = 6;
      break;
    } else if (($conv | 0) == 49 || ($conv | 0) == 50 || ($conv | 0) == 51 || ($conv | 0) == 52 || ($conv | 0) == 53 || ($conv | 0) == 54 || ($conv | 0) == 55 || ($conv | 0) == 56 || ($conv | 0) == 57) {
      __label__ = 7;
      break;
    } else if (($conv | 0) == 69 || ($conv | 0) == 101) {
      __label__ = 8;
      break;
    } else if (($conv | 0) == 43) {
      var $type_0 = 4;
      __label__ = 9;
      break;
    } else {
      __label__ = 28;
      break;
    }
   case 4:
    var $type_0 = 132;
    __label__ = 9;
    break;
   case 5:
    var $type_0 = 16;
    __label__ = 9;
    break;
   case 6:
    var $type_0 = 8;
    __label__ = 9;
    break;
   case 7:
    var $type_0 = 264;
    __label__ = 9;
    break;
   case 8:
    var $type_0 = 32;
    __label__ = 9;
    break;
   case 9:
    var $type_0;
    var $add = $type_0 & 60 | $state_0 & 3;
    if (($add | 0) == 4) {
      __label__ = 10;
      break;
    } else if (($add | 0) == 16) {
      __label__ = 12;
      break;
    } else if (($add | 0) == 8) {
      __label__ = 16;
      break;
    } else if (($add | 0) == 32) {
      __label__ = 19;
      break;
    } else if (($add | 0) == 9) {
      __label__ = 21;
      break;
    } else if (($add | 0) == 33) {
      __label__ = 22;
      break;
    } else if (($add | 0) == 6) {
      __label__ = 24;
      break;
    } else if (($add | 0) == 10) {
      __label__ = 26;
      break;
    } else {
      __label__ = 28;
      break;
    }
   case 10:
    if (($state_0 & 60 | 0) == 0) {
      __label__ = 11;
      break;
    } else {
      __label__ = 28;
      break;
    }
   case 11:
    var $state_2 = $type_0 | $state_0;
    __label__ = 27;
    break;
   case 12:
    if (($state_0 & 16 | 0) == 0) {
      __label__ = 13;
      break;
    } else {
      __label__ = 28;
      break;
    }
   case 13:
    if (($state_0 & 8 | 0) == 0) {
      __label__ = 15;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 14:
    var $state_2 = $type_0 | $state_0;
    __label__ = 27;
    break;
   case 15:
    var $state_2 = $state_0 & 448 | $type_0 | 1;
    __label__ = 27;
    break;
   case 16:
    if (($state_0 & 16 | 0) == 0) {
      var $state_1 = $state_0;
      __label__ = 18;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 17:
    var $state_1 = $state_0 & 448 | 17;
    __label__ = 18;
    break;
   case 18:
    var $state_1;
    var $state_2 = $type_0 | $state_1 | 64;
    __label__ = 27;
    break;
   case 19:
    if (($state_0 & 8 | 0) == 0) {
      __label__ = 28;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 20:
    var $state_2 = $state_0 & 448 | 2;
    __label__ = 27;
    break;
   case 21:
    var $state_2 = $state_0 | $type_0 | 64;
    __label__ = 27;
    break;
   case 22:
    if (($state_0 & 8 | 0) == 0) {
      __label__ = 28;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 23:
    var $state_2 = $state_0 & 448 | 2;
    __label__ = 27;
    break;
   case 24:
    if (($state_0 & 60 | 0) == 0) {
      __label__ = 25;
      break;
    } else {
      __label__ = 28;
      break;
    }
   case 25:
    var $state_2 = $state_0 | 4;
    __label__ = 27;
    break;
   case 26:
    var $state_2 = $state_0 | 72;
    __label__ = 27;
    break;
   case 27:
    var $state_2;
    var $i_0 = $i_0 + 1 | 0;
    var $state_0 = $state_2;
    __label__ = 2;
    break;
   case 28:
    HEAP32[$statep >> 2] = $state_0;
    HEAP32[$whereami >> 2] = $i_0;
    return $state_0 >>> 3 & 1;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_check_fp_number["X"] = 1;

function _png_check_IHDR($png_ptr, $width, $height, $bit_depth, $color_type, $interlace_type, $compression_type, $filter_type) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($width | 0) == 0) {
      __label__ = 2;
      break;
    } else {
      var $error_0 = 0;
      __label__ = 3;
      break;
    }
   case 2:
    var $0 = $png_ptr;
    _png_warning($0, STRING_TABLE.__str18297 | 0);
    var $error_0 = 1;
    __label__ = 3;
    break;
   case 3:
    var $error_0;
    if (($height | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      var $error_1 = $error_0;
      __label__ = 5;
      break;
    }
   case 4:
    var $1 = $png_ptr;
    _png_warning($1, STRING_TABLE.__str19298 | 0);
    var $error_1 = 1;
    __label__ = 5;
    break;
   case 5:
    var $error_1;
    if (HEAPU32[$png_ptr + 616 >> 2] >>> 0 < $width >>> 0) {
      __label__ = 6;
      break;
    } else {
      var $error_2 = $error_1;
      __label__ = 7;
      break;
    }
   case 6:
    var $3 = $png_ptr;
    _png_warning($3, STRING_TABLE.__str20299 | 0);
    var $error_2 = 1;
    __label__ = 7;
    break;
   case 7:
    var $error_2;
    if (HEAPU32[$png_ptr + 620 >> 2] >>> 0 < $height >>> 0) {
      __label__ = 8;
      break;
    } else {
      var $error_3 = $error_2;
      __label__ = 9;
      break;
    }
   case 8:
    var $5 = $png_ptr;
    _png_warning($5, STRING_TABLE.__str21300 | 0);
    var $error_3 = 1;
    __label__ = 9;
    break;
   case 9:
    var $error_3;
    if (($width | 0) < 0) {
      __label__ = 10;
      break;
    } else {
      var $error_4 = $error_3;
      __label__ = 11;
      break;
    }
   case 10:
    var $6 = $png_ptr;
    _png_warning($6, STRING_TABLE.__str22301 | 0);
    var $error_4 = 1;
    __label__ = 11;
    break;
   case 11:
    var $error_4;
    if (($height | 0) < 0) {
      __label__ = 12;
      break;
    } else {
      var $error_5 = $error_4;
      __label__ = 13;
      break;
    }
   case 12:
    var $7 = $png_ptr;
    _png_warning($7, STRING_TABLE.__str23302 | 0);
    var $error_5 = 1;
    __label__ = 13;
    break;
   case 13:
    var $error_5;
    if ($width >>> 0 > 536870798) {
      __label__ = 14;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 14:
    var $8 = $png_ptr;
    _png_warning($8, STRING_TABLE.__str24303 | 0);
    __label__ = 15;
    break;
   case 15:
    if (($bit_depth - 1 | 0) >>> 0 > 1 & ($bit_depth | 0) != 4 & ($bit_depth | 0) != 8 & ($bit_depth | 0) != 16) {
      __label__ = 16;
      break;
    } else {
      var $error_6 = $error_5;
      __label__ = 17;
      break;
    }
   case 16:
    var $10 = $png_ptr;
    _png_warning($10, STRING_TABLE.__str25304 | 0);
    var $error_6 = 1;
    __label__ = 17;
    break;
   case 17:
    var $error_6;
    if (($color_type | 0) < 0 | ($color_type | 0) == 1 | ($color_type | 0) == 5 | ($color_type | 0) > 6) {
      __label__ = 18;
      break;
    } else {
      var $error_7 = $error_6;
      __label__ = 19;
      break;
    }
   case 18:
    var $11 = $png_ptr;
    _png_warning($11, STRING_TABLE.__str26305 | 0);
    var $error_7 = 1;
    __label__ = 19;
    break;
   case 19:
    var $error_7;
    if (($color_type | 0) == 3 & ($bit_depth | 0) > 8) {
      __label__ = 22;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 20:
    if (($color_type | 0) == 6 || ($color_type | 0) == 4 || ($color_type | 0) == 2) {
      __label__ = 21;
      break;
    } else {
      var $error_8 = $error_7;
      __label__ = 23;
      break;
    }
   case 21:
    if (($bit_depth | 0) < 8) {
      __label__ = 22;
      break;
    } else {
      var $error_8 = $error_7;
      __label__ = 23;
      break;
    }
   case 22:
    var $12 = $png_ptr;
    _png_warning($12, STRING_TABLE.__str27306 | 0);
    var $error_8 = 1;
    __label__ = 23;
    break;
   case 23:
    var $error_8;
    if (($interlace_type | 0) > 1) {
      __label__ = 24;
      break;
    } else {
      var $error_9 = $error_8;
      __label__ = 25;
      break;
    }
   case 24:
    var $13 = $png_ptr;
    _png_warning($13, STRING_TABLE.__str28307 | 0);
    var $error_9 = 1;
    __label__ = 25;
    break;
   case 25:
    var $error_9;
    if (($compression_type | 0) == 0) {
      var $error_10 = $error_9;
      __label__ = 27;
      break;
    } else {
      __label__ = 26;
      break;
    }
   case 26:
    var $14 = $png_ptr;
    _png_warning($14, STRING_TABLE.__str29308 | 0);
    var $error_10 = 1;
    __label__ = 27;
    break;
   case 27:
    var $error_10;
    var $mode = $png_ptr + 84 | 0;
    if ((HEAP32[$mode >> 2] & 4096 | 0) == 0) {
      __label__ = 30;
      break;
    } else {
      __label__ = 28;
      break;
    }
   case 28:
    if ((HEAP32[$png_ptr + 576 >> 2] | 0) == 0) {
      __label__ = 30;
      break;
    } else {
      __label__ = 29;
      break;
    }
   case 29:
    var $17 = $png_ptr;
    _png_warning($17, STRING_TABLE.__str1090 | 0);
    __label__ = 30;
    break;
   case 30:
    if (($filter_type | 0) == 0) {
      var $error_12 = $error_10;
      __label__ = 37;
      break;
    } else {
      __label__ = 31;
      break;
    }
   case 31:
    if ((HEAP32[$png_ptr + 576 >> 2] & 4 | 0) != 0 & ($filter_type | 0) == 64) {
      __label__ = 32;
      break;
    } else {
      __label__ = 34;
      break;
    }
   case 32:
    var $19 = HEAP32[$mode >> 2];
    if (($19 & 4096 | 0) == 0) {
      __label__ = 33;
      break;
    } else {
      __label__ = 34;
      break;
    }
   case 33:
    if (($color_type | 0) == 6 || ($color_type | 0) == 2) {
      var $error_11 = $error_10;
      var $21 = $19;
      __label__ = 35;
      break;
    } else {
      __label__ = 34;
      break;
    }
   case 34:
    var $20 = $png_ptr;
    _png_warning($20, STRING_TABLE.__str31310 | 0);
    var $error_11 = 1;
    var $21 = HEAP32[$mode >> 2];
    __label__ = 35;
    break;
   case 35:
    var $21;
    var $error_11;
    if (($21 & 4096 | 0) == 0) {
      var $error_12 = $error_11;
      __label__ = 37;
      break;
    } else {
      __label__ = 36;
      break;
    }
   case 36:
    var $22 = $png_ptr;
    _png_warning($22, STRING_TABLE.__str32311 | 0);
    var $_pre_phi = $22;
    __label__ = 39;
    break;
   case 37:
    var $error_12;
    if (($error_12 | 0) == 1) {
      __label__ = 38;
      break;
    } else {
      __label__ = 40;
      break;
    }
   case 38:
    var $_pre_phi = $png_ptr;
    __label__ = 39;
    break;
   case 39:
    var $_pre_phi;
    _png_error($_pre_phi, STRING_TABLE.__str33312 | 0);
    __label__ = 40;
    break;
   case 40:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_check_IHDR["X"] = 1;

function _png_check_fp_string($string, $size) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 8;
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $state = __stackBase__;
    var $char_index = __stackBase__ + 4;
    HEAP32[$state >> 2] = 0;
    HEAP32[$char_index >> 2] = 0;
    var $call = _png_check_fp_number($string, $size, $state, $char_index);
    if (($call | 0) == 0) {
      var $retval_0 = 0;
      __label__ = 5;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $0 = HEAP32[$char_index >> 2];
    if (($0 | 0) == ($size | 0)) {
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    if (HEAP8[$string + $0 | 0] << 24 >> 24 == 0) {
      __label__ = 4;
      break;
    } else {
      var $retval_0 = 0;
      __label__ = 5;
      break;
    }
   case 4:
    var $retval_0 = HEAP32[$state >> 2];
    __label__ = 5;
    break;
   case 5:
    var $retval_0;
    STACKTOP = __stackBase__;
    return $retval_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_ascii_from_fp($png_ptr, $ascii, $fp) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 24;
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $exp_b10 = __stackBase__;
    var $exponent = __stackBase__ + 4;
    var $d = __stackBase__ + 16;
    if ($fp < 0) {
      __label__ = 2;
      break;
    } else {
      var $ascii_addr_0 = $ascii;
      var $size_addr_0 = 18;
      var $fp_addr_0 = $fp;
      __label__ = 3;
      break;
    }
   case 2:
    var $sub = -$fp;
    var $incdec_ptr = $ascii + 1 | 0;
    HEAP8[$ascii] = 45;
    var $ascii_addr_0 = $incdec_ptr;
    var $size_addr_0 = 17;
    var $fp_addr_0 = $sub;
    __label__ = 3;
    break;
   case 3:
    var $fp_addr_0;
    var $size_addr_0;
    var $ascii_addr_0;
    var $cmp9 = $fp_addr_0 >= 2.2250738585072014e-308;
    if ($cmp9 & $fp_addr_0 <= 1.7976931348623157e+308) {
      __label__ = 4;
      break;
    } else {
      __label__ = 59;
      break;
    }
   case 4:
    var $call = _frexp($fp_addr_0, $exp_b10);
    var $shr = HEAP32[$exp_b10 >> 2] * 77 >> 8;
    HEAP32[$exp_b10 >> 2] = $shr;
    var $call12 = _png_pow10($shr);
    var $base_0 = $call12;
    var $_pr = $shr;
    __label__ = 5;
    break;
   case 5:
    var $_pr;
    var $base_0;
    if ($base_0 < 2.2250738585072014e-308 | $base_0 < $fp_addr_0) {
      __label__ = 6;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 6:
    var $add15 = $_pr + 1 | 0;
    var $call16 = _png_pow10($add15);
    if ($call16 > 1.7976931348623157e+308) {
      __label__ = 8;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    HEAP32[$exp_b10 >> 2] = $add15;
    var $base_0 = $call16;
    var $_pr = $add15;
    __label__ = 5;
    break;
   case 8:
    var $div = $fp_addr_0 / $base_0;
    if ($div < 1) {
      var $fp_addr_1_lcssa = $div;
      var $1 = $_pr;
      __label__ = 11;
      break;
    } else {
      var $fp_addr_154 = $div;
      var $inc2456 = $_pr;
      __label__ = 9;
      break;
    }
   case 9:
    var $inc2456;
    var $fp_addr_154;
    var $div23 = $fp_addr_154 / 10;
    var $inc24 = $inc2456 + 1 | 0;
    if ($div23 < 1) {
      __label__ = 10;
      break;
    } else {
      var $fp_addr_154 = $div23;
      var $inc2456 = $inc24;
      __label__ = 9;
      break;
    }
   case 10:
    HEAP32[$exp_b10 >> 2] = $inc24;
    var $fp_addr_1_lcssa = $div23;
    var $1 = $inc24;
    __label__ = 11;
    break;
   case 11:
    var $1;
    var $fp_addr_1_lcssa;
    if ($1 >>> 0 > 4294967293) {
      __label__ = 12;
      break;
    } else {
      var $ascii_addr_1 = $ascii_addr_0;
      var $size_addr_1 = $size_addr_0;
      var $fp_addr_2 = $fp_addr_1_lcssa;
      var $czero_1 = 0;
      var $clead_0 = 0;
      var $cdigits_0 = 0;
      __label__ = 13;
      break;
    }
   case 12:
    var $sub30 = -$1 | 0;
    HEAP32[$exp_b10 >> 2] = 0;
    var $ascii_addr_1 = $ascii_addr_0;
    var $size_addr_1 = $size_addr_0;
    var $fp_addr_2 = $fp_addr_1_lcssa;
    var $czero_1 = $sub30;
    var $clead_0 = $sub30;
    var $cdigits_0 = 0;
    __label__ = 13;
    break;
   case 13:
    var $cdigits_0;
    var $clead_0;
    var $czero_1;
    var $fp_addr_2;
    var $size_addr_1;
    var $ascii_addr_1;
    var $mul33 = $fp_addr_2 * 10;
    if (($cdigits_0 + 1 - $clead_0 + $czero_1 | 0) < 5) {
      __label__ = 14;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 14:
    var $call39 = _modf($mul33, $d);
    var $_pr6_pre = (tempDoubleI32[0] = HEAP32[$d >> 2], tempDoubleI32[1] = HEAP32[$d + 4 >> 2], tempDoubleF64[0]);
    var $ascii_addr_6 = $ascii_addr_1;
    var $size_addr_6 = $size_addr_1;
    var $fp_addr_3 = $call39;
    var $cdigits_3 = $cdigits_0;
    var $9 = $_pr6_pre;
    __label__ = 31;
    break;
   case 15:
    var $call42 = _floor($mul33 + .5);
    tempDoubleF64[0] = $call42, HEAP32[$d >> 2] = tempDoubleI32[0], HEAP32[$d + 4 >> 2] = tempDoubleI32[1];
    if ($call42 > 9) {
      __label__ = 16;
      break;
    } else {
      var $ascii_addr_6 = $ascii_addr_1;
      var $size_addr_6 = $size_addr_1;
      var $fp_addr_3 = 0;
      var $cdigits_3 = $cdigits_0;
      var $9 = $call42;
      __label__ = 31;
      break;
    }
   case 16:
    if (($czero_1 | 0) > 0) {
      __label__ = 19;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 17:
    if (($cdigits_0 | 0) > 0) {
      __label__ = 18;
      break;
    } else {
      var $cdigits_1_lcssa = $cdigits_0;
      var $size_addr_2_lcssa = $size_addr_1;
      var $ascii_addr_2_lcssa = $ascii_addr_1;
      var $_lcssa = $call42;
      __label__ = 25;
      break;
    }
   case 18:
    var $cdigits_134 = $cdigits_0;
    var $size_addr_235 = $size_addr_1;
    var $ascii_addr_236 = $ascii_addr_1;
    var $3 = HEAP32[$exp_b10 >> 2];
    __label__ = 20;
    break;
   case 19:
    tempDoubleF64[0] = 1, HEAP32[$d >> 2] = tempDoubleI32[0], HEAP32[$d + 4 >> 2] = tempDoubleI32[1];
    var $cdigits_311 = $cdigits_0;
    var $clead_212 = ((($cdigits_0 | 0) == 0) << 31 >> 31) + $clead_0 | 0;
    var $czero_313 = $czero_1 - 1 | 0;
    var $fp_addr_315 = 0;
    var $size_addr_616 = $size_addr_1;
    var $ascii_addr_617 = $ascii_addr_1;
    __label__ = 33;
    break;
   case 20:
    var $3;
    var $ascii_addr_236;
    var $size_addr_235;
    var $cdigits_134;
    var $incdec_ptr57 = $ascii_addr_236 - 1 | 0;
    var $4 = HEAP8[$incdec_ptr57];
    var $conv = $4 << 24 >> 24;
    if (($3 | 0) == -1) {
      __label__ = 22;
      break;
    } else {
      __label__ = 21;
      break;
    }
   case 21:
    var $inc61 = $3 + 1 | 0;
    HEAP32[$exp_b10 >> 2] = $inc61;
    var $ascii_addr_3 = $incdec_ptr57;
    var $size_addr_3 = $size_addr_235;
    var $ch_0 = $conv;
    var $6 = $inc61;
    __label__ = 24;
    break;
   case 22:
    if ($4 << 24 >> 24 == 46) {
      __label__ = 23;
      break;
    } else {
      var $ascii_addr_3 = $incdec_ptr57;
      var $size_addr_3 = $size_addr_235;
      var $ch_0 = $conv;
      var $6 = $3;
      __label__ = 24;
      break;
    }
   case 23:
    var $incdec_ptr66 = $ascii_addr_236 - 2 | 0;
    var $conv67 = HEAP8[$incdec_ptr66] << 24 >> 24;
    HEAP32[$exp_b10 >> 2] = 1;
    var $ascii_addr_3 = $incdec_ptr66;
    var $size_addr_3 = $size_addr_235 + 1 | 0;
    var $ch_0 = $conv67;
    var $6 = 1;
    __label__ = 24;
    break;
   case 24:
    var $6;
    var $ch_0;
    var $size_addr_3;
    var $ascii_addr_3;
    var $dec71 = $cdigits_134 - 1 | 0;
    var $sub72 = $ch_0 - 47 | 0;
    var $conv73 = $sub72 | 0;
    tempDoubleF64[0] = $conv73, HEAP32[$d >> 2] = tempDoubleI32[0], HEAP32[$d + 4 >> 2] = tempDoubleI32[1];
    if (($dec71 | 0) > 0 & ($sub72 | 0) > 9) {
      var $cdigits_134 = $dec71;
      var $size_addr_235 = $size_addr_3;
      var $ascii_addr_236 = $ascii_addr_3;
      var $3 = $6;
      __label__ = 20;
      break;
    } else {
      var $cdigits_1_lcssa = $dec71;
      var $size_addr_2_lcssa = $size_addr_3;
      var $ascii_addr_2_lcssa = $ascii_addr_3;
      var $_lcssa = $conv73;
      __label__ = 25;
      break;
    }
   case 25:
    var $_lcssa;
    var $ascii_addr_2_lcssa;
    var $size_addr_2_lcssa;
    var $cdigits_1_lcssa;
    if ($_lcssa > 9) {
      __label__ = 26;
      break;
    } else {
      var $ascii_addr_6 = $ascii_addr_2_lcssa;
      var $size_addr_6 = $size_addr_2_lcssa;
      var $fp_addr_3 = 0;
      var $cdigits_3 = $cdigits_1_lcssa;
      var $9 = $_lcssa;
      __label__ = 31;
      break;
    }
   case 26:
    var $7 = HEAP32[$exp_b10 >> 2];
    if (($7 | 0) == -1) {
      __label__ = 27;
      break;
    } else {
      __label__ = 29;
      break;
    }
   case 27:
    var $incdec_ptr82 = $ascii_addr_2_lcssa - 1 | 0;
    if (HEAP8[$incdec_ptr82] << 24 >> 24 == 46) {
      __label__ = 28;
      break;
    } else {
      var $ascii_addr_4 = $incdec_ptr82;
      var $size_addr_4 = $size_addr_2_lcssa;
      __label__ = 30;
      break;
    }
   case 28:
    HEAP32[$exp_b10 >> 2] = 1;
    var $ascii_addr_4 = $incdec_ptr82;
    var $size_addr_4 = $size_addr_2_lcssa + 1 | 0;
    __label__ = 30;
    break;
   case 29:
    var $inc90 = $7 + 1 | 0;
    HEAP32[$exp_b10 >> 2] = $inc90;
    var $ascii_addr_4 = $ascii_addr_2_lcssa;
    var $size_addr_4 = $size_addr_2_lcssa;
    __label__ = 30;
    break;
   case 30:
    var $size_addr_4;
    var $ascii_addr_4;
    tempDoubleF64[0] = 1, HEAP32[$d >> 2] = tempDoubleI32[0], HEAP32[$d + 4 >> 2] = tempDoubleI32[1];
    var $cdigits_311 = $cdigits_1_lcssa;
    var $clead_212 = $clead_0;
    var $czero_313 = $czero_1;
    var $fp_addr_315 = 0;
    var $size_addr_616 = $size_addr_4;
    var $ascii_addr_617 = $ascii_addr_4;
    __label__ = 33;
    break;
   case 31:
    var $9;
    var $cdigits_3;
    var $fp_addr_3;
    var $size_addr_6;
    var $ascii_addr_6;
    if ($9 == 0) {
      __label__ = 32;
      break;
    } else {
      var $cdigits_311 = $cdigits_3;
      var $clead_212 = $clead_0;
      var $czero_313 = $czero_1;
      var $fp_addr_315 = $fp_addr_3;
      var $size_addr_616 = $size_addr_6;
      var $ascii_addr_617 = $ascii_addr_6;
      __label__ = 33;
      break;
    }
   case 32:
    var $ascii_addr_12 = $ascii_addr_6;
    var $size_addr_12 = $size_addr_6;
    var $czero_5 = $czero_1 + 1 | 0;
    var $clead_3 = (($cdigits_3 | 0) == 0 & 1) + $clead_0 | 0;
    var $cdigits_4 = $cdigits_3;
    var $fp_addr_314 = $fp_addr_3;
    __label__ = 44;
    break;
   case 33:
    var $ascii_addr_617;
    var $size_addr_616;
    var $fp_addr_315;
    var $czero_313;
    var $clead_212;
    var $cdigits_311;
    var $10 = HEAPU32[$exp_b10 >> 2];
    var $cmp11243 = ($10 | 0) != -1;
    if (($czero_313 | 0) > 0) {
      var $czero_444 = $czero_313;
      var $size_addr_745 = $size_addr_616;
      var $ascii_addr_746 = $ascii_addr_617;
      var $11 = $10;
      var $cmp11247 = $cmp11243;
      __label__ = 34;
      break;
    } else {
      var $czero_4_lcssa = $czero_313;
      var $size_addr_7_lcssa = $size_addr_616;
      var $ascii_addr_7_lcssa = $ascii_addr_617;
      var $_lcssa41 = $10;
      var $cmp112_lcssa = $cmp11243;
      __label__ = 39;
      break;
    }
   case 34:
    var $cmp11247;
    var $11;
    var $ascii_addr_746;
    var $size_addr_745;
    var $czero_444;
    if ($cmp11247) {
      __label__ = 35;
      break;
    } else {
      var $ascii_addr_9 = $ascii_addr_746;
      var $size_addr_9 = $size_addr_745;
      __label__ = 38;
      break;
    }
   case 35:
    if (($11 | 0) == 0) {
      __label__ = 36;
      break;
    } else {
      var $ascii_addr_8 = $ascii_addr_746;
      var $size_addr_8 = $size_addr_745;
      var $12 = $11;
      __label__ = 37;
      break;
    }
   case 36:
    HEAP8[$ascii_addr_746] = 46;
    var $ascii_addr_8 = $ascii_addr_746 + 1 | 0;
    var $size_addr_8 = $size_addr_745 - 1 | 0;
    var $12 = HEAP32[$exp_b10 >> 2];
    __label__ = 37;
    break;
   case 37:
    var $12;
    var $size_addr_8;
    var $ascii_addr_8;
    HEAP32[$exp_b10 >> 2] = $12 - 1 | 0;
    var $ascii_addr_9 = $ascii_addr_8;
    var $size_addr_9 = $size_addr_8;
    __label__ = 38;
    break;
   case 38:
    var $size_addr_9;
    var $ascii_addr_9;
    var $incdec_ptr123 = $ascii_addr_9 + 1 | 0;
    HEAP8[$ascii_addr_9] = 48;
    var $dec124 = $czero_444 - 1 | 0;
    var $13 = HEAP32[$exp_b10 >> 2];
    var $cmp112 = ($13 | 0) != -1;
    if (($dec124 | 0) > 0) {
      var $czero_444 = $dec124;
      var $size_addr_745 = $size_addr_9;
      var $ascii_addr_746 = $incdec_ptr123;
      var $11 = $13;
      var $cmp11247 = $cmp112;
      __label__ = 34;
      break;
    } else {
      var $czero_4_lcssa = 0;
      var $size_addr_7_lcssa = $size_addr_9;
      var $ascii_addr_7_lcssa = $incdec_ptr123;
      var $_lcssa41 = $13;
      var $cmp112_lcssa = $cmp112;
      __label__ = 39;
      break;
    }
   case 39:
    var $cmp112_lcssa;
    var $_lcssa41;
    var $ascii_addr_7_lcssa;
    var $size_addr_7_lcssa;
    var $czero_4_lcssa;
    if ($cmp112_lcssa) {
      __label__ = 40;
      break;
    } else {
      var $ascii_addr_11 = $ascii_addr_7_lcssa;
      var $size_addr_11 = $size_addr_7_lcssa;
      __label__ = 43;
      break;
    }
   case 40:
    if (($_lcssa41 | 0) == 0) {
      __label__ = 41;
      break;
    } else {
      var $ascii_addr_10 = $ascii_addr_7_lcssa;
      var $size_addr_10 = $size_addr_7_lcssa;
      var $14 = $_lcssa41;
      __label__ = 42;
      break;
    }
   case 41:
    HEAP8[$ascii_addr_7_lcssa] = 46;
    var $ascii_addr_10 = $ascii_addr_7_lcssa + 1 | 0;
    var $size_addr_10 = $size_addr_7_lcssa - 1 | 0;
    var $14 = HEAP32[$exp_b10 >> 2];
    __label__ = 42;
    break;
   case 42:
    var $14;
    var $size_addr_10;
    var $ascii_addr_10;
    HEAP32[$exp_b10 >> 2] = $14 - 1 | 0;
    var $ascii_addr_11 = $ascii_addr_10;
    var $size_addr_11 = $size_addr_10;
    __label__ = 43;
    break;
   case 43:
    var $size_addr_11;
    var $ascii_addr_11;
    var $15 = (tempDoubleI32[0] = HEAP32[$d >> 2], tempDoubleI32[1] = HEAP32[$d + 4 >> 2], tempDoubleF64[0]);
    HEAP8[$ascii_addr_11] = ($15 & -1) + 48 & 255;
    var $ascii_addr_12 = $ascii_addr_11 + 1 | 0;
    var $size_addr_12 = $size_addr_11;
    var $czero_5 = $czero_4_lcssa;
    var $clead_3 = 0;
    var $cdigits_4 = $czero_313 + 1 - $clead_212 + $cdigits_311 | 0;
    var $fp_addr_314 = $fp_addr_315;
    __label__ = 44;
    break;
   case 44:
    var $fp_addr_314;
    var $cdigits_4;
    var $clead_3;
    var $czero_5;
    var $size_addr_12;
    var $ascii_addr_12;
    if (($cdigits_4 - $clead_3 + $czero_5 | 0) < 5 & $fp_addr_314 > 2.2250738585072014e-308) {
      var $ascii_addr_1 = $ascii_addr_12;
      var $size_addr_1 = $size_addr_12;
      var $fp_addr_2 = $fp_addr_314;
      var $czero_1 = $czero_5;
      var $clead_0 = $clead_3;
      var $cdigits_0 = $cdigits_4;
      __label__ = 13;
      break;
    } else {
      __label__ = 45;
      break;
    }
   case 45:
    var $16 = HEAPU32[$exp_b10 >> 2];
    if (($16 + 1 | 0) >>> 0 < 4) {
      __label__ = 46;
      break;
    } else {
      __label__ = 49;
      break;
    }
   case 46:
    HEAP32[$exp_b10 >> 2] = $16 - 1 | 0;
    if (($16 | 0) > 0) {
      var $ascii_addr_1329 = $ascii_addr_12;
      __label__ = 47;
      break;
    } else {
      var $ascii_addr_13_lcssa = $ascii_addr_12;
      __label__ = 48;
      break;
    }
   case 47:
    var $ascii_addr_1329;
    var $incdec_ptr162 = $ascii_addr_1329 + 1 | 0;
    HEAP8[$ascii_addr_1329] = 48;
    var $_pr18 = HEAP32[$exp_b10 >> 2];
    var $dec158 = $_pr18 - 1 | 0;
    HEAP32[$exp_b10 >> 2] = $dec158;
    if (($_pr18 | 0) > 0) {
      var $ascii_addr_1329 = $incdec_ptr162;
      __label__ = 47;
      break;
    } else {
      var $ascii_addr_13_lcssa = $incdec_ptr162;
      __label__ = 48;
      break;
    }
   case 48:
    var $ascii_addr_13_lcssa;
    HEAP8[$ascii_addr_13_lcssa] = 0;
    __label__ = 63;
    break;
   case 49:
    var $sub165 = $size_addr_12 - $cdigits_4 | 0;
    var $incdec_ptr166 = $ascii_addr_12 + 1 | 0;
    HEAP8[$ascii_addr_12] = 69;
    var $18 = HEAP32[$exp_b10 >> 2];
    if (($18 | 0) < 0) {
      __label__ = 50;
      break;
    } else {
      __label__ = 51;
      break;
    }
   case 50:
    HEAP8[$incdec_ptr166] = 45;
    var $uexp_b10_0 = -HEAP32[$exp_b10 >> 2] | 0;
    var $ascii_addr_14 = $ascii_addr_12 + 2 | 0;
    var $size_addr_13 = $sub165 - 2 | 0;
    __label__ = 52;
    break;
   case 51:
    var $uexp_b10_0 = $18;
    var $ascii_addr_14 = $incdec_ptr166;
    var $size_addr_13 = $sub165 - 1 | 0;
    __label__ = 52;
    break;
   case 52:
    var $size_addr_13;
    var $ascii_addr_14;
    var $uexp_b10_0;
    if (($uexp_b10_0 | 0) == 0) {
      var $cdigits_5_lcssa = 0;
      __label__ = 54;
      break;
    } else {
      var $cdigits_524 = 0;
      var $uexp_b10_125 = $uexp_b10_0;
      __label__ = 53;
      break;
    }
   case 53:
    var $uexp_b10_125;
    var $cdigits_524;
    var $inc182 = $cdigits_524 + 1 | 0;
    HEAP8[$exponent + $cdigits_524 | 0] = (($uexp_b10_125 >>> 0) % 10 | 48) & 255;
    var $div183 = Math.floor(($uexp_b10_125 >>> 0) / 10);
    if ($uexp_b10_125 >>> 0 < 10) {
      var $cdigits_5_lcssa = $inc182;
      __label__ = 54;
      break;
    } else {
      var $cdigits_524 = $inc182;
      var $uexp_b10_125 = $div183;
      __label__ = 53;
      break;
    }
   case 54:
    var $cdigits_5_lcssa;
    if (($size_addr_13 | 0) > ($cdigits_5_lcssa | 0)) {
      __label__ = 55;
      break;
    } else {
      __label__ = 62;
      break;
    }
   case 55:
    if (($cdigits_5_lcssa | 0) > 0) {
      __label__ = 56;
      break;
    } else {
      var $ascii_addr_15_lcssa = $ascii_addr_14;
      __label__ = 58;
      break;
    }
   case 56:
    var $lftr_limit = $ascii_addr_14 + $cdigits_5_lcssa | 0;
    var $cdigits_621 = $cdigits_5_lcssa;
    var $ascii_addr_1522 = $ascii_addr_14;
    __label__ = 57;
    break;
   case 57:
    var $ascii_addr_1522;
    var $cdigits_621;
    var $dec192 = $cdigits_621 - 1 | 0;
    var $21 = HEAP8[$exponent + $dec192 | 0];
    var $incdec_ptr194 = $ascii_addr_1522 + 1 | 0;
    HEAP8[$ascii_addr_1522] = $21;
    if (($incdec_ptr194 | 0) == ($lftr_limit | 0)) {
      var $ascii_addr_15_lcssa = $lftr_limit;
      __label__ = 58;
      break;
    } else {
      var $cdigits_621 = $dec192;
      var $ascii_addr_1522 = $incdec_ptr194;
      __label__ = 57;
      break;
    }
   case 58:
    var $ascii_addr_15_lcssa;
    HEAP8[$ascii_addr_15_lcssa] = 0;
    __label__ = 63;
    break;
   case 59:
    var $incdec_ptr203 = $ascii_addr_0 + 1 | 0;
    if ($cmp9) {
      __label__ = 61;
      break;
    } else {
      __label__ = 60;
      break;
    }
   case 60:
    HEAP8[$ascii_addr_0] = 48;
    HEAP8[$incdec_ptr203] = 0;
    __label__ = 63;
    break;
   case 61:
    HEAP8[$ascii_addr_0] = 105;
    HEAP8[$incdec_ptr203] = 110;
    HEAP8[$ascii_addr_0 + 2 | 0] = 102;
    HEAP8[$ascii_addr_0 + 3 | 0] = 0;
    __label__ = 63;
    break;
   case 62:
    var $22 = $png_ptr;
    _png_error($22, STRING_TABLE.__str34313 | 0);
    __label__ = 63;
    break;
   case 63:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_ascii_from_fp["X"] = 1;

function _png_reciprocal2($a, $b) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $add = 1e15 / ($a | 0) / ($b | 0) + .5;
    var $call = _floor($add);
    if ($call <= 2147483647 & $call >= -2147483648) {
      __label__ = 2;
      break;
    } else {
      var $retval_0 = 0;
      __label__ = 3;
      break;
    }
   case 2:
    var $retval_0 = $call & -1;
    __label__ = 3;
    break;
   case 3:
    var $retval_0;
    return $retval_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_gamma_8bit_correct($value, $gamma_val) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($value | 0) != 0 & $value >>> 0 < 255) {
      __label__ = 2;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 2:
    var $div = ($value >>> 0) / 255;
    var $mul = ($gamma_val | 0) * 1e-5;
    var $0 = _llvm_pow_f64($div, $mul);
    var $add = $0 * 255 + .5;
    var $call = _floor($add);
    var $conv4 = $call >= 0 ? Math.floor($call) : Math.ceil($call);
    var $retval_0 = $conv4;
    __label__ = 4;
    break;
   case 3:
    var $retval_0 = $value & 255;
    __label__ = 4;
    break;
   case 4:
    var $retval_0;
    return $retval_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_gamma_16bit_correct($value, $gamma_val) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($value | 0) != 0 & $value >>> 0 < 65535) {
      __label__ = 2;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 2:
    var $div = ($value >>> 0) / 65535;
    var $mul = ($gamma_val | 0) * 1e-5;
    var $0 = _llvm_pow_f64($div, $mul);
    var $add = $0 * 65535 + .5;
    var $call = _floor($add);
    var $conv4 = $call >= 0 ? Math.floor($call) : Math.ceil($call);
    var $retval_0 = $conv4;
    __label__ = 4;
    break;
   case 3:
    var $retval_0 = $value & 65535;
    __label__ = 4;
    break;
   case 4:
    var $retval_0;
    return $retval_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_gamma_significant($gamma_val) {
  return ($gamma_val - 95e3 | 0) >>> 0 > 1e4 & 1;
}

function _png_safecat($buffer, $bufsize, $pos, $string) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($buffer | 0) != 0 & $pos >>> 0 < $bufsize >>> 0) {
      __label__ = 2;
      break;
    } else {
      var $pos_addr_2 = $pos;
      __label__ = 6;
      break;
    }
   case 2:
    if (($string | 0) == 0) {
      var $pos_addr_1 = $pos;
      __label__ = 5;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $sub = $bufsize - 1 | 0;
    var $0 = HEAPU8[$string];
    if ($0 << 24 >> 24 != 0 & $sub >>> 0 > $pos >>> 0) {
      var $pos_addr_05 = $pos;
      var $string_addr_06 = $string;
      var $1 = $0;
      __label__ = 4;
      break;
    } else {
      var $pos_addr_1 = $pos;
      __label__ = 5;
      break;
    }
   case 4:
    var $1;
    var $string_addr_06;
    var $pos_addr_05;
    var $incdec_ptr = $string_addr_06 + 1 | 0;
    var $inc = $pos_addr_05 + 1 | 0;
    HEAP8[$buffer + $pos_addr_05 | 0] = $1;
    var $2 = HEAPU8[$incdec_ptr];
    if ($2 << 24 >> 24 != 0 & $inc >>> 0 < $sub >>> 0) {
      var $pos_addr_05 = $inc;
      var $string_addr_06 = $incdec_ptr;
      var $1 = $2;
      __label__ = 4;
      break;
    } else {
      var $pos_addr_1 = $inc;
      __label__ = 5;
      break;
    }
   case 5:
    var $pos_addr_1;
    HEAP8[$buffer + $pos_addr_1 | 0] = 0;
    var $pos_addr_2 = $pos_addr_1;
    __label__ = 6;
    break;
   case 6:
    var $pos_addr_2;
    return $pos_addr_2;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_format_number($start, $end, $format, $number) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $incdec_ptr = $end - 1 | 0;
    HEAP8[$incdec_ptr] = 0;
    var $cmp16 = ($format | 0) == 5;
    var $output_0 = 0;
    var $end_addr_0 = $incdec_ptr;
    var $mincount_0 = 1;
    var $number_addr_0 = $number;
    var $count_0 = 0;
    __label__ = 2;
    break;
   case 2:
    var $count_0;
    var $number_addr_0;
    var $mincount_0;
    var $end_addr_0;
    var $output_0;
    if ($end_addr_0 >>> 0 > $start >>> 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 3:
    if (($number_addr_0 | 0) != 0 | ($count_0 | 0) < ($mincount_0 | 0)) {
      __label__ = 4;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 4:
    if (($format | 0) == 5) {
      __label__ = 5;
      break;
    } else if (($format | 0) == 2) {
      __label__ = 8;
      break;
    } else if (($format | 0) == 1) {
      var $mincount_1 = $mincount_0;
      __label__ = 9;
      break;
    } else if (($format | 0) == 4) {
      __label__ = 10;
      break;
    } else if (($format | 0) == 3) {
      var $mincount_2 = $mincount_0;
      __label__ = 11;
      break;
    } else {
      var $output_2 = $output_0;
      var $end_addr_2 = $end_addr_0;
      var $mincount_3 = $mincount_0;
      var $number_addr_1 = 0;
      __label__ = 12;
      break;
    }
   case 5:
    var $rem = ($number_addr_0 >>> 0) % 10;
    if (($output_0 | 0) == 0 & ($rem | 0) == 0) {
      var $output_1 = 0;
      var $end_addr_1 = $end_addr_0;
      __label__ = 7;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    var $arrayidx = STRING_TABLE._png_format_number_digits + $rem | 0;
    var $0 = HEAP8[$arrayidx];
    var $incdec_ptr5 = $end_addr_0 - 1 | 0;
    HEAP8[$incdec_ptr5] = $0;
    var $output_1 = 1;
    var $end_addr_1 = $incdec_ptr5;
    __label__ = 7;
    break;
   case 7:
    var $end_addr_1;
    var $output_1;
    var $div = Math.floor(($number_addr_0 >>> 0) / 10);
    var $output_2 = $output_1;
    var $end_addr_2 = $end_addr_1;
    var $mincount_3 = 5;
    var $number_addr_1 = $div;
    __label__ = 12;
    break;
   case 8:
    var $mincount_1 = 2;
    __label__ = 9;
    break;
   case 9:
    var $mincount_1;
    var $arrayidx9 = STRING_TABLE._png_format_number_digits + ($number_addr_0 >>> 0) % 10 | 0;
    var $1 = HEAP8[$arrayidx9];
    var $incdec_ptr10 = $end_addr_0 - 1 | 0;
    HEAP8[$incdec_ptr10] = $1;
    var $div11 = Math.floor(($number_addr_0 >>> 0) / 10);
    var $output_2 = $output_0;
    var $end_addr_2 = $incdec_ptr10;
    var $mincount_3 = $mincount_1;
    var $number_addr_1 = $div11;
    __label__ = 12;
    break;
   case 10:
    var $mincount_2 = 2;
    __label__ = 11;
    break;
   case 11:
    var $mincount_2;
    var $arrayidx14 = STRING_TABLE._png_format_number_digits + ($number_addr_0 & 15) | 0;
    var $2 = HEAP8[$arrayidx14];
    var $incdec_ptr15 = $end_addr_0 - 1 | 0;
    HEAP8[$incdec_ptr15] = $2;
    var $output_2 = $output_0;
    var $end_addr_2 = $incdec_ptr15;
    var $mincount_3 = $mincount_2;
    var $number_addr_1 = $number_addr_0 >>> 4;
    __label__ = 12;
    break;
   case 12:
    var $number_addr_1;
    var $mincount_3;
    var $end_addr_2;
    var $output_2;
    var $inc = $count_0 + 1 | 0;
    if ($cmp16 & ($inc | 0) == 5 & $end_addr_2 >>> 0 > $start >>> 0) {
      __label__ = 13;
      break;
    } else {
      var $output_0 = $output_2;
      var $end_addr_0 = $end_addr_2;
      var $mincount_0 = $mincount_3;
      var $number_addr_0 = $number_addr_1;
      var $count_0 = $inc;
      __label__ = 2;
      break;
    }
   case 13:
    if (($output_2 | 0) == 0) {
      __label__ = 15;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 14:
    var $incdec_ptr24 = $end_addr_2 - 1 | 0;
    HEAP8[$incdec_ptr24] = 46;
    var $output_0 = $output_2;
    var $end_addr_0 = $incdec_ptr24;
    var $mincount_0 = $mincount_3;
    var $number_addr_0 = $number_addr_1;
    var $count_0 = $inc;
    __label__ = 2;
    break;
   case 15:
    if (($number_addr_1 | 0) == 0) {
      __label__ = 16;
      break;
    } else {
      var $output_0 = 0;
      var $end_addr_0 = $end_addr_2;
      var $mincount_0 = $mincount_3;
      var $number_addr_0 = $number_addr_1;
      var $count_0 = $inc;
      __label__ = 2;
      break;
    }
   case 16:
    var $incdec_ptr27 = $end_addr_2 - 1 | 0;
    HEAP8[$incdec_ptr27] = 48;
    var $output_0 = 0;
    var $end_addr_0 = $incdec_ptr27;
    var $mincount_0 = $mincount_3;
    var $number_addr_0 = 0;
    var $count_0 = $inc;
    __label__ = 2;
    break;
   case 17:
    return $end_addr_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_format_number["X"] = 1;

function _png_gamma_correct($png_ptr_0_57_val, $value, $gamma_val) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if ($png_ptr_0_57_val << 24 >> 24 == 8) {
      __label__ = 2;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 2:
    var $call = _png_gamma_8bit_correct($value, $gamma_val);
    var $retval_0 = $call & 255;
    __label__ = 4;
    break;
   case 3:
    var $call3 = _png_gamma_16bit_correct($value, $gamma_val);
    var $retval_0 = $call3;
    __label__ = 4;
    break;
   case 4:
    var $retval_0;
    return $retval_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_destroy_gamma_table($png_ptr) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $gamma_table = $png_ptr + 360 | 0;
    var $0 = HEAP32[$gamma_table >> 2];
    var $1 = $png_ptr;
    _png_free($1, $0);
    HEAP32[$gamma_table >> 2] = 0;
    var $gamma_16_table = $png_ptr + 364 | 0;
    var $2 = HEAP32[$gamma_16_table >> 2];
    if (($2 | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $shl = 1 << 8 - HEAP32[$png_ptr + 348 >> 2];
    if (($shl | 0) > 0) {
      var $i_02 = 0;
      var $4 = $2;
      __label__ = 3;
      break;
    } else {
      var $_lcssa = $2;
      __label__ = 4;
      break;
    }
   case 3:
    var $4;
    var $i_02;
    var $6 = HEAP32[$4 + ($i_02 << 2) >> 2];
    _png_free($1, $6);
    var $inc = $i_02 + 1 | 0;
    var $7 = HEAP32[$gamma_16_table >> 2];
    if (($inc | 0) == ($shl | 0)) {
      var $_lcssa = $7;
      __label__ = 4;
      break;
    } else {
      var $i_02 = $inc;
      var $4 = $7;
      __label__ = 3;
      break;
    }
   case 4:
    var $_lcssa;
    _png_free($1, $_lcssa);
    HEAP32[$gamma_16_table >> 2] = 0;
    __label__ = 5;
    break;
   case 5:
    var $gamma_from_1 = $png_ptr + 368 | 0;
    var $9 = HEAP32[$gamma_from_1 >> 2];
    _png_free($1, $9);
    HEAP32[$gamma_from_1 >> 2] = 0;
    var $gamma_to_1 = $png_ptr + 372 | 0;
    var $10 = HEAP32[$gamma_to_1 >> 2];
    _png_free($1, $10);
    HEAP32[$gamma_to_1 >> 2] = 0;
    var $gamma_16_from_1 = $png_ptr + 376 | 0;
    var $11 = HEAP32[$gamma_16_from_1 >> 2];
    if (($11 | 0) == 0) {
      __label__ = 9;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    var $shl14 = 1 << 8 - HEAP32[$png_ptr + 348 >> 2];
    if (($shl14 | 0) > 0) {
      var $i10_05 = 0;
      var $13 = $11;
      __label__ = 7;
      break;
    } else {
      var $_lcssa3 = $11;
      __label__ = 8;
      break;
    }
   case 7:
    var $13;
    var $i10_05;
    var $15 = HEAP32[$13 + ($i10_05 << 2) >> 2];
    _png_free($1, $15);
    var $inc21 = $i10_05 + 1 | 0;
    var $16 = HEAP32[$gamma_16_from_1 >> 2];
    if (($inc21 | 0) == ($shl14 | 0)) {
      var $_lcssa3 = $16;
      __label__ = 8;
      break;
    } else {
      var $i10_05 = $inc21;
      var $13 = $16;
      __label__ = 7;
      break;
    }
   case 8:
    var $_lcssa3;
    _png_free($1, $_lcssa3);
    HEAP32[$gamma_16_from_1 >> 2] = 0;
    __label__ = 9;
    break;
   case 9:
    var $gamma_16_to_1 = $png_ptr + 380 | 0;
    var $18 = HEAP32[$gamma_16_to_1 >> 2];
    if (($18 | 0) == 0) {
      __label__ = 13;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 10:
    var $shl32 = 1 << 8 - HEAP32[$png_ptr + 348 >> 2];
    if (($shl32 | 0) > 0) {
      var $i28_09 = 0;
      var $20 = $18;
      __label__ = 11;
      break;
    } else {
      var $_lcssa7 = $18;
      __label__ = 12;
      break;
    }
   case 11:
    var $20;
    var $i28_09;
    var $22 = HEAP32[$20 + ($i28_09 << 2) >> 2];
    _png_free($1, $22);
    var $inc39 = $i28_09 + 1 | 0;
    var $23 = HEAP32[$gamma_16_to_1 >> 2];
    if (($inc39 | 0) == ($shl32 | 0)) {
      var $_lcssa7 = $23;
      __label__ = 12;
      break;
    } else {
      var $i28_09 = $inc39;
      var $20 = $23;
      __label__ = 11;
      break;
    }
   case 12:
    var $_lcssa7;
    _png_free($1, $_lcssa7);
    HEAP32[$gamma_16_to_1 >> 2] = 0;
    __label__ = 13;
    break;
   case 13:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_destroy_gamma_table["X"] = 1;

function _png_build_gamma_table($png_ptr, $bit_depth) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $gamma_table = $png_ptr + 360 | 0;
    if ((HEAP32[$gamma_table >> 2] | 0) == 0) {
      __label__ = 2;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 2:
    if ((HEAP32[$png_ptr + 364 >> 2] | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $2 = $png_ptr;
    _png_warning($2, STRING_TABLE.__str36315 | 0);
    _png_destroy_gamma_table($png_ptr);
    __label__ = 4;
    break;
   case 4:
    if (($bit_depth | 0) < 9) {
      __label__ = 5;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 5:
    var $screen_gamma = $png_ptr + 356 | 0;
    var $3 = HEAP32[$screen_gamma >> 2];
    if (($3 | 0) > 0) {
      __label__ = 6;
      break;
    } else {
      var $cond = 1e5;
      __label__ = 7;
      break;
    }
   case 6:
    var $4 = HEAP32[$png_ptr + 352 >> 2];
    var $call = _png_reciprocal2($4, $3);
    var $cond = $call;
    __label__ = 7;
    break;
   case 7:
    var $cond;
    _png_build_8bit_table($png_ptr, $gamma_table, $cond);
    if ((HEAP32[$png_ptr + 92 >> 2] & 6291584 | 0) == 0) {
      __label__ = 28;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    var $gamma_to_1 = $png_ptr + 372 | 0;
    var $gamma8 = $png_ptr + 352 | 0;
    var $6 = HEAP32[$gamma8 >> 2];
    var $call9 = _png_reciprocal($6);
    _png_build_8bit_table($png_ptr, $gamma_to_1, $call9);
    var $gamma_from_1 = $png_ptr + 368 | 0;
    var $7 = HEAP32[$screen_gamma >> 2];
    if (($7 | 0) > 0) {
      __label__ = 9;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 9:
    var $call14 = _png_reciprocal($7);
    var $cond18 = $call14;
    __label__ = 11;
    break;
   case 10:
    var $cond18 = HEAP32[$gamma8 >> 2];
    __label__ = 11;
    break;
   case 11:
    var $cond18;
    _png_build_8bit_table($png_ptr, $gamma_from_1, $cond18);
    __label__ = 28;
    break;
   case 12:
    if ((HEAP8[$png_ptr + 291 | 0] & 2) << 24 >> 24 == 0) {
      __label__ = 15;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 13:
    var $10 = HEAPU8[$png_ptr + 384 | 0];
    var $11 = HEAPU8[$png_ptr + 385 | 0];
    var $sig_bit_0 = ($11 & 255) > ($10 & 255) ? $11 : $10;
    var $12 = HEAPU8[$png_ptr + 386 | 0];
    if (($12 & 255) > ($sig_bit_0 & 255)) {
      __label__ = 14;
      break;
    } else {
      var $sig_bit_1 = $sig_bit_0;
      __label__ = 16;
      break;
    }
   case 14:
    var $sig_bit_1 = $12;
    __label__ = 16;
    break;
   case 15:
    var $sig_bit_1 = HEAP8[$png_ptr + 387 | 0];
    __label__ = 16;
    break;
   case 16:
    var $sig_bit_1;
    var $shift_0 = $sig_bit_1 << 24 >> 24 != 0 & ($sig_bit_1 & 255) < 16 ? 16 - $sig_bit_1 & 255 : 0;
    var $transformations56 = $png_ptr + 92 | 0;
    var $and57 = HEAP32[$transformations56 >> 2] & 67109888;
    var $shift_1 = ($and57 | 0) != 0 & ($shift_0 & 255) < 5 ? 5 : $shift_0;
    var $conv71 = ($shift_1 & 255) > 8 ? 8 : $shift_1 & 255;
    HEAP32[$png_ptr + 348 >> 2] = $conv71;
    var $gamma_16_table76 = $png_ptr + 364 | 0;
    var $screen_gamma78 = $png_ptr + 356 | 0;
    var $16 = HEAPU32[$screen_gamma78 >> 2];
    var $cmp79 = ($16 | 0) > 0;
    if (($and57 | 0) == 0) {
      __label__ = 20;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 17:
    if ($cmp79) {
      __label__ = 18;
      break;
    } else {
      var $cond87 = 1e5;
      __label__ = 19;
      break;
    }
   case 18:
    var $17 = HEAP32[$png_ptr + 352 >> 2];
    var $call84 = _png_product2($17, $16);
    var $cond87 = $call84;
    __label__ = 19;
    break;
   case 19:
    var $cond87;
    _png_build_16to8_table($png_ptr, $gamma_16_table76, $conv71, $cond87);
    __label__ = 23;
    break;
   case 20:
    if ($cmp79) {
      __label__ = 21;
      break;
    } else {
      var $cond100 = 1e5;
      __label__ = 22;
      break;
    }
   case 21:
    var $18 = HEAP32[$png_ptr + 352 >> 2];
    var $call97 = _png_reciprocal2($18, $16);
    var $cond100 = $call97;
    __label__ = 22;
    break;
   case 22:
    var $cond100;
    _png_build_16bit_table($png_ptr, $gamma_16_table76, $conv71, $cond100);
    __label__ = 23;
    break;
   case 23:
    if ((HEAP32[$transformations56 >> 2] & 6291584 | 0) == 0) {
      __label__ = 28;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 24:
    var $gamma_16_to_1 = $png_ptr + 380 | 0;
    var $gamma107 = $png_ptr + 352 | 0;
    var $20 = HEAP32[$gamma107 >> 2];
    var $call108 = _png_reciprocal($20);
    _png_build_16bit_table($png_ptr, $gamma_16_to_1, $conv71, $call108);
    var $gamma_16_from_1 = $png_ptr + 376 | 0;
    var $21 = HEAP32[$screen_gamma78 >> 2];
    if (($21 | 0) > 0) {
      __label__ = 25;
      break;
    } else {
      __label__ = 26;
      break;
    }
   case 25:
    var $call115 = _png_reciprocal($21);
    var $cond119 = $call115;
    __label__ = 27;
    break;
   case 26:
    var $cond119 = HEAP32[$gamma107 >> 2];
    __label__ = 27;
    break;
   case 27:
    var $cond119;
    _png_build_16bit_table($png_ptr, $gamma_16_from_1, $conv71, $cond119);
    __label__ = 28;
    break;
   case 28:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_build_gamma_table["X"] = 1;

function _png_build_8bit_table($png_ptr, $ptable, $gamma_val) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $0 = $png_ptr;
    var $call = _png_malloc($0, 256);
    HEAP32[$ptable >> 2] = $call;
    var $call1 = _png_gamma_significant($gamma_val);
    if (($call1 | 0) == 0) {
      var $i_13 = 0;
      __label__ = 3;
      break;
    } else {
      var $i_01 = 0;
      __label__ = 2;
      break;
    }
   case 2:
    var $i_01;
    var $call2 = _png_gamma_8bit_correct($i_01, $gamma_val);
    HEAP8[$call + $i_01 | 0] = $call2;
    var $inc = $i_01 + 1 | 0;
    if (($inc | 0) == 256) {
      __label__ = 4;
      break;
    } else {
      var $i_01 = $inc;
      __label__ = 2;
      break;
    }
   case 3:
    var $i_13;
    HEAP8[$call + $i_13 | 0] = $i_13 & 255;
    var $inc8 = $i_13 + 1 | 0;
    if (($inc8 | 0) == 256) {
      __label__ = 4;
      break;
    } else {
      var $i_13 = $inc8;
      __label__ = 3;
      break;
    }
   case 4:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_build_16to8_table($png_ptr, $ptable, $shift, $gamma_val) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $sub = 8 - $shift | 0;
    var $shl = 1 << $sub;
    var $shl2 = 1 << 16 - $shift;
    var $mul = $shl << 2;
    var $0 = $png_ptr;
    var $call = _png_calloc($0, $mul);
    var $1 = $call;
    HEAP32[$ptable >> 2] = $1;
    var $i_07 = 0;
    __label__ = 3;
    break;
   case 2:
    var $sub3 = $shl2 - 1 | 0;
    var $shr18 = 255 >>> ($shift >>> 0);
    var $i_15 = 0;
    var $last_06 = 0;
    __label__ = 5;
    break;
   case 3:
    var $i_07;
    var $call4 = _png_malloc($0, 512);
    HEAP32[$1 + ($i_07 << 2) >> 2] = $call4;
    var $inc = $i_07 + 1 | 0;
    if ($inc >>> 0 < $shl >>> 0) {
      var $i_07 = $inc;
      __label__ = 3;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 4:
    var $shl26 = $shl << 8;
    if ($last_1_lcssa >>> 0 < $shl26 >>> 0) {
      var $last_22 = $last_1_lcssa;
      __label__ = 9;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 5:
    var $last_06;
    var $i_15;
    var $mul8 = $i_15 * 257 | 0;
    var $conv = $mul8 & 65535;
    var $call10 = _png_gamma_16bit_correct($mul8 + 128 | 0, $gamma_val);
    var $conv11 = $call10 & 65535;
    var $add13 = $conv11 * $sub3 + 32768 | 0;
    var $div = Math.floor(($add13 >>> 0) / 65535);
    if ($last_06 >>> 0 < ($div + 1 | 0) >>> 0) {
      __label__ = 6;
      break;
    } else {
      var $last_1_lcssa = $last_06;
      __label__ = 8;
      break;
    }
   case 6:
    var $4 = $sub3 * $conv11 + 32768 | 0;
    var $5 = Math.floor(($4 >>> 0) / 65535);
    var $6 = $5 + 1 | 0;
    var $last_14 = $last_06;
    __label__ = 7;
    break;
   case 7:
    var $last_14;
    HEAP16[HEAP32[$1 + (($last_14 & $shr18) << 2) >> 2] + ($last_14 >>> ($sub >>> 0) << 1) >> 1] = $conv;
    var $inc21 = $last_14 + 1 | 0;
    if (($inc21 | 0) == ($6 | 0)) {
      var $last_1_lcssa = $6;
      __label__ = 8;
      break;
    } else {
      var $last_14 = $inc21;
      __label__ = 7;
      break;
    }
   case 8:
    var $last_1_lcssa;
    var $inc23 = $i_15 + 1 | 0;
    if (($inc23 | 0) == 255) {
      __label__ = 4;
      break;
    } else {
      var $i_15 = $inc23;
      var $last_06 = $last_1_lcssa;
      __label__ = 5;
      break;
    }
   case 9:
    var $last_22;
    HEAP16[HEAP32[$1 + (($last_22 & $shr18) << 2) >> 2] + ($last_22 >>> ($sub >>> 0) << 1) >> 1] = -1;
    var $inc36 = $last_22 + 1 | 0;
    if (($inc36 | 0) == ($shl26 | 0)) {
      __label__ = 10;
      break;
    } else {
      var $last_22 = $inc36;
      __label__ = 9;
      break;
    }
   case 10:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_build_16to8_table["X"] = 1;

function _png_product2($a, $b) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $add = ($a | 0) * 1e-5 * ($b | 0) + .5;
    var $call = _floor($add);
    if ($call <= 2147483647 & $call >= -2147483648) {
      __label__ = 2;
      break;
    } else {
      var $retval_0 = 0;
      __label__ = 3;
      break;
    }
   case 2:
    var $retval_0 = $call & -1;
    __label__ = 3;
    break;
   case 3:
    var $retval_0;
    return $retval_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_build_16bit_table($png_ptr, $ptable, $shift, $gamma_val) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $sub = 8 - $shift | 0;
    var $shl = 1 << $sub;
    var $sub3 = (1 << 16 - $shift) - 1 | 0;
    var $shl5 = 1 << 15 - $shift;
    var $mul = $shl << 2;
    var $0 = $png_ptr;
    var $call = _png_calloc($0, $mul);
    var $1 = $call;
    HEAP32[$ptable >> 2] = $1;
    var $call7 = _png_gamma_significant($gamma_val);
    var $tobool = ($call7 | 0) == 0;
    var $conv13 = $sub3 >>> 0;
    var $mul15 = ($gamma_val | 0) * 1e-5;
    var $tobool30 = ($shift | 0) == 0;
    var $i_04 = 0;
    __label__ = 2;
    break;
   case 2:
    var $i_04;
    var $call6 = _png_malloc($0, 512);
    var $2 = $call6;
    HEAP32[$1 + ($i_04 << 2) >> 2] = $2;
    if ($tobool) {
      var $j21_03 = 0;
      __label__ = 4;
      break;
    } else {
      var $j_01 = 0;
      __label__ = 3;
      break;
    }
   case 3:
    var $j_01;
    var $div = ((($j_01 << $sub) + $i_04 | 0) >>> 0) / $conv13;
    var $3 = _llvm_pow_f64($div, $mul15);
    var $add17 = $3 * 65535 + .5;
    var $call18 = _floor($add17);
    var $conv19 = $call18 >= 0 ? Math.floor($call18) : Math.ceil($call18);
    HEAP16[$2 + ($j_01 << 1) >> 1] = $conv19;
    var $inc = $j_01 + 1 | 0;
    if (($inc | 0) == 256) {
      __label__ = 7;
      break;
    } else {
      var $j_01 = $inc;
      __label__ = 3;
      break;
    }
   case 4:
    var $j21_03;
    var $add29 = ($j21_03 << $sub) + $i_04 | 0;
    if ($tobool30) {
      var $ig26_0 = $add29;
      __label__ = 6;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $add33 = $add29 * 65535 + $shl5 | 0;
    var $div34 = Math.floor(($add33 >>> 0) / ($sub3 >>> 0));
    var $ig26_0 = $div34;
    __label__ = 6;
    break;
   case 6:
    var $ig26_0;
    HEAP16[$2 + ($j21_03 << 1) >> 1] = $ig26_0 & 65535;
    var $inc38 = $j21_03 + 1 | 0;
    if (($inc38 | 0) == 256) {
      __label__ = 7;
      break;
    } else {
      var $j21_03 = $inc38;
      __label__ = 4;
      break;
    }
   case 7:
    var $inc42 = $i_04 + 1 | 0;
    if ($inc42 >>> 0 < $shl >>> 0) {
      var $i_04 = $inc42;
      __label__ = 2;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_build_16bit_table["X"] = 1;

function _png_error($png_ptr, $error_message) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $error_fn11 = HEAP32[$png_ptr + 44 >> 2];
    if (($error_fn11 | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $0 = $error_fn11;
    FUNCTION_TABLE[$0]($png_ptr, $error_message);
    __label__ = 4;
    break;
   case 4:
    _png_default_error($png_ptr, $error_message);
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_default_error($png_ptr, $error_message) {
  var __stackBase__ = STACKTOP;
  var $0 = HEAP32[_stderr >> 2];
  var $cond = ($error_message | 0) != 0 ? $error_message : STRING_TABLE.__str4581 | 0;
  var $call = _fprintf($0, STRING_TABLE.__str3580 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $cond, tempInt));
  var $1 = HEAP32[_stderr >> 2];
  var $fputc = _fputc(10, $1);
  _png_longjmp($png_ptr);
  STACKTOP = __stackBase__;
  return;
}

function _png_warning($png_ptr, $warning_message) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0) {
      var $offset_13 = 0;
      __label__ = 8;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    if (HEAP8[$warning_message] << 24 >> 24 == 35) {
      var $offset_0 = 1;
      __label__ = 3;
      break;
    } else {
      var $offset_12 = 0;
      __label__ = 6;
      break;
    }
   case 3:
    var $offset_0;
    if (($offset_0 | 0) < 15) {
      __label__ = 4;
      break;
    } else {
      var $offset_12 = $offset_0;
      __label__ = 6;
      break;
    }
   case 4:
    if (HEAP8[$warning_message + $offset_0 | 0] << 24 >> 24 == 32) {
      var $offset_12 = $offset_0;
      __label__ = 6;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $offset_0 = $offset_0 + 1 | 0;
    __label__ = 3;
    break;
   case 6:
    var $offset_12;
    var $warning_fn141 = HEAP32[$png_ptr + 48 >> 2];
    if (($warning_fn141 | 0) == 0) {
      var $offset_13 = $offset_12;
      __label__ = 8;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    var $2 = $warning_fn141;
    var $add_ptr = $warning_message + $offset_12 | 0;
    FUNCTION_TABLE[$2]($png_ptr, $add_ptr);
    __label__ = 9;
    break;
   case 8:
    var $offset_13;
    var $add_ptr20 = $warning_message + $offset_13 | 0;
    _png_default_warning($add_ptr20);
    __label__ = 9;
    break;
   case 9:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_default_warning($warning_message) {
  var __stackBase__ = STACKTOP;
  var $0 = HEAP32[_stderr >> 2];
  var $call = _fprintf($0, STRING_TABLE.__str1578 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $warning_message, tempInt));
  var $1 = HEAP32[_stderr >> 2];
  var $fputc = _fputc(10, $1);
  STACKTOP = __stackBase__;
  return;
}

function _png_warning_parameter($p, $number, $string) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $number_off = $number - 1 | 0;
    if ($number_off >>> 0 < 8) {
      __label__ = 2;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 2:
    var $arraydecay = $p + ($number_off << 5) | 0;
    var $call = _png_safecat($arraydecay, 32, 0, $string);
    __label__ = 3;
    break;
   case 3:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_warning_parameter_unsigned($p, $number, $format, $value) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 24;
  var $buffer = __stackBase__;
  var $arraydecay = $buffer | 0;
  var $add_ptr = $buffer + 24 | 0;
  var $call = _png_format_number($arraydecay, $add_ptr, $format, $value);
  _png_warning_parameter($p, $number, $call);
  STACKTOP = __stackBase__;
  return;
}

function _png_warning_parameter_signed($p, $number, $format, $value) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 24;
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $buffer = __stackBase__;
    var $cmp = ($value | 0) < 0;
    var $add_value = $cmp ? -$value | 0 : $value;
    var $arraydecay = $buffer | 0;
    var $add_ptr = $buffer + 24 | 0;
    var $call = _png_format_number($arraydecay, $add_ptr, $format, $add_value);
    if ($cmp & $call >>> 0 > $arraydecay >>> 0) {
      __label__ = 2;
      break;
    } else {
      var $str_0 = $call;
      __label__ = 3;
      break;
    }
   case 2:
    var $incdec_ptr = $call - 1 | 0;
    HEAP8[$incdec_ptr] = 45;
    var $str_0 = $incdec_ptr;
    __label__ = 3;
    break;
   case 3:
    var $str_0;
    _png_warning_parameter($p, $number, $str_0);
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_formatted_warning($png_ptr, $p, $message) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 192;
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $msg = __stackBase__;
    var $cmp3 = ($p | 0) != 0;
    var $message_addr_0 = $message;
    var $i_0 = 0;
    __label__ = 2;
    break;
   case 2:
    var $i_0;
    var $message_addr_0;
    if ($i_0 >>> 0 < 191) {
      __label__ = 3;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 3:
    var $0 = HEAPU8[$message_addr_0];
    if ($0 << 24 >> 24 == 0) {
      __label__ = 14;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    if ($cmp3 & $0 << 24 >> 24 == 64) {
      __label__ = 5;
      break;
    } else {
      var $message_addr_1 = $message_addr_0;
      var $5 = $0;
      __label__ = 13;
      break;
    }
   case 5:
    var $arrayidx = $message_addr_0 + 1 | 0;
    var $1 = HEAPU8[$arrayidx];
    if ($1 << 24 >> 24 == 49) {
      var $parameter_0_lcssa6 = 0;
      __label__ = 8;
      break;
    } else if ($1 << 24 >> 24 == 0) {
      var $message_addr_1 = $message_addr_0;
      var $5 = $0;
      __label__ = 13;
      break;
    } else {
      var $parameter_04 = 0;
      __label__ = 6;
      break;
    }
   case 6:
    var $parameter_04;
    var $inc = $parameter_04 + 1 | 0;
    var $arrayidx14 = STRING_TABLE._png_formatted_warning_valid_parameters + $inc | 0;
    if (($inc | 0) != 9 & HEAP8[$arrayidx14] << 24 >> 24 != $1 << 24 >> 24) {
      var $parameter_04 = $inc;
      __label__ = 6;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    if (($inc | 0) < 8) {
      var $parameter_0_lcssa6 = $inc;
      __label__ = 8;
      break;
    } else {
      var $message_addr_1 = $arrayidx;
      var $5 = $1;
      __label__ = 13;
      break;
    }
   case 8:
    var $parameter_0_lcssa6;
    var $add_ptr = $p + ($parameter_0_lcssa6 << 5) + 32 | 0;
    var $parm_0 = $p + ($parameter_0_lcssa6 << 5) | 0;
    var $i_1 = $i_0;
    __label__ = 9;
    break;
   case 9:
    var $i_1;
    var $parm_0;
    if ($i_1 >>> 0 < 191) {
      __label__ = 10;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 10:
    var $4 = HEAPU8[$parm_0];
    if ($4 << 24 >> 24 != 0 & $parm_0 >>> 0 < $add_ptr >>> 0) {
      __label__ = 11;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 11:
    HEAP8[$msg + $i_1 | 0] = $4;
    var $parm_0 = $parm_0 + 1 | 0;
    var $i_1 = $i_1 + 1 | 0;
    __label__ = 9;
    break;
   case 12:
    var $message_addr_0 = $message_addr_0 + 2 | 0;
    var $i_0 = $i_1;
    __label__ = 2;
    break;
   case 13:
    var $5;
    var $message_addr_1;
    HEAP8[$msg + $i_0 | 0] = $5;
    var $message_addr_0 = $message_addr_1 + 1 | 0;
    var $i_0 = $i_0 + 1 | 0;
    __label__ = 2;
    break;
   case 14:
    HEAP8[$msg + $i_0 | 0] = 0;
    var $arraydecay54 = $msg | 0;
    _png_warning($png_ptr, $arraydecay54);
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_formatted_warning["X"] = 1;

function _png_benign_error($png_ptr, $error_message) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if ((HEAP32[$png_ptr + 88 >> 2] & 8388608 | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    _png_warning($png_ptr, $error_message);
    __label__ = 4;
    break;
   case 3:
    _png_error($png_ptr, $error_message);
    __label__ = 4;
    break;
   case 4:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_chunk_error($png_ptr, $error_message) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 84;
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $msg = __stackBase__;
    if (($png_ptr | 0) == 0) {
      __label__ = 2;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 2:
    _png_error(0, $error_message);
    __label__ = 4;
    break;
   case 3:
    var $arraydecay = $msg | 0;
    var $png_ptr_idx_val = HEAP32[$png_ptr + 232 >> 2];
    _png_format_buffer($png_ptr_idx_val, $arraydecay, $error_message);
    _png_error($png_ptr, $arraydecay);
    __label__ = 4;
    break;
   case 4:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_format_buffer($png_ptr_0_37_val, $buffer, $error_message) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $shr = $png_ptr_0_37_val >>> 24;
    if (($shr - 65 | 0) >>> 0 > 57 | ($shr - 91 | 0) >>> 0 < 6) {
      __label__ = 2;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 2:
    HEAP8[$buffer] = 91;
    var $arrayidx9 = STRING_TABLE._png_digit + ($png_ptr_0_37_val >>> 28) | 0;
    var $2 = HEAP8[$arrayidx9];
    HEAP8[$buffer + 1 | 0] = $2;
    var $arrayidx13 = STRING_TABLE._png_digit + ($shr & 15) | 0;
    var $3 = HEAP8[$arrayidx13];
    HEAP8[$buffer + 2 | 0] = $3;
    HEAP8[$buffer + 3 | 0] = 93;
    var $iout_0_be = 4;
    __label__ = 4;
    break;
   case 3:
    HEAP8[$buffer] = $shr & 255;
    var $iout_0_be = 1;
    __label__ = 4;
    break;
   case 4:
    var $iout_0_be;
    var $shr_1 = $png_ptr_0_37_val >>> 16;
    var $and_1 = $shr_1 & 255;
    if (($and_1 - 65 | 0) >>> 0 > 57 | ($and_1 - 91 | 0) >>> 0 < 6) {
      __label__ = 13;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 5:
    HEAP8[$buffer + $iout_0_be_3 | 0] = 0;
    __label__ = 11;
    break;
   case 6:
    HEAP8[$buffer + $iout_0_be_3 | 0] = 58;
    HEAP8[$iout_0_be_3 + ($buffer + 1) | 0] = 32;
    var $iin_0 = 0;
    var $iout_1 = $iout_0_be_3 + 2 | 0;
    __label__ = 7;
    break;
   case 7:
    var $iout_1;
    var $iin_0;
    if (($iin_0 | 0) < 63) {
      __label__ = 8;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 8:
    var $6 = HEAP8[$error_message + $iin_0 | 0];
    if ($6 << 24 >> 24 == 0) {
      __label__ = 10;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    HEAP8[$buffer + $iout_1 | 0] = $6;
    var $iin_0 = $iin_0 + 1 | 0;
    var $iout_1 = $iout_1 + 1 | 0;
    __label__ = 7;
    break;
   case 10:
    HEAP8[$buffer + $iout_1 | 0] = 0;
    __label__ = 11;
    break;
   case 11:
    return;
   case 12:
    HEAP8[$buffer + $iout_0_be | 0] = $shr_1 & 255;
    var $iout_0_be_1 = $iout_0_be + 1 | 0;
    __label__ = 14;
    break;
   case 13:
    HEAP8[$buffer + $iout_0_be | 0] = 91;
    var $arrayidx9_1 = STRING_TABLE._png_digit + ($png_ptr_0_37_val >>> 20 & 15) | 0;
    var $7 = HEAP8[$arrayidx9_1];
    HEAP8[$iout_0_be + ($buffer + 1) | 0] = $7;
    var $arrayidx13_1 = STRING_TABLE._png_digit + ($shr_1 & 15) | 0;
    var $8 = HEAP8[$arrayidx13_1];
    HEAP8[$buffer + ($iout_0_be | 2) | 0] = $8;
    HEAP8[$iout_0_be + ($buffer + 3) | 0] = 93;
    var $iout_0_be_1 = $iout_0_be + 4 | 0;
    __label__ = 14;
    break;
   case 14:
    var $iout_0_be_1;
    var $shr_2 = $png_ptr_0_37_val >>> 8;
    var $and_2 = $shr_2 & 255;
    if (($and_2 - 65 | 0) >>> 0 > 57 | ($and_2 - 91 | 0) >>> 0 < 6) {
      __label__ = 16;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 15:
    HEAP8[$buffer + $iout_0_be_1 | 0] = $shr_2 & 255;
    var $iout_0_be_2 = $iout_0_be_1 + 1 | 0;
    __label__ = 17;
    break;
   case 16:
    HEAP8[$buffer + $iout_0_be_1 | 0] = 91;
    var $arrayidx9_2 = STRING_TABLE._png_digit + ($png_ptr_0_37_val >>> 12 & 15) | 0;
    var $11 = HEAP8[$arrayidx9_2];
    HEAP8[$iout_0_be_1 + ($buffer + 1) | 0] = $11;
    var $arrayidx13_2 = STRING_TABLE._png_digit + ($shr_2 & 15) | 0;
    var $12 = HEAP8[$arrayidx13_2];
    HEAP8[$iout_0_be_1 + ($buffer + 2) | 0] = $12;
    HEAP8[$iout_0_be_1 + ($buffer + 3) | 0] = 93;
    var $iout_0_be_2 = $iout_0_be_1 + 4 | 0;
    __label__ = 17;
    break;
   case 17:
    var $iout_0_be_2;
    var $and_3 = $png_ptr_0_37_val & 255;
    if (($and_3 - 65 | 0) >>> 0 > 57 | ($and_3 - 91 | 0) >>> 0 < 6) {
      __label__ = 19;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 18:
    HEAP8[$buffer + $iout_0_be_2 | 0] = $png_ptr_0_37_val & 255;
    var $iout_0_be_3 = $iout_0_be_2 + 1 | 0;
    __label__ = 20;
    break;
   case 19:
    HEAP8[$buffer + $iout_0_be_2 | 0] = 91;
    var $arrayidx9_3 = STRING_TABLE._png_digit + ($png_ptr_0_37_val >>> 4 & 15) | 0;
    var $15 = HEAP8[$arrayidx9_3];
    HEAP8[$iout_0_be_2 + ($buffer + 1) | 0] = $15;
    var $arrayidx13_3 = STRING_TABLE._png_digit + ($png_ptr_0_37_val & 15) | 0;
    var $16 = HEAP8[$arrayidx13_3];
    HEAP8[$iout_0_be_2 + ($buffer + 2) | 0] = $16;
    HEAP8[$iout_0_be_2 + ($buffer + 3) | 0] = 93;
    var $iout_0_be_3 = $iout_0_be_2 + 4 | 0;
    __label__ = 20;
    break;
   case 20:
    var $iout_0_be_3;
    if (($error_message | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_format_buffer["X"] = 1;

function _png_set_longjmp_fn($png_ptr) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0) {
      var $retval_0 = 0;
      __label__ = 3;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    HEAP32[$png_ptr + 40 >> 2] = 6;
    var $retval_0 = $png_ptr | 0;
    __label__ = 3;
    break;
   case 3:
    var $retval_0;
    return $retval_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_set_error_fn($png_ptr) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    HEAP32[$png_ptr + 52 >> 2] = 0;
    HEAP32[$png_ptr + 44 >> 2] = 8;
    HEAP32[$png_ptr + 48 >> 2] = 0;
    __label__ = 3;
    break;
   case 3:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_get_rowbytes($png_ptr, $info_ptr) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0 | ($info_ptr | 0) == 0) {
      var $retval_0 = 0;
      __label__ = 3;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $retval_0 = HEAP32[$info_ptr + 12 >> 2];
    __label__ = 3;
    break;
   case 3:
    var $retval_0;
    return $retval_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_get_bKGD($png_ptr, $info_ptr, $background) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0 | ($info_ptr | 0) == 0) {
      var $retval_0 = 0;
      __label__ = 4;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    if ((HEAP32[$info_ptr + 8 >> 2] & 32 | 0) == 0 | ($background | 0) == 0) {
      var $retval_0 = 0;
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    HEAP32[$background >> 2] = $info_ptr + 90 | 0;
    var $retval_0 = 32;
    __label__ = 4;
    break;
   case 4:
    var $retval_0;
    return $retval_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_get_cHRM_fixed($png_ptr, $info_ptr, $white_x, $white_y, $red_x, $red_y, $green_x, $green_y, $blue_x, $blue_y) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0 | ($info_ptr | 0) == 0) {
      var $retval_0 = 0;
      __label__ = 19;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    if ((HEAP32[$info_ptr + 8 >> 2] & 4 | 0) == 0) {
      var $retval_0 = 0;
      __label__ = 19;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    if (($white_x | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $1 = HEAP32[$info_ptr + 128 >> 2];
    HEAP32[$white_x >> 2] = $1;
    __label__ = 5;
    break;
   case 5:
    if (($white_y | 0) == 0) {
      __label__ = 7;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    var $2 = HEAP32[$info_ptr + 132 >> 2];
    HEAP32[$white_y >> 2] = $2;
    __label__ = 7;
    break;
   case 7:
    if (($red_x | 0) == 0) {
      __label__ = 9;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    var $3 = HEAP32[$info_ptr + 136 >> 2];
    HEAP32[$red_x >> 2] = $3;
    __label__ = 9;
    break;
   case 9:
    if (($red_y | 0) == 0) {
      __label__ = 11;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 10:
    var $4 = HEAP32[$info_ptr + 140 >> 2];
    HEAP32[$red_y >> 2] = $4;
    __label__ = 11;
    break;
   case 11:
    if (($green_x | 0) == 0) {
      __label__ = 13;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 12:
    var $5 = HEAP32[$info_ptr + 144 >> 2];
    HEAP32[$green_x >> 2] = $5;
    __label__ = 13;
    break;
   case 13:
    if (($green_y | 0) == 0) {
      __label__ = 15;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 14:
    var $6 = HEAP32[$info_ptr + 148 >> 2];
    HEAP32[$green_y >> 2] = $6;
    __label__ = 15;
    break;
   case 15:
    if (($blue_x | 0) == 0) {
      __label__ = 17;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 16:
    var $7 = HEAP32[$info_ptr + 152 >> 2];
    HEAP32[$blue_x >> 2] = $7;
    __label__ = 17;
    break;
   case 17:
    if (($blue_y | 0) == 0) {
      var $retval_0 = 4;
      __label__ = 19;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 18:
    var $8 = HEAP32[$info_ptr + 156 >> 2];
    HEAP32[$blue_y >> 2] = $8;
    var $retval_0 = 4;
    __label__ = 19;
    break;
   case 19:
    var $retval_0;
    return $retval_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_get_cHRM_fixed["X"] = 1;

function _png_get_gAMA_fixed($png_ptr, $info_ptr, $file_gamma) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0 | ($info_ptr | 0) == 0) {
      var $retval_0 = 0;
      __label__ = 4;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    if ((HEAP32[$info_ptr + 8 >> 2] & 1 | 0) == 0 | ($file_gamma | 0) == 0) {
      var $retval_0 = 0;
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $1 = HEAP32[$info_ptr + 40 >> 2];
    HEAP32[$file_gamma >> 2] = $1;
    var $retval_0 = 1;
    __label__ = 4;
    break;
   case 4:
    var $retval_0;
    return $retval_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_get_sRGB($png_ptr, $info_ptr, $file_srgb_intent) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0 | ($info_ptr | 0) == 0) {
      var $retval_0 = 0;
      __label__ = 4;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    if ((HEAP32[$info_ptr + 8 >> 2] & 2048 | 0) == 0 | ($file_srgb_intent | 0) == 0) {
      var $retval_0 = 0;
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    HEAP32[$file_srgb_intent >> 2] = HEAPU8[$info_ptr + 44 | 0] & 255;
    var $retval_0 = 2048;
    __label__ = 4;
    break;
   case 4:
    var $retval_0;
    return $retval_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_get_iCCP($png_ptr, $info_ptr, $name, $compression_type, $profile, $proflen) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0 | ($info_ptr | 0) == 0) {
      var $retval_0 = 0;
      __label__ = 4;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    if ((HEAP32[$info_ptr + 8 >> 2] & 4096 | 0) == 0 | ($name | 0) == 0 | ($compression_type | 0) == 0 | ($profile | 0) == 0 | ($proflen | 0) == 0) {
      var $retval_0 = 0;
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $1 = HEAP32[$info_ptr + 196 >> 2];
    HEAP32[$name >> 2] = $1;
    var $2 = HEAP32[$info_ptr + 200 >> 2];
    HEAP32[$profile >> 2] = $2;
    var $3 = HEAP32[$info_ptr + 204 >> 2];
    HEAP32[$proflen >> 2] = $3;
    HEAP32[$compression_type >> 2] = HEAPU8[$info_ptr + 208 | 0] & 255;
    var $retval_0 = 4096;
    __label__ = 4;
    break;
   case 4:
    var $retval_0;
    return $retval_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_get_sPLT($png_ptr, $info_ptr, $spalettes) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0 | ($info_ptr | 0) == 0 | ($spalettes | 0) == 0) {
      var $retval_0 = 0;
      __label__ = 3;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $0 = HEAP32[$info_ptr + 212 >> 2];
    HEAP32[$spalettes >> 2] = $0;
    var $retval_0 = HEAP32[$info_ptr + 216 >> 2];
    __label__ = 3;
    break;
   case 3:
    var $retval_0;
    return $retval_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_get_hIST($png_ptr, $info_ptr, $hist) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0 | ($info_ptr | 0) == 0) {
      var $retval_0 = 0;
      __label__ = 4;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    if ((HEAP32[$info_ptr + 8 >> 2] & 64 | 0) == 0 | ($hist | 0) == 0) {
      var $retval_0 = 0;
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $1 = HEAP32[$info_ptr + 124 >> 2];
    HEAP32[$hist >> 2] = $1;
    var $retval_0 = 64;
    __label__ = 4;
    break;
   case 4:
    var $retval_0;
    return $retval_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_get_oFFs($png_ptr, $info_ptr, $offset_x, $offset_y, $unit_type) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0 | ($info_ptr | 0) == 0) {
      var $retval_0 = 0;
      __label__ = 4;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    if ((HEAP32[$info_ptr + 8 >> 2] & 256 | 0) == 0 | ($offset_x | 0) == 0 | ($offset_y | 0) == 0 | ($unit_type | 0) == 0) {
      var $retval_0 = 0;
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $1 = HEAP32[$info_ptr + 100 >> 2];
    HEAP32[$offset_x >> 2] = $1;
    var $2 = HEAP32[$info_ptr + 104 >> 2];
    HEAP32[$offset_y >> 2] = $2;
    HEAP32[$unit_type >> 2] = HEAPU8[$info_ptr + 108 | 0] & 255;
    var $retval_0 = 256;
    __label__ = 4;
    break;
   case 4:
    var $retval_0;
    return $retval_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_get_pCAL($png_ptr, $info_ptr, $purpose, $X0, $X1, $type, $nparams, $units, $params) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0 | ($info_ptr | 0) == 0) {
      var $retval_0 = 0;
      __label__ = 4;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    if ((HEAP32[$info_ptr + 8 >> 2] & 1024 | 0) == 0 | ($purpose | 0) == 0 | ($X0 | 0) == 0 | ($X1 | 0) == 0 | ($type | 0) == 0 | ($nparams | 0) == 0 | ($units | 0) == 0 | ($params | 0) == 0) {
      var $retval_0 = 0;
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $1 = HEAP32[$info_ptr + 160 >> 2];
    HEAP32[$purpose >> 2] = $1;
    var $2 = HEAP32[$info_ptr + 164 >> 2];
    HEAP32[$X0 >> 2] = $2;
    var $3 = HEAP32[$info_ptr + 168 >> 2];
    HEAP32[$X1 >> 2] = $3;
    HEAP32[$type >> 2] = HEAPU8[$info_ptr + 180 | 0] & 255;
    HEAP32[$nparams >> 2] = HEAPU8[$info_ptr + 181 | 0] & 255;
    var $6 = HEAP32[$info_ptr + 172 >> 2];
    HEAP32[$units >> 2] = $6;
    var $7 = HEAP32[$info_ptr + 176 >> 2];
    HEAP32[$params >> 2] = $7;
    var $retval_0 = 1024;
    __label__ = 4;
    break;
   case 4:
    var $retval_0;
    return $retval_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_get_pHYs($png_ptr, $info_ptr, $res_x, $res_y, $unit_type) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0 | ($info_ptr | 0) == 0) {
      var $retval1_2 = 0;
      __label__ = 9;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    if ((HEAP32[$info_ptr + 8 >> 2] & 128 | 0) == 0) {
      var $retval1_2 = 0;
      __label__ = 9;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    if (($res_x | 0) == 0) {
      var $retval1_0 = 0;
      __label__ = 5;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $1 = HEAP32[$info_ptr + 112 >> 2];
    HEAP32[$res_x >> 2] = $1;
    var $retval1_0 = 128;
    __label__ = 5;
    break;
   case 5:
    var $retval1_0;
    if (($res_y | 0) == 0) {
      var $retval1_1 = $retval1_0;
      __label__ = 7;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    var $2 = HEAP32[$info_ptr + 116 >> 2];
    HEAP32[$res_y >> 2] = $2;
    var $retval1_1 = 128;
    __label__ = 7;
    break;
   case 7:
    var $retval1_1;
    if (($unit_type | 0) == 0) {
      var $retval1_2 = $retval1_1;
      __label__ = 9;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    HEAP32[$unit_type >> 2] = HEAPU8[$info_ptr + 120 | 0] & 255;
    var $retval1_2 = 128;
    __label__ = 9;
    break;
   case 9:
    var $retval1_2;
    return $retval1_2;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_get_PLTE($png_ptr, $info_ptr) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0 | ($info_ptr | 0) == 0) {
      var $retval_0 = 0;
      __label__ = 4;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    if ((HEAP32[$info_ptr + 8 >> 2] & 8 | 0) == 0) {
      var $retval_0 = 0;
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $_c = HEAP32[$info_ptr + 16 >> 2];
    HEAP32[_palette >> 2] = $_c;
    HEAP32[_num_palette >> 2] = HEAPU16[$info_ptr + 20 >> 1] & 65535;
    var $retval_0 = 8;
    __label__ = 4;
    break;
   case 4:
    var $retval_0;
    return $retval_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_get_sBIT($png_ptr, $info_ptr, $sig_bit) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0 | ($info_ptr | 0) == 0) {
      var $retval_0 = 0;
      __label__ = 4;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    if ((HEAP32[$info_ptr + 8 >> 2] & 2 | 0) == 0 | ($sig_bit | 0) == 0) {
      var $retval_0 = 0;
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    HEAP32[$sig_bit >> 2] = $info_ptr + 68 | 0;
    var $retval_0 = 2;
    __label__ = 4;
    break;
   case 4:
    var $retval_0;
    return $retval_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_get_text($png_ptr, $info_ptr, $text_ptr, $num_text) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0 | ($info_ptr | 0) == 0) {
      __label__ = 8;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $num_text3 = $info_ptr + 48 | 0;
    if ((HEAP32[$num_text3 >> 2] | 0) > 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 3:
    if (($text_ptr | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $1 = HEAP32[$info_ptr + 56 >> 2];
    HEAP32[$text_ptr >> 2] = $1;
    __label__ = 5;
    break;
   case 5:
    if (($num_text | 0) == 0) {
      __label__ = 7;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    var $2 = HEAP32[$num_text3 >> 2];
    HEAP32[$num_text >> 2] = $2;
    __label__ = 7;
    break;
   case 7:
    var $retval_0 = HEAP32[$num_text3 >> 2];
    __label__ = 10;
    break;
   case 8:
    if (($num_text | 0) == 0) {
      var $retval_0 = 0;
      __label__ = 10;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    HEAP32[$num_text >> 2] = 0;
    var $retval_0 = 0;
    __label__ = 10;
    break;
   case 10:
    var $retval_0;
    return $retval_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_get_tIME($png_ptr, $info_ptr, $mod_time) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0 | ($info_ptr | 0) == 0) {
      var $retval_0 = 0;
      __label__ = 4;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    if ((HEAP32[$info_ptr + 8 >> 2] & 512 | 0) == 0 | ($mod_time | 0) == 0) {
      var $retval_0 = 0;
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    HEAP32[$mod_time >> 2] = $info_ptr + 60 | 0;
    var $retval_0 = 512;
    __label__ = 4;
    break;
   case 4:
    var $retval_0;
    return $retval_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_chunk_warning($png_ptr, $warning_message) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 84;
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $msg = __stackBase__;
    if (($png_ptr | 0) == 0) {
      __label__ = 2;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 2:
    _png_warning(0, $warning_message);
    __label__ = 4;
    break;
   case 3:
    var $arraydecay = $msg | 0;
    var $png_ptr_idx_val = HEAP32[$png_ptr + 232 >> 2];
    _png_format_buffer($png_ptr_idx_val, $arraydecay, $warning_message);
    _png_warning($png_ptr, $arraydecay);
    __label__ = 4;
    break;
   case 4:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_chunk_benign_error($png_ptr) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if ((HEAP32[$png_ptr + 88 >> 2] & 8388608 | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    _png_chunk_warning($png_ptr, STRING_TABLE.__str3752 | 0);
    __label__ = 4;
    break;
   case 3:
    _png_chunk_error($png_ptr, STRING_TABLE.__str3752 | 0);
    __label__ = 4;
    break;
   case 4:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_longjmp($png_ptr) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $0 = HEAP32[$png_ptr + 40 >> 2];
    if (($0 | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $arraydecay = $png_ptr | 0;
    FUNCTION_TABLE[$0]($arraydecay, 1);
    __label__ = 4;
    break;
   case 4:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_get_IHDR($png_ptr, $info_ptr, $bit_depth, $color_type, $interlace_type, $compression_type, $filter_type) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0 | ($info_ptr | 0) == 0 | ($bit_depth | 0) == 0 | ($color_type | 0) == 0) {
      var $retval_0 = 0;
      __label__ = 9;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $width10 = $info_ptr | 0;
    var $0 = HEAP32[$width10 >> 2];
    HEAP32[_width >> 2] = $0;
    var $height11 = $info_ptr + 4 | 0;
    var $1 = HEAP32[$height11 >> 2];
    HEAP32[_height >> 2] = $1;
    var $bit_depth12 = $info_ptr + 24 | 0;
    HEAP32[$bit_depth >> 2] = HEAPU8[$bit_depth12] & 255;
    var $color_type13 = $info_ptr + 25 | 0;
    HEAP32[$color_type >> 2] = HEAPU8[$color_type13] & 255;
    if (($compression_type | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    HEAP32[$compression_type >> 2] = HEAPU8[$info_ptr + 26 | 0] & 255;
    __label__ = 4;
    break;
   case 4:
    if (($filter_type | 0) == 0) {
      __label__ = 6;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    HEAP32[$filter_type >> 2] = HEAPU8[$info_ptr + 27 | 0] & 255;
    __label__ = 6;
    break;
   case 6:
    var $interlace_type39_pre = $info_ptr + 28 | 0;
    if (($interlace_type | 0) == 0) {
      __label__ = 8;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    HEAP32[$interlace_type >> 2] = HEAPU8[$interlace_type39_pre] & 255;
    __label__ = 8;
    break;
   case 8:
    var $7 = HEAP32[$width10 >> 2];
    var $8 = HEAP32[$height11 >> 2];
    var $conv36 = HEAPU8[$bit_depth12] & 255;
    var $conv38 = HEAPU8[$color_type13] & 255;
    var $conv40 = HEAPU8[$interlace_type39_pre] & 255;
    var $conv42 = HEAPU8[$info_ptr + 26 | 0] & 255;
    var $conv44 = HEAPU8[$info_ptr + 27 | 0] & 255;
    _png_check_IHDR($png_ptr, $7, $8, $conv36, $conv38, $conv40, $conv42, $conv44);
    var $retval_0 = 1;
    __label__ = 9;
    break;
   case 9:
    var $retval_0;
    return $retval_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_get_IHDR["X"] = 1;

function _png_get_sCAL($png_ptr, $info_ptr, $unit, $width, $height) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0 | ($info_ptr | 0) == 0) {
      var $retval_0 = 0;
      __label__ = 4;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    if ((HEAP32[$info_ptr + 8 >> 2] & 16384 | 0) == 0) {
      var $retval_0 = 0;
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    HEAP32[$unit >> 2] = HEAPU8[$info_ptr + 220 | 0] & 255;
    var $2 = HEAP32[$info_ptr + 224 >> 2];
    var $call = _atof($2);
    tempDoubleF64[0] = $call, HEAP32[$width >> 2] = tempDoubleI32[0], HEAP32[$width + 4 >> 2] = tempDoubleI32[1];
    var $3 = HEAP32[$info_ptr + 228 >> 2];
    var $call3 = _atof($3);
    tempDoubleF64[0] = $call3, HEAP32[$height >> 2] = tempDoubleI32[0], HEAP32[$height + 4 >> 2] = tempDoubleI32[1];
    var $retval_0 = 16384;
    __label__ = 4;
    break;
   case 4:
    var $retval_0;
    return $retval_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_get_tRNS($png_ptr, $info_ptr, $trans_alpha, $num_trans, $trans_color) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0 | ($info_ptr | 0) == 0) {
      var $retval1_3 = 0;
      __label__ = 14;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    if ((HEAP32[$info_ptr + 8 >> 2] & 16 | 0) == 0) {
      var $retval1_3 = 0;
      __label__ = 14;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    if (HEAP8[$info_ptr + 25 | 0] << 24 >> 24 == 3) {
      __label__ = 4;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 4:
    if (($trans_alpha | 0) == 0) {
      var $retval1_0 = 0;
      __label__ = 6;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $2 = HEAP32[$info_ptr + 76 >> 2];
    HEAP32[$trans_alpha >> 2] = $2;
    var $retval1_0 = 16;
    __label__ = 6;
    break;
   case 6:
    var $retval1_0;
    if (($trans_color | 0) == 0) {
      var $retval1_2 = $retval1_0;
      __label__ = 12;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    HEAP32[$trans_color >> 2] = $info_ptr + 80 | 0;
    var $retval1_2 = $retval1_0;
    __label__ = 12;
    break;
   case 8:
    if (($trans_color | 0) == 0) {
      var $retval1_1 = 0;
      __label__ = 10;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    HEAP32[$trans_color >> 2] = $info_ptr + 80 | 0;
    var $retval1_1 = 16;
    __label__ = 10;
    break;
   case 10:
    var $retval1_1;
    if (($trans_alpha | 0) == 0) {
      var $retval1_2 = $retval1_1;
      __label__ = 12;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    HEAP32[$trans_alpha >> 2] = 0;
    var $retval1_2 = $retval1_1;
    __label__ = 12;
    break;
   case 12:
    var $retval1_2;
    if (($num_trans | 0) == 0) {
      var $retval1_3 = $retval1_2;
      __label__ = 14;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 13:
    HEAP32[$num_trans >> 2] = HEAPU16[$info_ptr + 22 >> 1] & 65535;
    var $retval1_3 = 16;
    __label__ = 14;
    break;
   case 14:
    var $retval1_3;
    return $retval1_3;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_get_unknown_chunks($png_ptr, $info_ptr, $unknowns) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0 | ($info_ptr | 0) == 0 | ($unknowns | 0) == 0) {
      var $retval_0 = 0;
      __label__ = 3;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $0 = HEAP32[$info_ptr + 188 >> 2];
    HEAP32[$unknowns >> 2] = $0;
    var $retval_0 = HEAP32[$info_ptr + 192 >> 2];
    __label__ = 3;
    break;
   case 3:
    var $retval_0;
    return $retval_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_get_rgb_to_gray_status($png_ptr) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0) {
      var $cond = 0;
      __label__ = 3;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $cond = HEAP8[$png_ptr + 569 | 0];
    __label__ = 3;
    break;
   case 3:
    var $cond;
    return $cond;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_get_compression_buffer_size($png_ptr) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0) {
      var $cond = 0;
      __label__ = 3;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $cond = HEAP32[$png_ptr + 156 >> 2];
    __label__ = 3;
    break;
   case 3:
    var $cond;
    return $cond;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_set_mem_fn($png_ptr, $malloc_fn, $free_fn) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    HEAP32[$png_ptr + 584 >> 2] = 0;
    HEAP32[$png_ptr + 588 >> 2] = $malloc_fn;
    HEAP32[$png_ptr + 592 >> 2] = $free_fn;
    __label__ = 3;
    break;
   case 3:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_create_struct_2($type, $malloc_fn, $mem_ptr) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 684;
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $dummy_struct = __stackBase__;
    if (($type | 0) == 1) {
      __label__ = 2;
      break;
    } else if (($type | 0) == 2) {
      var $size_0 = 236;
      __label__ = 3;
      break;
    } else {
      var $retval_0 = 0;
      __label__ = 8;
      break;
    }
   case 2:
    var $size_0 = 684;
    __label__ = 3;
    break;
   case 3:
    var $size_0;
    if (($malloc_fn | 0) == 0) {
      __label__ = 6;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    HEAP32[$dummy_struct + 584 >> 2] = $mem_ptr;
    var $call = FUNCTION_TABLE[$malloc_fn]($dummy_struct, $size_0);
    if (($call | 0) == 0) {
      var $retval_0 = 0;
      __label__ = 8;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    _memset($call, 0, $size_0, 1);
    var $retval_0 = $call;
    __label__ = 8;
    break;
   case 6:
    var $call12 = _malloc($size_0);
    if (($call12 | 0) == 0) {
      var $retval_0 = 0;
      __label__ = 8;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    _memset($call12, 0, $size_0, 1);
    var $retval_0 = $call12;
    __label__ = 8;
    break;
   case 8:
    var $retval_0;
    STACKTOP = __stackBase__;
    return $retval_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_destroy_struct_2($struct_ptr, $free_fn, $mem_ptr) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 684;
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $dummy_struct = __stackBase__;
    if (($struct_ptr | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    if (($free_fn | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    HEAP32[$dummy_struct + 584 >> 2] = $mem_ptr;
    FUNCTION_TABLE[$free_fn]($dummy_struct, $struct_ptr);
    __label__ = 5;
    break;
   case 4:
    _free($struct_ptr);
    __label__ = 5;
    break;
   case 5:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_calloc($png_ptr, $size) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $call = _png_malloc($png_ptr, $size);
    if (($call | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    _memset($call, 0, $size, 1);
    __label__ = 3;
    break;
   case 3:
    return $call;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_malloc($png_ptr, $size) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0 | ($size | 0) == 0) {
      var $retval_0 = 0;
      __label__ = 8;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $malloc_fn21 = HEAP32[$png_ptr + 588 >> 2];
    if (($malloc_fn21 | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $0 = $malloc_fn21;
    var $call = FUNCTION_TABLE[$0]($png_ptr, $size);
    var $ret_0 = $call;
    __label__ = 5;
    break;
   case 4:
    var $call7 = _png_malloc_default($png_ptr, $size);
    var $ret_0 = $call7;
    __label__ = 5;
    break;
   case 5:
    var $ret_0;
    if (($ret_0 | 0) == 0) {
      __label__ = 6;
      break;
    } else {
      var $retval_0 = $ret_0;
      __label__ = 8;
      break;
    }
   case 6:
    if ((HEAP32[$png_ptr + 88 >> 2] & 1048576 | 0) == 0) {
      __label__ = 7;
      break;
    } else {
      var $retval_0 = 0;
      __label__ = 8;
      break;
    }
   case 7:
    var $2 = $png_ptr;
    _png_error($2, STRING_TABLE.__str636 | 0);
    var $retval_0 = $ret_0;
    __label__ = 8;
    break;
   case 8:
    var $retval_0;
    return $retval_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_malloc_default($png_ptr, $size) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0 | ($size | 0) == 0) {
      var $retval_0 = 0;
      __label__ = 3;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $call = _malloc($size);
    var $retval_0 = $call;
    __label__ = 3;
    break;
   case 3:
    var $retval_0;
    return $retval_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_free($png_ptr, $ptr) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0 | ($ptr | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $0 = HEAP32[$png_ptr + 592 >> 2];
    if (($0 | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    FUNCTION_TABLE[$0]($png_ptr, $ptr);
    __label__ = 5;
    break;
   case 4:
    _png_free_default($png_ptr, $ptr);
    __label__ = 5;
    break;
   case 5:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_free_default($png_ptr, $ptr) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0 | ($ptr | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    _free($ptr);
    __label__ = 3;
    break;
   case 3:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_malloc_warn($png_ptr, $size) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0) {
      var $retval_0 = 0;
      __label__ = 3;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $flags = $png_ptr + 88 | 0;
    var $0 = HEAP32[$flags >> 2];
    var $or = $0 | 1048576;
    HEAP32[$flags >> 2] = $or;
    var $call = _png_malloc($png_ptr, $size);
    HEAP32[$flags >> 2] = $0;
    var $retval_0 = $call;
    __label__ = 3;
    break;
   case 3:
    var $retval_0;
    return $retval_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_create_read_struct() {
  var $call = _png_create_read_struct_2(0, 0);
  return $call;
}

function _png_create_read_struct_2($malloc_fn, $free_fn) {
  var __label__;
  __label__ = 1;
  var setjmpTable = {
    "2": (function(value) {
      __label__ = 15;
      $call2 = value;
    }),
    dummy: 0
  };
  while (1) try {
    switch (__label__) {
     case 1:
      var $png_ptr;
      var $png_cleanup_needed;
      $png_cleanup_needed = 0;
      var $0 = $malloc_fn;
      var $call = _png_create_struct_2(1, $0, 0);
      $png_ptr = $call;
      if (($png_ptr | 0) == 0) {
        var $retval_0 = 0;
        __label__ = 14;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 2:
      HEAP32[$png_ptr + 616 >> 2] = 2147483647;
      HEAP32[$png_ptr + 620 >> 2] = 2147483647;
      HEAP32[$png_ptr + 624 >> 2] = 0;
      HEAP32[$png_ptr + 628 >> 2] = 0;
      var $call1 = _png_set_longjmp_fn($png_ptr);
      var $call2 = (HEAP32[$call1 >> 2] = __label__, 0);
      __label__ = 15;
      break;
     case 15:
      var $11 = $free_fn;
      _png_set_mem_fn($png_ptr, $0, $11);
      _png_set_error_fn($png_ptr);
      if (($png_cleanup_needed | 0) == 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 3:
      HEAP32[$png_ptr + 156 >> 2] = 8192;
      var $19 = HEAP32[$png_ptr + 156 >> 2];
      var $call12 = _png_malloc_warn($png_ptr, $19);
      HEAP32[$png_ptr + 152 >> 2] = $call12;
      if ((HEAP32[$png_ptr + 152 >> 2] | 0) == 0) {
        __label__ = 4;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 4:
      $png_cleanup_needed = 1;
      __label__ = 5;
      break;
     case 5:
      HEAP32[$png_ptr + 128 >> 2] = 10;
      HEAP32[$png_ptr + 132 >> 2] = 12;
      HEAP32[$png_ptr + 136 >> 2] = $png_ptr;
      if (($png_cleanup_needed | 0) == 0) {
        __label__ = 6;
        break;
      } else {
        __label__ = 11;
        break;
      }
     case 6:
      var $call23 = _inflateInit_($png_ptr + 96 | 0);
      if (($call23 | 0) == -4) {
        __label__ = 7;
        break;
      } else if (($call23 | 0) == -2) {
        __label__ = 8;
        break;
      } else if (($call23 | 0) == -6) {
        __label__ = 9;
        break;
      } else if (($call23 | 0) == 0) {
        __label__ = 11;
        break;
      } else {
        __label__ = 10;
        break;
      }
     case 7:
      _png_warning($png_ptr, STRING_TABLE.__str1675 | 0);
      $png_cleanup_needed = 1;
      __label__ = 11;
      break;
     case 8:
      _png_warning($png_ptr, STRING_TABLE.__str2676 | 0);
      $png_cleanup_needed = 1;
      __label__ = 11;
      break;
     case 9:
      _png_warning($png_ptr, STRING_TABLE.__str3677 | 0);
      $png_cleanup_needed = 1;
      __label__ = 11;
      break;
     case 10:
      _png_warning($png_ptr, STRING_TABLE.__str4678 | 0);
      $png_cleanup_needed = 1;
      __label__ = 11;
      break;
     case 11:
      var $40 = $png_ptr;
      if (($png_cleanup_needed | 0) == 0) {
        __label__ = 13;
        break;
      } else {
        __label__ = 12;
        break;
      }
     case 12:
      var $42 = HEAP32[$png_ptr + 152 >> 2];
      _png_free($40, $42);
      HEAP32[$png_ptr + 152 >> 2] = 0;
      _png_destroy_struct_2($png_ptr, $11, 0);
      var $retval_0 = 0;
      __label__ = 14;
      break;
     case 13:
      var $47 = HEAP32[$40 + 152 >> 2];
      HEAP32[$png_ptr + 108 >> 2] = $47;
      var $50 = HEAP32[$png_ptr + 156 >> 2];
      HEAP32[$png_ptr + 112 >> 2] = $50;
      _png_set_read_fn($png_ptr);
      var $retval_0 = $png_ptr;
      __label__ = 14;
      break;
     case 14:
      var $retval_0;
      return $retval_0;
     default:
      assert(0, "bad label: " + __label__);
    }
  } catch (e) {
    if (!e.longjmp) throw e;
    setjmpTable[e.label](e.value);
  }
}

_png_create_read_struct_2["X"] = 1;

function _png_read_info($png_ptr, $info_ptr) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0 | ($info_ptr | 0) == 0) {
      __label__ = 46;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    _png_read_sig($png_ptr, $info_ptr);
    var $chunk_name2 = $png_ptr + 232 | 0;
    var $mode = $png_ptr + 84 | 0;
    __label__ = 3;
    break;
   case 3:
    var $call = _png_read_chunk_header($png_ptr);
    var $0 = HEAP32[$chunk_name2 >> 2];
    var $cmp3 = ($0 | 0) == 1229209940;
    if ($cmp3) {
      __label__ = 4;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 4:
    var $1 = HEAP32[$mode >> 2];
    if (($1 & 8 | 0) == 0) {
      __label__ = 9;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $or = $1 | 8192;
    HEAP32[$mode >> 2] = $or;
    __label__ = 9;
    break;
   case 6:
    if (($0 | 0) == 1229472850) {
      __label__ = 7;
      break;
    } else if (($0 | 0) == 1229278788) {
      __label__ = 8;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 7:
    _png_handle_IHDR($png_ptr, $info_ptr, $call);
    __label__ = 3;
    break;
   case 8:
    _png_handle_IEND($png_ptr, $call);
    __label__ = 3;
    break;
   case 9:
    var $call14 = _png_chunk_unknown_handling($png_ptr, $0);
    if (($call14 | 0) == 0) {
      __label__ = 18;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 10:
    if ($cmp3) {
      __label__ = 13;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    _png_handle_unknown($png_ptr, $info_ptr, $call);
    if (($0 | 0) == 1347179589) {
      __label__ = 12;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 12:
    var $or25 = HEAP32[$mode >> 2] | 2;
    HEAP32[$mode >> 2] = $or25;
    __label__ = 3;
    break;
   case 13:
    var $or20 = HEAP32[$mode >> 2] | 4;
    HEAP32[$mode >> 2] = $or20;
    _png_handle_unknown($png_ptr, $info_ptr, $call);
    var $4 = HEAP32[$mode >> 2];
    if (($4 & 1 | 0) == 0) {
      __label__ = 14;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 14:
    var $5 = $png_ptr;
    _png_error($5, STRING_TABLE.__str5679 | 0);
    __label__ = 46;
    break;
   case 15:
    if (HEAP8[$png_ptr + 291 | 0] << 24 >> 24 == 3) {
      __label__ = 16;
      break;
    } else {
      __label__ = 46;
      break;
    }
   case 16:
    if (($4 & 2 | 0) == 0) {
      __label__ = 17;
      break;
    } else {
      __label__ = 46;
      break;
    }
   case 17:
    var $7 = $png_ptr;
    _png_error($7, STRING_TABLE.__str6680 | 0);
    __label__ = 46;
    break;
   case 18:
    if (($0 | 0) == 1347179589) {
      __label__ = 19;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 19:
    _png_handle_PLTE($png_ptr, $info_ptr, $call);
    __label__ = 3;
    break;
   case 20:
    if ($cmp3) {
      __label__ = 21;
      break;
    } else {
      __label__ = 27;
      break;
    }
   case 21:
    var $8 = HEAP32[$mode >> 2];
    if (($8 & 1 | 0) == 0) {
      __label__ = 22;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 22:
    var $9 = $png_ptr;
    _png_error($9, STRING_TABLE.__str5679 | 0);
    __label__ = 26;
    break;
   case 23:
    if (HEAP8[$png_ptr + 291 | 0] << 24 >> 24 == 3) {
      __label__ = 24;
      break;
    } else {
      __label__ = 26;
      break;
    }
   case 24:
    if (($8 & 2 | 0) == 0) {
      __label__ = 25;
      break;
    } else {
      __label__ = 26;
      break;
    }
   case 25:
    var $11 = $png_ptr;
    _png_error($11, STRING_TABLE.__str6680 | 0);
    __label__ = 26;
    break;
   case 26:
    HEAP32[$png_ptr + 264 >> 2] = $call;
    var $or69 = HEAP32[$mode >> 2] | 4;
    HEAP32[$mode >> 2] = $or69;
    __label__ = 46;
    break;
   case 27:
    if (($0 | 0) == 1649100612) {
      __label__ = 28;
      break;
    } else if (($0 | 0) == 1665684045) {
      __label__ = 29;
      break;
    } else if (($0 | 0) == 1732332865) {
      __label__ = 30;
      break;
    } else if (($0 | 0) == 1749635924) {
      __label__ = 31;
      break;
    } else if (($0 | 0) == 1866876531) {
      __label__ = 32;
      break;
    } else if (($0 | 0) == 1883455820) {
      __label__ = 33;
      break;
    } else if (($0 | 0) == 1933787468) {
      __label__ = 34;
      break;
    } else if (($0 | 0) == 1883789683) {
      __label__ = 35;
      break;
    } else if (($0 | 0) == 1933723988) {
      __label__ = 36;
      break;
    } else if (($0 | 0) == 1934772034) {
      __label__ = 37;
      break;
    } else if (($0 | 0) == 1766015824) {
      __label__ = 38;
      break;
    } else if (($0 | 0) == 1934642260) {
      __label__ = 39;
      break;
    } else if (($0 | 0) == 1950701684) {
      __label__ = 40;
      break;
    } else if (($0 | 0) == 1950960965) {
      __label__ = 41;
      break;
    } else if (($0 | 0) == 1951551059) {
      __label__ = 42;
      break;
    } else if (($0 | 0) == 2052348020) {
      __label__ = 43;
      break;
    } else if (($0 | 0) == 1767135348) {
      __label__ = 44;
      break;
    } else {
      __label__ = 45;
      break;
    }
   case 28:
    _png_handle_bKGD($png_ptr, $info_ptr, $call);
    __label__ = 3;
    break;
   case 29:
    _png_handle_cHRM($png_ptr, $info_ptr, $call);
    __label__ = 3;
    break;
   case 30:
    _png_handle_gAMA($png_ptr, $info_ptr, $call);
    __label__ = 3;
    break;
   case 31:
    _png_handle_hIST($png_ptr, $info_ptr, $call);
    __label__ = 3;
    break;
   case 32:
    _png_handle_oFFs($png_ptr, $info_ptr, $call);
    __label__ = 3;
    break;
   case 33:
    _png_handle_pCAL($png_ptr, $info_ptr, $call);
    __label__ = 3;
    break;
   case 34:
    _png_handle_sCAL($png_ptr, $info_ptr, $call);
    __label__ = 3;
    break;
   case 35:
    _png_handle_pHYs($png_ptr, $info_ptr, $call);
    __label__ = 3;
    break;
   case 36:
    _png_handle_sBIT($png_ptr, $info_ptr, $call);
    __label__ = 3;
    break;
   case 37:
    _png_handle_sRGB($png_ptr, $info_ptr, $call);
    __label__ = 3;
    break;
   case 38:
    _png_handle_iCCP($png_ptr, $info_ptr, $call);
    __label__ = 3;
    break;
   case 39:
    _png_handle_sPLT($png_ptr, $info_ptr, $call);
    __label__ = 3;
    break;
   case 40:
    _png_handle_tEXt($png_ptr, $info_ptr, $call);
    __label__ = 3;
    break;
   case 41:
    _png_handle_tIME($png_ptr, $info_ptr, $call);
    __label__ = 3;
    break;
   case 42:
    _png_handle_tRNS($png_ptr, $info_ptr, $call);
    __label__ = 3;
    break;
   case 43:
    _png_handle_zTXt($png_ptr, $info_ptr, $call);
    __label__ = 3;
    break;
   case 44:
    _png_handle_iTXt($png_ptr, $info_ptr, $call);
    __label__ = 3;
    break;
   case 45:
    _png_handle_unknown($png_ptr, $info_ptr, $call);
    __label__ = 3;
    break;
   case 46:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_read_info["X"] = 1;

function _png_read_row($png_ptr, $row) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 12;
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $row_info = __stackBase__;
    if (($png_ptr | 0) == 0) {
      __label__ = 73;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $flags = $png_ptr + 88 | 0;
    if ((HEAP32[$flags >> 2] & 64 | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    _png_read_start_row($png_ptr);
    __label__ = 4;
    break;
   case 4:
    var $iwidth = $png_ptr + 224 | 0;
    var $1 = HEAPU32[$iwidth >> 2];
    var $width = $row_info | 0;
    HEAP32[$width >> 2] = $1;
    var $2 = HEAP8[$png_ptr + 291 | 0];
    var $color_type3 = $row_info + 8 | 0;
    HEAP8[$color_type3] = $2;
    var $3 = HEAP8[$png_ptr + 292 | 0];
    HEAP8[$row_info + 9 | 0] = $3;
    var $4 = HEAP8[$png_ptr + 295 | 0];
    HEAP8[$row_info + 10 | 0] = $4;
    var $pixel_depth = $png_ptr + 294 | 0;
    var $5 = HEAPU8[$pixel_depth];
    var $pixel_depth6 = $row_info + 11 | 0;
    HEAP8[$pixel_depth6] = $5;
    var $conv = $5 & 255;
    if (($5 & 255) > 7) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    var $cond = ($conv >>> 3) * $1 | 0;
    __label__ = 7;
    break;
   case 6:
    var $cond = ($1 * $conv + 7 | 0) >>> 3;
    __label__ = 7;
    break;
   case 7:
    var $cond;
    var $rowbytes = $row_info + 4 | 0;
    HEAP32[$rowbytes >> 2] = $cond;
    var $row_number = $png_ptr + 228 | 0;
    var $6 = HEAPU32[$row_number >> 2];
    var $interlaced = $png_ptr + 288 | 0;
    if (HEAP8[$interlaced] << 24 >> 24 == 0) {
      __label__ = 27;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    if ((HEAP32[$png_ptr + 92 >> 2] & 2 | 0) == 0) {
      __label__ = 27;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    var $conv32 = HEAPU8[$png_ptr + 289 | 0] & 255;
    if (($conv32 | 0) == 0) {
      __label__ = 10;
      break;
    } else if (($conv32 | 0) == 1) {
      __label__ = 12;
      break;
    } else if (($conv32 | 0) == 2) {
      __label__ = 15;
      break;
    } else if (($conv32 | 0) == 3) {
      __label__ = 17;
      break;
    } else if (($conv32 | 0) == 4) {
      __label__ = 20;
      break;
    } else if (($conv32 | 0) == 5) {
      __label__ = 22;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 10:
    if (($6 & 7 | 0) == 0) {
      __label__ = 27;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    _png_read_finish_row($png_ptr);
    __label__ = 73;
    break;
   case 12:
    if (($6 & 7 | 0) == 0) {
      __label__ = 13;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 13:
    if (HEAPU32[$png_ptr + 204 >> 2] >>> 0 < 5) {
      __label__ = 14;
      break;
    } else {
      __label__ = 27;
      break;
    }
   case 14:
    _png_read_finish_row($png_ptr);
    __label__ = 73;
    break;
   case 15:
    if (($6 & 7 | 0) == 4) {
      __label__ = 27;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 16:
    _png_read_finish_row($png_ptr);
    __label__ = 73;
    break;
   case 17:
    if (($6 & 3 | 0) == 0) {
      __label__ = 18;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 18:
    if (HEAPU32[$png_ptr + 204 >> 2] >>> 0 < 3) {
      __label__ = 19;
      break;
    } else {
      __label__ = 27;
      break;
    }
   case 19:
    _png_read_finish_row($png_ptr);
    __label__ = 73;
    break;
   case 20:
    if (($6 & 3 | 0) == 2) {
      __label__ = 27;
      break;
    } else {
      __label__ = 21;
      break;
    }
   case 21:
    _png_read_finish_row($png_ptr);
    __label__ = 73;
    break;
   case 22:
    if (($6 & 1 | 0) == 0) {
      __label__ = 23;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 23:
    if (HEAPU32[$png_ptr + 204 >> 2] >>> 0 < 2) {
      __label__ = 24;
      break;
    } else {
      __label__ = 27;
      break;
    }
   case 24:
    _png_read_finish_row($png_ptr);
    __label__ = 73;
    break;
   case 25:
    if (($6 & 1 | 0) == 0) {
      __label__ = 26;
      break;
    } else {
      __label__ = 27;
      break;
    }
   case 26:
    _png_read_finish_row($png_ptr);
    __label__ = 73;
    break;
   case 27:
    var $mode = $png_ptr + 84 | 0;
    if ((HEAP32[$mode >> 2] & 4 | 0) == 0) {
      __label__ = 28;
      break;
    } else {
      var $16 = $5;
      var $15 = $1;
      __label__ = 29;
      break;
    }
   case 28:
    var $14 = $png_ptr;
    _png_error($14, STRING_TABLE.__str7681 | 0);
    var $16 = HEAP8[$pixel_depth];
    var $15 = HEAP32[$iwidth >> 2];
    __label__ = 29;
    break;
   case 29:
    var $15;
    var $16;
    var $row_buf = $png_ptr + 240 | 0;
    var $17 = HEAP32[$row_buf >> 2];
    var $zstream = $png_ptr + 96 | 0;
    HEAP32[$png_ptr + 108 >> 2] = $17;
    var $conv125 = $16 & 255;
    if (($16 & 255) > 7) {
      __label__ = 30;
      break;
    } else {
      __label__ = 31;
      break;
    }
   case 30:
    var $cond142 = ($conv125 >>> 3) * $15 | 0;
    __label__ = 32;
    break;
   case 31:
    var $cond142 = ($15 * $conv125 + 7 | 0) >>> 3;
    __label__ = 32;
    break;
   case 32:
    var $cond142;
    var $avail_out = $png_ptr + 112 | 0;
    HEAP32[$avail_out >> 2] = $cond142 + 1 | 0;
    var $avail_in = $png_ptr + 100 | 0;
    var $msg = $png_ptr + 120 | 0;
    var $18 = $png_ptr;
    var $idat_size = $png_ptr + 264 | 0;
    var $zbuf_size = $png_ptr + 156 | 0;
    var $zbuf = $png_ptr + 152 | 0;
    var $next_in = $zstream | 0;
    var $chunk_name = $png_ptr + 232 | 0;
    __label__ = 33;
    break;
   case 33:
    if ((HEAP32[$avail_in >> 2] | 0) == 0) {
      __label__ = 34;
      break;
    } else {
      __label__ = 41;
      break;
    }
   case 34:
    var $20 = HEAP32[$idat_size >> 2];
    if (($20 | 0) == 0) {
      __label__ = 35;
      break;
    } else {
      var $23 = $20;
      __label__ = 38;
      break;
    }
   case 35:
    var $call = _png_crc_finish($png_ptr, 0);
    var $call149 = _png_read_chunk_header($png_ptr);
    HEAP32[$idat_size >> 2] = $call149;
    if ((HEAP32[$chunk_name >> 2] | 0) == 1229209940) {
      var $22 = $call149;
      __label__ = 37;
      break;
    } else {
      __label__ = 36;
      break;
    }
   case 36:
    _png_error($18, STRING_TABLE.__str138887 | 0);
    var $22 = HEAP32[$idat_size >> 2];
    __label__ = 37;
    break;
   case 37:
    var $22;
    if (($22 | 0) == 0) {
      __label__ = 35;
      break;
    } else {
      var $23 = $22;
      __label__ = 38;
      break;
    }
   case 38:
    var $23;
    var $24 = HEAPU32[$zbuf_size >> 2];
    HEAP32[$avail_in >> 2] = $24;
    var $25 = HEAPU32[$zbuf >> 2];
    HEAP32[$next_in >> 2] = $25;
    if ($24 >>> 0 > $23 >>> 0) {
      __label__ = 39;
      break;
    } else {
      var $26 = $24;
      __label__ = 40;
      break;
    }
   case 39:
    HEAP32[$avail_in >> 2] = $23;
    var $26 = $23;
    __label__ = 40;
    break;
   case 40:
    var $26;
    _png_crc_read($png_ptr, $25, $26);
    var $sub = HEAP32[$idat_size >> 2] - HEAP32[$avail_in >> 2] | 0;
    HEAP32[$idat_size >> 2] = $sub;
    __label__ = 41;
    break;
   case 41:
    var $call175 = _inflate($zstream, 1);
    if (($call175 | 0) == 1) {
      __label__ = 42;
      break;
    } else if (($call175 | 0) == 0) {
      __label__ = 48;
      break;
    } else {
      __label__ = 47;
      break;
    }
   case 42:
    if ((HEAP32[$avail_out >> 2] | 0) == 0) {
      __label__ = 43;
      break;
    } else {
      __label__ = 45;
      break;
    }
   case 43:
    if ((HEAP32[$avail_in >> 2] | 0) == 0) {
      __label__ = 44;
      break;
    } else {
      __label__ = 45;
      break;
    }
   case 44:
    if ((HEAP32[$idat_size >> 2] | 0) == 0) {
      __label__ = 46;
      break;
    } else {
      __label__ = 45;
      break;
    }
   case 45:
    _png_benign_error($18, STRING_TABLE.__str139888 | 0);
    __label__ = 46;
    break;
   case 46:
    var $or = HEAP32[$mode >> 2] | 8;
    HEAP32[$mode >> 2] = $or;
    var $or193 = HEAP32[$flags >> 2] | 32;
    HEAP32[$flags >> 2] = $or193;
    __label__ = 49;
    break;
   case 47:
    var $34 = HEAP32[$msg >> 2];
    var $cond205 = ($34 | 0) == 0 ? STRING_TABLE.__str10684 | 0 : $34;
    _png_error($18, $cond205);
    __label__ = 48;
    break;
   case 48:
    if ((HEAP32[$avail_out >> 2] | 0) == 0) {
      __label__ = 49;
      break;
    } else {
      __label__ = 33;
      break;
    }
   case 49:
    var $36 = HEAPU32[$row_buf >> 2];
    var $37 = HEAPU8[$36];
    var $conv211 = $37 & 255;
    if ($37 << 24 >> 24 == 0) {
      __label__ = 53;
      break;
    } else {
      __label__ = 50;
      break;
    }
   case 50:
    if (($37 & 255) < 5) {
      __label__ = 51;
      break;
    } else {
      __label__ = 52;
      break;
    }
   case 51:
    var $add_ptr = $36 + 1 | 0;
    var $add_ptr222 = HEAP32[$png_ptr + 236 >> 2] + 1 | 0;
    _png_read_filter_row($png_ptr, $row_info, $add_ptr, $add_ptr222, $conv211);
    __label__ = 53;
    break;
   case 52:
    _png_error($18, STRING_TABLE.__str11685 | 0);
    __label__ = 53;
    break;
   case 53:
    var $39 = HEAP32[$png_ptr + 236 >> 2];
    var $40 = HEAP32[$row_buf >> 2];
    var $add231 = HEAP32[$rowbytes >> 2] + 1 | 0;
    _memcpy($39, $40, $add231, 1);
    if ((HEAP32[$png_ptr + 576 >> 2] & 4 | 0) == 0) {
      __label__ = 56;
      break;
    } else {
      __label__ = 54;
      break;
    }
   case 54:
    if (HEAP8[$png_ptr + 580 | 0] << 24 >> 24 == 64) {
      __label__ = 55;
      break;
    } else {
      __label__ = 56;
      break;
    }
   case 55:
    var $add_ptr240 = HEAP32[$row_buf >> 2] + 1 | 0;
    var $row_info_idx_val = HEAP32[$width >> 2];
    var $row_info_idx1_val = HEAPU16[$color_type3 >> 1];
    var $46 = $row_info_idx1_val & 255;
    var $48 = ($row_info_idx1_val & 65535) >>> 8 & 255;
    _png_do_read_intrapixel($row_info_idx_val, $46, $48, $add_ptr240);
    __label__ = 56;
    break;
   case 56:
    var $transformations242 = $png_ptr + 92 | 0;
    if ((HEAP32[$transformations242 >> 2] | 0) == 0) {
      __label__ = 58;
      break;
    } else {
      __label__ = 57;
      break;
    }
   case 57:
    _png_do_read_transformations($png_ptr, $row_info);
    __label__ = 58;
    break;
   case 58:
    var $transformed_pixel_depth = $png_ptr + 299 | 0;
    var $50 = HEAPU8[$transformed_pixel_depth];
    var $51 = HEAPU8[$pixel_depth6];
    if ($50 << 24 >> 24 == 0) {
      __label__ = 59;
      break;
    } else {
      __label__ = 61;
      break;
    }
   case 59:
    HEAP8[$transformed_pixel_depth] = $51;
    if (($51 & 255) > (HEAPU8[$png_ptr + 298 | 0] & 255)) {
      __label__ = 60;
      break;
    } else {
      __label__ = 63;
      break;
    }
   case 60:
    _png_error($18, STRING_TABLE.__str12686 | 0);
    __label__ = 63;
    break;
   case 61:
    if ($50 << 24 >> 24 == $51 << 24 >> 24) {
      __label__ = 63;
      break;
    } else {
      __label__ = 62;
      break;
    }
   case 62:
    _png_error($18, STRING_TABLE.__str13687 | 0);
    __label__ = 63;
    break;
   case 63:
    if (HEAP8[$interlaced] << 24 >> 24 == 0) {
      __label__ = 69;
      break;
    } else {
      __label__ = 64;
      break;
    }
   case 64:
    var $54 = HEAPU32[$transformations242 >> 2];
    if (($54 & 2 | 0) == 0) {
      __label__ = 69;
      break;
    } else {
      __label__ = 65;
      break;
    }
   case 65:
    var $55 = HEAPU8[$png_ptr + 289 | 0];
    if (($55 & 255) < 6) {
      __label__ = 66;
      break;
    } else {
      __label__ = 67;
      break;
    }
   case 66:
    var $conv278 = $55 & 255;
    var $add_ptr283 = HEAP32[$row_buf >> 2] + 1 | 0;
    _png_do_read_interlace($row_info, $add_ptr283, $conv278, $54);
    __label__ = 67;
    break;
   case 67:
    if (($row | 0) == 0) {
      __label__ = 71;
      break;
    } else {
      __label__ = 68;
      break;
    }
   case 68:
    _png_combine_row($png_ptr, $row, 0);
    __label__ = 71;
    break;
   case 69:
    if (($row | 0) == 0) {
      __label__ = 71;
      break;
    } else {
      __label__ = 70;
      break;
    }
   case 70:
    _png_combine_row($png_ptr, $row, -1);
    __label__ = 71;
    break;
   case 71:
    _png_read_finish_row($png_ptr);
    var $57 = HEAPU32[$png_ptr + 412 >> 2];
    if (($57 | 0) == 0) {
      __label__ = 73;
      break;
    } else {
      __label__ = 72;
      break;
    }
   case 72:
    var $58 = HEAP32[$row_number >> 2];
    var $conv312 = HEAPU8[$png_ptr + 289 | 0] & 255;
    FUNCTION_TABLE[$57]($png_ptr, $58, $conv312);
    __label__ = 73;
    break;
   case 73:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_read_row["X"] = 1;

function _png_read_end($png_ptr, $info_ptr) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0) {
      __label__ = 43;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $call = _png_crc_finish($png_ptr, 0);
    if (HEAP8[$png_ptr + 291 | 0] << 24 >> 24 == 3) {
      __label__ = 3;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 3:
    if ((HEAP32[$png_ptr + 280 >> 2] | 0) > (HEAPU16[$png_ptr + 276 >> 1] & 65535 | 0)) {
      __label__ = 4;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 4:
    var $3 = $png_ptr;
    _png_benign_error($3, STRING_TABLE.__str15689 | 0);
    __label__ = 5;
    break;
   case 5:
    var $chunk_name9 = $png_ptr + 232 | 0;
    var $mode41 = $png_ptr + 84 | 0;
    var $4 = $png_ptr;
    __label__ = 6;
    break;
   case 6:
    var $call8 = _png_read_chunk_header($png_ptr);
    var $5 = HEAPU32[$chunk_name9 >> 2];
    if (($5 | 0) == 1229472850) {
      __label__ = 7;
      break;
    } else if (($5 | 0) == 1229278788) {
      __label__ = 8;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 7:
    _png_handle_IHDR($png_ptr, $info_ptr, $call8);
    __label__ = 42;
    break;
   case 8:
    _png_handle_IEND($png_ptr, $call8);
    __label__ = 42;
    break;
   case 9:
    var $call17 = _png_chunk_unknown_handling($png_ptr, $5);
    var $cmp21 = ($5 | 0) == 1229209940;
    if (($call17 | 0) == 0) {
      __label__ = 17;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 10:
    if ($cmp21) {
      __label__ = 11;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 11:
    if (($call8 | 0) == 0) {
      __label__ = 12;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 12:
    if ((HEAP32[$mode41 >> 2] & 8192 | 0) == 0) {
      __label__ = 13;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 13:
    _png_handle_unknown($png_ptr, $info_ptr, 0);
    __label__ = 42;
    break;
   case 14:
    _png_benign_error($4, STRING_TABLE.__str16690 | 0);
    __label__ = 15;
    break;
   case 15:
    _png_handle_unknown($png_ptr, $info_ptr, $call8);
    if (($5 | 0) == 1347179589) {
      __label__ = 16;
      break;
    } else {
      __label__ = 42;
      break;
    }
   case 16:
    var $or = HEAP32[$mode41 >> 2] | 2;
    HEAP32[$mode41 >> 2] = $or;
    __label__ = 42;
    break;
   case 17:
    if ($cmp21) {
      __label__ = 18;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 18:
    if (($call8 | 0) == 0) {
      __label__ = 19;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 19:
    if ((HEAP32[$mode41 >> 2] & 8192 | 0) == 0) {
      __label__ = 21;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 20:
    _png_benign_error($4, STRING_TABLE.__str16690 | 0);
    __label__ = 21;
    break;
   case 21:
    var $call46 = _png_crc_finish($png_ptr, $call8);
    __label__ = 42;
    break;
   case 22:
    if (($5 | 0) == 1347179589) {
      __label__ = 23;
      break;
    } else if (($5 | 0) == 1649100612) {
      __label__ = 24;
      break;
    } else if (($5 | 0) == 1665684045) {
      __label__ = 25;
      break;
    } else if (($5 | 0) == 1732332865) {
      __label__ = 26;
      break;
    } else if (($5 | 0) == 1749635924) {
      __label__ = 27;
      break;
    } else if (($5 | 0) == 1866876531) {
      __label__ = 28;
      break;
    } else if (($5 | 0) == 1883455820) {
      __label__ = 29;
      break;
    } else if (($5 | 0) == 1933787468) {
      __label__ = 30;
      break;
    } else if (($5 | 0) == 1883789683) {
      __label__ = 31;
      break;
    } else if (($5 | 0) == 1933723988) {
      __label__ = 32;
      break;
    } else if (($5 | 0) == 1934772034) {
      __label__ = 33;
      break;
    } else if (($5 | 0) == 1766015824) {
      __label__ = 34;
      break;
    } else if (($5 | 0) == 1934642260) {
      __label__ = 35;
      break;
    } else if (($5 | 0) == 1950701684) {
      __label__ = 36;
      break;
    } else if (($5 | 0) == 1950960965) {
      __label__ = 37;
      break;
    } else if (($5 | 0) == 1951551059) {
      __label__ = 38;
      break;
    } else if (($5 | 0) == 2052348020) {
      __label__ = 39;
      break;
    } else if (($5 | 0) == 1767135348) {
      __label__ = 40;
      break;
    } else {
      __label__ = 41;
      break;
    }
   case 23:
    _png_handle_PLTE($png_ptr, $info_ptr, $call8);
    __label__ = 42;
    break;
   case 24:
    _png_handle_bKGD($png_ptr, $info_ptr, $call8);
    __label__ = 42;
    break;
   case 25:
    _png_handle_cHRM($png_ptr, $info_ptr, $call8);
    __label__ = 42;
    break;
   case 26:
    _png_handle_gAMA($png_ptr, $info_ptr, $call8);
    __label__ = 42;
    break;
   case 27:
    _png_handle_hIST($png_ptr, $info_ptr, $call8);
    __label__ = 42;
    break;
   case 28:
    _png_handle_oFFs($png_ptr, $info_ptr, $call8);
    __label__ = 42;
    break;
   case 29:
    _png_handle_pCAL($png_ptr, $info_ptr, $call8);
    __label__ = 42;
    break;
   case 30:
    _png_handle_sCAL($png_ptr, $info_ptr, $call8);
    __label__ = 42;
    break;
   case 31:
    _png_handle_pHYs($png_ptr, $info_ptr, $call8);
    __label__ = 42;
    break;
   case 32:
    _png_handle_sBIT($png_ptr, $info_ptr, $call8);
    __label__ = 42;
    break;
   case 33:
    _png_handle_sRGB($png_ptr, $info_ptr, $call8);
    __label__ = 42;
    break;
   case 34:
    _png_handle_iCCP($png_ptr, $info_ptr, $call8);
    __label__ = 42;
    break;
   case 35:
    _png_handle_sPLT($png_ptr, $info_ptr, $call8);
    __label__ = 42;
    break;
   case 36:
    _png_handle_tEXt($png_ptr, $info_ptr, $call8);
    __label__ = 42;
    break;
   case 37:
    _png_handle_tIME($png_ptr, $info_ptr, $call8);
    __label__ = 42;
    break;
   case 38:
    _png_handle_tRNS($png_ptr, $info_ptr, $call8);
    __label__ = 42;
    break;
   case 39:
    _png_handle_zTXt($png_ptr, $info_ptr, $call8);
    __label__ = 42;
    break;
   case 40:
    _png_handle_iTXt($png_ptr, $info_ptr, $call8);
    __label__ = 42;
    break;
   case 41:
    _png_handle_unknown($png_ptr, $info_ptr, $call8);
    __label__ = 42;
    break;
   case 42:
    if ((HEAP32[$mode41 >> 2] & 16 | 0) == 0) {
      __label__ = 6;
      break;
    } else {
      __label__ = 43;
      break;
    }
   case 43:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_read_end["X"] = 1;

function _png_destroy_read_struct() {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $0 = HEAP32[_read_ptr >> 2];
    if (($0 | 0) == 0) {
      __label__ = 7;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $1 = HEAP32[$0 + 592 >> 2];
    var $2 = HEAP32[$0 + 584 >> 2];
    var $3 = HEAP32[_read_info_ptr >> 2];
    var $4 = HEAP32[_end_info_ptr >> 2];
    _png_read_destroy($0, $3, $4);
    if (($3 | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    _png_free_data($0, $3, 16384, -1);
    var $5 = $3;
    var $6 = $1;
    _png_destroy_struct_2($5, $6, $2);
    HEAP32[_read_info_ptr >> 2] = 0;
    __label__ = 4;
    break;
   case 4:
    if (($4 | 0) == 0) {
      __label__ = 6;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    _png_free_data($0, $4, 16384, -1);
    var $7 = $4;
    var $8 = $1;
    _png_destroy_struct_2($7, $8, $2);
    HEAP32[_end_info_ptr >> 2] = 0;
    __label__ = 6;
    break;
   case 6:
    var $9 = $0;
    var $10 = $1;
    _png_destroy_struct_2($9, $10, $2);
    HEAP32[_read_ptr >> 2] = 0;
    __label__ = 7;
    break;
   case 7:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_read_destroy($png_ptr, $info_ptr, $end_info_ptr) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($info_ptr | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    _png_info_destroy($png_ptr, $info_ptr);
    __label__ = 3;
    break;
   case 3:
    if (($end_info_ptr | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    _png_info_destroy($png_ptr, $end_info_ptr);
    __label__ = 5;
    break;
   case 5:
    _png_destroy_gamma_table($png_ptr);
    var $0 = HEAP32[$png_ptr + 152 >> 2];
    var $1 = $png_ptr;
    _png_free($1, $0);
    var $2 = HEAP32[$png_ptr + 596 >> 2];
    _png_free($1, $2);
    var $3 = HEAP32[$png_ptr + 664 >> 2];
    _png_free($1, $3);
    var $4 = HEAP32[$png_ptr + 656 >> 2];
    _png_free($1, $4);
    var $5 = HEAP32[$png_ptr + 480 >> 2];
    _png_free($1, $5);
    var $6 = HEAP32[$png_ptr + 484 >> 2];
    _png_free($1, $6);
    var $free_me = $png_ptr + 548 | 0;
    var $7 = HEAP32[$free_me >> 2];
    if (($7 & 4096 | 0) == 0) {
      var $11 = $7;
      __label__ = 7;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    var $8 = $png_ptr;
    var $10 = HEAP32[$png_ptr + 272 >> 2] | 0;
    _png_zfree($8, $10);
    var $11 = HEAP32[$free_me >> 2];
    __label__ = 7;
    break;
   case 7:
    var $11;
    var $and7 = $11 & -4097;
    HEAP32[$free_me >> 2] = $and7;
    if (($11 & 8192 | 0) == 0) {
      var $13 = $and7;
      __label__ = 9;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    var $12 = HEAP32[$png_ptr + 396 >> 2];
    _png_free($1, $12);
    var $13 = HEAP32[$free_me >> 2];
    __label__ = 9;
    break;
   case 9:
    var $13;
    var $and14 = $13 & -8193;
    HEAP32[$free_me >> 2] = $and14;
    if (($13 & 8 | 0) == 0) {
      var $16 = $and14;
      __label__ = 11;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 10:
    var $15 = HEAP32[$png_ptr + 488 >> 2];
    _png_free($1, $15);
    var $16 = HEAP32[$free_me >> 2];
    __label__ = 11;
    break;
   case 11:
    var $16;
    HEAP32[$free_me >> 2] = $16 & -9;
    var $zstream = $png_ptr + 96 | 0;
    _inflateEnd($zstream);
    var $17 = HEAP32[$png_ptr + 436 >> 2];
    _png_free($1, $17);
    var $18 = $png_ptr;
    var $st$9$0 = $18 | 0;
    var $srcval1$0 = HEAPU8[$st$9$0] | HEAPU8[$st$9$0 + 1] << 8 | HEAPU8[$st$9$0 + 2] << 16 | HEAPU8[$st$9$0 + 3] << 24 | 0;
    var $st$9$1 = $18 + 4 | 0;
    var $srcval1$1 = HEAPU8[$st$9$1] | HEAPU8[$st$9$1 + 1] << 8 | HEAPU8[$st$9$1 + 2] << 16 | HEAPU8[$st$9$1 + 3] << 24 | 0;
    var $st$9$2 = $18 + 8 | 0;
    var $srcval1$2 = HEAPU8[$st$9$2] | HEAPU8[$st$9$2 + 1] << 8 | HEAPU8[$st$9$2 + 2] << 16 | HEAPU8[$st$9$2 + 3] << 24 | 0;
    var $st$9$3 = $18 + 12 | 0;
    var $srcval1$3 = HEAPU8[$st$9$3] | HEAPU8[$st$9$3 + 1] << 8 | HEAPU8[$st$9$3 + 2] << 16 | HEAPU8[$st$9$3 + 3] << 24 | 0;
    var $st$9$4 = $18 + 16 | 0;
    var $srcval1$4 = HEAPU8[$st$9$4] | HEAPU8[$st$9$4 + 1] << 8 | HEAPU8[$st$9$4 + 2] << 16 | HEAPU8[$st$9$4 + 3] << 24 | 0;
    var $st$9$5 = $18 + 20 | 0;
    var $srcval1$5 = HEAPU8[$st$9$5] | HEAPU8[$st$9$5 + 1] << 8 | HEAPU8[$st$9$5 + 2] << 16 | HEAPU8[$st$9$5 + 3] << 24 | 0;
    var $st$9$6 = $18 + 24 | 0;
    var $srcval1$6 = HEAPU8[$st$9$6] | HEAPU8[$st$9$6 + 1] << 8 | HEAPU8[$st$9$6 + 2] << 16 | HEAPU8[$st$9$6 + 3] << 24 | 0;
    var $st$9$7 = $18 + 28 | 0;
    var $srcval1$7 = HEAPU8[$st$9$7] | HEAPU8[$st$9$7 + 1] << 8 | HEAPU8[$st$9$7 + 2] << 16 | HEAPU8[$st$9$7 + 3] << 24 | 0;
    var $st$9$8 = $18 + 32 | 0;
    var $srcval1$8 = HEAPU8[$st$9$8] | HEAPU8[$st$9$8 + 1] << 8 | HEAPU8[$st$9$8 + 2] << 16 | HEAPU8[$st$9$8 + 3] << 24 | 0;
    var $st$9$9 = $18 + 36 | 0;
    var $srcval1$9 = HEAPU8[$st$9$9] | HEAPU8[$st$9$9 + 1] << 8 | HEAPU8[$st$9$9 + 2] << 16 | HEAPU8[$st$9$9 + 3] << 24 | 0;
    var $error_fn23 = $png_ptr + 44 | 0;
    var $19 = HEAP32[$error_fn23 >> 2];
    var $warning_fn24 = $png_ptr + 48 | 0;
    var $20 = HEAP32[$warning_fn24 >> 2];
    var $error_ptr25 = $png_ptr + 52 | 0;
    var $21 = HEAP32[$error_ptr25 >> 2];
    var $free_fn26 = $png_ptr + 592 | 0;
    var $22 = HEAP32[$free_fn26 >> 2];
    var $23 = $png_ptr;
    _memset($23, 0, 684, 1);
    HEAP32[$error_fn23 >> 2] = $19;
    HEAP32[$warning_fn24 >> 2] = $20;
    HEAP32[$error_ptr25 >> 2] = $21;
    HEAP32[$free_fn26 >> 2] = $22;
    var $st$43$0 = $18 | 0;
    tempBigInt = $srcval1$0;
    HEAP8[$st$43$0] = tempBigInt & 255;
    tempBigInt >>= 8;
    HEAP8[$st$43$0 + 1] = tempBigInt & 255;
    tempBigInt >>= 8;
    HEAP8[$st$43$0 + 2] = tempBigInt & 255;
    tempBigInt >>= 8;
    HEAP8[$st$43$0 + 3] = tempBigInt & 255;
    var $st$43$1 = $18 + 4 | 0;
    tempBigInt = $srcval1$1;
    HEAP8[$st$43$1] = tempBigInt & 255;
    tempBigInt >>= 8;
    HEAP8[$st$43$1 + 1] = tempBigInt & 255;
    tempBigInt >>= 8;
    HEAP8[$st$43$1 + 2] = tempBigInt & 255;
    tempBigInt >>= 8;
    HEAP8[$st$43$1 + 3] = tempBigInt & 255;
    var $st$43$2 = $18 + 8 | 0;
    tempBigInt = $srcval1$2;
    HEAP8[$st$43$2] = tempBigInt & 255;
    tempBigInt >>= 8;
    HEAP8[$st$43$2 + 1] = tempBigInt & 255;
    tempBigInt >>= 8;
    HEAP8[$st$43$2 + 2] = tempBigInt & 255;
    tempBigInt >>= 8;
    HEAP8[$st$43$2 + 3] = tempBigInt & 255;
    var $st$43$3 = $18 + 12 | 0;
    tempBigInt = $srcval1$3;
    HEAP8[$st$43$3] = tempBigInt & 255;
    tempBigInt >>= 8;
    HEAP8[$st$43$3 + 1] = tempBigInt & 255;
    tempBigInt >>= 8;
    HEAP8[$st$43$3 + 2] = tempBigInt & 255;
    tempBigInt >>= 8;
    HEAP8[$st$43$3 + 3] = tempBigInt & 255;
    var $st$43$4 = $18 + 16 | 0;
    tempBigInt = $srcval1$4;
    HEAP8[$st$43$4] = tempBigInt & 255;
    tempBigInt >>= 8;
    HEAP8[$st$43$4 + 1] = tempBigInt & 255;
    tempBigInt >>= 8;
    HEAP8[$st$43$4 + 2] = tempBigInt & 255;
    tempBigInt >>= 8;
    HEAP8[$st$43$4 + 3] = tempBigInt & 255;
    var $st$43$5 = $18 + 20 | 0;
    tempBigInt = $srcval1$5;
    HEAP8[$st$43$5] = tempBigInt & 255;
    tempBigInt >>= 8;
    HEAP8[$st$43$5 + 1] = tempBigInt & 255;
    tempBigInt >>= 8;
    HEAP8[$st$43$5 + 2] = tempBigInt & 255;
    tempBigInt >>= 8;
    HEAP8[$st$43$5 + 3] = tempBigInt & 255;
    var $st$43$6 = $18 + 24 | 0;
    tempBigInt = $srcval1$6;
    HEAP8[$st$43$6] = tempBigInt & 255;
    tempBigInt >>= 8;
    HEAP8[$st$43$6 + 1] = tempBigInt & 255;
    tempBigInt >>= 8;
    HEAP8[$st$43$6 + 2] = tempBigInt & 255;
    tempBigInt >>= 8;
    HEAP8[$st$43$6 + 3] = tempBigInt & 255;
    var $st$43$7 = $18 + 28 | 0;
    tempBigInt = $srcval1$7;
    HEAP8[$st$43$7] = tempBigInt & 255;
    tempBigInt >>= 8;
    HEAP8[$st$43$7 + 1] = tempBigInt & 255;
    tempBigInt >>= 8;
    HEAP8[$st$43$7 + 2] = tempBigInt & 255;
    tempBigInt >>= 8;
    HEAP8[$st$43$7 + 3] = tempBigInt & 255;
    var $st$43$8 = $18 + 32 | 0;
    tempBigInt = $srcval1$8;
    HEAP8[$st$43$8] = tempBigInt & 255;
    tempBigInt >>= 8;
    HEAP8[$st$43$8 + 1] = tempBigInt & 255;
    tempBigInt >>= 8;
    HEAP8[$st$43$8 + 2] = tempBigInt & 255;
    tempBigInt >>= 8;
    HEAP8[$st$43$8 + 3] = tempBigInt & 255;
    var $st$43$9 = $18 + 36 | 0;
    tempBigInt = $srcval1$9;
    HEAP8[$st$43$9] = tempBigInt & 255;
    tempBigInt >>= 8;
    HEAP8[$st$43$9 + 1] = tempBigInt & 255;
    tempBigInt >>= 8;
    HEAP8[$st$43$9 + 2] = tempBigInt & 255;
    tempBigInt >>= 8;
    HEAP8[$st$43$9 + 3] = tempBigInt & 255;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_read_destroy["X"] = 1;

function _png_read_data($png_ptr, $data, $length) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $read_data_fn11 = HEAP32[$png_ptr + 60 >> 2];
    if (($read_data_fn11 | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $0 = $read_data_fn11;
    FUNCTION_TABLE[$0]($png_ptr, $data, $length);
    __label__ = 4;
    break;
   case 3:
    var $1 = $png_ptr;
    _png_error($1, STRING_TABLE.__str704 | 0);
    __label__ = 4;
    break;
   case 4:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_default_read_data($png_ptr, $data, $length) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $1 = HEAP32[$png_ptr + 64 >> 2];
    var $call = _fread($data, 1, $length, $1);
    if (($call | 0) == ($length | 0)) {
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $2 = $png_ptr;
    _png_error($2, STRING_TABLE.__str1705 | 0);
    __label__ = 4;
    break;
   case 4:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_set_read_fn($png_ptr) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    HEAP32[$png_ptr + 64 >> 2] = 0;
    HEAP32[$png_ptr + 60 >> 2] = 14;
    var $write_data_fn = $png_ptr + 56 | 0;
    if ((HEAP32[$write_data_fn >> 2] | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    HEAP32[$write_data_fn >> 2] = 0;
    var $0 = $png_ptr;
    _png_warning($0, STRING_TABLE.__str21087 | 0);
    __label__ = 4;
    break;
   case 4:
    HEAP32[$png_ptr + 336 >> 2] = 0;
    __label__ = 5;
    break;
   case 5:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_set_crc_action($png_ptr, $crit_action, $ancil_action) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0) {
      __label__ = 12;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    if (($crit_action | 0) == 3) {
      __label__ = 3;
      break;
    } else if (($crit_action | 0) == 4) {
      __label__ = 4;
      break;
    } else if (($crit_action | 0) == 2) {
      __label__ = 5;
      break;
    } else if (($crit_action | 0) == 5) {
      __label__ = 7;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 3:
    var $flags = $png_ptr + 88 | 0;
    var $or = HEAP32[$flags >> 2] & -3073 | 1024;
    HEAP32[$flags >> 2] = $or;
    __label__ = 7;
    break;
   case 4:
    var $flags3 = $png_ptr + 88 | 0;
    var $or6 = HEAP32[$flags3 >> 2] | 3072;
    HEAP32[$flags3 >> 2] = $or6;
    __label__ = 7;
    break;
   case 5:
    var $2 = $png_ptr;
    _png_warning($2, STRING_TABLE.__str709 | 0);
    __label__ = 6;
    break;
   case 6:
    var $flags9 = $png_ptr + 88 | 0;
    var $and10 = HEAP32[$flags9 >> 2] & -3073;
    HEAP32[$flags9 >> 2] = $and10;
    __label__ = 7;
    break;
   case 7:
    if (($ancil_action | 0) == 3) {
      __label__ = 8;
      break;
    } else if (($ancil_action | 0) == 4) {
      __label__ = 9;
      break;
    } else if (($ancil_action | 0) == 1) {
      __label__ = 10;
      break;
    } else if (($ancil_action | 0) == 5) {
      __label__ = 12;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 8:
    var $flags12 = $png_ptr + 88 | 0;
    var $or15 = HEAP32[$flags12 >> 2] & -769 | 256;
    HEAP32[$flags12 >> 2] = $or15;
    __label__ = 12;
    break;
   case 9:
    var $flags17 = $png_ptr + 88 | 0;
    var $or20 = HEAP32[$flags17 >> 2] | 768;
    HEAP32[$flags17 >> 2] = $or20;
    __label__ = 12;
    break;
   case 10:
    var $flags22 = $png_ptr + 88 | 0;
    var $or25 = HEAP32[$flags22 >> 2] & -769 | 512;
    HEAP32[$flags22 >> 2] = $or25;
    __label__ = 12;
    break;
   case 11:
    var $flags28 = $png_ptr + 88 | 0;
    var $and29 = HEAP32[$flags28 >> 2] & -769;
    HEAP32[$flags28 >> 2] = $and29;
    __label__ = 12;
    break;
   case 12:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_set_strip_alpha($png_ptr) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $transformations = $png_ptr + 92 | 0;
    var $or = HEAP32[$transformations >> 2] | 262144;
    HEAP32[$transformations >> 2] = $or;
    __label__ = 3;
    break;
   case 3:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_set_expand($png_ptr) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $transformations = $png_ptr + 92 | 0;
    var $or = HEAP32[$transformations >> 2] | 33558528;
    HEAP32[$transformations >> 2] = $or;
    var $flags = $png_ptr + 88 | 0;
    var $and = HEAP32[$flags >> 2] & -65;
    HEAP32[$flags >> 2] = $and;
    __label__ = 3;
    break;
   case 3:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_set_expand_gray_1_2_4_to_8($png_ptr) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $transformations = $png_ptr + 92 | 0;
    var $or = HEAP32[$transformations >> 2] | 4096;
    HEAP32[$transformations >> 2] = $or;
    var $flags = $png_ptr + 88 | 0;
    var $and = HEAP32[$flags >> 2] & -65;
    HEAP32[$flags >> 2] = $and;
    __label__ = 3;
    break;
   case 3:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_set_rgb_to_gray_fixed($png_ptr) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $transformations = $png_ptr + 92 | 0;
    var $0 = HEAP32[$transformations >> 2];
    var $or = $0 | 6291456;
    HEAP32[$transformations >> 2] = $or;
    if (HEAP8[$png_ptr + 291 | 0] << 24 >> 24 == 3) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $or11 = $0 | 6295552;
    HEAP32[$transformations >> 2] = $or11;
    __label__ = 4;
    break;
   case 4:
    HEAP16[$png_ptr + 572 >> 1] = 6966;
    HEAP16[$png_ptr + 574 >> 1] = 23435;
    HEAP8[$png_ptr + 570 | 0] = 1;
    __label__ = 5;
    break;
   case 5:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_set_gray_to_rgb($png_ptr) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    _png_set_expand_gray_1_2_4_to_8($png_ptr);
    var $transformations = $png_ptr + 92 | 0;
    var $or = HEAP32[$transformations >> 2] | 16384;
    HEAP32[$transformations >> 2] = $or;
    var $flags = $png_ptr + 88 | 0;
    var $and = HEAP32[$flags >> 2] & -65;
    HEAP32[$flags >> 2] = $and;
    __label__ = 3;
    break;
   case 3:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_init_read_transformations($png_ptr) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $gamma = $png_ptr + 352 | 0;
    var $0 = HEAP32[$gamma >> 2];
    var $screen_gamma = $png_ptr + 356 | 0;
    var $1 = HEAP32[$screen_gamma >> 2];
    var $cmp1 = ($1 | 0) != 0;
    if (($0 | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    if ($cmp1) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $call = _png_gamma_threshold($0, $1);
    var $gamma_correction_0 = ($call | 0) != 0;
    __label__ = 8;
    break;
   case 4:
    var $call6 = _png_reciprocal($0);
    HEAP32[$screen_gamma >> 2] = $call6;
    var $gamma_correction_0 = 0;
    __label__ = 8;
    break;
   case 5:
    if ($cmp1) {
      __label__ = 6;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 6:
    var $call13 = _png_reciprocal($1);
    HEAP32[$gamma >> 2] = $call13;
    var $gamma_correction_0 = 0;
    __label__ = 8;
    break;
   case 7:
    HEAP32[$gamma >> 2] = 1e5;
    HEAP32[$screen_gamma >> 2] = 1e5;
    var $gamma_correction_0 = 0;
    __label__ = 8;
    break;
   case 8:
    var $gamma_correction_0;
    var $transformations = $png_ptr + 92 | 0;
    var $2 = HEAP32[$transformations >> 2];
    var $storemerge = $gamma_correction_0 ? $2 | 8192 : $2 & -8193;
    HEAP32[$transformations >> 2] = $storemerge;
    if (($storemerge & 262272 | 0) == 262144) {
      __label__ = 9;
      break;
    } else {
      var $6 = $storemerge;
      __label__ = 10;
      break;
    }
   case 9:
    var $and32 = $storemerge & -41943297;
    HEAP32[$transformations >> 2] = $and32;
    var $flags = $png_ptr + 88 | 0;
    var $and33 = HEAP32[$flags >> 2] & -8193;
    HEAP32[$flags >> 2] = $and33;
    HEAP16[$png_ptr + 284 >> 1] = 0;
    var $6 = $and32;
    __label__ = 10;
    break;
   case 10:
    var $6;
    var $7 = HEAP32[$screen_gamma >> 2];
    var $call36 = _png_gamma_significant($7);
    if (($call36 | 0) == 0) {
      __label__ = 11;
      break;
    } else {
      var $9 = $6;
      __label__ = 12;
      break;
    }
   case 11:
    var $and40 = $6 & -8388609;
    HEAP32[$transformations >> 2] = $and40;
    var $flags41 = $png_ptr + 88 | 0;
    var $and42 = HEAP32[$flags41 >> 2] & -8193;
    HEAP32[$flags41 >> 2] = $and42;
    var $9 = $and40;
    __label__ = 12;
    break;
   case 12:
    var $9;
    if (($9 & 256 | 0) == 0) {
      __label__ = 15;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 13:
    if ((HEAP8[$png_ptr + 291 | 0] & 2) << 24 >> 24 == 0) {
      __label__ = 14;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 14:
    var $mode = $png_ptr + 84 | 0;
    var $or51 = HEAP32[$mode >> 2] | 2048;
    HEAP32[$mode >> 2] = $or51;
    __label__ = 19;
    break;
   case 15:
    if (($9 & 16512 | 0) == 16512) {
      __label__ = 16;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 16:
    var $14 = HEAP16[$png_ptr + 318 >> 1];
    if ($14 << 16 >> 16 == HEAP16[$png_ptr + 320 >> 1] << 16 >> 16) {
      __label__ = 17;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 17:
    if ($14 << 16 >> 16 == HEAP16[$png_ptr + 322 >> 1] << 16 >> 16) {
      __label__ = 18;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 18:
    var $mode76 = $png_ptr + 84 | 0;
    var $or77 = HEAP32[$mode76 >> 2] | 2048;
    HEAP32[$mode76 >> 2] = $or77;
    HEAP16[$png_ptr + 324 >> 1] = $14;
    __label__ = 19;
    break;
   case 19:
    var $color_type85 = $png_ptr + 291 | 0;
    if (HEAP8[$color_type85] << 24 >> 24 == 3) {
      __label__ = 20;
      break;
    } else {
      __label__ = 21;
      break;
    }
   case 20:
    _png_init_palette_transformations($png_ptr);
    __label__ = 22;
    break;
   case 21:
    _png_init_rgb_transformations($png_ptr);
    __label__ = 22;
    break;
   case 22:
    var $19 = HEAPU32[$transformations >> 2];
    if (($19 & 896 | 0) == 640) {
      __label__ = 23;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 23:
    if (HEAP8[$png_ptr + 292 | 0] << 24 >> 24 == 16) {
      __label__ = 25;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 24:
    var $red109 = $png_ptr + 318 | 0;
    HEAP16[$red109 >> 1] = ((HEAPU16[$red109 >> 1] & 65535) * 255 + 32895 | 0) >>> 16 & 65535;
    var $green115 = $png_ptr + 320 | 0;
    HEAP16[$green115 >> 1] = ((HEAPU16[$green115 >> 1] & 65535) * 255 + 32895 | 0) >>> 16 & 65535;
    var $blue124 = $png_ptr + 322 | 0;
    HEAP16[$blue124 >> 1] = ((HEAPU16[$blue124 >> 1] & 65535) * 255 + 32895 | 0) >>> 16 & 65535;
    var $gray133 = $png_ptr + 324 | 0;
    HEAP16[$gray133 >> 1] = ((HEAPU16[$gray133 >> 1] & 65535) * 255 + 32895 | 0) >>> 16 & 65535;
    __label__ = 25;
    break;
   case 25:
    var $and147 = $19 & 128;
    if (($and147 | 0) != 0 & ($19 & 67109888 | 0) != 0 & ($19 & 256 | 0) == 0) {
      __label__ = 26;
      break;
    } else {
      __label__ = 28;
      break;
    }
   case 26:
    if (HEAP8[$png_ptr + 292 | 0] << 24 >> 24 == 16) {
      __label__ = 27;
      break;
    } else {
      __label__ = 28;
      break;
    }
   case 27:
    var $red160 = $png_ptr + 318 | 0;
    var $mul162 = HEAP16[$red160 >> 1] * 257 & 65535;
    HEAP16[$red160 >> 1] = $mul162;
    var $green167 = $png_ptr + 320 | 0;
    var $mul169 = HEAP16[$green167 >> 1] * 257 & 65535;
    HEAP16[$green167 >> 1] = $mul169;
    var $blue174 = $png_ptr + 322 | 0;
    var $mul176 = HEAP16[$blue174 >> 1] * 257 & 65535;
    HEAP16[$blue174 >> 1] = $mul176;
    var $gray181 = $png_ptr + 324 | 0;
    var $mul183 = HEAP16[$gray181 >> 1] * 257 & 65535;
    HEAP16[$gray181 >> 1] = $mul183;
    __label__ = 28;
    break;
   case 28:
    var $32 = $png_ptr + 326 | 0;
    var $33 = $png_ptr + 316 | 0;
    HEAP16[$32 >> 1] = HEAP16[$33 >> 1];
    HEAP16[$32 + 2 >> 1] = HEAP16[$33 + 2 >> 1];
    HEAP16[$32 + 4 >> 1] = HEAP16[$33 + 4 >> 1];
    HEAP16[$32 + 6 >> 1] = HEAP16[$33 + 6 >> 1];
    HEAP16[$32 + 8 >> 1] = HEAP16[$33 + 8 >> 1];
    if (($19 & 8192 | 0) == 0) {
      __label__ = 29;
      break;
    } else {
      __label__ = 39;
      break;
    }
   case 29:
    if (($19 & 6291456 | 0) == 0) {
      __label__ = 32;
      break;
    } else {
      __label__ = 30;
      break;
    }
   case 30:
    var $34 = HEAP32[$gamma >> 2];
    var $call197 = _png_gamma_significant($34);
    if (($call197 | 0) == 0) {
      __label__ = 31;
      break;
    } else {
      __label__ = 39;
      break;
    }
   case 31:
    var $35 = HEAP32[$screen_gamma >> 2];
    var $call201 = _png_gamma_significant($35);
    if (($call201 | 0) == 0) {
      __label__ = 32;
      break;
    } else {
      __label__ = 39;
      break;
    }
   case 32:
    var $tobool206 = ($and147 | 0) == 0;
    if ($tobool206) {
      __label__ = 37;
      break;
    } else {
      __label__ = 33;
      break;
    }
   case 33:
    var $36 = HEAP32[$gamma >> 2];
    var $call209 = _png_gamma_significant($36);
    if (($call209 | 0) == 0) {
      __label__ = 34;
      break;
    } else {
      __label__ = 39;
      break;
    }
   case 34:
    var $37 = HEAP32[$screen_gamma >> 2];
    var $call213 = _png_gamma_significant($37);
    if (($call213 | 0) == 0) {
      __label__ = 35;
      break;
    } else {
      __label__ = 39;
      break;
    }
   case 35:
    if (HEAP8[$png_ptr + 308 | 0] << 24 >> 24 == 3) {
      __label__ = 36;
      break;
    } else {
      __label__ = 37;
      break;
    }
   case 36:
    var $39 = HEAP32[$png_ptr + 312 >> 2];
    var $call220 = _png_gamma_significant($39);
    if (($call220 | 0) == 0) {
      __label__ = 37;
      break;
    } else {
      __label__ = 39;
      break;
    }
   case 37:
    if (($19 & 8388608 | 0) == 0) {
      __label__ = 90;
      break;
    } else {
      __label__ = 38;
      break;
    }
   case 38:
    var $40 = HEAP32[$screen_gamma >> 2];
    var $call228 = _png_gamma_significant($40);
    if (($call228 | 0) == 0) {
      __label__ = 90;
      break;
    } else {
      __label__ = 39;
      break;
    }
   case 39:
    var $bit_depth231 = $png_ptr + 292 | 0;
    var $conv232 = HEAPU8[$bit_depth231] & 255;
    _png_build_gamma_table($png_ptr, $conv232);
    var $42 = HEAPU32[$transformations >> 2];
    if (($42 & 128 | 0) == 0) {
      __label__ = 83;
      break;
    } else {
      __label__ = 40;
      break;
    }
   case 40:
    if (($42 & 6291456 | 0) == 0) {
      __label__ = 42;
      break;
    } else {
      __label__ = 41;
      break;
    }
   case 41:
    var $43 = $png_ptr;
    _png_warning($43, STRING_TABLE.__str10719 | 0);
    __label__ = 42;
    break;
   case 42:
    if (HEAP8[$color_type85] << 24 >> 24 == 3) {
      __label__ = 43;
      break;
    } else {
      __label__ = 65;
      break;
    }
   case 43:
    var $45 = HEAPU32[$png_ptr + 272 >> 2];
    var $46 = HEAPU16[$png_ptr + 276 >> 1];
    var $conv249 = $46 & 65535;
    var $47 = HEAPU8[$png_ptr + 308 | 0];
    if ($47 << 24 >> 24 == 2) {
      __label__ = 44;
      break;
    } else {
      __label__ = 45;
      break;
    }
   case 44:
    var $idxprom = HEAPU16[$png_ptr + 318 >> 1] & 65535;
    var $49 = HEAPU32[$png_ptr + 360 >> 2];
    var $idxprom260 = HEAPU16[$png_ptr + 320 >> 1] & 65535;
    var $idxprom266 = HEAPU16[$png_ptr + 322 >> 1] & 65535;
    var $55 = HEAPU32[$png_ptr + 372 >> 2];
    var $back_0_1 = HEAP8[$49 + $idxprom | 0];
    var $back_1_1 = HEAP8[$49 + $idxprom260 | 0];
    var $back_2_1 = HEAP8[$49 + $idxprom266 | 0];
    var $back_1_0_0 = HEAP8[$55 + $idxprom | 0];
    var $back_1_1_0 = HEAP8[$55 + $idxprom260 | 0];
    var $back_1_2_0 = HEAP8[$55 + $idxprom266 | 0];
    __label__ = 55;
    break;
   case 45:
    var $conv251 = $47 & 255;
    if (($conv251 | 0) == 1) {
      __label__ = 46;
      break;
    } else if (($conv251 | 0) == 2) {
      __label__ = 47;
      break;
    } else if (($conv251 | 0) == 3) {
      __label__ = 48;
      break;
    } else {
      var $g_0 = 1e5;
      var $gs_0 = 1e5;
      __label__ = 49;
      break;
    }
   case 46:
    var $g_0 = HEAP32[$screen_gamma >> 2];
    var $gs_0 = 1e5;
    __label__ = 49;
    break;
   case 47:
    var $60 = HEAP32[$gamma >> 2];
    var $call293 = _png_reciprocal($60);
    var $61 = HEAP32[$gamma >> 2];
    var $62 = HEAP32[$screen_gamma >> 2];
    var $call296 = _png_reciprocal2($61, $62);
    var $g_0 = $call293;
    var $gs_0 = $call296;
    __label__ = 49;
    break;
   case 48:
    var $background_gamma298 = $png_ptr + 312 | 0;
    var $63 = HEAP32[$background_gamma298 >> 2];
    var $call299 = _png_reciprocal($63);
    var $64 = HEAP32[$background_gamma298 >> 2];
    var $65 = HEAP32[$screen_gamma >> 2];
    var $call302 = _png_reciprocal2($64, $65);
    var $g_0 = $call299;
    var $gs_0 = $call302;
    __label__ = 49;
    break;
   case 49:
    var $gs_0;
    var $g_0;
    var $call303 = _png_gamma_significant($gs_0);
    var $red307 = $png_ptr + 318 | 0;
    var $66 = HEAPU16[$red307 >> 1];
    if (($call303 | 0) == 0) {
      __label__ = 51;
      break;
    } else {
      __label__ = 50;
      break;
    }
   case 50:
    var $conv308 = $66 & 65535;
    var $call309 = _png_gamma_8bit_correct($conv308, $gs_0);
    var $conv313 = HEAPU16[$png_ptr + 320 >> 1] & 65535;
    var $call314 = _png_gamma_8bit_correct($conv313, $gs_0);
    var $conv318 = HEAPU16[$png_ptr + 322 >> 1] & 65535;
    var $call319 = _png_gamma_8bit_correct($conv318, $gs_0);
    var $back_0_0 = $call309;
    var $back_1_0 = $call314;
    var $back_2_0 = $call319;
    var $71 = HEAP16[$red307 >> 1];
    __label__ = 52;
    break;
   case 51:
    var $back_0_0 = $66 & 255;
    var $back_1_0 = HEAP16[$png_ptr + 320 >> 1] & 255;
    var $back_2_0 = HEAP16[$png_ptr + 322 >> 1] & 255;
    var $71 = $66;
    __label__ = 52;
    break;
   case 52:
    var $71;
    var $back_2_0;
    var $back_1_0;
    var $back_0_0;
    var $call335 = _png_gamma_significant($g_0);
    if (($call335 | 0) == 0) {
      __label__ = 54;
      break;
    } else {
      __label__ = 53;
      break;
    }
   case 53:
    var $call341 = _png_gamma_8bit_correct($71 & 65535, $g_0);
    var $conv345 = HEAPU16[$png_ptr + 320 >> 1] & 65535;
    var $call346 = _png_gamma_8bit_correct($conv345, $g_0);
    var $conv350 = HEAPU16[$png_ptr + 322 >> 1] & 65535;
    var $call351 = _png_gamma_8bit_correct($conv350, $g_0);
    var $back_0_1 = $back_0_0;
    var $back_1_1 = $back_1_0;
    var $back_2_1 = $back_2_0;
    var $back_1_0_0 = $call341;
    var $back_1_1_0 = $call346;
    var $back_1_2_0 = $call351;
    __label__ = 55;
    break;
   case 54:
    var $back_0_1 = $back_0_0;
    var $back_1_1 = $back_1_0;
    var $back_2_1 = $back_2_0;
    var $back_1_0_0 = $71 & 255;
    var $back_1_1_0 = HEAP16[$png_ptr + 320 >> 1] & 255;
    var $back_1_2_0 = HEAP16[$png_ptr + 322 >> 1] & 255;
    __label__ = 55;
    break;
   case 55:
    var $back_1_2_0;
    var $back_1_1_0;
    var $back_1_0_0;
    var $back_2_1;
    var $back_1_1;
    var $back_0_1;
    if ($46 << 16 >> 16 == 0) {
      __label__ = 64;
      break;
    } else {
      __label__ = 56;
      break;
    }
   case 56:
    var $num_trans370 = $png_ptr + 284 | 0;
    var $trans_alpha = $png_ptr + 396 | 0;
    var $gamma_to_1391 = $png_ptr + 372 | 0;
    var $conv402 = $back_1_0_0 & 255;
    var $gamma_from_1 = $png_ptr + 368 | 0;
    var $conv438 = $back_1_1_0 & 255;
    var $conv476 = $back_1_2_0 & 255;
    var $gamma_table504 = $png_ptr + 360 | 0;
    var $i_023 = 0;
    __label__ = 57;
    break;
   case 57:
    var $i_023;
    if (($i_023 | 0) < (HEAPU16[$num_trans370 >> 1] & 65535 | 0)) {
      __label__ = 58;
      break;
    } else {
      __label__ = 62;
      break;
    }
   case 58:
    var $78 = HEAPU8[HEAP32[$trans_alpha >> 2] + $i_023 | 0];
    if ($78 << 24 >> 24 == -1) {
      __label__ = 62;
      break;
    } else {
      __label__ = 59;
      break;
    }
   case 59:
    var $arrayidx386_0 = $45 + $i_023 * 3 | 0;
    if ($78 << 24 >> 24 == 0) {
      __label__ = 60;
      break;
    } else {
      __label__ = 61;
      break;
    }
   case 60:
    HEAP8[$arrayidx386_0] = $back_0_1;
    HEAP8[$45 + $i_023 * 3 + 1 | 0] = $back_1_1;
    HEAP8[$45 + $i_023 * 3 + 2 | 0] = $back_2_1;
    __label__ = 63;
    break;
   case 61:
    var $conv398 = $78 & 255;
    var $add411 = (255 - $conv398) * $conv402 + 128 + (HEAPU8[HEAP32[$gamma_to_1391 >> 2] + (HEAPU8[$arrayidx386_0] & 255) | 0] & 255) * $conv398 | 0;
    var $83 = HEAP8[HEAP32[$gamma_from_1 >> 2] + ((($add411 >>> 8 & 255) + $add411 | 0) >>> 8 & 255) | 0];
    HEAP8[$arrayidx386_0] = $83;
    var $green424 = $45 + $i_023 * 3 + 1 | 0;
    var $conv434 = HEAPU8[HEAP32[$trans_alpha >> 2] + $i_023 | 0] & 255;
    var $add448 = $conv434 * (HEAPU8[HEAP32[$gamma_to_1391 >> 2] + (HEAPU8[$green424] & 255) | 0] & 255) + 128 + (255 - $conv434) * $conv438 | 0;
    var $90 = HEAP8[HEAP32[$gamma_from_1 >> 2] + ((($add448 >>> 8 & 255) + $add448 | 0) >>> 8 & 255) | 0];
    HEAP8[$green424] = $90;
    var $blue462 = $45 + $i_023 * 3 + 2 | 0;
    var $conv472 = HEAPU8[HEAP32[$trans_alpha >> 2] + $i_023 | 0] & 255;
    var $add486 = $conv472 * (HEAPU8[HEAP32[$gamma_to_1391 >> 2] + (HEAPU8[$blue462] & 255) | 0] & 255) + 128 + (255 - $conv472) * $conv476 | 0;
    var $97 = HEAP8[HEAP32[$gamma_from_1 >> 2] + ((($add486 >>> 8 & 255) + $add486 | 0) >>> 8 & 255) | 0];
    HEAP8[$blue462] = $97;
    __label__ = 63;
    break;
   case 62:
    var $red502 = $45 + $i_023 * 3 | 0;
    var $100 = HEAP8[HEAP32[$gamma_table504 >> 2] + (HEAPU8[$red502] & 255) | 0];
    HEAP8[$red502] = $100;
    var $green509 = $45 + $i_023 * 3 + 1 | 0;
    var $103 = HEAP8[HEAP32[$gamma_table504 >> 2] + (HEAPU8[$green509] & 255) | 0];
    HEAP8[$green509] = $103;
    var $blue516 = $45 + $i_023 * 3 + 2 | 0;
    var $106 = HEAP8[HEAP32[$gamma_table504 >> 2] + (HEAPU8[$blue516] & 255) | 0];
    HEAP8[$blue516] = $106;
    __label__ = 63;
    break;
   case 63:
    var $inc = $i_023 + 1 | 0;
    if (($inc | 0) < ($conv249 | 0)) {
      var $i_023 = $inc;
      __label__ = 57;
      break;
    } else {
      __label__ = 64;
      break;
    }
   case 64:
    var $and524 = HEAP32[$transformations >> 2] & -8321;
    HEAP32[$transformations >> 2] = $and524;
    var $158 = $and524;
    __label__ = 100;
    break;
   case 65:
    var $background_gamma_type528 = $png_ptr + 308 | 0;
    var $conv529 = HEAPU8[$background_gamma_type528] & 255;
    if (($conv529 | 0) == 1) {
      __label__ = 66;
      break;
    } else if (($conv529 | 0) == 2) {
      __label__ = 67;
      break;
    } else if (($conv529 | 0) == 3) {
      __label__ = 68;
      break;
    } else {
      __label__ = 69;
      break;
    }
   case 66:
    var $gs527_0 = 1e5;
    var $g526_0 = HEAP32[$screen_gamma >> 2];
    __label__ = 70;
    break;
   case 67:
    var $110 = HEAP32[$gamma >> 2];
    var $call534 = _png_reciprocal($110);
    var $111 = HEAP32[$gamma >> 2];
    var $112 = HEAP32[$screen_gamma >> 2];
    var $call537 = _png_reciprocal2($111, $112);
    var $gs527_0 = $call537;
    var $g526_0 = $call534;
    __label__ = 70;
    break;
   case 68:
    var $background_gamma539 = $png_ptr + 312 | 0;
    var $113 = HEAP32[$background_gamma539 >> 2];
    var $call540 = _png_reciprocal($113);
    var $114 = HEAP32[$background_gamma539 >> 2];
    var $115 = HEAP32[$screen_gamma >> 2];
    var $call543 = _png_reciprocal2($114, $115);
    var $gs527_0 = $call543;
    var $g526_0 = $call540;
    __label__ = 70;
    break;
   case 69:
    var $116 = $png_ptr;
    _png_error($116, STRING_TABLE.__str11720 | 0);
    var $gs527_0 = 1e5;
    var $g526_0 = 1e5;
    __label__ = 70;
    break;
   case 70:
    var $g526_0;
    var $gs527_0;
    var $call546 = _png_gamma_significant($g526_0);
    var $call547 = _png_gamma_significant($gs527_0);
    var $tobool548 = ($call546 | 0) != 0;
    if ($tobool548) {
      __label__ = 71;
      break;
    } else {
      __label__ = 72;
      break;
    }
   case 71:
    var $conv552 = HEAPU16[$png_ptr + 324 >> 1] & 65535;
    var $png_ptr_idx7_val = HEAP8[$bit_depth231];
    var $call553 = _png_gamma_correct($png_ptr_idx7_val, $conv552, $g526_0);
    HEAP16[$png_ptr + 334 >> 1] = $call553;
    __label__ = 72;
    break;
   case 72:
    var $tobool557 = ($call547 | 0) != 0;
    if ($tobool557) {
      __label__ = 73;
      break;
    } else {
      __label__ = 74;
      break;
    }
   case 73:
    var $gray560 = $png_ptr + 324 | 0;
    var $conv561 = HEAPU16[$gray560 >> 1] & 65535;
    var $png_ptr_idx6_val = HEAP8[$bit_depth231];
    var $call562 = _png_gamma_correct($png_ptr_idx6_val, $conv561, $gs527_0);
    HEAP16[$gray560 >> 1] = $call562;
    __label__ = 74;
    break;
   case 74:
    var $red567 = $png_ptr + 318 | 0;
    var $119 = HEAPU16[$red567 >> 1];
    var $green570 = $png_ptr + 320 | 0;
    if ($119 << 16 >> 16 == HEAP16[$green570 >> 1] << 16 >> 16) {
      __label__ = 75;
      break;
    } else {
      __label__ = 77;
      break;
    }
   case 75:
    var $blue579 = $png_ptr + 322 | 0;
    if ($119 << 16 >> 16 == HEAP16[$blue579 >> 1] << 16 >> 16) {
      __label__ = 76;
      break;
    } else {
      __label__ = 77;
      break;
    }
   case 76:
    var $122 = HEAPU16[$png_ptr + 324 >> 1];
    if ($119 << 16 >> 16 == $122 << 16 >> 16) {
      __label__ = 81;
      break;
    } else {
      __label__ = 77;
      break;
    }
   case 77:
    if ($tobool548) {
      __label__ = 78;
      break;
    } else {
      __label__ = 79;
      break;
    }
   case 78:
    var $conv597 = $119 & 65535;
    var $png_ptr_idx5_val = HEAP8[$bit_depth231];
    var $call598 = _png_gamma_correct($png_ptr_idx5_val, $conv597, $g526_0);
    HEAP16[$png_ptr + 328 >> 1] = $call598;
    var $conv603 = HEAPU16[$green570 >> 1] & 65535;
    var $png_ptr_idx4_val = HEAP8[$bit_depth231];
    var $call604 = _png_gamma_correct($png_ptr_idx4_val, $conv603, $g526_0);
    HEAP16[$png_ptr + 330 >> 1] = $call604;
    var $conv609 = HEAPU16[$png_ptr + 322 >> 1] & 65535;
    var $png_ptr_idx3_val = HEAP8[$bit_depth231];
    var $call610 = _png_gamma_correct($png_ptr_idx3_val, $conv609, $g526_0);
    HEAP16[$png_ptr + 332 >> 1] = $call610;
    __label__ = 79;
    break;
   case 79:
    if ($tobool557) {
      __label__ = 80;
      break;
    } else {
      __label__ = 82;
      break;
    }
   case 80:
    var $conv618 = HEAPU16[$red567 >> 1] & 65535;
    var $png_ptr_idx2_val = HEAP8[$bit_depth231];
    var $call619 = _png_gamma_correct($png_ptr_idx2_val, $conv618, $gs527_0);
    HEAP16[$red567 >> 1] = $call619;
    var $conv624 = HEAPU16[$green570 >> 1] & 65535;
    var $png_ptr_idx1_val = HEAP8[$bit_depth231];
    var $call625 = _png_gamma_correct($png_ptr_idx1_val, $conv624, $gs527_0);
    HEAP16[$green570 >> 1] = $call625;
    var $blue629 = $png_ptr + 322 | 0;
    var $conv630 = HEAPU16[$blue629 >> 1] & 65535;
    var $png_ptr_idx_val = HEAP8[$bit_depth231];
    var $call631 = _png_gamma_correct($png_ptr_idx_val, $conv630, $gs527_0);
    HEAP16[$blue629 >> 1] = $call631;
    __label__ = 82;
    break;
   case 81:
    var $128 = HEAPU16[$png_ptr + 334 >> 1];
    HEAP16[$png_ptr + 332 >> 1] = $128;
    HEAP16[$png_ptr + 330 >> 1] = $128;
    HEAP16[$png_ptr + 328 >> 1] = $128;
    HEAP16[$blue579 >> 1] = $122;
    HEAP16[$green570 >> 1] = $122;
    HEAP16[$red567 >> 1] = $122;
    __label__ = 82;
    break;
   case 82:
    HEAP8[$background_gamma_type528] = 1;
    var $158 = HEAP32[$transformations >> 2];
    __label__ = 100;
    break;
   case 83:
    if (HEAP8[$color_type85] << 24 >> 24 == 3) {
      __label__ = 84;
      break;
    } else {
      var $158 = $42;
      __label__ = 100;
      break;
    }
   case 84:
    if (($42 & 4096 | 0) == 0 | ($42 & 6291456 | 0) == 0) {
      __label__ = 85;
      break;
    } else {
      var $158 = $42;
      __label__ = 100;
      break;
    }
   case 85:
    var $130 = HEAPU32[$png_ptr + 272 >> 2];
    var $131 = HEAPU16[$png_ptr + 276 >> 1];
    var $conv675 = $131 & 65535;
    if ($131 << 16 >> 16 == 0) {
      var $141 = $42;
      __label__ = 89;
      break;
    } else {
      __label__ = 86;
      break;
    }
   case 86:
    var $gamma_table684 = $png_ptr + 360 | 0;
    var $i676_025 = 0;
    __label__ = 87;
    break;
   case 87:
    var $i676_025;
    var $red682 = $130 + $i676_025 * 3 | 0;
    var $134 = HEAP8[HEAP32[$gamma_table684 >> 2] + (HEAPU8[$red682] & 255) | 0];
    HEAP8[$red682] = $134;
    var $green689 = $130 + $i676_025 * 3 + 1 | 0;
    var $137 = HEAP8[HEAP32[$gamma_table684 >> 2] + (HEAPU8[$green689] & 255) | 0];
    HEAP8[$green689] = $137;
    var $blue696 = $130 + $i676_025 * 3 + 2 | 0;
    var $140 = HEAP8[HEAP32[$gamma_table684 >> 2] + (HEAPU8[$blue696] & 255) | 0];
    HEAP8[$blue696] = $140;
    var $inc703 = $i676_025 + 1 | 0;
    if (($inc703 | 0) < ($conv675 | 0)) {
      var $i676_025 = $inc703;
      __label__ = 87;
      break;
    } else {
      __label__ = 88;
      break;
    }
   case 88:
    var $141 = HEAP32[$transformations >> 2];
    __label__ = 89;
    break;
   case 89:
    var $141;
    var $and706 = $141 & -8193;
    HEAP32[$transformations >> 2] = $and706;
    var $158 = $and706;
    __label__ = 100;
    break;
   case 90:
    if ($tobool206) {
      var $158 = $19;
      __label__ = 100;
      break;
    } else {
      __label__ = 91;
      break;
    }
   case 91:
    if (HEAP8[$color_type85] << 24 >> 24 == 3) {
      __label__ = 92;
      break;
    } else {
      var $158 = $19;
      __label__ = 100;
      break;
    }
   case 92:
    var $143 = HEAPU16[$png_ptr + 284 >> 1];
    var $conv721 = $143 & 65535;
    var $144 = HEAPU32[$png_ptr + 272 >> 2];
    var $145 = HEAPU16[$png_ptr + 318 >> 1];
    var $conv727 = $145 & 255;
    var $146 = HEAPU16[$png_ptr + 320 >> 1];
    var $conv731 = $146 & 255;
    var $147 = HEAPU16[$png_ptr + 322 >> 1];
    var $conv735 = $147 & 255;
    if ($143 << 16 >> 16 == 0) {
      var $157 = $19;
      __label__ = 99;
      break;
    } else {
      __label__ = 93;
      break;
    }
   case 93:
    var $trans_alpha741 = $png_ptr + 396 | 0;
    var $conv767 = $145 & 255 & 65535;
    var $conv799 = $146 & 255 & 65535;
    var $conv831 = $147 & 255 & 65535;
    var $i719_027 = 0;
    __label__ = 94;
    break;
   case 94:
    var $i719_027;
    var $149 = HEAPU8[HEAP32[$trans_alpha741 >> 2] + $i719_027 | 0];
    if ($149 << 24 >> 24 == 0) {
      __label__ = 95;
      break;
    } else if ($149 << 24 >> 24 == -1) {
      __label__ = 97;
      break;
    } else {
      __label__ = 96;
      break;
    }
   case 95:
    HEAP8[$144 + $i719_027 * 3 | 0] = $conv727;
    HEAP8[$144 + $i719_027 * 3 + 1 | 0] = $conv731;
    HEAP8[$144 + $i719_027 * 3 + 2 | 0] = $conv735;
    __label__ = 97;
    break;
   case 96:
    var $red757 = $144 + $i719_027 * 3 | 0;
    var $conv763 = $149 & 255;
    var $add777 = (255 - $conv763) * $conv767 + 128 + (HEAPU8[$red757] & 255) * $conv763 | 0;
    HEAP8[$red757] = (($add777 >>> 8 & 255) + $add777 | 0) >>> 8 & 255;
    var $green789 = $144 + $i719_027 * 3 + 1 | 0;
    var $conv795 = HEAPU8[HEAP32[$trans_alpha741 >> 2] + $i719_027 | 0] & 255;
    var $add809 = $conv795 * (HEAPU8[$green789] & 255) + 128 + (255 - $conv795) * $conv799 | 0;
    HEAP8[$green789] = (($add809 >>> 8 & 255) + $add809 | 0) >>> 8 & 255;
    var $blue821 = $144 + $i719_027 * 3 + 2 | 0;
    var $conv827 = HEAPU8[HEAP32[$trans_alpha741 >> 2] + $i719_027 | 0] & 255;
    var $add841 = $conv827 * (HEAPU8[$blue821] & 255) + 128 + (255 - $conv827) * $conv831 | 0;
    HEAP8[$blue821] = (($add841 >>> 8 & 255) + $add841 | 0) >>> 8 & 255;
    __label__ = 97;
    break;
   case 97:
    var $inc854 = $i719_027 + 1 | 0;
    if (($inc854 | 0) < ($conv721 | 0)) {
      var $i719_027 = $inc854;
      __label__ = 94;
      break;
    } else {
      __label__ = 98;
      break;
    }
   case 98:
    var $157 = HEAP32[$transformations >> 2];
    __label__ = 99;
    break;
   case 99:
    var $157;
    var $and857 = $157 & -129;
    HEAP32[$transformations >> 2] = $and857;
    var $158 = $and857;
    __label__ = 100;
    break;
   case 100:
    var $158;
    if (($158 & 4104 | 0) == 8) {
      __label__ = 101;
      break;
    } else {
      __label__ = 111;
      break;
    }
   case 101:
    if (HEAP8[$color_type85] << 24 >> 24 == 3) {
      __label__ = 102;
      break;
    } else {
      __label__ = 111;
      break;
    }
   case 102:
    var $162 = HEAPU16[$png_ptr + 276 >> 1];
    var $conv876 = $162 & 65535;
    var $163 = HEAPU8[$png_ptr + 384 | 0];
    var $sub879 = 8 - ($163 & 255) | 0;
    HEAP32[$transformations >> 2] = $158 & -9;
    var $cmp88932 = $162 << 16 >> 16 == 0;
    if ($163 << 24 >> 24 == 0 | ($sub879 | 0) < 1 | $cmp88932) {
      __label__ = 105;
      break;
    } else {
      __label__ = 103;
      break;
    }
   case 103:
    var $palette892 = $png_ptr + 272 | 0;
    var $i873_033 = 0;
    __label__ = 104;
    break;
   case 104:
    var $i873_033;
    var $red894 = HEAP32[$palette892 >> 2] + $i873_033 * 3 | 0;
    HEAP8[$red894] = (HEAPU8[$red894] & 255) >>> ($sub879 >>> 0) & 255;
    var $inc902 = $i873_033 + 1 | 0;
    if (($inc902 | 0) < ($conv876 | 0)) {
      var $i873_033 = $inc902;
      __label__ = 104;
      break;
    } else {
      __label__ = 105;
      break;
    }
   case 105:
    var $166 = HEAPU8[$png_ptr + 385 | 0];
    var $sub908 = 8 - ($166 & 255) | 0;
    if ($166 << 24 >> 24 == 0 | ($sub908 | 0) < 1 | $cmp88932) {
      __label__ = 108;
      break;
    } else {
      __label__ = 106;
      break;
    }
   case 106:
    var $palette920 = $png_ptr + 272 | 0;
    var $i873_131 = 0;
    __label__ = 107;
    break;
   case 107:
    var $i873_131;
    var $green922 = HEAP32[$palette920 >> 2] + $i873_131 * 3 + 1 | 0;
    HEAP8[$green922] = (HEAPU8[$green922] & 255) >>> ($sub908 >>> 0) & 255;
    var $inc930 = $i873_131 + 1 | 0;
    if (($inc930 | 0) < ($conv876 | 0)) {
      var $i873_131 = $inc930;
      __label__ = 107;
      break;
    } else {
      __label__ = 108;
      break;
    }
   case 108:
    var $169 = HEAPU8[$png_ptr + 386 | 0];
    var $sub936 = 8 - ($169 & 255) | 0;
    if ($169 << 24 >> 24 == 0 | ($sub936 | 0) < 1 | $cmp88932) {
      __label__ = 111;
      break;
    } else {
      __label__ = 109;
      break;
    }
   case 109:
    var $palette948 = $png_ptr + 272 | 0;
    var $i873_229 = 0;
    __label__ = 110;
    break;
   case 110:
    var $i873_229;
    var $blue950 = HEAP32[$palette948 >> 2] + $i873_229 * 3 + 2 | 0;
    HEAP8[$blue950] = (HEAPU8[$blue950] & 255) >>> ($sub936 >>> 0) & 255;
    var $inc958 = $i873_229 + 1 | 0;
    if (($inc958 | 0) < ($conv876 | 0)) {
      var $i873_229 = $inc958;
      __label__ = 110;
      break;
    } else {
      __label__ = 111;
      break;
    }
   case 111:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_init_read_transformations["X"] = 1;

function _png_init_palette_transformations($png_ptr) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $0 = HEAPU16[$png_ptr + 284 >> 1];
    var $cmp = $0 << 16 >> 16 == 0;
    if ($cmp) {
      var $input_has_transparency_23 = 0;
      __label__ = 9;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $1 = HEAP32[$png_ptr + 396 >> 2];
    var $conv3 = $0 & 65535;
    var $i_06 = 0;
    var $input_has_transparency_07 = 0;
    var $input_has_alpha_08 = 0;
    __label__ = 3;
    break;
   case 3:
    var $input_has_alpha_08;
    var $input_has_transparency_07;
    var $i_06;
    var $2 = HEAP8[$1 + $i_06 | 0];
    if ($2 << 24 >> 24 == 0) {
      __label__ = 4;
      break;
    } else if ($2 << 24 >> 24 == -1) {
      var $input_has_alpha_1 = $input_has_alpha_08;
      var $input_has_transparency_1 = $input_has_transparency_07;
      __label__ = 6;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 4:
    var $input_has_alpha_1 = $input_has_alpha_08;
    var $input_has_transparency_1 = 1;
    __label__ = 6;
    break;
   case 5:
    var $input_has_alpha_1 = 1;
    var $input_has_transparency_1 = $input_has_transparency_07;
    __label__ = 6;
    break;
   case 6:
    var $input_has_transparency_1;
    var $input_has_alpha_1;
    var $inc = $i_06 + 1 | 0;
    if (($inc | 0) < ($conv3 | 0)) {
      var $i_06 = $inc;
      var $input_has_transparency_07 = $input_has_transparency_1;
      var $input_has_alpha_08 = $input_has_alpha_1;
      __label__ = 3;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    if (($input_has_alpha_1 | 0) == 0) {
      var $input_has_transparency_23 = $input_has_transparency_1;
      __label__ = 9;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    var $transformations27_pre_phi = $png_ptr + 92 | 0;
    __label__ = 11;
    break;
   case 9:
    var $input_has_transparency_23;
    var $transformations = $png_ptr + 92 | 0;
    var $3 = HEAP32[$transformations >> 2];
    var $and = $3 & -8388609;
    HEAP32[$transformations >> 2] = $and;
    var $flags = $png_ptr + 88 | 0;
    var $and20 = HEAP32[$flags >> 2] & -8193;
    HEAP32[$flags >> 2] = $and20;
    if (($input_has_transparency_23 | 0) == 0) {
      __label__ = 10;
      break;
    } else {
      var $transformations27_pre_phi = $transformations;
      __label__ = 11;
      break;
    }
   case 10:
    var $and24 = $3 & -8388993;
    HEAP32[$transformations >> 2] = $and24;
    var $transformations27_pre_phi = $transformations;
    __label__ = 11;
    break;
   case 11:
    var $transformations27_pre_phi;
    var $5 = HEAPU32[$transformations27_pre_phi >> 2];
    if (($5 & 4352 | 0) == 4352) {
      __label__ = 12;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 12:
    var $idxprom = HEAPU8[$png_ptr + 316 | 0] & 255;
    var $9 = HEAPU32[$png_ptr + 272 >> 2];
    HEAP16[$png_ptr + 318 >> 1] = HEAPU8[$9 + $idxprom * 3 | 0] & 255;
    HEAP16[$png_ptr + 320 >> 1] = HEAPU8[$9 + $idxprom * 3 + 1 | 0] & 255;
    HEAP16[$png_ptr + 322 >> 1] = HEAPU8[$9 + $idxprom * 3 + 2 | 0] & 255;
    if (($5 & 34078720 | 0) == 524288) {
      __label__ = 13;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 13:
    var $conv64 = $0 & 65535;
    if ($cmp) {
      __label__ = 16;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 14:
    var $trans_alpha69 = $png_ptr + 396 | 0;
    var $i62_011 = 0;
    __label__ = 15;
    break;
   case 15:
    var $i62_011;
    var $arrayidx70 = HEAP32[$trans_alpha69 >> 2] + $i62_011 | 0;
    var $sub = HEAP8[$arrayidx70] ^ -1;
    HEAP8[$arrayidx70] = $sub;
    var $inc76 = $i62_011 + 1 | 0;
    if (($inc76 | 0) < ($conv64 | 0)) {
      var $i62_011 = $inc76;
      __label__ = 15;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 16:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_init_palette_transformations["X"] = 1;

function _png_init_rgb_transformations($png_ptr) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $0 = HEAP8[$png_ptr + 291 | 0];
    if (($0 & 4) << 24 >> 24 == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $4 = HEAP32[$png_ptr + 92 >> 2];
    __label__ = 5;
    break;
   case 3:
    var $cmp3 = HEAP16[$png_ptr + 284 >> 1] << 16 >> 16 == 0;
    var $transformations = $png_ptr + 92 | 0;
    var $2 = HEAP32[$transformations >> 2];
    var $and5 = $2 & -8388609;
    HEAP32[$transformations >> 2] = $and5;
    var $flags = $png_ptr + 88 | 0;
    var $and6 = HEAP32[$flags >> 2] & -8193;
    HEAP32[$flags >> 2] = $and6;
    if ($cmp3) {
      __label__ = 4;
      break;
    } else {
      var $4 = $and5;
      __label__ = 5;
      break;
    }
   case 4:
    var $and10 = $2 & -8388993;
    HEAP32[$transformations >> 2] = $and10;
    var $4 = $and10;
    __label__ = 5;
    break;
   case 5:
    var $4;
    if (($4 & 4352 | 0) == 4352) {
      __label__ = 6;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 6:
    if (($0 & 2) << 24 >> 24 == 0) {
      __label__ = 7;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 7:
    var $7 = HEAP16[$png_ptr + 324 >> 1];
    var $8 = HEAP16[$png_ptr + 408 >> 1];
    var $conv28 = HEAPU8[$png_ptr + 292 | 0] & 255;
    if (($conv28 | 0) == 1) {
      __label__ = 8;
      break;
    } else if (($conv28 | 0) == 2) {
      __label__ = 9;
      break;
    } else if (($conv28 | 0) == 4) {
      __label__ = 10;
      break;
    } else {
      var $trans_gray_0 = $8;
      var $gray_0 = $7;
      __label__ = 11;
      break;
    }
   case 8:
    var $trans_gray_0 = $8 * 255 & 65535;
    var $gray_0 = $7 * 255 & 65535;
    __label__ = 11;
    break;
   case 9:
    var $trans_gray_0 = $8 * 85 & 65535;
    var $gray_0 = $7 * 85 & 65535;
    __label__ = 11;
    break;
   case 10:
    var $trans_gray_0 = $8 * 17 & 65535;
    var $gray_0 = $7 * 17 & 65535;
    __label__ = 11;
    break;
   case 11:
    var $gray_0;
    var $trans_gray_0;
    HEAP16[$png_ptr + 322 >> 1] = $gray_0;
    HEAP16[$png_ptr + 320 >> 1] = $gray_0;
    HEAP16[$png_ptr + 318 >> 1] = $gray_0;
    if (($4 & 33554432 | 0) == 0) {
      __label__ = 12;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 12:
    HEAP16[$png_ptr + 406 >> 1] = $trans_gray_0;
    HEAP16[$png_ptr + 404 >> 1] = $trans_gray_0;
    HEAP16[$png_ptr + 402 >> 1] = $trans_gray_0;
    __label__ = 13;
    break;
   case 13:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_init_rgb_transformations["X"] = 1;

function _png_gamma_threshold($screen_gamma, $file_gamma) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $gtest = __stackBase__;
    var $call = _png_muldiv($gtest, $screen_gamma, $file_gamma, 1e5);
    if (($call | 0) == 0) {
      var $1 = 1;
      __label__ = 3;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $0 = HEAP32[$gtest >> 2];
    var $call1 = _png_gamma_significant($0);
    var $1 = ($call1 | 0) != 0;
    __label__ = 3;
    break;
   case 3:
    var $1;
    STACKTOP = __stackBase__;
    return $1 & 1;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_read_transform_info($png_ptr, $info_ptr) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $transformations = $png_ptr + 92 | 0;
    var $0 = HEAP32[$transformations >> 2];
    if (($0 & 4096 | 0) == 0) {
      __label__ = 10;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $color_type = $info_ptr + 25 | 0;
    var $1 = HEAP8[$color_type];
    var $cmp4 = HEAP16[$png_ptr + 284 >> 1] << 16 >> 16 == 0;
    if ($1 << 24 >> 24 == 3) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $_ = $cmp4 ? 2 : 6;
    HEAP8[$color_type] = $_;
    HEAP8[$info_ptr + 24 | 0] = 8;
    HEAP16[$info_ptr + 22 >> 1] = 0;
    __label__ = 10;
    break;
   case 4:
    if ($cmp4) {
      __label__ = 7;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    if (($0 & 33554432 | 0) == 0) {
      __label__ = 7;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    var $or = $1 | 4;
    HEAP8[$color_type] = $or;
    __label__ = 7;
    break;
   case 7:
    var $bit_depth23 = $info_ptr + 24 | 0;
    if ((HEAPU8[$bit_depth23] & 255) < 8) {
      __label__ = 8;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 8:
    HEAP8[$bit_depth23] = 8;
    __label__ = 9;
    break;
   case 9:
    HEAP16[$info_ptr + 22 >> 1] = 0;
    __label__ = 10;
    break;
   case 10:
    if ((HEAP32[$transformations >> 2] & 128 | 0) == 0) {
      __label__ = 12;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    var $5 = $info_ptr + 90 | 0;
    var $6 = $png_ptr + 316 | 0;
    HEAP16[$5 >> 1] = HEAP16[$6 >> 1];
    HEAP16[$5 + 2 >> 1] = HEAP16[$6 + 2 >> 1];
    HEAP16[$5 + 4 >> 1] = HEAP16[$6 + 4 >> 1];
    HEAP16[$5 + 6 >> 1] = HEAP16[$6 + 6 >> 1];
    HEAP16[$5 + 8 >> 1] = HEAP16[$6 + 8 >> 1];
    __label__ = 12;
    break;
   case 12:
    var $7 = HEAP32[$png_ptr + 352 >> 2];
    HEAP32[$info_ptr + 40 >> 2] = $7;
    var $bit_depth40 = $info_ptr + 24 | 0;
    var $8 = HEAP8[$bit_depth40];
    if ($8 << 24 >> 24 == 16) {
      __label__ = 13;
      break;
    } else {
      var $12 = $8;
      __label__ = 17;
      break;
    }
   case 13:
    var $9 = HEAP32[$transformations >> 2];
    if (($9 & 67108864 | 0) == 0) {
      var $11 = $9;
      var $10 = 16;
      __label__ = 15;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 14:
    HEAP8[$bit_depth40] = 8;
    var $11 = HEAP32[$transformations >> 2];
    var $10 = 8;
    __label__ = 15;
    break;
   case 15:
    var $10;
    var $11;
    if (($11 & 1024 | 0) == 0) {
      var $12 = $10;
      __label__ = 17;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 16:
    HEAP8[$bit_depth40] = 8;
    var $12 = 8;
    __label__ = 17;
    break;
   case 17:
    var $12;
    var $13 = HEAP32[$transformations >> 2];
    if (($13 & 16384 | 0) == 0) {
      var $15 = $13;
      __label__ = 19;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 18:
    var $color_type62 = $info_ptr + 25 | 0;
    var $or64 = HEAP8[$color_type62] | 2;
    HEAP8[$color_type62] = $or64;
    var $15 = HEAP32[$transformations >> 2];
    __label__ = 19;
    break;
   case 19:
    var $15;
    if (($15 & 6291456 | 0) == 0) {
      var $17 = $15;
      __label__ = 21;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 20:
    var $color_type72 = $info_ptr + 25 | 0;
    var $and74 = HEAP8[$color_type72] & -3;
    HEAP8[$color_type72] = $and74;
    var $17 = HEAP32[$transformations >> 2];
    __label__ = 21;
    break;
   case 21:
    var $17;
    if (($17 & 64 | 0) == 0) {
      var $20 = $17;
      __label__ = 25;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 22:
    var $color_type82 = $info_ptr + 25 | 0;
    var $18 = HEAP8[$color_type82];
    if ($18 << 24 >> 24 == 2 || $18 << 24 >> 24 == 6) {
      __label__ = 23;
      break;
    } else {
      var $20 = $17;
      __label__ = 25;
      break;
    }
   case 23:
    if ((HEAP32[$png_ptr + 480 >> 2] | 0) != 0 & $12 << 24 >> 24 == 8) {
      __label__ = 24;
      break;
    } else {
      var $20 = $17;
      __label__ = 25;
      break;
    }
   case 24:
    HEAP8[$color_type82] = 3;
    var $20 = HEAP32[$transformations >> 2];
    __label__ = 25;
    break;
   case 25:
    var $20;
    if (($20 & 512 | 0) != 0 & $12 << 24 >> 24 == 8) {
      __label__ = 26;
      break;
    } else {
      var $23 = $20;
      var $22 = $12;
      __label__ = 28;
      break;
    }
   case 26:
    if (HEAP8[$info_ptr + 25 | 0] << 24 >> 24 == 3) {
      var $23 = $20;
      var $22 = $12;
      __label__ = 28;
      break;
    } else {
      __label__ = 27;
      break;
    }
   case 27:
    HEAP8[$bit_depth40] = 16;
    var $23 = HEAP32[$transformations >> 2];
    var $22 = 16;
    __label__ = 28;
    break;
   case 28:
    var $22;
    var $23;
    if (($23 & 4 | 0) != 0 & ($22 & 255) < 8) {
      __label__ = 29;
      break;
    } else {
      var $24 = $22;
      __label__ = 30;
      break;
    }
   case 29:
    HEAP8[$bit_depth40] = 8;
    var $24 = 8;
    __label__ = 30;
    break;
   case 30:
    var $24;
    var $color_type127 = $info_ptr + 25 | 0;
    var $25 = HEAPU8[$color_type127];
    if ($25 << 24 >> 24 == 3) {
      __label__ = 31;
      break;
    } else {
      __label__ = 32;
      break;
    }
   case 31:
    HEAP8[$info_ptr + 29 | 0] = 1;
    var $26 = 1;
    __label__ = 35;
    break;
   case 32:
    var $channels138 = $info_ptr + 29 | 0;
    if (($25 & 2) << 24 >> 24 == 0) {
      __label__ = 34;
      break;
    } else {
      __label__ = 33;
      break;
    }
   case 33:
    HEAP8[$channels138] = 3;
    var $26 = 3;
    __label__ = 35;
    break;
   case 34:
    HEAP8[$channels138] = 1;
    var $26 = 1;
    __label__ = 35;
    break;
   case 35:
    var $26;
    if ((HEAP32[$transformations >> 2] & 262144 | 0) == 0) {
      var $28 = $25;
      __label__ = 37;
      break;
    } else {
      __label__ = 36;
      break;
    }
   case 36:
    var $and149 = $25 & -5;
    HEAP8[$color_type127] = $and149;
    HEAP16[$info_ptr + 22 >> 1] = 0;
    var $28 = $and149;
    __label__ = 37;
    break;
   case 37:
    var $28;
    if (($28 & 4) << 24 >> 24 == 0) {
      var $29 = $26;
      __label__ = 39;
      break;
    } else {
      __label__ = 38;
      break;
    }
   case 38:
    var $inc = $26 + 1 & 255;
    HEAP8[$info_ptr + 29 | 0] = $inc;
    var $29 = $inc;
    __label__ = 39;
    break;
   case 39:
    var $29;
    var $30 = HEAP32[$transformations >> 2];
    if (($30 & 32768 | 0) == 0) {
      var $33 = $30;
      var $32 = $29;
      __label__ = 43;
      break;
    } else {
      __label__ = 40;
      break;
    }
   case 40:
    if ($28 << 24 >> 24 == 2 || $28 << 24 >> 24 == 0) {
      __label__ = 41;
      break;
    } else {
      var $33 = $30;
      var $32 = $29;
      __label__ = 43;
      break;
    }
   case 41:
    var $inc176 = $29 + 1 & 255;
    HEAP8[$info_ptr + 29 | 0] = $inc176;
    var $31 = HEAP32[$transformations >> 2];
    if (($31 & 16777216 | 0) == 0) {
      var $33 = $31;
      var $32 = $inc176;
      __label__ = 43;
      break;
    } else {
      __label__ = 42;
      break;
    }
   case 42:
    HEAP8[$color_type127] = $28 | 4;
    var $33 = HEAP32[$transformations >> 2];
    var $32 = $inc176;
    __label__ = 43;
    break;
   case 43:
    var $32;
    var $33;
    if (($33 & 1048576 | 0) == 0) {
      var $38 = $32;
      var $37 = $24;
      __label__ = 48;
      break;
    } else {
      __label__ = 44;
      break;
    }
   case 44:
    var $34 = HEAPU8[$png_ptr + 80 | 0];
    if (($24 & 255) < ($34 & 255)) {
      __label__ = 45;
      break;
    } else {
      var $35 = $24;
      __label__ = 46;
      break;
    }
   case 45:
    HEAP8[$bit_depth40] = $34;
    var $35 = $34;
    __label__ = 46;
    break;
   case 46:
    var $35;
    var $36 = HEAPU8[$png_ptr + 81 | 0];
    if (($32 & 255) < ($36 & 255)) {
      __label__ = 47;
      break;
    } else {
      var $38 = $32;
      var $37 = $35;
      __label__ = 48;
      break;
    }
   case 47:
    HEAP8[$info_ptr + 29 | 0] = $36;
    var $38 = $36;
    var $37 = $35;
    __label__ = 48;
    break;
   case 48:
    var $37;
    var $38;
    var $mul = $37 * $38 & 255;
    HEAP8[$info_ptr + 30 | 0] = $mul;
    var $conv216 = $mul & 255;
    var $39 = HEAP32[$info_ptr >> 2];
    if (($mul & 255) > 7) {
      __label__ = 49;
      break;
    } else {
      __label__ = 50;
      break;
    }
   case 49:
    var $cond = ($conv216 >>> 3) * $39 | 0;
    __label__ = 51;
    break;
   case 50:
    var $cond = ($conv216 * $39 + 7 | 0) >>> 3;
    __label__ = 51;
    break;
   case 51:
    var $cond;
    HEAP32[$info_ptr + 12 >> 2] = $cond;
    HEAP32[$png_ptr + 260 >> 2] = $cond;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_read_transform_info["X"] = 1;

function _png_do_expand_palette($row_info, $row, $palette, $trans_alpha, $num_trans) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $0 = HEAPU32[$row_info >> 2];
    var $color_type = $row_info + 8 | 0;
    if (HEAP8[$color_type] << 24 >> 24 == 3) {
      __label__ = 2;
      break;
    } else {
      __label__ = 26;
      break;
    }
   case 2:
    var $bit_depth = $row_info + 9 | 0;
    var $2 = HEAPU8[$bit_depth];
    if (($2 & 255) < 8) {
      __label__ = 3;
      break;
    } else {
      var $7 = $2;
      __label__ = 14;
      break;
    }
   case 3:
    var $conv2 = $2 & 255;
    if (($conv2 | 0) == 1) {
      __label__ = 4;
      break;
    } else if (($conv2 | 0) == 2) {
      __label__ = 7;
      break;
    } else if (($conv2 | 0) == 4) {
      __label__ = 10;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 4:
    var $sub = $0 - 1 | 0;
    if (($0 | 0) == 0) {
      __label__ = 13;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $shift_016 = $0 + 7 & 7 ^ 7;
    var $sp_017 = $row + ($sub >>> 3) | 0;
    var $dp_018 = $row + $sub | 0;
    var $i_019 = 0;
    __label__ = 6;
    break;
   case 6:
    var $i_019;
    var $dp_018;
    var $sp_017;
    var $shift_016;
    HEAP8[$dp_018] = (HEAPU8[$sp_017] & 255 & 1 << $shift_016 | 0) != 0 & 1;
    var $cmp17 = ($shift_016 | 0) == 7;
    var $shift_1 = $cmp17 ? 0 : $shift_016 + 1 | 0;
    var $sp_1 = $cmp17 ? $sp_017 - 1 | 0 : $sp_017;
    var $inc23 = $i_019 + 1 | 0;
    if (($inc23 | 0) == ($0 | 0)) {
      __label__ = 13;
      break;
    } else {
      var $shift_016 = $shift_1;
      var $sp_017 = $sp_1;
      var $dp_018 = $dp_018 - 1 | 0;
      var $i_019 = $inc23;
      __label__ = 6;
      break;
    }
   case 7:
    var $sub25 = $0 - 1 | 0;
    if (($0 | 0) == 0) {
      __label__ = 13;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    var $shift_210 = ($0 << 1) + 6 & 6 ^ 6;
    var $sp_211 = $row + ($sub25 >>> 2) | 0;
    var $dp_112 = $row + $sub25 | 0;
    var $i_113 = 0;
    __label__ = 9;
    break;
   case 9:
    var $i_113;
    var $dp_112;
    var $sp_211;
    var $shift_210;
    HEAP8[$dp_112] = (HEAPU8[$sp_211] & 255) >>> ($shift_210 >>> 0) & 255 & 3;
    var $cmp41 = ($shift_210 | 0) == 6;
    var $shift_3 = $cmp41 ? 0 : $shift_210 + 2 | 0;
    var $sp_3 = $cmp41 ? $sp_211 - 1 | 0 : $sp_211;
    var $inc50 = $i_113 + 1 | 0;
    if (($inc50 | 0) == ($0 | 0)) {
      __label__ = 13;
      break;
    } else {
      var $shift_210 = $shift_3;
      var $sp_211 = $sp_3;
      var $dp_112 = $dp_112 - 1 | 0;
      var $i_113 = $inc50;
      __label__ = 9;
      break;
    }
   case 10:
    var $sub53 = $0 - 1 | 0;
    if (($0 | 0) == 0) {
      __label__ = 13;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    var $shift_44 = $0 << 2 & 4;
    var $sp_45 = $row + ($sub53 >>> 1) | 0;
    var $dp_26 = $row + $sub53 | 0;
    var $i_27 = 0;
    __label__ = 12;
    break;
   case 12:
    var $i_27;
    var $dp_26;
    var $sp_45;
    var $shift_44;
    HEAP8[$dp_26] = (HEAPU8[$sp_45] & 255) >>> ($shift_44 >>> 0) & 255 & 15;
    var $cmp68 = ($shift_44 | 0) == 4;
    var $shift_5 = $cmp68 ? 0 : $shift_44 + 4 | 0;
    var $sp_5 = $cmp68 ? $sp_45 - 1 | 0 : $sp_45;
    var $inc77 = $i_27 + 1 | 0;
    if (($inc77 | 0) == ($0 | 0)) {
      __label__ = 13;
      break;
    } else {
      var $shift_44 = $shift_5;
      var $sp_45 = $sp_5;
      var $dp_26 = $dp_26 - 1 | 0;
      var $i_27 = $inc77;
      __label__ = 12;
      break;
    }
   case 13:
    HEAP8[$bit_depth] = 8;
    HEAP8[$row_info + 11 | 0] = 8;
    HEAP32[$row_info + 4 >> 2] = $0;
    __label__ = 15;
    break;
   case 14:
    var $7;
    if ($7 << 24 >> 24 == 8) {
      __label__ = 15;
      break;
    } else {
      __label__ = 26;
      break;
    }
   case 15:
    var $add_ptr90 = $row + ($0 - 1) | 0;
    if (($num_trans | 0) > 0) {
      __label__ = 16;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 16:
    var $shl91 = $0 << 2;
    if (($0 | 0) == 0) {
      __label__ = 21;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 17:
    var $sp_625 = $add_ptr90;
    var $dp_326 = $row + ($shl91 - 1) | 0;
    var $i_327 = 0;
    __label__ = 18;
    break;
   case 18:
    var $i_327;
    var $dp_326;
    var $sp_625;
    var $conv98 = HEAPU8[$sp_625] & 255;
    if (($conv98 | 0) < ($num_trans | 0)) {
      __label__ = 19;
      break;
    } else {
      var $storemerge = -1;
      __label__ = 20;
      break;
    }
   case 19:
    var $storemerge = HEAP8[$trans_alpha + $conv98 | 0];
    __label__ = 20;
    break;
   case 20:
    var $storemerge;
    HEAP8[$dp_326] = $storemerge;
    var $11 = HEAP8[$palette + (HEAPU8[$sp_625] & 255) * 3 + 2 | 0];
    HEAP8[$dp_326 - 1 | 0] = $11;
    var $13 = HEAP8[$palette + (HEAPU8[$sp_625] & 255) * 3 + 1 | 0];
    HEAP8[$dp_326 - 2 | 0] = $13;
    var $15 = HEAP8[$palette + (HEAPU8[$sp_625] & 255) * 3 | 0];
    HEAP8[$dp_326 - 3 | 0] = $15;
    var $inc117 = $i_327 + 1 | 0;
    if (($inc117 | 0) == ($0 | 0)) {
      __label__ = 21;
      break;
    } else {
      var $sp_625 = $sp_625 - 1 | 0;
      var $dp_326 = $dp_326 - 4 | 0;
      var $i_327 = $inc117;
      __label__ = 18;
      break;
    }
   case 21:
    HEAP8[$bit_depth] = 8;
    HEAP8[$row_info + 11 | 0] = 32;
    HEAP32[$row_info + 4 >> 2] = $shl91;
    HEAP8[$color_type] = 6;
    HEAP8[$row_info + 10 | 0] = 4;
    __label__ = 26;
    break;
   case 22:
    var $mul126 = $0 * 3 | 0;
    if (($0 | 0) == 0) {
      __label__ = 25;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 23:
    var $sp_721 = $add_ptr90;
    var $dp_522 = $row + ($mul126 - 1) | 0;
    var $i_423 = 0;
    __label__ = 24;
    break;
   case 24:
    var $i_423;
    var $dp_522;
    var $sp_721;
    var $17 = HEAP8[$palette + (HEAPU8[$sp_721] & 255) * 3 + 2 | 0];
    HEAP8[$dp_522] = $17;
    var $19 = HEAP8[$palette + (HEAPU8[$sp_721] & 255) * 3 + 1 | 0];
    HEAP8[$dp_522 - 1 | 0] = $19;
    var $21 = HEAP8[$palette + (HEAPU8[$sp_721] & 255) * 3 | 0];
    HEAP8[$dp_522 - 2 | 0] = $21;
    var $inc147 = $i_423 + 1 | 0;
    if (($inc147 | 0) == ($0 | 0)) {
      __label__ = 25;
      break;
    } else {
      var $sp_721 = $sp_721 - 1 | 0;
      var $dp_522 = $dp_522 - 3 | 0;
      var $i_423 = $inc147;
      __label__ = 24;
      break;
    }
   case 25:
    HEAP8[$bit_depth] = 8;
    HEAP8[$row_info + 11 | 0] = 24;
    HEAP32[$row_info + 4 >> 2] = $mul126;
    HEAP8[$color_type] = 2;
    HEAP8[$row_info + 10 | 0] = 3;
    __label__ = 26;
    break;
   case 26:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_do_expand_palette["X"] = 1;

function _png_do_read_transformations($png_ptr, $row_info) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $row_buf = $png_ptr + 240 | 0;
    if ((HEAP32[$row_buf >> 2] | 0) == 0) {
      __label__ = 2;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 2:
    var $1 = $png_ptr;
    _png_error($1, STRING_TABLE.__str12721 | 0);
    __label__ = 3;
    break;
   case 3:
    var $flags = $png_ptr + 88 | 0;
    if ((HEAP32[$flags >> 2] & 16448 | 0) == 16384) {
      __label__ = 4;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 4:
    var $5 = $png_ptr;
    _png_error($5, STRING_TABLE.__str13722 | 0);
    __label__ = 5;
    break;
   case 5:
    var $transformations = $png_ptr + 92 | 0;
    var $6 = HEAPU32[$transformations >> 2];
    if (($6 & 4096 | 0) == 0) {
      __label__ = 12;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    if (HEAP8[$row_info + 8 | 0] << 24 >> 24 == 3) {
      __label__ = 7;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 7:
    var $add_ptr = HEAP32[$row_buf >> 2] + 1 | 0;
    var $9 = HEAP32[$png_ptr + 272 >> 2];
    var $10 = HEAP32[$png_ptr + 396 >> 2];
    var $conv13 = HEAPU16[$png_ptr + 284 >> 1] & 65535;
    _png_do_expand_palette($row_info, $add_ptr, $9, $10, $conv13);
    __label__ = 12;
    break;
   case 8:
    if (HEAP16[$png_ptr + 284 >> 1] << 16 >> 16 == 0) {
      __label__ = 11;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    if (($6 & 33554432 | 0) == 0) {
      __label__ = 11;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 10:
    var $add_ptr23 = HEAP32[$row_buf >> 2] + 1 | 0;
    var $trans_color = $png_ptr + 400 | 0;
    _png_do_expand($row_info, $add_ptr23, $trans_color);
    __label__ = 12;
    break;
   case 11:
    var $add_ptr26 = HEAP32[$row_buf >> 2] + 1 | 0;
    _png_do_expand($row_info, $add_ptr26, 0);
    __label__ = 12;
    break;
   case 12:
    var $15 = HEAP32[$transformations >> 2];
    if (($15 & 262272 | 0) == 262144) {
      __label__ = 13;
      break;
    } else {
      var $20 = $15;
      __label__ = 15;
      break;
    }
   case 13:
    var $18 = HEAP8[$row_info + 8 | 0];
    if ($18 << 24 >> 24 == 6 || $18 << 24 >> 24 == 4) {
      __label__ = 14;
      break;
    } else {
      var $20 = $15;
      __label__ = 15;
      break;
    }
   case 14:
    var $add_ptr48 = HEAP32[$row_buf >> 2] + 1 | 0;
    _png_do_strip_channel($row_info, $add_ptr48, 0);
    var $20 = HEAP32[$transformations >> 2];
    __label__ = 15;
    break;
   case 15:
    var $20;
    if (($20 & 6291456 | 0) == 0) {
      __label__ = 21;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 16:
    var $add_ptr55 = HEAP32[$row_buf >> 2] + 1 | 0;
    var $call = _png_do_rgb_to_gray($png_ptr, $row_info, $add_ptr55);
    if (($call | 0) == 0) {
      __label__ = 21;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 17:
    HEAP8[$png_ptr + 569 | 0] = 1;
    var $22 = HEAP32[$transformations >> 2];
    if (($22 & 6291456 | 0) == 4194304) {
      __label__ = 18;
      break;
    } else {
      var $24 = $22;
      __label__ = 19;
      break;
    }
   case 18:
    var $23 = $png_ptr;
    _png_warning($23, STRING_TABLE.__str14723 | 0);
    var $24 = HEAP32[$transformations >> 2];
    __label__ = 19;
    break;
   case 19:
    var $24;
    if (($24 & 6291456 | 0) == 2097152) {
      __label__ = 20;
      break;
    } else {
      __label__ = 21;
      break;
    }
   case 20:
    var $25 = $png_ptr;
    _png_error($25, STRING_TABLE.__str14723 | 0);
    __label__ = 21;
    break;
   case 21:
    var $26 = HEAP32[$transformations >> 2];
    if (($26 & 16384 | 0) == 0) {
      var $29 = $26;
      __label__ = 24;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 22:
    if ((HEAP32[$png_ptr + 84 >> 2] & 2048 | 0) == 0) {
      __label__ = 23;
      break;
    } else {
      var $29 = $26;
      __label__ = 24;
      break;
    }
   case 23:
    var $add_ptr80 = HEAP32[$row_buf >> 2] + 1 | 0;
    _png_do_gray_to_rgb($row_info, $add_ptr80);
    var $29 = HEAP32[$transformations >> 2];
    __label__ = 24;
    break;
   case 24:
    var $29;
    if (($29 & 128 | 0) == 0) {
      var $31 = $29;
      __label__ = 26;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 25:
    var $add_ptr87 = HEAP32[$row_buf >> 2] + 1 | 0;
    _png_do_compose($row_info, $add_ptr87, $png_ptr);
    var $31 = HEAP32[$transformations >> 2];
    __label__ = 26;
    break;
   case 26:
    var $31;
    if (($31 & 6299648 | 0) == 8192) {
      __label__ = 27;
      break;
    } else {
      var $38 = $31;
      __label__ = 33;
      break;
    }
   case 27:
    if (($31 & 128 | 0) == 0) {
      __label__ = 28;
      break;
    } else {
      __label__ = 29;
      break;
    }
   case 28:
    var $36 = HEAP8[$png_ptr + 291 | 0];
    __label__ = 31;
    break;
   case 29:
    if (HEAP16[$png_ptr + 284 >> 1] << 16 >> 16 == 0) {
      __label__ = 30;
      break;
    } else {
      var $38 = $31;
      __label__ = 33;
      break;
    }
   case 30:
    var $35 = HEAP8[$png_ptr + 291 | 0];
    if (($35 & 4) << 24 >> 24 == 0) {
      var $36 = $35;
      __label__ = 31;
      break;
    } else {
      var $38 = $31;
      __label__ = 33;
      break;
    }
   case 31:
    var $36;
    if ($36 << 24 >> 24 == 3) {
      var $38 = $31;
      __label__ = 33;
      break;
    } else {
      __label__ = 32;
      break;
    }
   case 32:
    var $add_ptr117 = HEAP32[$row_buf >> 2] + 1 | 0;
    var $png_ptr_idx_val = HEAP32[$png_ptr + 348 >> 2];
    var $png_ptr_idx1_val = HEAP32[$png_ptr + 360 >> 2];
    var $png_ptr_idx2_val = HEAP32[$png_ptr + 364 >> 2];
    _png_do_gamma($row_info, $add_ptr117, $png_ptr_idx_val, $png_ptr_idx1_val, $png_ptr_idx2_val);
    var $38 = HEAP32[$transformations >> 2];
    __label__ = 33;
    break;
   case 33:
    var $38;
    if (($38 & 262272 | 0) == 262272) {
      __label__ = 34;
      break;
    } else {
      var $43 = $38;
      __label__ = 36;
      break;
    }
   case 34:
    var $41 = HEAP8[$row_info + 8 | 0];
    if ($41 << 24 >> 24 == 6 || $41 << 24 >> 24 == 4) {
      __label__ = 35;
      break;
    } else {
      var $43 = $38;
      __label__ = 36;
      break;
    }
   case 35:
    var $add_ptr138 = HEAP32[$row_buf >> 2] + 1 | 0;
    _png_do_strip_channel($row_info, $add_ptr138, 0);
    var $43 = HEAP32[$transformations >> 2];
    __label__ = 36;
    break;
   case 36:
    var $43;
    if (($43 & 8388608 | 0) == 0) {
      var $46 = $43;
      __label__ = 39;
      break;
    } else {
      __label__ = 37;
      break;
    }
   case 37:
    if ((HEAP8[$row_info + 8 | 0] & 4) << 24 >> 24 == 0) {
      var $46 = $43;
      __label__ = 39;
      break;
    } else {
      __label__ = 38;
      break;
    }
   case 38:
    var $add_ptr150 = HEAP32[$row_buf >> 2] + 1 | 0;
    _png_do_encode_alpha($row_info, $add_ptr150, $png_ptr);
    var $46 = HEAP32[$transformations >> 2];
    __label__ = 39;
    break;
   case 39:
    var $46;
    if (($46 & 67108864 | 0) == 0) {
      var $48 = $46;
      __label__ = 41;
      break;
    } else {
      __label__ = 40;
      break;
    }
   case 40:
    var $add_ptr157 = HEAP32[$row_buf >> 2] + 1 | 0;
    _png_do_scale_16_to_8($row_info, $add_ptr157);
    var $48 = HEAP32[$transformations >> 2];
    __label__ = 41;
    break;
   case 41:
    var $48;
    if (($48 & 1024 | 0) == 0) {
      var $50 = $48;
      __label__ = 43;
      break;
    } else {
      __label__ = 42;
      break;
    }
   case 42:
    var $add_ptr164 = HEAP32[$row_buf >> 2] + 1 | 0;
    _png_do_chop($row_info, $add_ptr164);
    var $50 = HEAP32[$transformations >> 2];
    __label__ = 43;
    break;
   case 43:
    var $50;
    if (($50 & 64 | 0) == 0) {
      __label__ = 46;
      break;
    } else {
      __label__ = 44;
      break;
    }
   case 44:
    var $add_ptr171 = HEAP32[$row_buf >> 2] + 1 | 0;
    var $52 = HEAP32[$png_ptr + 480 >> 2];
    var $53 = HEAP32[$png_ptr + 484 >> 2];
    _png_do_quantize($row_info, $add_ptr171, $52, $53);
    if ((HEAP32[$row_info + 4 >> 2] | 0) == 0) {
      __label__ = 45;
      break;
    } else {
      __label__ = 46;
      break;
    }
   case 45:
    var $55 = $png_ptr;
    _png_error($55, STRING_TABLE.__str15724 | 0);
    __label__ = 46;
    break;
   case 46:
    var $56 = HEAP32[$transformations >> 2];
    if (($56 & 512 | 0) == 0) {
      var $58 = $56;
      __label__ = 48;
      break;
    } else {
      __label__ = 47;
      break;
    }
   case 47:
    var $add_ptr182 = HEAP32[$row_buf >> 2] + 1 | 0;
    _png_do_expand_16($row_info, $add_ptr182);
    var $58 = HEAP32[$transformations >> 2];
    __label__ = 48;
    break;
   case 48:
    var $58;
    if (($58 & 16384 | 0) == 0) {
      var $61 = $58;
      __label__ = 51;
      break;
    } else {
      __label__ = 49;
      break;
    }
   case 49:
    if ((HEAP32[$png_ptr + 84 >> 2] & 2048 | 0) == 0) {
      var $61 = $58;
      __label__ = 51;
      break;
    } else {
      __label__ = 50;
      break;
    }
   case 50:
    var $add_ptr193 = HEAP32[$row_buf >> 2] + 1 | 0;
    _png_do_gray_to_rgb($row_info, $add_ptr193);
    var $61 = HEAP32[$transformations >> 2];
    __label__ = 51;
    break;
   case 51:
    var $61;
    if (($61 & 32 | 0) == 0) {
      var $63 = $61;
      __label__ = 53;
      break;
    } else {
      __label__ = 52;
      break;
    }
   case 52:
    var $add_ptr200 = HEAP32[$row_buf >> 2] + 1 | 0;
    _png_do_invert($row_info, $add_ptr200);
    var $63 = HEAP32[$transformations >> 2];
    __label__ = 53;
    break;
   case 53:
    var $63;
    if (($63 & 8 | 0) == 0) {
      var $65 = $63;
      __label__ = 55;
      break;
    } else {
      __label__ = 54;
      break;
    }
   case 54:
    var $add_ptr207 = HEAP32[$row_buf >> 2] + 1 | 0;
    var $shift = $png_ptr + 389 | 0;
    _png_do_unshift($row_info, $add_ptr207, $shift);
    var $65 = HEAP32[$transformations >> 2];
    __label__ = 55;
    break;
   case 55:
    var $65;
    if (($65 & 4 | 0) == 0) {
      __label__ = 57;
      break;
    } else {
      __label__ = 56;
      break;
    }
   case 56:
    var $add_ptr214 = HEAP32[$row_buf >> 2] + 1 | 0;
    _png_do_unpack($row_info, $add_ptr214);
    __label__ = 57;
    break;
   case 57:
    if (HEAP8[$row_info + 8 | 0] << 24 >> 24 == 3) {
      __label__ = 58;
      break;
    } else {
      __label__ = 59;
      break;
    }
   case 58:
    var $68 = $png_ptr;
    _png_do_check_palette_indexes($68, $row_info);
    __label__ = 59;
    break;
   case 59:
    var $69 = HEAP32[$transformations >> 2];
    if (($69 & 1 | 0) == 0) {
      var $71 = $69;
      __label__ = 61;
      break;
    } else {
      __label__ = 60;
      break;
    }
   case 60:
    var $add_ptr227 = HEAP32[$row_buf >> 2] + 1 | 0;
    _png_do_bgr($row_info, $add_ptr227);
    var $71 = HEAP32[$transformations >> 2];
    __label__ = 61;
    break;
   case 61:
    var $71;
    if (($71 & 65536 | 0) == 0) {
      var $73 = $71;
      __label__ = 63;
      break;
    } else {
      __label__ = 62;
      break;
    }
   case 62:
    var $add_ptr234 = HEAP32[$row_buf >> 2] + 1 | 0;
    _png_do_packswap($row_info, $add_ptr234);
    var $73 = HEAP32[$transformations >> 2];
    __label__ = 63;
    break;
   case 63:
    var $73;
    if (($73 & 32768 | 0) == 0) {
      var $77 = $73;
      __label__ = 65;
      break;
    } else {
      __label__ = 64;
      break;
    }
   case 64:
    var $add_ptr241 = HEAP32[$row_buf >> 2] + 1 | 0;
    var $conv242 = HEAPU16[$png_ptr + 306 >> 1] & 65535;
    var $76 = HEAP32[$flags >> 2];
    _png_do_read_filler($row_info, $add_ptr241, $conv242, $76);
    var $77 = HEAP32[$transformations >> 2];
    __label__ = 65;
    break;
   case 65:
    var $77;
    if (($77 & 524288 | 0) == 0) {
      var $79 = $77;
      __label__ = 67;
      break;
    } else {
      __label__ = 66;
      break;
    }
   case 66:
    var $add_ptr250 = HEAP32[$row_buf >> 2] + 1 | 0;
    _png_do_read_invert_alpha($row_info, $add_ptr250);
    var $79 = HEAP32[$transformations >> 2];
    __label__ = 67;
    break;
   case 67:
    var $79;
    if (($79 & 131072 | 0) == 0) {
      var $81 = $79;
      __label__ = 69;
      break;
    } else {
      __label__ = 68;
      break;
    }
   case 68:
    var $add_ptr257 = HEAP32[$row_buf >> 2] + 1 | 0;
    _png_do_read_swap_alpha($row_info, $add_ptr257);
    var $81 = HEAP32[$transformations >> 2];
    __label__ = 69;
    break;
   case 69:
    var $81;
    if (($81 & 16 | 0) == 0) {
      var $83 = $81;
      __label__ = 71;
      break;
    } else {
      __label__ = 70;
      break;
    }
   case 70:
    var $add_ptr264 = HEAP32[$row_buf >> 2] + 1 | 0;
    _png_do_swap($row_info, $add_ptr264);
    var $83 = HEAP32[$transformations >> 2];
    __label__ = 71;
    break;
   case 71:
    var $83;
    if (($83 & 1048576 | 0) == 0) {
      __label__ = 83;
      break;
    } else {
      __label__ = 72;
      break;
    }
   case 72:
    var $84 = HEAP32[$png_ptr + 68 >> 2];
    if (($84 | 0) == 0) {
      __label__ = 74;
      break;
    } else {
      __label__ = 73;
      break;
    }
   case 73:
    var $add_ptr275 = HEAP32[$row_buf >> 2] + 1 | 0;
    FUNCTION_TABLE[$84]($png_ptr, $row_info, $add_ptr275);
    __label__ = 74;
    break;
   case 74:
    var $86 = HEAP8[$png_ptr + 80 | 0];
    if ($86 << 24 >> 24 == 0) {
      __label__ = 76;
      break;
    } else {
      __label__ = 75;
      break;
    }
   case 75:
    HEAP8[$row_info + 9 | 0] = $86;
    __label__ = 76;
    break;
   case 76:
    var $87 = HEAP8[$png_ptr + 81 | 0];
    var $channels287_phi_trans_insert = $row_info + 10 | 0;
    if ($87 << 24 >> 24 == 0) {
      __label__ = 77;
      break;
    } else {
      __label__ = 78;
      break;
    }
   case 77:
    var $88 = HEAP8[$channels287_phi_trans_insert];
    __label__ = 79;
    break;
   case 78:
    HEAP8[$channels287_phi_trans_insert] = $87;
    var $88 = $87;
    __label__ = 79;
    break;
   case 79:
    var $88;
    var $mul = $88 * HEAP8[$row_info + 9 | 0] & 255;
    HEAP8[$row_info + 11 | 0] = $mul;
    var $conv291 = $mul & 255;
    var $90 = HEAP32[$row_info >> 2];
    if (($mul & 255) > 7) {
      __label__ = 80;
      break;
    } else {
      __label__ = 81;
      break;
    }
   case 80:
    var $cond = ($conv291 >>> 3) * $90 | 0;
    __label__ = 82;
    break;
   case 81:
    var $cond = ($conv291 * $90 + 7 | 0) >>> 3;
    __label__ = 82;
    break;
   case 82:
    var $cond;
    HEAP32[$row_info + 4 >> 2] = $cond;
    __label__ = 83;
    break;
   case 83:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_do_read_transformations["X"] = 1;

function _png_do_expand($row_info, $row, $trans_color) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $0 = HEAPU32[$row_info >> 2];
    var $color_type = $row_info + 8 | 0;
    var $1 = HEAP8[$color_type];
    if ($1 << 24 >> 24 == 0) {
      __label__ = 2;
      break;
    } else if ($1 << 24 >> 24 == 2) {
      __label__ = 32;
      break;
    } else {
      __label__ = 56;
      break;
    }
   case 2:
    var $tobool = ($trans_color | 0) != 0;
    if ($tobool) {
      __label__ = 3;
      break;
    } else {
      var $cond = 0;
      __label__ = 4;
      break;
    }
   case 3:
    var $cond = HEAP16[$trans_color + 8 >> 1];
    __label__ = 4;
    break;
   case 4:
    var $cond;
    var $bit_depth = $row_info + 9 | 0;
    var $3 = HEAPU8[$bit_depth];
    if (($3 & 255) < 8) {
      __label__ = 5;
      break;
    } else {
      var $gray_1 = $cond;
      var $9 = $3;
      __label__ = 16;
      break;
    }
   case 5:
    var $conv5 = $3 & 255;
    if (($conv5 | 0) == 1) {
      __label__ = 6;
      break;
    } else if (($conv5 | 0) == 2) {
      __label__ = 9;
      break;
    } else if (($conv5 | 0) == 4) {
      __label__ = 12;
      break;
    } else {
      var $gray_0 = $cond;
      __label__ = 15;
      break;
    }
   case 6:
    var $mul = -($cond & 1) & 65535 & 255;
    var $sub = $0 - 1 | 0;
    if (($0 | 0) == 0) {
      var $gray_0 = $mul;
      __label__ = 15;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    var $sp_031 = $row + ($sub >>> 3) | 0;
    var $shift_032 = $0 + 7 & 7 ^ 7;
    var $dp_033 = $row + $sub | 0;
    var $i_034 = 0;
    __label__ = 8;
    break;
   case 8:
    var $i_034;
    var $dp_033;
    var $shift_032;
    var $sp_031;
    HEAP8[$dp_033] = ((HEAPU8[$sp_031] & 255 & 1 << $shift_032 | 0) != 0) << 31 >> 31;
    var $cmp24 = ($shift_032 | 0) == 7;
    var $sp_1 = $cmp24 ? $sp_031 - 1 | 0 : $sp_031;
    var $shift_1 = $cmp24 ? 0 : $shift_032 + 1 | 0;
    var $inc30 = $i_034 + 1 | 0;
    if (($inc30 | 0) == ($0 | 0)) {
      var $gray_0 = $mul;
      __label__ = 15;
      break;
    } else {
      var $sp_031 = $sp_1;
      var $shift_032 = $shift_1;
      var $dp_033 = $dp_033 - 1 | 0;
      var $i_034 = $inc30;
      __label__ = 8;
      break;
    }
   case 9:
    var $mul34 = ($cond & 3) * 85 & 65535;
    var $sub36 = $0 - 1 | 0;
    if (($0 | 0) == 0) {
      var $gray_0 = $mul34;
      __label__ = 15;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 10:
    var $sp_225 = $row + ($sub36 >>> 2) | 0;
    var $shift_226 = ($0 << 1) + 6 & 6 ^ 6;
    var $dp_127 = $row + $sub36 | 0;
    var $i_128 = 0;
    __label__ = 11;
    break;
   case 11:
    var $i_128;
    var $dp_127;
    var $shift_226;
    var $sp_225;
    var $and50 = (HEAPU8[$sp_225] & 255) >>> ($shift_226 >>> 0) & 3;
    HEAP8[$dp_127] = ($and50 << 6 | $and50 | $and50 << 4 | $and50 << 2) & 255;
    var $cmp57 = ($shift_226 | 0) == 6;
    var $sp_3 = $cmp57 ? $sp_225 - 1 | 0 : $sp_225;
    var $shift_3 = $cmp57 ? 0 : $shift_226 + 2 | 0;
    var $inc66 = $i_128 + 1 | 0;
    if (($inc66 | 0) == ($0 | 0)) {
      var $gray_0 = $mul34;
      __label__ = 15;
      break;
    } else {
      var $sp_225 = $sp_3;
      var $shift_226 = $shift_3;
      var $dp_127 = $dp_127 - 1 | 0;
      var $i_128 = $inc66;
      __label__ = 11;
      break;
    }
   case 12:
    var $mul71 = ($cond & 15) * 17 & 65535;
    var $sub73 = $0 - 1 | 0;
    if (($0 | 0) == 0) {
      var $gray_0 = $mul71;
      __label__ = 15;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 13:
    var $sp_419 = $row + ($sub73 >>> 1) | 0;
    var $shift_420 = 1 - ($0 & 1 ^ 1) << 2;
    var $dp_221 = $row + $sub73 | 0;
    var $i_222 = 0;
    __label__ = 14;
    break;
   case 14:
    var $i_222;
    var $dp_221;
    var $shift_420;
    var $sp_419;
    var $and88 = (HEAPU8[$sp_419] & 255) >>> ($shift_420 >>> 0) & 15;
    HEAP8[$dp_221] = ($and88 << 4 | $and88) & 255;
    var $cmp92 = ($shift_420 | 0) == 4;
    var $sp_5 = $cmp92 ? $sp_419 - 1 | 0 : $sp_419;
    var $shift_5 = $cmp92 ? 0 : 4;
    var $inc100 = $i_222 + 1 | 0;
    if (($inc100 | 0) == ($0 | 0)) {
      var $gray_0 = $mul71;
      __label__ = 15;
      break;
    } else {
      var $sp_419 = $sp_5;
      var $shift_420 = $shift_5;
      var $dp_221 = $dp_221 - 1 | 0;
      var $i_222 = $inc100;
      __label__ = 14;
      break;
    }
   case 15:
    var $gray_0;
    HEAP8[$bit_depth] = 8;
    HEAP8[$row_info + 11 | 0] = 8;
    HEAP32[$row_info + 4 >> 2] = $0;
    var $gray_1 = $gray_0;
    var $9 = 8;
    __label__ = 16;
    break;
   case 16:
    var $9;
    var $gray_1;
    if ($tobool) {
      __label__ = 17;
      break;
    } else {
      __label__ = 56;
      break;
    }
   case 17:
    if ($9 << 24 >> 24 == 8) {
      __label__ = 18;
      break;
    } else if ($9 << 24 >> 24 == 16) {
      __label__ = 21;
      break;
    } else {
      __label__ = 28;
      break;
    }
   case 18:
    if (($0 | 0) == 0) {
      __label__ = 28;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 19:
    var $conv125 = $gray_1 & 255 & 65535;
    var $sp_641 = $row + ($0 - 1) | 0;
    var $dp_342 = $row + (($0 << 1) - 1) | 0;
    var $i_343 = 0;
    __label__ = 20;
    break;
   case 20:
    var $i_343;
    var $dp_342;
    var $sp_641;
    HEAP8[$dp_342] = ((HEAPU8[$sp_641] & 255 | 0) != ($conv125 | 0)) << 31 >> 31;
    var $11 = HEAP8[$sp_641];
    HEAP8[$dp_342 - 1 | 0] = $11;
    var $inc136 = $i_343 + 1 | 0;
    if (($inc136 | 0) == ($0 | 0)) {
      __label__ = 28;
      break;
    } else {
      var $sp_641 = $sp_641 - 1 | 0;
      var $dp_342 = $dp_342 - 2 | 0;
      var $i_343 = $inc136;
      __label__ = 20;
      break;
    }
   case 21:
    var $conv147 = ($gray_1 & 65535) >>> 8 & 65535;
    var $12 = HEAP32[$row_info + 4 >> 2];
    if (($0 | 0) == 0) {
      __label__ = 28;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 22:
    var $conv168 = $gray_1 & 65535 & 255;
    var $sp_736 = $row + ($12 - 1) | 0;
    var $dp_437 = $row + (($12 << 1) - 1) | 0;
    var $i_438 = 0;
    __label__ = 23;
    break;
   case 23:
    var $i_438;
    var $dp_437;
    var $sp_736;
    var $add_ptr162 = $sp_736 - 1 | 0;
    if ((HEAPU8[$add_ptr162] & 255 | 0) == ($conv147 | 0)) {
      __label__ = 24;
      break;
    } else {
      __label__ = 26;
      break;
    }
   case 24:
    if ((HEAPU8[$sp_736] & 255 | 0) == ($conv168 | 0)) {
      __label__ = 25;
      break;
    } else {
      __label__ = 26;
      break;
    }
   case 25:
    HEAP8[$dp_437] = 0;
    HEAP8[$dp_437 - 1 | 0] = 0;
    __label__ = 27;
    break;
   case 26:
    HEAP8[$dp_437] = -1;
    HEAP8[$dp_437 - 1 | 0] = -1;
    __label__ = 27;
    break;
   case 27:
    var $15 = HEAP8[$sp_736];
    HEAP8[$dp_437 - 2 | 0] = $15;
    var $16 = HEAP8[$add_ptr162];
    HEAP8[$dp_437 - 3 | 0] = $16;
    var $inc183 = $i_438 + 1 | 0;
    if (($inc183 | 0) == ($0 | 0)) {
      __label__ = 28;
      break;
    } else {
      var $sp_736 = $sp_736 - 2 | 0;
      var $dp_437 = $dp_437 - 4 | 0;
      var $i_438 = $inc183;
      __label__ = 23;
      break;
    }
   case 28:
    HEAP8[$color_type] = 4;
    HEAP8[$row_info + 10 | 0] = 2;
    var $shl190 = HEAP8[$bit_depth] << 1;
    HEAP8[$row_info + 11 | 0] = $shl190;
    var $conv194 = $shl190 & 255;
    if (($shl190 & 255) > 7) {
      __label__ = 29;
      break;
    } else {
      __label__ = 30;
      break;
    }
   case 29:
    var $cond209 = ($conv194 >>> 3) * $0 | 0;
    __label__ = 31;
    break;
   case 30:
    var $cond209 = ($conv194 * $0 + 7 | 0) >>> 3;
    __label__ = 31;
    break;
   case 31:
    var $cond209;
    HEAP32[$row_info + 4 >> 2] = $cond209;
    __label__ = 56;
    break;
   case 32:
    if (($trans_color | 0) == 0) {
      __label__ = 56;
      break;
    } else {
      __label__ = 33;
      break;
    }
   case 33:
    var $bit_depth220 = $row_info + 9 | 0;
    var $18 = HEAP8[$bit_depth220];
    if ($18 << 24 >> 24 == 8) {
      __label__ = 34;
      break;
    } else if ($18 << 24 >> 24 == 16) {
      __label__ = 41;
      break;
    } else {
      __label__ = 52;
      break;
    }
   case 34:
    if (($0 | 0) == 0) {
      __label__ = 52;
      break;
    } else {
      __label__ = 35;
      break;
    }
   case 35:
    var $conv249 = HEAPU16[$trans_color + 2 >> 1] & 65535 & 255;
    var $conv255 = HEAPU16[$trans_color + 4 >> 1] & 65535 & 255;
    var $conv260 = HEAPU16[$trans_color + 6 >> 1] & 65535 & 255;
    var $sp_815 = $row + (HEAP32[$row_info + 4 >> 2] - 1) | 0;
    var $dp_616 = $row + (($0 << 2) - 1) | 0;
    var $i_517 = 0;
    __label__ = 36;
    break;
   case 36:
    var $i_517;
    var $dp_616;
    var $sp_815;
    var $add_ptr247 = $sp_815 - 2 | 0;
    var $add_ptr253 = $sp_815 - 1 | 0;
    if ((HEAPU8[$add_ptr247] & 255 | 0) == ($conv249 | 0)) {
      __label__ = 37;
      break;
    } else {
      var $incdec_ptr268_pre_pre_phi = $add_ptr253;
      __label__ = 39;
      break;
    }
   case 37:
    if ((HEAPU8[$add_ptr253] & 255 | 0) == ($conv255 | 0)) {
      __label__ = 38;
      break;
    } else {
      var $incdec_ptr268_pre_pre_phi = $add_ptr253;
      __label__ = 39;
      break;
    }
   case 38:
    if ((HEAPU8[$sp_815] & 255 | 0) == ($conv260 | 0)) {
      var $storemerge = 0;
      var $incdec_ptr268_pre_phi = $add_ptr253;
      __label__ = 40;
      break;
    } else {
      var $incdec_ptr268_pre_pre_phi = $add_ptr253;
      __label__ = 39;
      break;
    }
   case 39:
    var $incdec_ptr268_pre_pre_phi;
    var $storemerge = -1;
    var $incdec_ptr268_pre_phi = $incdec_ptr268_pre_pre_phi;
    __label__ = 40;
    break;
   case 40:
    var $incdec_ptr268_pre_phi;
    var $storemerge;
    HEAP8[$dp_616] = $storemerge;
    var $26 = HEAP8[$sp_815];
    HEAP8[$dp_616 - 1 | 0] = $26;
    var $27 = HEAP8[$incdec_ptr268_pre_phi];
    HEAP8[$dp_616 - 2 | 0] = $27;
    var $28 = HEAP8[$add_ptr247];
    HEAP8[$dp_616 - 3 | 0] = $28;
    var $inc275 = $i_517 + 1 | 0;
    if (($inc275 | 0) == ($0 | 0)) {
      __label__ = 52;
      break;
    } else {
      var $sp_815 = $sp_815 - 3 | 0;
      var $dp_616 = $dp_616 - 4 | 0;
      var $i_517 = $inc275;
      __label__ = 36;
      break;
    }
   case 41:
    var $29 = HEAPU16[$trans_color + 2 >> 1];
    var $conv287 = ($29 & 65535) >>> 8 & 65535;
    var $30 = HEAPU16[$trans_color + 4 >> 1];
    var $conv292 = ($30 & 65535) >>> 8 & 65535;
    var $31 = HEAPU16[$trans_color + 6 >> 1];
    var $conv297 = ($31 & 65535) >>> 8 & 65535;
    if (($0 | 0) == 0) {
      __label__ = 52;
      break;
    } else {
      __label__ = 42;
      break;
    }
   case 42:
    var $conv328 = $29 & 65535 & 255;
    var $conv340 = $30 & 65535 & 255;
    var $conv351 = $31 & 65535 & 255;
    var $sp_910 = $row + (HEAP32[$row_info + 4 >> 2] - 1) | 0;
    var $dp_811 = $row + (($0 << 3) - 1) | 0;
    var $i_612 = 0;
    __label__ = 43;
    break;
   case 43:
    var $i_612;
    var $dp_811;
    var $sp_910;
    var $add_ptr320 = $sp_910 - 5 | 0;
    var $add_ptr326 = $sp_910 - 4 | 0;
    if ((HEAPU8[$add_ptr320] & 255 | 0) == ($conv287 | 0)) {
      __label__ = 44;
      break;
    } else {
      var $incdec_ptr367_pre_pre_phi = $add_ptr326;
      __label__ = 50;
      break;
    }
   case 44:
    if ((HEAPU8[$add_ptr326] & 255 | 0) == ($conv328 | 0)) {
      __label__ = 45;
      break;
    } else {
      var $incdec_ptr367_pre_pre_phi = $add_ptr326;
      __label__ = 50;
      break;
    }
   case 45:
    var $add_ptr332 = $sp_910 - 3 | 0;
    if ((HEAPU8[$add_ptr332] & 255 | 0) == ($conv292 | 0)) {
      __label__ = 46;
      break;
    } else {
      var $incdec_ptr367_pre_pre_phi = $add_ptr326;
      __label__ = 50;
      break;
    }
   case 46:
    var $add_ptr338 = $sp_910 - 2 | 0;
    if ((HEAPU8[$add_ptr338] & 255 | 0) == ($conv340 | 0)) {
      __label__ = 47;
      break;
    } else {
      var $incdec_ptr367_pre_pre_phi = $add_ptr326;
      __label__ = 50;
      break;
    }
   case 47:
    var $add_ptr344 = $sp_910 - 1 | 0;
    if ((HEAPU8[$add_ptr344] & 255 | 0) == ($conv297 | 0)) {
      __label__ = 48;
      break;
    } else {
      var $incdec_ptr367_pre_pre_phi = $add_ptr326;
      __label__ = 50;
      break;
    }
   case 48:
    if ((HEAPU8[$sp_910] & 255 | 0) == ($conv351 | 0)) {
      __label__ = 49;
      break;
    } else {
      var $incdec_ptr367_pre_pre_phi = $add_ptr326;
      __label__ = 50;
      break;
    }
   case 49:
    HEAP8[$dp_811] = 0;
    HEAP8[$dp_811 - 1 | 0] = 0;
    var $incdec_ptr361_pre_phi = $add_ptr344;
    var $incdec_ptr363_pre_phi = $add_ptr338;
    var $incdec_ptr365_pre_phi = $add_ptr332;
    var $incdec_ptr367_pre_phi = $add_ptr326;
    __label__ = 51;
    break;
   case 50:
    var $incdec_ptr367_pre_pre_phi;
    HEAP8[$dp_811] = -1;
    HEAP8[$dp_811 - 1 | 0] = -1;
    var $incdec_ptr361_pre_phi = $sp_910 - 1 | 0;
    var $incdec_ptr363_pre_phi = $sp_910 - 2 | 0;
    var $incdec_ptr365_pre_phi = $sp_910 - 3 | 0;
    var $incdec_ptr367_pre_phi = $incdec_ptr367_pre_pre_phi;
    __label__ = 51;
    break;
   case 51:
    var $incdec_ptr367_pre_phi;
    var $incdec_ptr365_pre_phi;
    var $incdec_ptr363_pre_phi;
    var $incdec_ptr361_pre_phi;
    var $39 = HEAP8[$sp_910];
    HEAP8[$dp_811 - 2 | 0] = $39;
    var $40 = HEAP8[$incdec_ptr361_pre_phi];
    HEAP8[$dp_811 - 3 | 0] = $40;
    var $41 = HEAP8[$incdec_ptr363_pre_phi];
    HEAP8[$dp_811 - 4 | 0] = $41;
    var $42 = HEAP8[$incdec_ptr365_pre_phi];
    HEAP8[$dp_811 - 5 | 0] = $42;
    var $43 = HEAP8[$incdec_ptr367_pre_phi];
    HEAP8[$dp_811 - 6 | 0] = $43;
    var $44 = HEAP8[$add_ptr320];
    HEAP8[$dp_811 - 7 | 0] = $44;
    var $inc374 = $i_612 + 1 | 0;
    if (($inc374 | 0) == ($0 | 0)) {
      __label__ = 52;
      break;
    } else {
      var $sp_910 = $sp_910 - 6 | 0;
      var $dp_811 = $dp_811 - 8 | 0;
      var $i_612 = $inc374;
      __label__ = 43;
      break;
    }
   case 52:
    HEAP8[$color_type] = 6;
    HEAP8[$row_info + 10 | 0] = 4;
    var $shl382 = HEAP8[$bit_depth220] << 2;
    HEAP8[$row_info + 11 | 0] = $shl382;
    var $conv386 = $shl382 & 255;
    if (($shl382 & 255) > 7) {
      __label__ = 53;
      break;
    } else {
      __label__ = 54;
      break;
    }
   case 53:
    var $cond401 = ($conv386 >>> 3) * $0 | 0;
    __label__ = 55;
    break;
   case 54:
    var $cond401 = ($conv386 * $0 + 7 | 0) >>> 3;
    __label__ = 55;
    break;
   case 55:
    var $cond401;
    HEAP32[$row_info + 4 >> 2] = $cond401;
    __label__ = 56;
    break;
   case 56:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_do_expand["X"] = 1;

function _png_do_rgb_to_gray($png_ptr, $row_info, $row) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $color_type = $row_info + 8 | 0;
    var $conv = HEAPU8[$color_type] & 255;
    if (($conv & 3 | 0) == 2) {
      __label__ = 2;
      break;
    } else {
      var $rgb_error_9 = 0;
      __label__ = 39;
      break;
    }
   case 2:
    var $conv5 = HEAPU16[$png_ptr + 572 >> 1] & 65535;
    var $conv6 = HEAPU16[$png_ptr + 574 >> 1] & 65535;
    var $sub7 = 32768 - $conv5 - $conv6 | 0;
    var $5 = HEAPU32[$row_info >> 2];
    var $cmp = ($conv & 4 | 0) != 0;
    var $bit_depth = $row_info + 9 | 0;
    if (HEAP8[$bit_depth] << 24 >> 24 == 8) {
      __label__ = 3;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 3:
    var $gamma_from_1 = $png_ptr + 368 | 0;
    if ((HEAP32[$gamma_from_1 >> 2] | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 4:
    if (($5 | 0) == 0) {
      var $rgb_error_8 = 0;
      __label__ = 35;
      break;
    } else {
      var $dp67_032 = $row;
      var $sp66_033 = $row;
      var $i68_034 = 0;
      var $rgb_error_235 = 0;
      __label__ = 15;
      break;
    }
   case 5:
    var $gamma_to_1 = $png_ptr + 372 | 0;
    if ((HEAP32[$gamma_to_1 >> 2] | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    if (($5 | 0) == 0) {
      var $rgb_error_8 = 0;
      __label__ = 35;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    var $gamma_table = $png_ptr + 360 | 0;
    var $i_025 = 0;
    var $dp_026 = $row;
    var $sp_027 = $row;
    var $rgb_error_028 = 0;
    __label__ = 8;
    break;
   case 8:
    var $rgb_error_028;
    var $sp_027;
    var $dp_026;
    var $i_025;
    var $9 = HEAPU8[$sp_027];
    var $10 = HEAPU8[$sp_027 + 1 | 0];
    var $incdec_ptr25 = $sp_027 + 3 | 0;
    var $11 = HEAPU8[$sp_027 + 2 | 0];
    var $conv26 = $9 & 255;
    if ($9 << 24 >> 24 == $10 << 24 >> 24 & $9 << 24 >> 24 == $11 << 24 >> 24) {
      __label__ = 10;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    var $12 = HEAPU32[$gamma_to_1 >> 2];
    var $rgb_error_1 = $rgb_error_028 | 1;
    var $storemerge7 = HEAP8[HEAP32[$gamma_from_1 >> 2] + (((HEAPU8[$12 + $conv26 | 0] & 255) * $conv5 + 16384 + (HEAPU8[$12 + ($10 & 255) | 0] & 255) * $conv6 + (HEAPU8[$12 + ($11 & 255) | 0] & 255) * $sub7 | 0) >>> 15) | 0];
    __label__ = 12;
    break;
   case 10:
    var $18 = HEAP32[$gamma_table >> 2];
    if (($18 | 0) == 0) {
      var $rgb_error_1 = $rgb_error_028;
      var $storemerge7 = $9;
      __label__ = 12;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    var $rgb_error_1 = $rgb_error_028;
    var $storemerge7 = HEAP8[$18 + $conv26 | 0];
    __label__ = 12;
    break;
   case 12:
    var $storemerge7;
    var $rgb_error_1;
    HEAP8[$dp_026] = $storemerge7;
    var $dp_1 = $dp_026 + 1 | 0;
    if ($cmp) {
      __label__ = 13;
      break;
    } else {
      var $sp_1 = $incdec_ptr25;
      var $dp_2 = $dp_1;
      __label__ = 14;
      break;
    }
   case 13:
    var $20 = HEAP8[$incdec_ptr25];
    HEAP8[$dp_1] = $20;
    var $sp_1 = $sp_027 + 4 | 0;
    var $dp_2 = $dp_026 + 2 | 0;
    __label__ = 14;
    break;
   case 14:
    var $dp_2;
    var $sp_1;
    var $inc = $i_025 + 1 | 0;
    if (($inc | 0) == ($5 | 0)) {
      var $rgb_error_8 = $rgb_error_1;
      __label__ = 35;
      break;
    } else {
      var $i_025 = $inc;
      var $dp_026 = $dp_2;
      var $sp_027 = $sp_1;
      var $rgb_error_028 = $rgb_error_1;
      __label__ = 8;
      break;
    }
   case 15:
    var $rgb_error_235;
    var $i68_034;
    var $sp66_033;
    var $dp67_032;
    var $21 = HEAPU8[$sp66_033];
    var $22 = HEAPU8[$sp66_033 + 1 | 0];
    var $incdec_ptr78 = $sp66_033 + 3 | 0;
    var $23 = HEAPU8[$sp66_033 + 2 | 0];
    if ($21 << 24 >> 24 == $22 << 24 >> 24 & $21 << 24 >> 24 == $23 << 24 >> 24) {
      var $rgb_error_3 = $rgb_error_235;
      var $storemerge = $21;
      __label__ = 17;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 16:
    var $rgb_error_3 = $rgb_error_235 | 1;
    var $storemerge = (($22 & 255) * $conv6 + ($21 & 255) * $conv5 + ($23 & 255) * $sub7 | 0) >>> 15 & 255;
    __label__ = 17;
    break;
   case 17:
    var $storemerge;
    var $rgb_error_3;
    HEAP8[$dp67_032] = $storemerge;
    var $dp67_1 = $dp67_032 + 1 | 0;
    if ($cmp) {
      __label__ = 18;
      break;
    } else {
      var $sp66_1 = $incdec_ptr78;
      var $dp67_2 = $dp67_1;
      __label__ = 19;
      break;
    }
   case 18:
    var $24 = HEAP8[$incdec_ptr78];
    HEAP8[$dp67_1] = $24;
    var $sp66_1 = $sp66_033 + 4 | 0;
    var $dp67_2 = $dp67_032 + 2 | 0;
    __label__ = 19;
    break;
   case 19:
    var $dp67_2;
    var $sp66_1;
    var $inc110 = $i68_034 + 1 | 0;
    if (($inc110 | 0) == ($5 | 0)) {
      var $rgb_error_8 = $rgb_error_3;
      __label__ = 35;
      break;
    } else {
      var $dp67_032 = $dp67_2;
      var $sp66_033 = $sp66_1;
      var $i68_034 = $inc110;
      var $rgb_error_235 = $rgb_error_3;
      __label__ = 15;
      break;
    }
   case 20:
    var $gamma_16_to_1 = $png_ptr + 380 | 0;
    if ((HEAP32[$gamma_16_to_1 >> 2] | 0) == 0) {
      __label__ = 21;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 21:
    if (($5 | 0) == 0) {
      var $rgb_error_8 = 0;
      __label__ = 35;
      break;
    } else {
      var $rgb_error_618 = 0;
      var $sp242_019 = $row;
      var $dp243_020 = $row;
      var $i244_021 = 0;
      __label__ = 32;
      break;
    }
   case 22:
    var $gamma_16_from_1 = $png_ptr + 376 | 0;
    if ((HEAP32[$gamma_16_from_1 >> 2] | 0) == 0) {
      __label__ = 21;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 23:
    if (($5 | 0) == 0) {
      var $rgb_error_8 = 0;
      __label__ = 35;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 24:
    var $gamma_16_table = $png_ptr + 364 | 0;
    var $gamma_shift = $png_ptr + 348 | 0;
    var $sp120_012 = $row;
    var $dp121_013 = $row;
    var $i122_014 = 0;
    var $rgb_error_415 = 0;
    __label__ = 25;
    break;
   case 25:
    var $rgb_error_415;
    var $i122_014;
    var $dp121_013;
    var $sp120_012;
    var $or132 = (HEAPU8[$sp120_012] & 255) << 8 | HEAPU8[$sp120_012 + 1 | 0] & 255;
    var $conv135 = HEAPU8[$sp120_012 + 2 | 0] & 255;
    var $conv138 = HEAPU8[$sp120_012 + 3 | 0] & 255;
    var $or146 = (HEAPU8[$sp120_012 + 4 | 0] & 255) << 8 | HEAPU8[$sp120_012 + 5 | 0] & 255;
    var $add_ptr148 = $sp120_012 + 6 | 0;
    var $conv149 = $or132 & 65535;
    if (($conv149 | 0) == ($conv135 << 8 | $conv138 | 0) & $or132 << 16 >> 16 == $or146 << 16 >> 16) {
      __label__ = 26;
      break;
    } else {
      __label__ = 28;
      break;
    }
   case 26:
    var $33 = HEAPU32[$gamma_16_table >> 2];
    if (($33 | 0) == 0) {
      var $rgb_error_5 = $rgb_error_415;
      var $w_0 = $or132;
      __label__ = 29;
      break;
    } else {
      __label__ = 27;
      break;
    }
   case 27:
    var $rgb_error_5 = $rgb_error_415;
    var $w_0 = HEAP16[HEAP32[$33 + (($conv149 & 255) >>> (HEAPU32[$gamma_shift >> 2] >>> 0) << 2) >> 2] + ($conv149 >>> 8 << 1) >> 1];
    __label__ = 29;
    break;
   case 28:
    var $37 = HEAPU32[$gamma_shift >> 2];
    var $38 = HEAPU32[$gamma_16_to_1 >> 2];
    var $conv191 = $or146 & 65535;
    var $add208 = (HEAPU16[HEAP32[$38 + (($conv149 & 255) >>> ($37 >>> 0) << 2) >> 2] + ($conv149 >>> 8 << 1) >> 1] & 65535) * $conv5 + 16384 + (HEAPU16[HEAP32[$38 + ($conv138 >>> ($37 >>> 0) << 2) >> 2] + ($conv135 << 1) >> 1] & 65535) * $conv6 + (HEAPU16[HEAP32[$38 + (($conv191 & 255) >>> ($37 >>> 0) << 2) >> 2] + ($conv191 >>> 8 << 1) >> 1] & 65535) * $sub7 | 0;
    var $rgb_error_5 = $rgb_error_415 | 1;
    var $w_0 = HEAP16[HEAP32[HEAP32[$gamma_16_from_1 >> 2] + (($add208 >>> 15 & 255) >>> ($37 >>> 0) << 2) >> 2] + (($add208 >>> 23 & 255) << 1) >> 1];
    __label__ = 29;
    break;
   case 29:
    var $w_0;
    var $rgb_error_5;
    HEAP8[$dp121_013] = ($w_0 & 65535) >>> 8 & 255;
    var $incdec_ptr230 = $dp121_013 + 2 | 0;
    HEAP8[$dp121_013 + 1 | 0] = $w_0 & 255;
    if ($cmp) {
      __label__ = 30;
      break;
    } else {
      var $dp121_1 = $incdec_ptr230;
      var $sp120_1 = $add_ptr148;
      __label__ = 31;
      break;
    }
   case 30:
    var $48 = HEAP8[$add_ptr148];
    HEAP8[$incdec_ptr230] = $48;
    var $49 = HEAP8[$sp120_012 + 7 | 0];
    HEAP8[$dp121_013 + 3 | 0] = $49;
    var $dp121_1 = $dp121_013 + 4 | 0;
    var $sp120_1 = $sp120_012 + 8 | 0;
    __label__ = 31;
    break;
   case 31:
    var $sp120_1;
    var $dp121_1;
    var $inc239 = $i122_014 + 1 | 0;
    if (($inc239 | 0) == ($5 | 0)) {
      var $rgb_error_8 = $rgb_error_5;
      __label__ = 35;
      break;
    } else {
      var $sp120_012 = $sp120_1;
      var $dp121_013 = $dp121_1;
      var $i122_014 = $inc239;
      var $rgb_error_415 = $rgb_error_5;
      __label__ = 25;
      break;
    }
   case 32:
    var $i244_021;
    var $dp243_020;
    var $sp242_019;
    var $rgb_error_618;
    var $or257 = (HEAPU8[$sp242_019] & 255) << 8 | HEAPU8[$sp242_019 + 1 | 0] & 255;
    var $or264 = (HEAPU8[$sp242_019 + 2 | 0] & 255) << 8 | HEAPU8[$sp242_019 + 3 | 0] & 255;
    var $add_ptr273 = $sp242_019 + 6 | 0;
    var $conv280 = ((HEAPU8[$sp242_019 + 4 | 0] & 255) << 8 | HEAPU8[$sp242_019 + 5 | 0] & 255) & 65535;
    var $rgb_error_7 = ($or257 | 0) == ($or264 | 0) & ($or257 | 0) == ($conv280 | 0) ? $rgb_error_618 : $rgb_error_618 | 1;
    var $add294 = $or257 * $conv5 + 16384 + $or264 * $conv6 + $conv280 * $sub7 | 0;
    var $shr295 = $add294 >>> 15;
    HEAP8[$dp243_020] = $add294 >>> 23 & 255;
    var $incdec_ptr305 = $dp243_020 + 2 | 0;
    HEAP8[$dp243_020 + 1 | 0] = $shr295 & 255;
    if ($cmp) {
      __label__ = 33;
      break;
    } else {
      var $dp243_1 = $incdec_ptr305;
      var $sp242_1 = $add_ptr273;
      __label__ = 34;
      break;
    }
   case 33:
    var $56 = HEAP8[$add_ptr273];
    HEAP8[$incdec_ptr305] = $56;
    var $57 = HEAP8[$sp242_019 + 7 | 0];
    HEAP8[$dp243_020 + 3 | 0] = $57;
    var $dp243_1 = $dp243_020 + 4 | 0;
    var $sp242_1 = $sp242_019 + 8 | 0;
    __label__ = 34;
    break;
   case 34:
    var $sp242_1;
    var $dp243_1;
    var $inc314 = $i244_021 + 1 | 0;
    if (($inc314 | 0) == ($5 | 0)) {
      var $rgb_error_8 = $rgb_error_7;
      __label__ = 35;
      break;
    } else {
      var $rgb_error_618 = $rgb_error_7;
      var $sp242_019 = $sp242_1;
      var $dp243_020 = $dp243_1;
      var $i244_021 = $inc314;
      __label__ = 32;
      break;
    }
   case 35:
    var $rgb_error_8;
    var $channels = $row_info + 10 | 0;
    var $sub319 = HEAP8[$channels] - 2 & 255;
    HEAP8[$channels] = $sub319;
    var $and324 = HEAP8[$color_type] & -3;
    HEAP8[$color_type] = $and324;
    var $mul331 = HEAP8[$bit_depth] * $sub319 & 255;
    HEAP8[$row_info + 11 | 0] = $mul331;
    var $conv334 = $mul331 & 255;
    if (($mul331 & 255) > 7) {
      __label__ = 36;
      break;
    } else {
      __label__ = 37;
      break;
    }
   case 36:
    var $cond = ($conv334 >>> 3) * $5 | 0;
    __label__ = 38;
    break;
   case 37:
    var $cond = ($conv334 * $5 + 7 | 0) >>> 3;
    __label__ = 38;
    break;
   case 38:
    var $cond;
    HEAP32[$row_info + 4 >> 2] = $cond;
    var $rgb_error_9 = $rgb_error_8;
    __label__ = 39;
    break;
   case 39:
    var $rgb_error_9;
    return $rgb_error_9;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_do_rgb_to_gray["X"] = 1;

function _png_do_gray_to_rgb($row_info, $row) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $0 = HEAPU32[$row_info >> 2];
    var $bit_depth = $row_info + 9 | 0;
    var $1 = HEAPU8[$bit_depth];
    if (($1 & 255) > 7) {
      __label__ = 2;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 2:
    var $color_type = $row_info + 8 | 0;
    var $2 = HEAPU8[$color_type];
    if (($2 & 2) << 24 >> 24 == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 3:
    if ($2 << 24 >> 24 == 0) {
      __label__ = 4;
      break;
    } else if ($2 << 24 >> 24 == 4) {
      __label__ = 11;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 4:
    if ($1 << 24 >> 24 == 8) {
      __label__ = 5;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 5:
    var $add_ptr_sum = $0 - 1 | 0;
    if (($0 | 0) == 0) {
      __label__ = 18;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    var $dp_017 = $row + ($add_ptr_sum + ($0 << 1)) | 0;
    var $sp_018 = $row + $add_ptr_sum | 0;
    var $i_019 = 0;
    __label__ = 7;
    break;
   case 7:
    var $i_019;
    var $sp_018;
    var $dp_017;
    var $3 = HEAP8[$sp_018];
    HEAP8[$dp_017] = $3;
    var $4 = HEAP8[$sp_018];
    HEAP8[$dp_017 - 1 | 0] = $4;
    var $5 = HEAP8[$sp_018];
    HEAP8[$dp_017 - 2 | 0] = $5;
    var $inc = $i_019 + 1 | 0;
    if (($inc | 0) == ($0 | 0)) {
      __label__ = 18;
      break;
    } else {
      var $dp_017 = $dp_017 - 3 | 0;
      var $sp_018 = $sp_018 - 1 | 0;
      var $i_019 = $inc;
      __label__ = 7;
      break;
    }
   case 8:
    var $add_ptr22_sum = ($0 << 1) - 1 | 0;
    if (($0 | 0) == 0) {
      __label__ = 18;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    var $dp24_012 = $row + ($add_ptr22_sum + ($0 << 2)) | 0;
    var $sp20_013 = $row + $add_ptr22_sum | 0;
    var $i_114 = 0;
    __label__ = 10;
    break;
   case 10:
    var $i_114;
    var $sp20_013;
    var $dp24_012;
    var $6 = HEAP8[$sp20_013];
    HEAP8[$dp24_012] = $6;
    var $add_ptr32 = $sp20_013 - 1 | 0;
    var $7 = HEAP8[$add_ptr32];
    HEAP8[$dp24_012 - 1 | 0] = $7;
    var $8 = HEAP8[$sp20_013];
    HEAP8[$dp24_012 - 2 | 0] = $8;
    var $9 = HEAP8[$add_ptr32];
    HEAP8[$dp24_012 - 3 | 0] = $9;
    var $10 = HEAP8[$sp20_013];
    HEAP8[$dp24_012 - 4 | 0] = $10;
    var $11 = HEAP8[$add_ptr32];
    HEAP8[$dp24_012 - 5 | 0] = $11;
    var $inc42 = $i_114 + 1 | 0;
    if (($inc42 | 0) == ($0 | 0)) {
      __label__ = 18;
      break;
    } else {
      var $dp24_012 = $dp24_012 - 6 | 0;
      var $sp20_013 = $sp20_013 - 2 | 0;
      var $i_114 = $inc42;
      __label__ = 10;
      break;
    }
   case 11:
    if ($1 << 24 >> 24 == 8) {
      __label__ = 12;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 12:
    var $mul56 = $0 << 1;
    var $add_ptr57_sum = $mul56 - 1 | 0;
    if (($0 | 0) == 0) {
      __label__ = 18;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 13:
    var $sp55_07 = $row + $add_ptr57_sum | 0;
    var $dp59_08 = $row + ($add_ptr57_sum + $mul56) | 0;
    var $i_29 = 0;
    __label__ = 14;
    break;
   case 14:
    var $i_29;
    var $dp59_08;
    var $sp55_07;
    var $incdec_ptr66 = $sp55_07 - 1 | 0;
    var $12 = HEAP8[$sp55_07];
    HEAP8[$dp59_08] = $12;
    var $13 = HEAP8[$incdec_ptr66];
    HEAP8[$dp59_08 - 1 | 0] = $13;
    var $14 = HEAP8[$incdec_ptr66];
    HEAP8[$dp59_08 - 2 | 0] = $14;
    var $15 = HEAP8[$incdec_ptr66];
    HEAP8[$dp59_08 - 3 | 0] = $15;
    var $inc73 = $i_29 + 1 | 0;
    if (($inc73 | 0) == ($0 | 0)) {
      __label__ = 18;
      break;
    } else {
      var $sp55_07 = $sp55_07 - 2 | 0;
      var $dp59_08 = $dp59_08 - 4 | 0;
      var $i_29 = $inc73;
      __label__ = 14;
      break;
    }
   case 15:
    var $mul77 = $0 << 2;
    var $add_ptr78_sum = $mul77 - 1 | 0;
    if (($0 | 0) == 0) {
      __label__ = 18;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 16:
    var $i_32 = 0;
    var $sp76_03 = $row + $add_ptr78_sum | 0;
    var $dp80_04 = $row + ($add_ptr78_sum + $mul77) | 0;
    __label__ = 17;
    break;
   case 17:
    var $dp80_04;
    var $sp76_03;
    var $i_32;
    var $16 = HEAP8[$sp76_03];
    HEAP8[$dp80_04] = $16;
    var $incdec_ptr89 = $sp76_03 - 2 | 0;
    var $17 = HEAP8[$sp76_03 - 1 | 0];
    HEAP8[$dp80_04 - 1 | 0] = $17;
    var $18 = HEAP8[$incdec_ptr89];
    HEAP8[$dp80_04 - 2 | 0] = $18;
    var $add_ptr92 = $sp76_03 - 3 | 0;
    var $19 = HEAP8[$add_ptr92];
    HEAP8[$dp80_04 - 3 | 0] = $19;
    var $20 = HEAP8[$incdec_ptr89];
    HEAP8[$dp80_04 - 4 | 0] = $20;
    var $21 = HEAP8[$add_ptr92];
    HEAP8[$dp80_04 - 5 | 0] = $21;
    var $22 = HEAP8[$incdec_ptr89];
    HEAP8[$dp80_04 - 6 | 0] = $22;
    var $23 = HEAP8[$add_ptr92];
    HEAP8[$dp80_04 - 7 | 0] = $23;
    var $inc102 = $i_32 + 1 | 0;
    if (($inc102 | 0) == ($0 | 0)) {
      __label__ = 18;
      break;
    } else {
      var $i_32 = $inc102;
      var $sp76_03 = $sp76_03 - 4 | 0;
      var $dp80_04 = $dp80_04 - 8 | 0;
      __label__ = 17;
      break;
    }
   case 18:
    var $channels = $row_info + 10 | 0;
    var $add = HEAP8[$channels] + 2 & 255;
    HEAP8[$channels] = $add;
    var $or = HEAP8[$color_type] | 2;
    HEAP8[$color_type] = $or;
    var $mul117 = HEAP8[$bit_depth] * $add & 255;
    HEAP8[$row_info + 11 | 0] = $mul117;
    var $conv120 = $mul117 & 255;
    if (($mul117 & 255) > 7) {
      __label__ = 19;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 19:
    var $cond = ($conv120 >>> 3) * $0 | 0;
    __label__ = 21;
    break;
   case 20:
    var $cond = ($conv120 * $0 + 7 | 0) >>> 3;
    __label__ = 21;
    break;
   case 21:
    var $cond;
    HEAP32[$row_info + 4 >> 2] = $cond;
    __label__ = 22;
    break;
   case 22:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_do_gray_to_rgb["X"] = 1;

function _png_do_compose($row_info, $row, $png_ptr) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $0 = HEAPU32[$png_ptr + 360 >> 2];
    var $1 = HEAPU32[$png_ptr + 368 >> 2];
    var $2 = HEAPU32[$png_ptr + 372 >> 2];
    var $3 = HEAPU32[$png_ptr + 364 >> 2];
    var $4 = HEAPU32[$png_ptr + 376 >> 2];
    var $5 = HEAPU32[$png_ptr + 380 >> 2];
    var $6 = HEAPU32[$png_ptr + 348 >> 2];
    var $7 = HEAPU32[$row_info >> 2];
    var $cmp = (HEAP32[$png_ptr + 88 >> 2] & 8192 | 0) != 0;
    var $conv7 = HEAPU8[$row_info + 8 | 0] & 255;
    if (($conv7 | 0) == 0) {
      __label__ = 2;
      break;
    } else if (($conv7 | 0) == 2) {
      __label__ = 60;
      break;
    } else if (($conv7 | 0) == 4) {
      __label__ = 95;
      break;
    } else if (($conv7 | 0) == 6) {
      __label__ = 129;
      break;
    } else {
      __label__ = 170;
      break;
    }
   case 2:
    var $conv8 = HEAPU8[$row_info + 9 | 0] & 255;
    if (($conv8 | 0) == 1) {
      __label__ = 3;
      break;
    } else if (($conv8 | 0) == 2) {
      __label__ = 9;
      break;
    } else if (($conv8 | 0) == 4) {
      __label__ = 22;
      break;
    } else if (($conv8 | 0) == 8) {
      __label__ = 35;
      break;
    } else if (($conv8 | 0) == 16) {
      __label__ = 47;
      break;
    } else {
      __label__ = 170;
      break;
    }
   case 3:
    if (($7 | 0) == 0) {
      __label__ = 170;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $gray = $png_ptr + 408 | 0;
    var $gray26 = $png_ptr + 324 | 0;
    var $sp_0149 = $row;
    var $i_0150 = 1;
    var $shift_0151 = 7;
    __label__ = 5;
    break;
   case 5:
    var $shift_0151;
    var $i_0150;
    var $sp_0149;
    var $conv12 = HEAPU8[$sp_0149] & 255;
    if (($conv12 >>> ($shift_0151 >>> 0) & 1 | 0) == (HEAPU16[$gray >> 1] & 65535 | 0)) {
      __label__ = 6;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 6:
    var $and24 = $conv12 & 32639 >>> ((7 - $shift_0151 | 0) >>> 0);
    HEAP8[$sp_0149] = $and24 & 255;
    HEAP8[$sp_0149] = ((HEAPU16[$gray26 >> 1] & 65535) << $shift_0151 | $and24) & 255;
    __label__ = 7;
    break;
   case 7:
    var $tobool = ($shift_0151 | 0) == 0;
    if (($i_0150 | 0) == ($7 | 0)) {
      __label__ = 170;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    var $shift_1 = $tobool ? 7 : $shift_0151 - 1 | 0;
    var $sp_1 = $tobool ? $sp_0149 + 1 | 0 : $sp_0149;
    var $sp_0149 = $sp_1;
    var $i_0150 = $i_0150 + 1 | 0;
    var $shift_0151 = $shift_1;
    __label__ = 5;
    break;
   case 9:
    var $cmp116143 = ($7 | 0) == 0;
    if (($0 | 0) == 0) {
      __label__ = 10;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 10:
    if ($cmp116143) {
      __label__ = 170;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    var $gray125 = $png_ptr + 408 | 0;
    var $gray139 = $png_ptr + 324 | 0;
    var $sp_4144 = $row;
    var $i_2145 = 1;
    var $shift_4146 = 6;
    __label__ = 18;
    break;
   case 12:
    if ($cmp116143) {
      __label__ = 170;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 13:
    var $gray48 = $png_ptr + 408 | 0;
    var $gray62 = $png_ptr + 324 | 0;
    var $sp_2139 = $row;
    var $i_1140 = 0;
    var $shift_2141 = 6;
    __label__ = 14;
    break;
   case 14:
    var $shift_2141;
    var $i_1140;
    var $sp_2139;
    var $conv42 = HEAPU8[$sp_2139] & 255;
    var $and44 = $conv42 >>> ($shift_2141 >>> 0) & 3;
    if (($and44 | 0) == (HEAPU16[$gray48 >> 1] & 65535 | 0)) {
      __label__ = 15;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 15:
    var $and59 = $conv42 & 16191 >>> ((6 - $shift_2141 | 0) >>> 0);
    HEAP8[$sp_2139] = $and59 & 255;
    var $storemerge50_in = (HEAPU16[$gray62 >> 1] & 65535) << $shift_2141 | $and59;
    __label__ = 17;
    break;
   case 16:
    var $storemerge50_in = ((HEAPU8[$0 + ($and44 << 6 | $and44 | $and44 << 4 | $and44 << 2) | 0] & 255) >>> 6 & 255) << $shift_2141 | $conv42 & 16191 >>> ((6 - $shift_2141 | 0) >>> 0);
    __label__ = 17;
    break;
   case 17:
    var $storemerge50_in;
    HEAP8[$sp_2139] = $storemerge50_in & 255;
    var $tobool105 = ($shift_2141 | 0) == 0;
    var $sp_3 = $tobool105 ? $sp_2139 + 1 | 0 : $sp_2139;
    var $shift_3 = $tobool105 ? 6 : $shift_2141 - 2 | 0;
    var $inc112 = $i_1140 + 1 | 0;
    if (($inc112 | 0) == ($7 | 0)) {
      __label__ = 170;
      break;
    } else {
      var $sp_2139 = $sp_3;
      var $i_1140 = $inc112;
      var $shift_2141 = $shift_3;
      __label__ = 14;
      break;
    }
   case 18:
    var $shift_4146;
    var $i_2145;
    var $sp_4144;
    var $conv119 = HEAPU8[$sp_4144] & 255;
    if (($conv119 >>> ($shift_4146 >>> 0) & 3 | 0) == (HEAPU16[$gray125 >> 1] & 65535 | 0)) {
      __label__ = 19;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 19:
    var $and136 = $conv119 & 16191 >>> ((6 - $shift_4146 | 0) >>> 0);
    HEAP8[$sp_4144] = $and136 & 255;
    HEAP8[$sp_4144] = ((HEAPU16[$gray139 >> 1] & 65535) << $shift_4146 | $and136) & 255;
    __label__ = 20;
    break;
   case 20:
    var $tobool148 = ($shift_4146 | 0) == 0;
    if (($i_2145 | 0) == ($7 | 0)) {
      __label__ = 170;
      break;
    } else {
      __label__ = 21;
      break;
    }
   case 21:
    var $shift_5 = $tobool148 ? 6 : $shift_4146 - 2 | 0;
    var $sp_5 = $tobool148 ? $sp_4144 + 1 | 0 : $sp_4144;
    var $sp_4144 = $sp_5;
    var $i_2145 = $i_2145 + 1 | 0;
    var $shift_4146 = $shift_5;
    __label__ = 18;
    break;
   case 22:
    var $cmp237133 = ($7 | 0) == 0;
    if (($0 | 0) == 0) {
      __label__ = 23;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 23:
    if ($cmp237133) {
      __label__ = 170;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 24:
    var $gray246 = $png_ptr + 408 | 0;
    var $gray260 = $png_ptr + 324 | 0;
    var $sp_8134 = $row;
    var $i_4135 = 1;
    var $shift_8136 = 4;
    __label__ = 31;
    break;
   case 25:
    if ($cmp237133) {
      __label__ = 170;
      break;
    } else {
      __label__ = 26;
      break;
    }
   case 26:
    var $gray172 = $png_ptr + 408 | 0;
    var $gray186 = $png_ptr + 324 | 0;
    var $sp_6129 = $row;
    var $i_3130 = 0;
    var $shift_6131 = 4;
    __label__ = 27;
    break;
   case 27:
    var $shift_6131;
    var $i_3130;
    var $sp_6129;
    var $conv166 = HEAPU8[$sp_6129] & 255;
    var $and168 = $conv166 >>> ($shift_6131 >>> 0) & 15;
    if (($and168 | 0) == (HEAPU16[$gray172 >> 1] & 65535 | 0)) {
      __label__ = 28;
      break;
    } else {
      __label__ = 29;
      break;
    }
   case 28:
    var $and183 = $conv166 & 3855 >>> ((4 - $shift_6131 | 0) >>> 0);
    HEAP8[$sp_6129] = $and183 & 255;
    var $storemerge48_in = (HEAPU16[$gray186 >> 1] & 65535) << $shift_6131 | $and183;
    __label__ = 30;
    break;
   case 29:
    var $storemerge48_in = ((HEAPU8[$0 + ($and168 << 4 | $and168) | 0] & 255) >>> 4 & 255) << $shift_6131 | $conv166 & 3855 >>> ((4 - $shift_6131 | 0) >>> 0);
    __label__ = 30;
    break;
   case 30:
    var $storemerge48_in;
    HEAP8[$sp_6129] = $storemerge48_in & 255;
    var $tobool226 = ($shift_6131 | 0) == 0;
    var $sp_7 = $tobool226 ? $sp_6129 + 1 | 0 : $sp_6129;
    var $shift_7 = $tobool226 ? 4 : $shift_6131 - 4 | 0;
    var $inc233 = $i_3130 + 1 | 0;
    if (($inc233 | 0) == ($7 | 0)) {
      __label__ = 170;
      break;
    } else {
      var $sp_6129 = $sp_7;
      var $i_3130 = $inc233;
      var $shift_6131 = $shift_7;
      __label__ = 27;
      break;
    }
   case 31:
    var $shift_8136;
    var $i_4135;
    var $sp_8134;
    var $conv240 = HEAPU8[$sp_8134] & 255;
    if (($conv240 >>> ($shift_8136 >>> 0) & 15 | 0) == (HEAPU16[$gray246 >> 1] & 65535 | 0)) {
      __label__ = 32;
      break;
    } else {
      __label__ = 33;
      break;
    }
   case 32:
    var $and257 = $conv240 & 3855 >>> ((4 - $shift_8136 | 0) >>> 0);
    HEAP8[$sp_8134] = $and257 & 255;
    HEAP8[$sp_8134] = ((HEAPU16[$gray260 >> 1] & 65535) << $shift_8136 | $and257) & 255;
    __label__ = 33;
    break;
   case 33:
    var $tobool269 = ($shift_8136 | 0) == 0;
    if (($i_4135 | 0) == ($7 | 0)) {
      __label__ = 170;
      break;
    } else {
      __label__ = 34;
      break;
    }
   case 34:
    var $shift_9 = $tobool269 ? 4 : $shift_8136 - 4 | 0;
    var $sp_9 = $tobool269 ? $sp_8134 + 1 | 0 : $sp_8134;
    var $sp_8134 = $sp_9;
    var $i_4135 = $i_4135 + 1 | 0;
    var $shift_8136 = $shift_9;
    __label__ = 31;
    break;
   case 35:
    var $cmp306124 = ($7 | 0) == 0;
    if (($0 | 0) == 0) {
      __label__ = 36;
      break;
    } else {
      __label__ = 38;
      break;
    }
   case 36:
    if ($cmp306124) {
      __label__ = 170;
      break;
    } else {
      __label__ = 37;
      break;
    }
   case 37:
    var $gray311 = $png_ptr + 408 | 0;
    var $gray317 = $png_ptr + 324 | 0;
    var $lftr_limit166 = $row + $7 | 0;
    var $sp_11125 = $row;
    __label__ = 44;
    break;
   case 38:
    if ($cmp306124) {
      __label__ = 170;
      break;
    } else {
      __label__ = 39;
      break;
    }
   case 39:
    var $gray289 = $png_ptr + 408 | 0;
    var $gray295 = $png_ptr + 324 | 0;
    var $lftr_limit = $row + $7 | 0;
    var $sp_10121 = $row;
    __label__ = 40;
    break;
   case 40:
    var $sp_10121;
    var $conv287 = HEAPU8[$sp_10121] & 255;
    if (($conv287 | 0) == (HEAPU16[$gray289 >> 1] & 65535 | 0)) {
      __label__ = 41;
      break;
    } else {
      __label__ = 42;
      break;
    }
   case 41:
    var $storemerge46 = HEAP16[$gray295 >> 1] & 255;
    __label__ = 43;
    break;
   case 42:
    var $storemerge46 = HEAP8[$0 + $conv287 | 0];
    __label__ = 43;
    break;
   case 43:
    var $storemerge46;
    HEAP8[$sp_10121] = $storemerge46;
    var $incdec_ptr302 = $sp_10121 + 1 | 0;
    if (($incdec_ptr302 | 0) == ($lftr_limit | 0)) {
      __label__ = 170;
      break;
    } else {
      var $sp_10121 = $incdec_ptr302;
      __label__ = 40;
      break;
    }
   case 44:
    var $sp_11125;
    if ((HEAPU8[$sp_11125] & 255 | 0) == (HEAPU16[$gray311 >> 1] & 65535 | 0)) {
      __label__ = 45;
      break;
    } else {
      __label__ = 46;
      break;
    }
   case 45:
    HEAP8[$sp_11125] = HEAP16[$gray317 >> 1] & 255;
    __label__ = 46;
    break;
   case 46:
    var $incdec_ptr322 = $sp_11125 + 1 | 0;
    if (($incdec_ptr322 | 0) == ($lftr_limit166 | 0)) {
      __label__ = 170;
      break;
    } else {
      var $sp_11125 = $incdec_ptr322;
      __label__ = 44;
      break;
    }
   case 47:
    var $cmp378116 = ($7 | 0) == 0;
    if (($3 | 0) == 0) {
      __label__ = 48;
      break;
    } else {
      __label__ = 50;
      break;
    }
   case 48:
    if ($cmp378116) {
      __label__ = 170;
      break;
    } else {
      __label__ = 49;
      break;
    }
   case 49:
    var $gray390 = $png_ptr + 408 | 0;
    var $gray396 = $png_ptr + 324 | 0;
    var $sp_13117 = $row;
    var $i_8118 = 1;
    __label__ = 56;
    break;
   case 50:
    if ($cmp378116) {
      __label__ = 170;
      break;
    } else {
      __label__ = 51;
      break;
    }
   case 51:
    var $gray339 = $png_ptr + 408 | 0;
    var $gray345 = $png_ptr + 324 | 0;
    var $sp_12113 = $row;
    var $i_7114 = 0;
    __label__ = 52;
    break;
   case 52:
    var $i_7114;
    var $sp_12113;
    var $conv333 = HEAPU8[$sp_12113] & 255;
    var $add_ptr = $sp_12113 + 1 | 0;
    var $conv335 = HEAPU8[$add_ptr] & 255;
    if (($conv333 << 8 | $conv335 | 0) == (HEAPU16[$gray339 >> 1] & 65535 | 0)) {
      __label__ = 53;
      break;
    } else {
      __label__ = 54;
      break;
    }
   case 53:
    HEAP8[$sp_12113] = (HEAPU16[$gray345 >> 1] & 65535) >>> 8 & 255;
    var $storemerge45_in = HEAP16[$gray345 >> 1];
    __label__ = 55;
    break;
   case 54:
    var $41 = HEAPU16[HEAP32[$3 + ($conv335 >>> ($6 >>> 0) << 2) >> 2] + ($conv333 << 1) >> 1];
    HEAP8[$sp_12113] = ($41 & 65535) >>> 8 & 255;
    var $storemerge45_in = $41;
    __label__ = 55;
    break;
   case 55:
    var $storemerge45_in;
    HEAP8[$add_ptr] = $storemerge45_in & 255;
    var $inc373 = $i_7114 + 1 | 0;
    if (($inc373 | 0) == ($7 | 0)) {
      __label__ = 170;
      break;
    } else {
      var $sp_12113 = $sp_12113 + 2 | 0;
      var $i_7114 = $inc373;
      __label__ = 52;
      break;
    }
   case 56:
    var $i_8118;
    var $sp_13117;
    var $add_ptr384 = $sp_13117 + 1 | 0;
    if (((HEAPU8[$sp_13117] & 255) << 8 | HEAPU8[$add_ptr384] & 255 | 0) == (HEAPU16[$gray390 >> 1] & 65535 | 0)) {
      __label__ = 57;
      break;
    } else {
      __label__ = 58;
      break;
    }
   case 57:
    HEAP8[$sp_13117] = (HEAPU16[$gray396 >> 1] & 65535) >>> 8 & 255;
    HEAP8[$add_ptr384] = HEAP16[$gray396 >> 1] & 255;
    __label__ = 58;
    break;
   case 58:
    if (($i_8118 | 0) == ($7 | 0)) {
      __label__ = 170;
      break;
    } else {
      __label__ = 59;
      break;
    }
   case 59:
    var $sp_13117 = $sp_13117 + 2 | 0;
    var $i_8118 = $i_8118 + 1 | 0;
    __label__ = 56;
    break;
   case 60:
    if (HEAP8[$row_info + 9 | 0] << 24 >> 24 == 8) {
      __label__ = 61;
      break;
    } else {
      __label__ = 78;
      break;
    }
   case 61:
    var $cmp474108 = ($7 | 0) == 0;
    if (($0 | 0) == 0) {
      __label__ = 62;
      break;
    } else {
      __label__ = 64;
      break;
    }
   case 62:
    if ($cmp474108) {
      __label__ = 170;
      break;
    } else {
      __label__ = 63;
      break;
    }
   case 63:
    var $red479 = $png_ptr + 402 | 0;
    var $green487 = $png_ptr + 404 | 0;
    var $blue495 = $png_ptr + 406 | 0;
    var $red501 = $png_ptr + 318 | 0;
    var $green504 = $png_ptr + 320 | 0;
    var $blue508 = $png_ptr + 322 | 0;
    var $sp_15109 = $row;
    var $i_10110 = 1;
    __label__ = 72;
    break;
   case 64:
    if ($cmp474108) {
      __label__ = 170;
      break;
    } else {
      __label__ = 65;
      break;
    }
   case 65:
    var $red = $png_ptr + 402 | 0;
    var $green = $png_ptr + 404 | 0;
    var $blue = $png_ptr + 406 | 0;
    var $red446 = $png_ptr + 318 | 0;
    var $green449 = $png_ptr + 320 | 0;
    var $blue453 = $png_ptr + 322 | 0;
    var $sp_14104 = $row;
    var $i_9106 = 0;
    __label__ = 66;
    break;
   case 66:
    var $i_9106;
    var $sp_14104;
    var $conv426 = HEAPU8[$sp_14104] & 255;
    var $add_ptr431 = $sp_14104 + 1 | 0;
    var $50 = HEAPU8[$add_ptr431];
    if (($conv426 | 0) == (HEAPU16[$red >> 1] & 65535 | 0)) {
      __label__ = 67;
      break;
    } else {
      var $57 = $50;
      __label__ = 70;
      break;
    }
   case 67:
    if (($50 & 255 | 0) == (HEAPU16[$green >> 1] & 65535 | 0)) {
      __label__ = 68;
      break;
    } else {
      var $57 = $50;
      __label__ = 70;
      break;
    }
   case 68:
    var $add_ptr438 = $sp_14104 + 2 | 0;
    if ((HEAPU8[$add_ptr438] & 255 | 0) == (HEAPU16[$blue >> 1] & 65535 | 0)) {
      __label__ = 69;
      break;
    } else {
      var $57 = $50;
      __label__ = 70;
      break;
    }
   case 69:
    HEAP8[$sp_14104] = HEAP16[$red446 >> 1] & 255;
    HEAP8[$add_ptr431] = HEAP16[$green449 >> 1] & 255;
    HEAP8[$add_ptr438] = HEAP16[$blue453 >> 1] & 255;
    __label__ = 71;
    break;
   case 70:
    var $57;
    var $58 = HEAP8[$0 + $conv426 | 0];
    HEAP8[$sp_14104] = $58;
    var $59 = HEAP8[$0 + ($57 & 255) | 0];
    HEAP8[$sp_14104 + 1 | 0] = $59;
    var $add_ptr463 = $sp_14104 + 2 | 0;
    var $61 = HEAP8[$0 + (HEAPU8[$add_ptr463] & 255) | 0];
    HEAP8[$add_ptr463] = $61;
    __label__ = 71;
    break;
   case 71:
    var $inc469 = $i_9106 + 1 | 0;
    if (($inc469 | 0) == ($7 | 0)) {
      __label__ = 170;
      break;
    } else {
      var $sp_14104 = $sp_14104 + 3 | 0;
      var $i_9106 = $inc469;
      __label__ = 66;
      break;
    }
   case 72:
    var $i_10110;
    var $sp_15109;
    if ((HEAPU8[$sp_15109] & 255 | 0) == (HEAPU16[$red479 >> 1] & 65535 | 0)) {
      __label__ = 73;
      break;
    } else {
      __label__ = 76;
      break;
    }
   case 73:
    var $add_ptr484 = $sp_15109 + 1 | 0;
    if ((HEAPU8[$add_ptr484] & 255 | 0) == (HEAPU16[$green487 >> 1] & 65535 | 0)) {
      __label__ = 74;
      break;
    } else {
      __label__ = 76;
      break;
    }
   case 74:
    var $add_ptr492 = $sp_15109 + 2 | 0;
    if ((HEAPU8[$add_ptr492] & 255 | 0) == (HEAPU16[$blue495 >> 1] & 65535 | 0)) {
      __label__ = 75;
      break;
    } else {
      __label__ = 76;
      break;
    }
   case 75:
    HEAP8[$sp_15109] = HEAP16[$red501 >> 1] & 255;
    HEAP8[$add_ptr484] = HEAP16[$green504 >> 1] & 255;
    HEAP8[$add_ptr492] = HEAP16[$blue508 >> 1] & 255;
    __label__ = 76;
    break;
   case 76:
    if (($i_10110 | 0) == ($7 | 0)) {
      __label__ = 170;
      break;
    } else {
      __label__ = 77;
      break;
    }
   case 77:
    var $sp_15109 = $sp_15109 + 3 | 0;
    var $i_10110 = $i_10110 + 1 | 0;
    __label__ = 72;
    break;
   case 78:
    var $cmp66099 = ($7 | 0) == 0;
    if (($3 | 0) == 0) {
      __label__ = 79;
      break;
    } else {
      __label__ = 81;
      break;
    }
   case 79:
    if ($cmp66099) {
      __label__ = 170;
      break;
    } else {
      __label__ = 80;
      break;
    }
   case 80:
    var $red688 = $png_ptr + 402 | 0;
    var $green695 = $png_ptr + 404 | 0;
    var $blue702 = $png_ptr + 406 | 0;
    var $red708 = $png_ptr + 318 | 0;
    var $green720 = $png_ptr + 320 | 0;
    var $blue733 = $png_ptr + 322 | 0;
    var $sp_17100 = $row;
    var $i_12101 = 1;
    __label__ = 89;
    break;
   case 81:
    if ($cmp66099) {
      __label__ = 170;
      break;
    } else {
      __label__ = 82;
      break;
    }
   case 82:
    var $red548 = $png_ptr + 402 | 0;
    var $green555 = $png_ptr + 404 | 0;
    var $blue562 = $png_ptr + 406 | 0;
    var $red568 = $png_ptr + 318 | 0;
    var $green580 = $png_ptr + 320 | 0;
    var $blue593 = $png_ptr + 322 | 0;
    var $sp_1695 = $row;
    var $i_1197 = 0;
    __label__ = 83;
    break;
   case 83:
    var $i_1197;
    var $sp_1695;
    var $conv525 = HEAPU8[$sp_1695] & 255;
    var $add_ptr527 = $sp_1695 + 1 | 0;
    var $conv528 = HEAPU8[$add_ptr527] & 255;
    var $add_ptr532 = $sp_1695 + 2 | 0;
    var $add_ptr535 = $sp_1695 + 3 | 0;
    var $add_ptr539 = $sp_1695 + 4 | 0;
    var $conv540 = HEAPU8[$add_ptr539] & 255;
    var $add_ptr542 = $sp_1695 + 5 | 0;
    var $conv543 = HEAPU8[$add_ptr542] & 255;
    var $add544 = $conv540 << 8 | $conv543;
    var $76 = HEAPU8[$add_ptr532];
    var $77 = HEAPU8[$add_ptr535];
    if (($conv525 << 8 | $conv528 | 0) == (HEAPU16[$red548 >> 1] & 65535 | 0)) {
      __label__ = 84;
      break;
    } else {
      var $87 = $76;
      var $86 = $77;
      __label__ = 87;
      break;
    }
   case 84:
    if ((($76 & 255) << 8 | $77 & 255 | 0) == (HEAPU16[$green555 >> 1] & 65535 | 0)) {
      __label__ = 85;
      break;
    } else {
      var $87 = $76;
      var $86 = $77;
      __label__ = 87;
      break;
    }
   case 85:
    if (($add544 | 0) == (HEAPU16[$blue562 >> 1] & 65535 | 0)) {
      __label__ = 86;
      break;
    } else {
      var $87 = $76;
      var $86 = $77;
      __label__ = 87;
      break;
    }
   case 86:
    HEAP8[$sp_1695] = (HEAPU16[$red568 >> 1] & 65535) >>> 8 & 255;
    HEAP8[$add_ptr527] = HEAP16[$red568 >> 1] & 255;
    HEAP8[$add_ptr532] = (HEAPU16[$green580 >> 1] & 65535) >>> 8 & 255;
    HEAP8[$add_ptr535] = HEAP16[$green580 >> 1] & 255;
    HEAP8[$add_ptr539] = (HEAPU16[$blue593 >> 1] & 65535) >>> 8 & 255;
    var $storemerge_in = HEAP16[$blue593 >> 1];
    __label__ = 88;
    break;
   case 87:
    var $86;
    var $87;
    var $89 = HEAPU16[HEAP32[$3 + ($conv528 >>> ($6 >>> 0) << 2) >> 2] + ($conv525 << 1) >> 1];
    HEAP8[$sp_1695] = ($89 & 65535) >>> 8 & 255;
    HEAP8[$add_ptr527] = $89 & 255;
    var $91 = HEAPU16[HEAP32[$3 + (($86 & 255) >>> ($6 >>> 0) << 2) >> 2] + (($87 & 255) << 1) >> 1];
    HEAP8[$add_ptr532] = ($91 & 65535) >>> 8 & 255;
    HEAP8[$add_ptr535] = $91 & 255;
    var $93 = HEAPU16[HEAP32[$3 + ($conv543 >>> ($6 >>> 0) << 2) >> 2] + ($conv540 << 1) >> 1];
    HEAP8[$add_ptr539] = ($93 & 65535) >>> 8 & 255;
    var $storemerge_in = $93;
    __label__ = 88;
    break;
   case 88:
    var $storemerge_in;
    HEAP8[$add_ptr542] = $storemerge_in & 255;
    var $inc655 = $i_1197 + 1 | 0;
    if (($inc655 | 0) == ($7 | 0)) {
      __label__ = 170;
      break;
    } else {
      var $sp_1695 = $sp_1695 + 6 | 0;
      var $i_1197 = $inc655;
      __label__ = 83;
      break;
    }
   case 89:
    var $i_12101;
    var $sp_17100;
    var $add_ptr666 = $sp_17100 + 1 | 0;
    var $add_ptr671 = $sp_17100 + 2 | 0;
    var $add_ptr674 = $sp_17100 + 3 | 0;
    var $add_ptr679 = $sp_17100 + 4 | 0;
    var $add_ptr682 = $sp_17100 + 5 | 0;
    var $add684 = (HEAPU8[$add_ptr679] & 255) << 8 | HEAPU8[$add_ptr682] & 255;
    if (((HEAPU8[$sp_17100] & 255) << 8 | HEAPU8[$add_ptr666] & 255 | 0) == (HEAPU16[$red688 >> 1] & 65535 | 0)) {
      __label__ = 90;
      break;
    } else {
      __label__ = 93;
      break;
    }
   case 90:
    if (((HEAPU8[$add_ptr671] & 255) << 8 | HEAPU8[$add_ptr674] & 255 | 0) == (HEAPU16[$green695 >> 1] & 65535 | 0)) {
      __label__ = 91;
      break;
    } else {
      __label__ = 93;
      break;
    }
   case 91:
    if (($add684 | 0) == (HEAPU16[$blue702 >> 1] & 65535 | 0)) {
      __label__ = 92;
      break;
    } else {
      __label__ = 93;
      break;
    }
   case 92:
    HEAP8[$sp_17100] = (HEAPU16[$red708 >> 1] & 65535) >>> 8 & 255;
    HEAP8[$add_ptr666] = HEAP16[$red708 >> 1] & 255;
    HEAP8[$add_ptr671] = (HEAPU16[$green720 >> 1] & 65535) >>> 8 & 255;
    HEAP8[$add_ptr674] = HEAP16[$green720 >> 1] & 255;
    HEAP8[$add_ptr679] = (HEAPU16[$blue733 >> 1] & 65535) >>> 8 & 255;
    HEAP8[$add_ptr682] = HEAP16[$blue733 >> 1] & 255;
    __label__ = 93;
    break;
   case 93:
    if (($i_12101 | 0) == ($7 | 0)) {
      __label__ = 170;
      break;
    } else {
      __label__ = 94;
      break;
    }
   case 94:
    var $sp_17100 = $sp_17100 + 6 | 0;
    var $i_12101 = $i_12101 + 1 | 0;
    __label__ = 89;
    break;
   case 95:
    if (HEAP8[$row_info + 9 | 0] << 24 >> 24 == 8) {
      __label__ = 96;
      break;
    } else {
      __label__ = 112;
      break;
    }
   case 96:
    var $cmp82390 = ($7 | 0) == 0;
    if (($2 | 0) == 0 | ($1 | 0) == 0 | ($0 | 0) == 0) {
      __label__ = 97;
      break;
    } else {
      __label__ = 99;
      break;
    }
   case 97:
    if ($cmp82390) {
      __label__ = 170;
      break;
    } else {
      __label__ = 98;
      break;
    }
   case 98:
    var $gray847 = $png_ptr + 334 | 0;
    var $gray833 = $png_ptr + 324 | 0;
    var $sp_1991 = $row;
    var $i_1492 = 0;
    __label__ = 108;
    break;
   case 99:
    if ($cmp82390) {
      __label__ = 170;
      break;
    } else {
      __label__ = 100;
      break;
    }
   case 100:
    var $gray794 = $png_ptr + 334 | 0;
    var $gray785 = $png_ptr + 324 | 0;
    var $sp_1886 = $row;
    var $i_1388 = 0;
    __label__ = 101;
    break;
   case 101:
    var $i_1388;
    var $sp_1886;
    var $110 = HEAPU8[$sp_1886 + 1 | 0];
    var $conv773 = $110 & 255;
    if ($110 << 24 >> 24 == -1) {
      __label__ = 102;
      break;
    } else if ($110 << 24 >> 24 == 0) {
      __label__ = 103;
      break;
    } else {
      __label__ = 104;
      break;
    }
   case 102:
    var $112 = HEAP8[$0 + (HEAPU8[$sp_1886] & 255) | 0];
    HEAP8[$sp_1886] = $112;
    __label__ = 107;
    break;
   case 103:
    HEAP8[$sp_1886] = HEAP16[$gray785 >> 1] & 255;
    __label__ = 107;
    break;
   case 104:
    var $add802 = (HEAPU8[$2 + (HEAPU8[$sp_1886] & 255) | 0] & 255) * $conv773 + 128 + (HEAPU16[$gray794 >> 1] & 65535) * (255 - $conv773) | 0;
    var $shr808 = (($add802 >>> 8 & 255) + $add802 | 0) >>> 8;
    if ($cmp) {
      var $w_0 = $shr808 & 255;
      __label__ = 106;
      break;
    } else {
      __label__ = 105;
      break;
    }
   case 105:
    var $w_0 = HEAP8[$1 + ($shr808 & 255) | 0];
    __label__ = 106;
    break;
   case 106:
    var $w_0;
    HEAP8[$sp_1886] = $w_0;
    __label__ = 107;
    break;
   case 107:
    var $inc818 = $i_1388 + 1 | 0;
    if (($inc818 | 0) == ($7 | 0)) {
      __label__ = 170;
      break;
    } else {
      var $sp_1886 = $sp_1886 + 2 | 0;
      var $i_1388 = $inc818;
      __label__ = 101;
      break;
    }
   case 108:
    var $i_1492;
    var $sp_1991;
    var $118 = HEAPU8[$sp_1991 + 1 | 0];
    if ($118 << 24 >> 24 == 0) {
      __label__ = 109;
      break;
    } else if ($118 << 24 >> 24 == -1) {
      __label__ = 111;
      break;
    } else {
      __label__ = 110;
      break;
    }
   case 109:
    HEAP8[$sp_1991] = HEAP16[$gray833 >> 1] & 255;
    __label__ = 111;
    break;
   case 110:
    var $conv844 = $118 & 255;
    var $add856 = (HEAPU8[$sp_1991] & 255) * $conv844 + 128 + (HEAPU16[$gray847 >> 1] & 65535) * (255 - $conv844) | 0;
    HEAP8[$sp_1991] = (($add856 >>> 8 & 255) + $add856 | 0) >>> 8 & 255;
    __label__ = 111;
    break;
   case 111:
    var $inc867 = $i_1492 + 1 | 0;
    if (($inc867 | 0) == ($7 | 0)) {
      __label__ = 170;
      break;
    } else {
      var $sp_1991 = $sp_1991 + 2 | 0;
      var $i_1492 = $inc867;
      __label__ = 108;
      break;
    }
   case 112:
    var $cmp98281 = ($7 | 0) == 0;
    if (($3 | 0) == 0 | ($4 | 0) == 0 | ($5 | 0) == 0) {
      __label__ = 113;
      break;
    } else {
      __label__ = 115;
      break;
    }
   case 113:
    if ($cmp98281) {
      __label__ = 170;
      break;
    } else {
      __label__ = 114;
      break;
    }
   case 114:
    var $gray1027 = $png_ptr + 334 | 0;
    var $gray998 = $png_ptr + 324 | 0;
    var $sp_2182 = $row;
    var $i_1683 = 0;
    __label__ = 125;
    break;
   case 115:
    if ($cmp98281) {
      __label__ = 170;
      break;
    } else {
      __label__ = 116;
      break;
    }
   case 116:
    var $gray944 = $png_ptr + 334 | 0;
    var $gray918 = $png_ptr + 324 | 0;
    var $sp_2077 = $row;
    var $i_1579 = 0;
    __label__ = 117;
    break;
   case 117:
    var $i_1579;
    var $sp_2077;
    var $add891 = (HEAPU8[$sp_2077 + 2 | 0] & 255) << 8 | HEAPU8[$sp_2077 + 3 | 0] & 255;
    if (($add891 | 0) == 65535) {
      __label__ = 118;
      break;
    } else if (($add891 | 0) == 0) {
      __label__ = 119;
      break;
    } else {
      __label__ = 120;
      break;
    }
   case 118:
    var $add_ptr899 = $sp_2077 + 1 | 0;
    var $127 = HEAPU16[HEAP32[$3 + ((HEAPU8[$add_ptr899] & 255) >>> ($6 >>> 0) << 2) >> 2] + ((HEAPU8[$sp_2077] & 255) << 1) >> 1];
    HEAP8[$sp_2077] = ($127 & 65535) >>> 8 & 255;
    HEAP8[$add_ptr899] = $127 & 255;
    __label__ = 124;
    break;
   case 119:
    HEAP8[$sp_2077] = (HEAPU16[$gray918 >> 1] & 65535) >>> 8 & 255;
    HEAP8[$sp_2077 + 1 | 0] = HEAP16[$gray918 >> 1] & 255;
    __label__ = 124;
    break;
   case 120:
    var $add_ptr934 = $sp_2077 + 1 | 0;
    var $add950 = (HEAPU16[HEAP32[$5 + ((HEAPU8[$add_ptr934] & 255) >>> ($6 >>> 0) << 2) >> 2] + ((HEAPU8[$sp_2077] & 255) << 1) >> 1] & 65535) * $add891 + 32768 + (HEAPU16[$gray944 >> 1] & 65535) * (65535 - $add891) | 0;
    var $add952 = ($add950 >>> 16) + $add950 | 0;
    var $shr953 = $add952 >>> 16;
    if ($cmp) {
      __label__ = 121;
      break;
    } else {
      __label__ = 122;
      break;
    }
   case 121:
    var $w932_0 = $shr953 & 65535;
    __label__ = 123;
    break;
   case 122:
    var $w932_0 = HEAP16[HEAP32[$4 + (($shr953 & 255) >>> ($6 >>> 0) << 2) >> 2] + ($add952 >>> 24 << 1) >> 1];
    __label__ = 123;
    break;
   case 123:
    var $w932_0;
    HEAP8[$sp_2077] = ($w932_0 & 65535) >>> 8 & 255;
    HEAP8[$add_ptr934] = $w932_0 & 255;
    __label__ = 124;
    break;
   case 124:
    var $inc977 = $i_1579 + 1 | 0;
    if (($inc977 | 0) == ($7 | 0)) {
      __label__ = 170;
      break;
    } else {
      var $sp_2077 = $sp_2077 + 4 | 0;
      var $i_1579 = $inc977;
      __label__ = 117;
      break;
    }
   case 125:
    var $i_1683;
    var $sp_2182;
    var $add991 = (HEAPU8[$sp_2182 + 2 | 0] & 255) << 8 | HEAPU8[$sp_2182 + 3 | 0] & 255;
    if (($add991 | 0) == 0) {
      __label__ = 126;
      break;
    } else if (($add991 | 0) == 65535) {
      __label__ = 128;
      break;
    } else {
      __label__ = 127;
      break;
    }
   case 126:
    HEAP8[$sp_2182] = (HEAPU16[$gray998 >> 1] & 65535) >>> 8 & 255;
    HEAP8[$sp_2182 + 1 | 0] = HEAP16[$gray998 >> 1] & 255;
    __label__ = 128;
    break;
   case 127:
    var $add_ptr1018 = $sp_2182 + 1 | 0;
    var $add1033 = (HEAPU16[$gray1027 >> 1] & 65535) * (65535 - $add991) + 32768 + ((HEAPU8[$sp_2182] & 255) << 8 | HEAPU8[$add_ptr1018] & 255) * $add991 | 0;
    var $add1035 = ($add1033 >>> 16) + $add1033 | 0;
    var $shr1036 = $add1035 >>> 16;
    HEAP8[$sp_2182] = $add1035 >>> 24 & 255;
    HEAP8[$add_ptr1018] = $shr1036 & 255;
    __label__ = 128;
    break;
   case 128:
    var $inc1049 = $i_1683 + 1 | 0;
    if (($inc1049 | 0) == ($7 | 0)) {
      __label__ = 170;
      break;
    } else {
      var $sp_2182 = $sp_2182 + 4 | 0;
      var $i_1683 = $inc1049;
      __label__ = 125;
      break;
    }
   case 129:
    if (HEAP8[$row_info + 9 | 0] << 24 >> 24 == 8) {
      __label__ = 130;
      break;
    } else {
      __label__ = 150;
      break;
    }
   case 130:
    var $cmp121372 = ($7 | 0) == 0;
    if (($2 | 0) == 0 | ($1 | 0) == 0 | ($0 | 0) == 0) {
      __label__ = 131;
      break;
    } else {
      __label__ = 133;
      break;
    }
   case 131:
    if ($cmp121372) {
      __label__ = 170;
      break;
    } else {
      __label__ = 132;
      break;
    }
   case 132:
    var $red1245 = $png_ptr + 318 | 0;
    var $green1270 = $png_ptr + 320 | 0;
    var $blue1296 = $png_ptr + 322 | 0;
    var $sp_2373 = $row;
    var $i_1874 = 0;
    __label__ = 146;
    break;
   case 133:
    if ($cmp121372) {
      __label__ = 170;
      break;
    } else {
      __label__ = 134;
      break;
    }
   case 134:
    var $red1117 = $png_ptr + 328 | 0;
    var $green1149 = $png_ptr + 330 | 0;
    var $blue1182 = $png_ptr + 332 | 0;
    var $red1095 = $png_ptr + 318 | 0;
    var $green1098 = $png_ptr + 320 | 0;
    var $blue1102 = $png_ptr + 322 | 0;
    var $sp_2268 = $row;
    var $i_1770 = 0;
    __label__ = 135;
    break;
   case 135:
    var $i_1770;
    var $sp_2268;
    var $145 = HEAPU8[$sp_2268 + 3 | 0];
    if ($145 << 24 >> 24 == -1) {
      __label__ = 136;
      break;
    } else if ($145 << 24 >> 24 == 0) {
      __label__ = 137;
      break;
    } else {
      __label__ = 138;
      break;
    }
   case 136:
    var $147 = HEAP8[$0 + (HEAPU8[$sp_2268] & 255) | 0];
    HEAP8[$sp_2268] = $147;
    var $add_ptr1081 = $sp_2268 + 1 | 0;
    var $149 = HEAP8[$0 + (HEAPU8[$add_ptr1081] & 255) | 0];
    HEAP8[$add_ptr1081] = $149;
    var $add_ptr1085 = $sp_2268 + 2 | 0;
    var $151 = HEAP8[$0 + (HEAPU8[$add_ptr1085] & 255) | 0];
    HEAP8[$add_ptr1085] = $151;
    __label__ = 145;
    break;
   case 137:
    HEAP8[$sp_2268] = HEAP16[$red1095 >> 1] & 255;
    HEAP8[$sp_2268 + 1 | 0] = HEAP16[$green1098 >> 1] & 255;
    HEAP8[$sp_2268 + 2 | 0] = HEAP16[$blue1102 >> 1] & 255;
    __label__ = 145;
    break;
   case 138:
    var $conv1114 = $145 & 255;
    var $sub1121 = 255 - $conv1114 | 0;
    var $add1126 = (HEAPU8[$2 + (HEAPU8[$sp_2268] & 255) | 0] & 255) * $conv1114 + 128 + (HEAPU16[$red1117 >> 1] & 65535) * $sub1121 | 0;
    var $shr1132 = (($add1126 >>> 8 & 255) + $add1126 | 0) >>> 8;
    if ($cmp) {
      var $w1107_0 = $shr1132 & 255;
      __label__ = 140;
      break;
    } else {
      __label__ = 139;
      break;
    }
   case 139:
    var $w1107_0 = HEAP8[$1 + ($shr1132 & 255) | 0];
    __label__ = 140;
    break;
   case 140:
    var $w1107_0;
    HEAP8[$sp_2268] = $w1107_0;
    var $add_ptr1139 = $sp_2268 + 1 | 0;
    var $add1158 = (HEAPU8[$2 + (HEAPU8[$add_ptr1139] & 255) | 0] & 255) * $conv1114 + 128 + (HEAPU16[$green1149 >> 1] & 65535) * $sub1121 | 0;
    var $shr1164 = (($add1158 >>> 8 & 255) + $add1158 | 0) >>> 8;
    if ($cmp) {
      var $w1107_1 = $shr1164 & 255;
      __label__ = 142;
      break;
    } else {
      __label__ = 141;
      break;
    }
   case 141:
    var $w1107_1 = HEAP8[$1 + ($shr1164 & 255) | 0];
    __label__ = 142;
    break;
   case 142:
    var $w1107_1;
    HEAP8[$add_ptr1139] = $w1107_1;
    var $add_ptr1172 = $sp_2268 + 2 | 0;
    var $add1191 = (HEAPU8[$2 + (HEAPU8[$add_ptr1172] & 255) | 0] & 255) * $conv1114 + 128 + (HEAPU16[$blue1182 >> 1] & 65535) * $sub1121 | 0;
    var $shr1197 = (($add1191 >>> 8 & 255) + $add1191 | 0) >>> 8;
    if ($cmp) {
      var $w1107_2 = $shr1197 & 255;
      __label__ = 144;
      break;
    } else {
      __label__ = 143;
      break;
    }
   case 143:
    var $w1107_2 = HEAP8[$1 + ($shr1197 & 255) | 0];
    __label__ = 144;
    break;
   case 144:
    var $w1107_2;
    HEAP8[$add_ptr1172] = $w1107_2;
    __label__ = 145;
    break;
   case 145:
    var $inc1208 = $i_1770 + 1 | 0;
    if (($inc1208 | 0) == ($7 | 0)) {
      __label__ = 170;
      break;
    } else {
      var $sp_2268 = $sp_2268 + 4 | 0;
      var $i_1770 = $inc1208;
      __label__ = 135;
      break;
    }
   case 146:
    var $i_1874;
    var $sp_2373;
    var $167 = HEAPU8[$sp_2373 + 3 | 0];
    if ($167 << 24 >> 24 == 0) {
      __label__ = 147;
      break;
    } else if ($167 << 24 >> 24 == -1) {
      __label__ = 149;
      break;
    } else {
      __label__ = 148;
      break;
    }
   case 147:
    HEAP8[$sp_2373] = HEAP16[$red1245 >> 1] & 255;
    HEAP8[$sp_2373 + 1 | 0] = HEAP16[$green1270 >> 1] & 255;
    HEAP8[$sp_2373 + 2 | 0] = HEAP16[$blue1296 >> 1] & 255;
    __label__ = 149;
    break;
   case 148:
    var $conv1242 = $167 & 255;
    var $sub1249 = 255 - $conv1242 | 0;
    var $add1254 = (HEAPU8[$sp_2373] & 255) * $conv1242 + 128 + (HEAPU16[$red1245 >> 1] & 65535) * $sub1249 | 0;
    HEAP8[$sp_2373] = (($add1254 >>> 8 & 255) + $add1254 | 0) >>> 8 & 255;
    var $add_ptr1263 = $sp_2373 + 1 | 0;
    var $add1279 = (HEAPU8[$add_ptr1263] & 255) * $conv1242 + 128 + (HEAPU16[$green1270 >> 1] & 65535) * $sub1249 | 0;
    HEAP8[$add_ptr1263] = (($add1279 >>> 8 & 255) + $add1279 | 0) >>> 8 & 255;
    var $add_ptr1289 = $sp_2373 + 2 | 0;
    var $add1305 = (HEAPU8[$add_ptr1289] & 255) * $conv1242 + 128 + (HEAPU16[$blue1296 >> 1] & 65535) * $sub1249 | 0;
    HEAP8[$add_ptr1289] = (($add1305 >>> 8 & 255) + $add1305 | 0) >>> 8 & 255;
    __label__ = 149;
    break;
   case 149:
    var $inc1317 = $i_1874 + 1 | 0;
    if (($inc1317 | 0) == ($7 | 0)) {
      __label__ = 170;
      break;
    } else {
      var $sp_2373 = $sp_2373 + 4 | 0;
      var $i_1874 = $inc1317;
      __label__ = 146;
      break;
    }
   case 150:
    var $cmp157463 = ($7 | 0) == 0;
    if (($3 | 0) == 0 | ($4 | 0) == 0 | ($5 | 0) == 0) {
      __label__ = 151;
      break;
    } else {
      __label__ = 153;
      break;
    }
   case 151:
    if ($cmp157463) {
      __label__ = 170;
      break;
    } else {
      __label__ = 152;
      break;
    }
   case 152:
    var $red1663 = $png_ptr + 318 | 0;
    var $green1687 = $png_ptr + 320 | 0;
    var $blue1712 = $png_ptr + 322 | 0;
    var $sp_2564 = $row;
    var $i_2065 = 0;
    __label__ = 166;
    break;
   case 153:
    if ($cmp157463) {
      __label__ = 170;
      break;
    } else {
      __label__ = 154;
      break;
    }
   case 154:
    var $red1453 = $png_ptr + 328 | 0;
    var $green1494 = $png_ptr + 330 | 0;
    var $blue1536 = $png_ptr + 332 | 0;
    var $red1402 = $png_ptr + 318 | 0;
    var $green1414 = $png_ptr + 320 | 0;
    var $blue1427 = $png_ptr + 322 | 0;
    var $sp_2459 = $row;
    var $i_1961 = 0;
    __label__ = 155;
    break;
   case 155:
    var $i_1961;
    var $sp_2459;
    var $add1343 = (HEAPU8[$sp_2459 + 6 | 0] & 255) << 8 | HEAPU8[$sp_2459 + 7 | 0] & 255;
    if (($add1343 | 0) == 65535) {
      __label__ = 156;
      break;
    } else if (($add1343 | 0) == 0) {
      __label__ = 157;
      break;
    } else {
      __label__ = 158;
      break;
    }
   case 156:
    var $add_ptr1351 = $sp_2459 + 1 | 0;
    var $182 = HEAPU16[HEAP32[$3 + ((HEAPU8[$add_ptr1351] & 255) >>> ($6 >>> 0) << 2) >> 2] + ((HEAPU8[$sp_2459] & 255) << 1) >> 1];
    HEAP8[$sp_2459] = ($182 & 65535) >>> 8 & 255;
    HEAP8[$add_ptr1351] = $182 & 255;
    var $add_ptr1364 = $sp_2459 + 2 | 0;
    var $add_ptr1366 = $sp_2459 + 3 | 0;
    var $186 = HEAPU16[HEAP32[$3 + ((HEAPU8[$add_ptr1366] & 255) >>> ($6 >>> 0) << 2) >> 2] + ((HEAPU8[$add_ptr1364] & 255) << 1) >> 1];
    HEAP8[$add_ptr1364] = ($186 & 65535) >>> 8 & 255;
    HEAP8[$add_ptr1366] = $186 & 255;
    var $add_ptr1380 = $sp_2459 + 4 | 0;
    var $add_ptr1382 = $sp_2459 + 5 | 0;
    var $190 = HEAPU16[HEAP32[$3 + ((HEAPU8[$add_ptr1382] & 255) >>> ($6 >>> 0) << 2) >> 2] + ((HEAPU8[$add_ptr1380] & 255) << 1) >> 1];
    HEAP8[$add_ptr1380] = ($190 & 65535) >>> 8 & 255;
    HEAP8[$add_ptr1382] = $190 & 255;
    __label__ = 165;
    break;
   case 157:
    HEAP8[$sp_2459] = (HEAPU16[$red1402 >> 1] & 65535) >>> 8 & 255;
    HEAP8[$sp_2459 + 1 | 0] = HEAP16[$red1402 >> 1] & 255;
    HEAP8[$sp_2459 + 2 | 0] = (HEAPU16[$green1414 >> 1] & 65535) >>> 8 & 255;
    HEAP8[$sp_2459 + 3 | 0] = HEAP16[$green1414 >> 1] & 255;
    HEAP8[$sp_2459 + 4 | 0] = (HEAPU16[$blue1427 >> 1] & 65535) >>> 8 & 255;
    HEAP8[$sp_2459 + 5 | 0] = HEAP16[$blue1427 >> 1] & 255;
    __label__ = 165;
    break;
   case 158:
    var $add_ptr1443 = $sp_2459 + 1 | 0;
    var $sub1456 = 65535 - $add1343 | 0;
    var $add1459 = (HEAPU16[HEAP32[$5 + ((HEAPU8[$add_ptr1443] & 255) >>> ($6 >>> 0) << 2) >> 2] + ((HEAPU8[$sp_2459] & 255) << 1) >> 1] & 65535) * $add1343 + 32768 + (HEAPU16[$red1453 >> 1] & 65535) * $sub1456 | 0;
    var $add1461 = ($add1459 >>> 16) + $add1459 | 0;
    var $shr1462 = $add1461 >>> 16;
    if ($cmp) {
      var $w1441_0 = $shr1462 & 65535;
      __label__ = 160;
      break;
    } else {
      __label__ = 159;
      break;
    }
   case 159:
    var $w1441_0 = HEAP16[HEAP32[$4 + (($shr1462 & 255) >>> ($6 >>> 0) << 2) >> 2] + ($add1461 >>> 24 << 1) >> 1];
    __label__ = 160;
    break;
   case 160:
    var $w1441_0;
    HEAP8[$sp_2459] = ($w1441_0 & 65535) >>> 8 & 255;
    HEAP8[$add_ptr1443] = $w1441_0 & 255;
    var $add_ptr1482 = $sp_2459 + 2 | 0;
    var $add_ptr1484 = $sp_2459 + 3 | 0;
    var $add1500 = (HEAPU16[HEAP32[$5 + ((HEAPU8[$add_ptr1484] & 255) >>> ($6 >>> 0) << 2) >> 2] + ((HEAPU8[$add_ptr1482] & 255) << 1) >> 1] & 65535) * $add1343 + 32768 + (HEAPU16[$green1494 >> 1] & 65535) * $sub1456 | 0;
    var $add1502 = ($add1500 >>> 16) + $add1500 | 0;
    var $shr1503 = $add1502 >>> 16;
    if ($cmp) {
      var $w1441_1 = $shr1503 & 65535;
      __label__ = 162;
      break;
    } else {
      __label__ = 161;
      break;
    }
   case 161:
    var $w1441_1 = HEAP16[HEAP32[$4 + (($shr1503 & 255) >>> ($6 >>> 0) << 2) >> 2] + ($add1502 >>> 24 << 1) >> 1];
    __label__ = 162;
    break;
   case 162:
    var $w1441_1;
    HEAP8[$add_ptr1482] = ($w1441_1 & 65535) >>> 8 & 255;
    HEAP8[$add_ptr1484] = $w1441_1 & 255;
    var $add_ptr1524 = $sp_2459 + 4 | 0;
    var $add_ptr1526 = $sp_2459 + 5 | 0;
    var $add1542 = (HEAPU16[HEAP32[$5 + ((HEAPU8[$add_ptr1526] & 255) >>> ($6 >>> 0) << 2) >> 2] + ((HEAPU8[$add_ptr1524] & 255) << 1) >> 1] & 65535) * $add1343 + 32768 + (HEAPU16[$blue1536 >> 1] & 65535) * $sub1456 | 0;
    var $add1544 = ($add1542 >>> 16) + $add1542 | 0;
    var $shr1545 = $add1544 >>> 16;
    if ($cmp) {
      var $w1441_2 = $shr1545 & 65535;
      __label__ = 164;
      break;
    } else {
      __label__ = 163;
      break;
    }
   case 163:
    var $w1441_2 = HEAP16[HEAP32[$4 + (($shr1545 & 255) >>> ($6 >>> 0) << 2) >> 2] + ($add1544 >>> 24 << 1) >> 1];
    __label__ = 164;
    break;
   case 164:
    var $w1441_2;
    HEAP8[$add_ptr1524] = ($w1441_2 & 65535) >>> 8 & 255;
    HEAP8[$add_ptr1526] = $w1441_2 & 255;
    __label__ = 165;
    break;
   case 165:
    var $inc1569 = $i_1961 + 1 | 0;
    if (($inc1569 | 0) == ($7 | 0)) {
      __label__ = 170;
      break;
    } else {
      var $sp_2459 = $sp_2459 + 8 | 0;
      var $i_1961 = $inc1569;
      __label__ = 155;
      break;
    }
   case 166:
    var $i_2065;
    var $sp_2564;
    var $add1585 = (HEAPU8[$sp_2564 + 6 | 0] & 255) << 8 | HEAPU8[$sp_2564 + 7 | 0] & 255;
    if (($add1585 | 0) == 0) {
      __label__ = 167;
      break;
    } else if (($add1585 | 0) == 65535) {
      __label__ = 169;
      break;
    } else {
      __label__ = 168;
      break;
    }
   case 167:
    HEAP8[$sp_2564] = (HEAPU16[$red1663 >> 1] & 65535) >>> 8 & 255;
    HEAP8[$sp_2564 + 1 | 0] = HEAP16[$red1663 >> 1] & 255;
    HEAP8[$sp_2564 + 2 | 0] = (HEAPU16[$green1687 >> 1] & 65535) >>> 8 & 255;
    HEAP8[$sp_2564 + 3 | 0] = HEAP16[$green1687 >> 1] & 255;
    HEAP8[$sp_2564 + 4 | 0] = (HEAPU16[$blue1712 >> 1] & 65535) >>> 8 & 255;
    HEAP8[$sp_2564 + 5 | 0] = HEAP16[$blue1712 >> 1] & 255;
    __label__ = 169;
    break;
   case 168:
    var $add_ptr1638 = $sp_2564 + 1 | 0;
    var $add_ptr1643 = $sp_2564 + 2 | 0;
    var $add_ptr1646 = $sp_2564 + 3 | 0;
    var $add1648 = (HEAPU8[$add_ptr1643] & 255) << 8 | HEAPU8[$add_ptr1646] & 255;
    var $add_ptr1651 = $sp_2564 + 4 | 0;
    var $add_ptr1654 = $sp_2564 + 5 | 0;
    var $add1656 = (HEAPU8[$add_ptr1651] & 255) << 8 | HEAPU8[$add_ptr1654] & 255;
    var $sub1666 = 65535 - $add1585 | 0;
    var $add1669 = ((HEAPU8[$sp_2564] & 255) << 8 | HEAPU8[$add_ptr1638] & 255) * $add1585 + 32768 + (HEAPU16[$red1663 >> 1] & 65535) * $sub1666 | 0;
    var $add1671 = ($add1669 >>> 16) + $add1669 | 0;
    var $shr1672 = $add1671 >>> 16;
    HEAP8[$sp_2564] = $add1671 >>> 24 & 255;
    HEAP8[$add_ptr1638] = $shr1672 & 255;
    var $add1693 = $add1648 * $add1585 + 32768 + (HEAPU16[$green1687 >> 1] & 65535) * $sub1666 | 0;
    var $add1695 = ($add1693 >>> 16) + $add1693 | 0;
    var $shr1696 = $add1695 >>> 16;
    HEAP8[$add_ptr1643] = $add1695 >>> 24 & 255;
    HEAP8[$add_ptr1646] = $shr1696 & 255;
    var $add1718 = $add1656 * $add1585 + 32768 + (HEAPU16[$blue1712 >> 1] & 65535) * $sub1666 | 0;
    var $add1720 = ($add1718 >>> 16) + $add1718 | 0;
    var $shr1721 = $add1720 >>> 16;
    HEAP8[$add_ptr1651] = $add1720 >>> 24 & 255;
    HEAP8[$add_ptr1654] = $shr1721 & 255;
    __label__ = 169;
    break;
   case 169:
    var $inc1735 = $i_2065 + 1 | 0;
    if (($inc1735 | 0) == ($7 | 0)) {
      __label__ = 170;
      break;
    } else {
      var $sp_2564 = $sp_2564 + 8 | 0;
      var $i_2065 = $inc1735;
      __label__ = 166;
      break;
    }
   case 170:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_do_compose["X"] = 1;

function _png_do_gamma($row_info, $row, $png_ptr_0_74_val, $png_ptr_0_77_val, $png_ptr_0_78_val) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $0 = HEAPU32[$row_info >> 2];
    var $bit_depth = $row_info + 9 | 0;
    var $1 = HEAPU8[$bit_depth];
    if (($1 & 255) > 8 | ($png_ptr_0_77_val | 0) == 0) {
      __label__ = 2;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 2:
    if ($1 << 24 >> 24 != 16 | ($png_ptr_0_78_val | 0) == 0) {
      __label__ = 31;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $conv14 = HEAPU8[$row_info + 8 | 0] & 255;
    if (($conv14 | 0) == 2) {
      __label__ = 4;
      break;
    } else if (($conv14 | 0) == 6) {
      __label__ = 9;
      break;
    } else if (($conv14 | 0) == 4) {
      __label__ = 14;
      break;
    } else if (($conv14 | 0) == 0) {
      __label__ = 19;
      break;
    } else {
      __label__ = 31;
      break;
    }
   case 4:
    var $cmp2056 = ($0 | 0) == 0;
    if ($1 << 24 >> 24 == 8) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    if ($cmp2056) {
      __label__ = 31;
      break;
    } else {
      var $sp_057 = $row;
      var $i_058 = 0;
      __label__ = 7;
      break;
    }
   case 6:
    if ($cmp2056) {
      __label__ = 31;
      break;
    } else {
      var $sp_153 = $row;
      var $i_154 = 0;
      __label__ = 8;
      break;
    }
   case 7:
    var $i_058;
    var $sp_057;
    var $4 = HEAP8[$png_ptr_0_77_val + (HEAPU8[$sp_057] & 255) | 0];
    HEAP8[$sp_057] = $4;
    var $incdec_ptr = $sp_057 + 1 | 0;
    var $6 = HEAP8[$png_ptr_0_77_val + (HEAPU8[$incdec_ptr] & 255) | 0];
    HEAP8[$incdec_ptr] = $6;
    var $incdec_ptr24 = $sp_057 + 2 | 0;
    var $8 = HEAP8[$png_ptr_0_77_val + (HEAPU8[$incdec_ptr24] & 255) | 0];
    HEAP8[$incdec_ptr24] = $8;
    var $inc = $i_058 + 1 | 0;
    if (($inc | 0) == ($0 | 0)) {
      __label__ = 31;
      break;
    } else {
      var $sp_057 = $sp_057 + 3 | 0;
      var $i_058 = $inc;
      __label__ = 7;
      break;
    }
   case 8:
    var $i_154;
    var $sp_153;
    var $add_ptr = $sp_153 + 1 | 0;
    var $12 = HEAPU16[HEAP32[$png_ptr_0_78_val + ((HEAPU8[$add_ptr] & 255) >>> ($png_ptr_0_74_val >>> 0) << 2) >> 2] + ((HEAPU8[$sp_153] & 255) << 1) >> 1];
    HEAP8[$sp_153] = ($12 & 65535) >>> 8 & 255;
    HEAP8[$add_ptr] = $12 & 255;
    var $add_ptr43 = $sp_153 + 2 | 0;
    var $add_ptr45 = $sp_153 + 3 | 0;
    var $16 = HEAPU16[HEAP32[$png_ptr_0_78_val + ((HEAPU8[$add_ptr45] & 255) >>> ($png_ptr_0_74_val >>> 0) << 2) >> 2] + ((HEAPU8[$add_ptr43] & 255) << 1) >> 1];
    HEAP8[$add_ptr43] = ($16 & 65535) >>> 8 & 255;
    HEAP8[$add_ptr45] = $16 & 255;
    var $add_ptr58 = $sp_153 + 4 | 0;
    var $add_ptr60 = $sp_153 + 5 | 0;
    var $20 = HEAPU16[HEAP32[$png_ptr_0_78_val + ((HEAPU8[$add_ptr60] & 255) >>> ($png_ptr_0_74_val >>> 0) << 2) >> 2] + ((HEAPU8[$add_ptr58] & 255) << 1) >> 1];
    HEAP8[$add_ptr58] = ($20 & 65535) >>> 8 & 255;
    HEAP8[$add_ptr60] = $20 & 255;
    var $inc75 = $i_154 + 1 | 0;
    if (($inc75 | 0) == ($0 | 0)) {
      __label__ = 31;
      break;
    } else {
      var $sp_153 = $sp_153 + 6 | 0;
      var $i_154 = $inc75;
      __label__ = 8;
      break;
    }
   case 9:
    var $cmp8448 = ($0 | 0) == 0;
    if ($1 << 24 >> 24 == 8) {
      __label__ = 10;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 10:
    if ($cmp8448) {
      __label__ = 31;
      break;
    } else {
      var $sp_249 = $row;
      var $i_250 = 0;
      __label__ = 12;
      break;
    }
   case 11:
    if ($cmp8448) {
      __label__ = 31;
      break;
    } else {
      var $sp_345 = $row;
      var $i_346 = 0;
      __label__ = 13;
      break;
    }
   case 12:
    var $i_250;
    var $sp_249;
    var $22 = HEAP8[$png_ptr_0_77_val + (HEAPU8[$sp_249] & 255) | 0];
    HEAP8[$sp_249] = $22;
    var $incdec_ptr89 = $sp_249 + 1 | 0;
    var $24 = HEAP8[$png_ptr_0_77_val + (HEAPU8[$incdec_ptr89] & 255) | 0];
    HEAP8[$incdec_ptr89] = $24;
    var $incdec_ptr92 = $sp_249 + 2 | 0;
    var $26 = HEAP8[$png_ptr_0_77_val + (HEAPU8[$incdec_ptr92] & 255) | 0];
    HEAP8[$incdec_ptr92] = $26;
    var $inc98 = $i_250 + 1 | 0;
    if (($inc98 | 0) == ($0 | 0)) {
      __label__ = 31;
      break;
    } else {
      var $sp_249 = $sp_249 + 4 | 0;
      var $i_250 = $inc98;
      __label__ = 12;
      break;
    }
   case 13:
    var $i_346;
    var $sp_345;
    var $add_ptr107 = $sp_345 + 1 | 0;
    var $30 = HEAPU16[HEAP32[$png_ptr_0_78_val + ((HEAPU8[$add_ptr107] & 255) >>> ($png_ptr_0_74_val >>> 0) << 2) >> 2] + ((HEAPU8[$sp_345] & 255) << 1) >> 1];
    HEAP8[$sp_345] = ($30 & 65535) >>> 8 & 255;
    HEAP8[$add_ptr107] = $30 & 255;
    var $add_ptr120 = $sp_345 + 2 | 0;
    var $add_ptr122 = $sp_345 + 3 | 0;
    var $34 = HEAPU16[HEAP32[$png_ptr_0_78_val + ((HEAPU8[$add_ptr122] & 255) >>> ($png_ptr_0_74_val >>> 0) << 2) >> 2] + ((HEAPU8[$add_ptr120] & 255) << 1) >> 1];
    HEAP8[$add_ptr120] = ($34 & 65535) >>> 8 & 255;
    HEAP8[$add_ptr122] = $34 & 255;
    var $add_ptr135 = $sp_345 + 4 | 0;
    var $add_ptr137 = $sp_345 + 5 | 0;
    var $38 = HEAPU16[HEAP32[$png_ptr_0_78_val + ((HEAPU8[$add_ptr137] & 255) >>> ($png_ptr_0_74_val >>> 0) << 2) >> 2] + ((HEAPU8[$add_ptr135] & 255) << 1) >> 1];
    HEAP8[$add_ptr135] = ($38 & 65535) >>> 8 & 255;
    HEAP8[$add_ptr137] = $38 & 255;
    var $inc152 = $i_346 + 1 | 0;
    if (($inc152 | 0) == ($0 | 0)) {
      __label__ = 31;
      break;
    } else {
      var $sp_345 = $sp_345 + 8 | 0;
      var $i_346 = $inc152;
      __label__ = 13;
      break;
    }
   case 14:
    var $cmp16240 = ($0 | 0) == 0;
    if ($1 << 24 >> 24 == 8) {
      __label__ = 15;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 15:
    if ($cmp16240) {
      __label__ = 31;
      break;
    } else {
      var $sp_441 = $row;
      var $i_442 = 0;
      __label__ = 17;
      break;
    }
   case 16:
    if ($cmp16240) {
      __label__ = 31;
      break;
    } else {
      var $sp_537 = $row;
      var $i_538 = 0;
      __label__ = 18;
      break;
    }
   case 17:
    var $i_442;
    var $sp_441;
    var $40 = HEAP8[$png_ptr_0_77_val + (HEAPU8[$sp_441] & 255) | 0];
    HEAP8[$sp_441] = $40;
    var $inc169 = $i_442 + 1 | 0;
    if (($inc169 | 0) == ($0 | 0)) {
      __label__ = 31;
      break;
    } else {
      var $sp_441 = $sp_441 + 2 | 0;
      var $i_442 = $inc169;
      __label__ = 17;
      break;
    }
   case 18:
    var $i_538;
    var $sp_537;
    var $add_ptr178 = $sp_537 + 1 | 0;
    var $44 = HEAPU16[HEAP32[$png_ptr_0_78_val + ((HEAPU8[$add_ptr178] & 255) >>> ($png_ptr_0_74_val >>> 0) << 2) >> 2] + ((HEAPU8[$sp_537] & 255) << 1) >> 1];
    HEAP8[$sp_537] = ($44 & 65535) >>> 8 & 255;
    HEAP8[$add_ptr178] = $44 & 255;
    var $inc193 = $i_538 + 1 | 0;
    if (($inc193 | 0) == ($0 | 0)) {
      __label__ = 31;
      break;
    } else {
      var $sp_537 = $sp_537 + 4 | 0;
      var $i_538 = $inc193;
      __label__ = 18;
      break;
    }
   case 19:
    if ($1 << 24 >> 24 == 2) {
      __label__ = 20;
      break;
    } else {
      var $50 = $1;
      __label__ = 23;
      break;
    }
   case 20:
    if (($0 | 0) == 0) {
      __label__ = 31;
      break;
    } else {
      var $sp_633 = $row;
      var $i_634 = 0;
      __label__ = 21;
      break;
    }
   case 21:
    var $i_634;
    var $sp_633;
    var $conv206 = HEAPU8[$sp_633] & 255;
    var $and207 = $conv206 & 192;
    var $and209 = $conv206 & 48;
    var $and211 = $conv206 & 12;
    var $and213 = $conv206 & 3;
    var $or252 = (HEAPU8[$png_ptr_0_77_val + ($and209 >>> 4 | $and209 | $and209 >>> 2 | $and209 << 2) | 0] & 255) >>> 2 & 48 | HEAP8[$png_ptr_0_77_val + ($and207 | $conv206 >>> 6 | $and207 >>> 4 | $and207 >>> 2) | 0] & -64 | (HEAPU8[$png_ptr_0_77_val + ($and213 << 2 | $and213 | $and213 << 4 | $and213 << 6) | 0] & 255) >>> 6 | (HEAPU8[$png_ptr_0_77_val + ($and211 >>> 2 | $and211 | $and211 << 2 | $and211 << 4) | 0] & 255) >>> 4 & 12;
    HEAP8[$sp_633] = $or252;
    var $add = $i_634 + 4 | 0;
    if ($add >>> 0 < $0 >>> 0) {
      var $sp_633 = $sp_633 + 1 | 0;
      var $i_634 = $add;
      __label__ = 21;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 22:
    var $50 = HEAP8[$bit_depth];
    __label__ = 23;
    break;
   case 23:
    var $50;
    if ($50 << 24 >> 24 == 4) {
      __label__ = 24;
      break;
    } else if ($50 << 24 >> 24 == 8) {
      __label__ = 25;
      break;
    } else if ($50 << 24 >> 24 == 16) {
      __label__ = 27;
      break;
    } else {
      __label__ = 31;
      break;
    }
   case 24:
    if (($0 | 0) == 0) {
      __label__ = 31;
      break;
    } else {
      var $sp_730 = $row;
      var $i_731 = 0;
      __label__ = 28;
      break;
    }
   case 25:
    if (($0 | 0) == 0) {
      __label__ = 31;
      break;
    } else {
      __label__ = 26;
      break;
    }
   case 26:
    var $lftr_limit = $row + $0 | 0;
    var $sp_826 = $row;
    __label__ = 29;
    break;
   case 27:
    if (($0 | 0) == 0) {
      __label__ = 31;
      break;
    } else {
      var $sp_922 = $row;
      var $i_923 = 0;
      __label__ = 30;
      break;
    }
   case 28:
    var $i_731;
    var $sp_730;
    var $conv267 = HEAPU8[$sp_730] & 255;
    var $and270 = $conv267 & 15;
    var $or281 = (HEAPU8[$png_ptr_0_77_val + ($and270 << 4 | $and270) | 0] & 255) >>> 4 | HEAP8[$png_ptr_0_77_val + ($conv267 & 240 | $conv267 >>> 4) | 0] & -16;
    HEAP8[$sp_730] = $or281;
    var $add285 = $i_731 + 2 | 0;
    if ($add285 >>> 0 < $0 >>> 0) {
      var $sp_730 = $sp_730 + 1 | 0;
      var $i_731 = $add285;
      __label__ = 28;
      break;
    } else {
      __label__ = 31;
      break;
    }
   case 29:
    var $sp_826;
    var $55 = HEAP8[$png_ptr_0_77_val + (HEAPU8[$sp_826] & 255) | 0];
    HEAP8[$sp_826] = $55;
    var $incdec_ptr299 = $sp_826 + 1 | 0;
    if (($incdec_ptr299 | 0) == ($lftr_limit | 0)) {
      __label__ = 31;
      break;
    } else {
      var $sp_826 = $incdec_ptr299;
      __label__ = 29;
      break;
    }
   case 30:
    var $i_923;
    var $sp_922;
    var $add_ptr315 = $sp_922 + 1 | 0;
    var $59 = HEAPU16[HEAP32[$png_ptr_0_78_val + ((HEAPU8[$add_ptr315] & 255) >>> ($png_ptr_0_74_val >>> 0) << 2) >> 2] + ((HEAPU8[$sp_922] & 255) << 1) >> 1];
    HEAP8[$sp_922] = ($59 & 65535) >>> 8 & 255;
    HEAP8[$add_ptr315] = $59 & 255;
    var $inc330 = $i_923 + 1 | 0;
    if (($inc330 | 0) == ($0 | 0)) {
      __label__ = 31;
      break;
    } else {
      var $sp_922 = $sp_922 + 2 | 0;
      var $i_923 = $inc330;
      __label__ = 30;
      break;
    }
   case 31:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_do_gamma["X"] = 1;

function _png_do_scale_16_to_8($row_info, $row) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $bit_depth = $row_info + 9 | 0;
    if (HEAP8[$bit_depth] << 24 >> 24 == 16) {
      __label__ = 2;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 2:
    var $rowbytes = $row_info + 4 | 0;
    var $1 = HEAP32[$rowbytes >> 2];
    var $add_ptr = $row + $1 | 0;
    if (($1 | 0) > 0) {
      var $sp_03 = $row;
      var $dp_04 = $row;
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $dp_04;
    var $sp_03;
    var $conv4 = HEAPU8[$sp_03] & 255;
    var $incdec_ptr5 = $sp_03 + 2 | 0;
    HEAP8[$dp_04] = ((((HEAPU8[$sp_03 + 1 | 0] & 255) - $conv4) * 65535 + 8388480 | 0) >>> 24) + $conv4 & 255;
    if ($incdec_ptr5 >>> 0 < $add_ptr >>> 0) {
      var $sp_03 = $incdec_ptr5;
      var $dp_04 = $dp_04 + 1 | 0;
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    HEAP8[$bit_depth] = 8;
    var $5 = HEAPU8[$row_info + 10 | 0];
    HEAP8[$row_info + 11 | 0] = $5 << 3;
    var $mul16 = ($5 & 255) * HEAP32[$row_info >> 2] | 0;
    HEAP32[$rowbytes >> 2] = $mul16;
    __label__ = 5;
    break;
   case 5:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_do_chop($row_info, $row) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $bit_depth = $row_info + 9 | 0;
    if (HEAP8[$bit_depth] << 24 >> 24 == 16) {
      __label__ = 2;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 2:
    var $rowbytes = $row_info + 4 | 0;
    var $1 = HEAP32[$rowbytes >> 2];
    var $add_ptr = $row + $1 | 0;
    if (($1 | 0) > 0) {
      var $sp_02 = $row;
      var $dp_03 = $row;
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $dp_03;
    var $sp_02;
    var $2 = HEAP8[$sp_02];
    HEAP8[$dp_03] = $2;
    var $add_ptr4 = $sp_02 + 2 | 0;
    if ($add_ptr4 >>> 0 < $add_ptr >>> 0) {
      var $sp_02 = $add_ptr4;
      var $dp_03 = $dp_03 + 1 | 0;
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    HEAP8[$bit_depth] = 8;
    var $3 = HEAPU8[$row_info + 10 | 0];
    HEAP8[$row_info + 11 | 0] = $3 << 3;
    var $mul10 = ($3 & 255) * HEAP32[$row_info >> 2] | 0;
    HEAP32[$rowbytes >> 2] = $mul10;
    __label__ = 5;
    break;
   case 5:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_do_quantize($row_info, $row, $palette_lookup, $quantize_lookup) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $0 = HEAPU32[$row_info >> 2];
    var $bit_depth = $row_info + 9 | 0;
    if (HEAP8[$bit_depth] << 24 >> 24 == 8) {
      __label__ = 2;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 2:
    var $color_type = $row_info + 8 | 0;
    var $2 = HEAPU8[$color_type];
    var $tobool = ($palette_lookup | 0) == 0;
    if ($2 << 24 >> 24 != 2 | $tobool) {
      __label__ = 11;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    if (($0 | 0) == 0) {
      var $9 = 8;
      __label__ = 7;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $lftr_limit = $row + $0 | 0;
    var $sp_010 = $row;
    var $dp_011 = $row;
    __label__ = 5;
    break;
   case 5:
    var $dp_011;
    var $sp_010;
    var $8 = HEAP8[$palette_lookup + ((HEAPU8[$sp_010 + 2 | 0] & 255) >>> 3 | (HEAPU8[$sp_010] & 255) << 7 & 31744 | (HEAPU8[$sp_010 + 1 | 0] & 255) << 2 & 992) | 0];
    var $incdec_ptr19 = $dp_011 + 1 | 0;
    HEAP8[$dp_011] = $8;
    if (($incdec_ptr19 | 0) == ($lftr_limit | 0)) {
      __label__ = 6;
      break;
    } else {
      var $sp_010 = $sp_010 + 3 | 0;
      var $dp_011 = $incdec_ptr19;
      __label__ = 5;
      break;
    }
   case 6:
    var $9 = HEAP8[$bit_depth];
    __label__ = 7;
    break;
   case 7:
    var $9;
    HEAP8[$color_type] = 3;
    HEAP8[$row_info + 10 | 0] = 1;
    HEAP8[$row_info + 11 | 0] = $9;
    var $conv23 = $9 & 255;
    if (($9 & 255) > 7) {
      __label__ = 8;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 8:
    var $cond = ($conv23 >>> 3) * $0 | 0;
    __label__ = 10;
    break;
   case 9:
    var $cond = ($conv23 * $0 + 7 | 0) >>> 3;
    __label__ = 10;
    break;
   case 10:
    var $cond;
    HEAP32[$row_info + 4 >> 2] = $cond;
    __label__ = 23;
    break;
   case 11:
    if ($2 << 24 >> 24 != 6 | $tobool) {
      __label__ = 20;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 12:
    if (($0 | 0) == 0) {
      var $16 = 8;
      __label__ = 16;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 13:
    var $lftr_limit20 = $row + $0 | 0;
    var $sp_114 = $row;
    var $dp_115 = $row;
    __label__ = 14;
    break;
   case 14:
    var $dp_115;
    var $sp_114;
    var $15 = HEAP8[$palette_lookup + ((HEAPU8[$sp_114 + 2 | 0] & 255) >>> 3 | (HEAPU8[$sp_114] & 255) << 7 & 31744 | (HEAPU8[$sp_114 + 1 | 0] & 255) << 2 & 992) | 0];
    var $incdec_ptr67 = $dp_115 + 1 | 0;
    HEAP8[$dp_115] = $15;
    if (($incdec_ptr67 | 0) == ($lftr_limit20 | 0)) {
      __label__ = 15;
      break;
    } else {
      var $sp_114 = $sp_114 + 4 | 0;
      var $dp_115 = $incdec_ptr67;
      __label__ = 14;
      break;
    }
   case 15:
    var $16 = HEAP8[$bit_depth];
    __label__ = 16;
    break;
   case 16:
    var $16;
    HEAP8[$color_type] = 3;
    HEAP8[$row_info + 10 | 0] = 1;
    HEAP8[$row_info + 11 | 0] = $16;
    var $conv76 = $16 & 255;
    if (($16 & 255) > 7) {
      __label__ = 17;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 17:
    var $cond91 = ($conv76 >>> 3) * $0 | 0;
    __label__ = 19;
    break;
   case 18:
    var $cond91 = ($conv76 * $0 + 7 | 0) >>> 3;
    __label__ = 19;
    break;
   case 19:
    var $cond91;
    HEAP32[$row_info + 4 >> 2] = $cond91;
    __label__ = 23;
    break;
   case 20:
    if ($2 << 24 >> 24 != 3 | ($quantize_lookup | 0) == 0 | ($0 | 0) == 0) {
      __label__ = 23;
      break;
    } else {
      __label__ = 21;
      break;
    }
   case 21:
    var $lftr_limit22 = $row + $0 | 0;
    var $sp_218 = $row;
    __label__ = 22;
    break;
   case 22:
    var $sp_218;
    var $18 = HEAP8[$quantize_lookup + (HEAPU8[$sp_218] & 255) | 0];
    HEAP8[$sp_218] = $18;
    var $incdec_ptr108 = $sp_218 + 1 | 0;
    if (($incdec_ptr108 | 0) == ($lftr_limit22 | 0)) {
      __label__ = 23;
      break;
    } else {
      var $sp_218 = $incdec_ptr108;
      __label__ = 22;
      break;
    }
   case 23:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_do_quantize["X"] = 1;

function _png_do_expand_16($row_info, $row) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $bit_depth = $row_info + 9 | 0;
    if (HEAP8[$bit_depth] << 24 >> 24 == 8) {
      __label__ = 2;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 2:
    if (HEAP8[$row_info + 8 | 0] << 24 >> 24 == 3) {
      __label__ = 8;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $rowbytes = $row_info + 4 | 0;
    var $2 = HEAPU32[$rowbytes >> 2];
    var $add_ptr_sum = $2 << 1;
    if (($add_ptr_sum | 0) > ($2 | 0)) {
      __label__ = 4;
      break;
    } else {
      var $4 = $2;
      __label__ = 7;
      break;
    }
   case 4:
    var $sp_02 = $row + $2 | 0;
    var $dp_03 = $row + $add_ptr_sum | 0;
    __label__ = 5;
    break;
   case 5:
    var $dp_03;
    var $sp_02;
    var $incdec_ptr = $sp_02 - 1 | 0;
    var $3 = HEAP8[$incdec_ptr];
    HEAP8[$dp_03 - 1 | 0] = $3;
    var $arrayidx9 = $dp_03 - 2 | 0;
    HEAP8[$arrayidx9] = $3;
    if ($arrayidx9 >>> 0 > $incdec_ptr >>> 0) {
      var $sp_02 = $incdec_ptr;
      var $dp_03 = $arrayidx9;
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    var $4 = HEAP32[$rowbytes >> 2];
    __label__ = 7;
    break;
   case 7:
    var $4;
    HEAP32[$rowbytes >> 2] = $4 << 1;
    HEAP8[$bit_depth] = 16;
    var $mul14 = HEAP8[$row_info + 10 | 0] << 4;
    HEAP8[$row_info + 11 | 0] = $mul14;
    __label__ = 8;
    break;
   case 8:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_do_encode_alpha($row_info, $row, $png_ptr) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $0 = HEAPU32[$row_info >> 2];
    var $conv = HEAPU8[$row_info + 8 | 0] & 255;
    if (($conv & 4 | 0) == 0) {
      __label__ = 11;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $2 = HEAP8[$row_info + 9 | 0];
    if ($2 << 24 >> 24 == 8) {
      __label__ = 3;
      break;
    } else if ($2 << 24 >> 24 == 16) {
      __label__ = 7;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 3:
    var $3 = HEAPU32[$png_ptr + 368 >> 2];
    if (($3 | 0) == 0) {
      __label__ = 11;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $and9 = $conv & 2;
    var $4 = $and9 + 2 | 0;
    if (($0 | 0) == 0) {
      __label__ = 12;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $row_addr_09 = $row + ($and9 | 1) | 0;
    var $row_width_010 = $0;
    __label__ = 6;
    break;
   case 6:
    var $row_width_010;
    var $row_addr_09;
    var $6 = HEAP8[$3 + (HEAPU8[$row_addr_09] & 255) | 0];
    HEAP8[$row_addr_09] = $6;
    var $dec = $row_width_010 - 1 | 0;
    var $add_ptr13 = $row_addr_09 + $4 | 0;
    if (($dec | 0) == 0) {
      __label__ = 12;
      break;
    } else {
      var $row_addr_09 = $add_ptr13;
      var $row_width_010 = $dec;
      __label__ = 6;
      break;
    }
   case 7:
    var $7 = HEAPU32[$png_ptr + 376 >> 2];
    var $8 = HEAPU32[$png_ptr + 348 >> 2];
    if (($7 | 0) == 0) {
      __label__ = 11;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    var $9 = $conv << 1 & 4;
    var $10 = $9 + 4 | 0;
    if (($0 | 0) == 0) {
      __label__ = 12;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    var $row_addr_15 = $row + ($9 | 2) | 0;
    var $row_width_16 = $0;
    __label__ = 10;
    break;
   case 10:
    var $row_width_16;
    var $row_addr_15;
    var $add_ptr37 = $row_addr_15 + 1 | 0;
    var $14 = HEAPU16[HEAP32[$7 + ((HEAPU8[$add_ptr37] & 255) >>> ($8 >>> 0) << 2) >> 2] + ((HEAPU8[$row_addr_15] & 255) << 1) >> 1];
    HEAP8[$row_addr_15] = ($14 & 65535) >>> 8 & 255;
    HEAP8[$add_ptr37] = $14 & 255;
    var $dec50 = $row_width_16 - 1 | 0;
    var $add_ptr51 = $row_addr_15 + $10 | 0;
    if (($dec50 | 0) == 0) {
      __label__ = 12;
      break;
    } else {
      var $row_addr_15 = $add_ptr51;
      var $row_width_16 = $dec50;
      __label__ = 10;
      break;
    }
   case 11:
    var $15 = $png_ptr;
    _png_warning($15, STRING_TABLE.__str16725 | 0);
    __label__ = 12;
    break;
   case 12:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_do_encode_alpha["X"] = 1;

function _png_do_unshift($row_info, $row, $sig_bits) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 16;
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $shift = __stackBase__;
    var $0 = HEAPU8[$row_info + 8 | 0];
    var $conv = $0 & 255;
    if ($0 << 24 >> 24 == 3) {
      __label__ = 23;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $conv4 = HEAPU8[$row_info + 9 | 0] & 255;
    if (($conv & 2 | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    HEAP32[$shift >> 2] = $conv4 - (HEAPU8[$sig_bits | 0] & 255) | 0;
    HEAP32[$shift + 4 >> 2] = $conv4 - (HEAPU8[$sig_bits + 1 | 0] & 255) | 0;
    HEAP32[$shift + 8 >> 2] = $conv4 - (HEAPU8[$sig_bits + 2 | 0] & 255) | 0;
    var $channels_0 = 3;
    __label__ = 5;
    break;
   case 4:
    HEAP32[$shift >> 2] = $conv4 - (HEAPU8[$sig_bits + 3 | 0] & 255) | 0;
    var $channels_0 = 1;
    __label__ = 5;
    break;
   case 5:
    var $channels_0;
    if (($conv & 4 | 0) == 0) {
      var $channels_1 = $channels_0;
      __label__ = 7;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    HEAP32[$shift + ($channels_0 << 2) >> 2] = $conv4 - (HEAPU8[$sig_bits + 4 | 0] & 255) | 0;
    var $channels_1 = $channels_0 + 1 | 0;
    __label__ = 7;
    break;
   case 7:
    var $channels_1;
    var $have_shift_016 = 0;
    var $c_017 = 0;
    __label__ = 8;
    break;
   case 8:
    var $c_017;
    var $have_shift_016;
    var $arrayidx29 = $shift + ($c_017 << 2) | 0;
    var $7 = HEAP32[$arrayidx29 >> 2];
    if (($7 | 0) > 0 & ($7 | 0) < ($conv4 | 0)) {
      var $have_shift_1 = 1;
      __label__ = 10;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    HEAP32[$arrayidx29 >> 2] = 0;
    var $have_shift_1 = $have_shift_016;
    __label__ = 10;
    break;
   case 10:
    var $have_shift_1;
    var $inc39 = $c_017 + 1 | 0;
    if (($inc39 | 0) < ($channels_1 | 0)) {
      var $have_shift_016 = $have_shift_1;
      var $c_017 = $inc39;
      __label__ = 8;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    if (($have_shift_1 | 0) == 0) {
      __label__ = 23;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 12:
    if (($conv4 | 0) == 2) {
      __label__ = 13;
      break;
    } else if (($conv4 | 0) == 4) {
      __label__ = 15;
      break;
    } else if (($conv4 | 0) == 8) {
      __label__ = 17;
      break;
    } else if (($conv4 | 0) == 16) {
      __label__ = 20;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 13:
    var $8 = HEAP32[$row_info + 4 >> 2];
    var $add_ptr = $row + $8 | 0;
    if (($8 | 0) > 0) {
      var $bp_015 = $row;
      __label__ = 14;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 14:
    var $bp_015;
    var $incdec_ptr = $bp_015 + 1 | 0;
    HEAP8[$bp_015] = (HEAPU8[$bp_015] & 255) >>> 1 & 85;
    if ($incdec_ptr >>> 0 < $add_ptr >>> 0) {
      var $bp_015 = $incdec_ptr;
      __label__ = 14;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 15:
    var $10 = HEAPU32[$row_info + 4 >> 2];
    var $add_ptr52 = $row + $10 | 0;
    var $11 = HEAPU32[$shift >> 2];
    var $shr54 = 15 >>> ($11 >>> 0);
    var $or = $shr54 << 4 | $shr54;
    if (($10 | 0) > 0) {
      var $bp49_012 = $row;
      __label__ = 16;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 16:
    var $bp49_012;
    var $incdec_ptr64 = $bp49_012 + 1 | 0;
    HEAP8[$bp49_012] = (HEAPU8[$bp49_012] & 255) >>> ($11 >>> 0) & $or & 255;
    if ($incdec_ptr64 >>> 0 < $add_ptr52 >>> 0) {
      var $bp49_012 = $incdec_ptr64;
      __label__ = 16;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 17:
    var $13 = HEAP32[$row_info + 4 >> 2];
    var $add_ptr70 = $row + $13 | 0;
    if (($13 | 0) > 0) {
      var $bp67_08 = $row;
      var $channel_09 = 0;
      __label__ = 18;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 18:
    var $channel_09;
    var $bp67_08;
    var $inc79 = $channel_09 + 1 | 0;
    var $incdec_ptr85 = $bp67_08 + 1 | 0;
    HEAP8[$bp67_08] = (HEAPU8[$bp67_08] & 255) >>> (HEAPU32[$shift + ($channel_09 << 2) >> 2] >>> 0) & 255;
    if ($incdec_ptr85 >>> 0 < $add_ptr70 >>> 0) {
      __label__ = 19;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 19:
    var $channel_1 = ($inc79 | 0) < ($channels_1 | 0) ? $inc79 : 0;
    var $bp67_08 = $incdec_ptr85;
    var $channel_09 = $channel_1;
    __label__ = 18;
    break;
   case 20:
    var $16 = HEAP32[$row_info + 4 >> 2];
    var $add_ptr91 = $row + $16 | 0;
    if (($16 | 0) > 0) {
      var $bp88_04 = $row;
      var $channel92_05 = 0;
      __label__ = 21;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 21:
    var $channel92_05;
    var $bp88_04;
    var $arrayidx100 = $bp88_04 + 1 | 0;
    var $shr103 = ((HEAPU8[$bp88_04] & 255) << 8 | HEAPU8[$arrayidx100] & 255) >>> (HEAPU32[$shift + ($channel92_05 << 2) >> 2] >>> 0);
    var $inc104 = $channel92_05 + 1 | 0;
    HEAP8[$bp88_04] = $shr103 >>> 8 & 255;
    var $incdec_ptr114 = $bp88_04 + 2 | 0;
    HEAP8[$arrayidx100] = $shr103 & 255;
    if ($incdec_ptr114 >>> 0 < $add_ptr91 >>> 0) {
      __label__ = 22;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 22:
    var $channel92_1 = ($inc104 | 0) < ($channels_1 | 0) ? $inc104 : 0;
    var $bp88_04 = $incdec_ptr114;
    var $channel92_05 = $channel92_1;
    __label__ = 21;
    break;
   case 23:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_do_unshift["X"] = 1;

function _png_do_unpack($row_info, $row) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $bit_depth = $row_info + 9 | 0;
    var $0 = HEAPU8[$bit_depth];
    if (($0 & 255) < 8) {
      __label__ = 2;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 2:
    var $conv = $0 & 255;
    var $1 = HEAPU32[$row_info >> 2];
    if (($conv | 0) == 1) {
      __label__ = 3;
      break;
    } else if (($conv | 0) == 2) {
      __label__ = 6;
      break;
    } else if (($conv | 0) == 4) {
      __label__ = 9;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 3:
    var $sub = $1 - 1 | 0;
    if (($1 | 0) == 0) {
      __label__ = 12;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $shift_014 = $1 + 7 & 7 ^ 7;
    var $dp_015 = $row + $sub | 0;
    var $sp_016 = $row + ($sub >>> 3) | 0;
    var $i_017 = 0;
    __label__ = 5;
    break;
   case 5:
    var $i_017;
    var $sp_016;
    var $dp_015;
    var $shift_014;
    HEAP8[$dp_015] = (HEAPU8[$sp_016] & 255) >>> ($shift_014 >>> 0) & 255 & 1;
    var $cmp13 = ($shift_014 | 0) == 7;
    var $shift_1 = $cmp13 ? 0 : $shift_014 + 1 | 0;
    var $sp_1 = $cmp13 ? $sp_016 - 1 | 0 : $sp_016;
    var $inc17 = $i_017 + 1 | 0;
    if (($inc17 | 0) == ($1 | 0)) {
      __label__ = 12;
      break;
    } else {
      var $shift_014 = $shift_1;
      var $dp_015 = $dp_015 - 1 | 0;
      var $sp_016 = $sp_1;
      var $i_017 = $inc17;
      __label__ = 5;
      break;
    }
   case 6:
    var $sub20 = $1 - 1 | 0;
    if (($1 | 0) == 0) {
      __label__ = 12;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    var $shift26_08 = ($1 << 1) + 6 & 6 ^ 6;
    var $dp23_09 = $row + $sub20 | 0;
    var $sp19_010 = $row + ($sub20 >>> 2) | 0;
    var $i_111 = 0;
    __label__ = 8;
    break;
   case 8:
    var $i_111;
    var $sp19_010;
    var $dp23_09;
    var $shift26_08;
    HEAP8[$dp23_09] = (HEAPU8[$sp19_010] & 255) >>> ($shift26_08 >>> 0) & 255 & 3;
    var $cmp38 = ($shift26_08 | 0) == 6;
    var $shift26_1 = $cmp38 ? 0 : $shift26_08 + 2 | 0;
    var $sp19_1 = $cmp38 ? $sp19_010 - 1 | 0 : $sp19_010;
    var $inc47 = $i_111 + 1 | 0;
    if (($inc47 | 0) == ($1 | 0)) {
      __label__ = 12;
      break;
    } else {
      var $shift26_08 = $shift26_1;
      var $dp23_09 = $dp23_09 - 1 | 0;
      var $sp19_010 = $sp19_1;
      var $i_111 = $inc47;
      __label__ = 8;
      break;
    }
   case 9:
    var $sub51 = $1 - 1 | 0;
    if (($1 | 0) == 0) {
      __label__ = 12;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 10:
    var $sp50_02 = $row + ($sub51 >>> 1) | 0;
    var $i_23 = 0;
    var $dp54_04 = $row + $sub51 | 0;
    var $shift57_05 = 1 - ($1 & 1 ^ 1) << 2;
    __label__ = 11;
    break;
   case 11:
    var $shift57_05;
    var $dp54_04;
    var $i_23;
    var $sp50_02;
    HEAP8[$dp54_04] = (HEAPU8[$sp50_02] & 255) >>> ($shift57_05 >>> 0) & 255 & 15;
    var $cmp70 = ($shift57_05 | 0) == 4;
    var $sp50_1 = $cmp70 ? $sp50_02 - 1 | 0 : $sp50_02;
    var $shift57_1 = $cmp70 ? 0 : 4;
    var $inc78 = $i_23 + 1 | 0;
    if (($inc78 | 0) == ($1 | 0)) {
      __label__ = 12;
      break;
    } else {
      var $sp50_02 = $sp50_1;
      var $i_23 = $inc78;
      var $dp54_04 = $dp54_04 - 1 | 0;
      var $shift57_05 = $shift57_1;
      __label__ = 11;
      break;
    }
   case 12:
    HEAP8[$bit_depth] = 8;
    var $5 = HEAPU8[$row_info + 10 | 0];
    HEAP8[$row_info + 11 | 0] = $5 << 3;
    HEAP32[$row_info + 4 >> 2] = ($5 & 255) * $1 | 0;
    __label__ = 13;
    break;
   case 13:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_do_unpack["X"] = 1;

function _png_do_read_filler($row_info, $row, $filler, $flags) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $0 = HEAPU32[$row_info >> 2];
    var $conv = $filler >>> 8 & 255;
    var $conv2 = $filler & 255;
    var $1 = HEAP8[$row_info + 8 | 0];
    if ($1 << 24 >> 24 == 0) {
      __label__ = 2;
      break;
    } else if ($1 << 24 >> 24 == 2) {
      __label__ = 17;
      break;
    } else {
      __label__ = 32;
      break;
    }
   case 2:
    var $2 = HEAP8[$row_info + 9 | 0];
    if ($2 << 24 >> 24 == 8) {
      __label__ = 3;
      break;
    } else if ($2 << 24 >> 24 == 16) {
      __label__ = 10;
      break;
    } else {
      __label__ = 32;
      break;
    }
   case 3:
    var $add_ptr = $row + $0 | 0;
    var $add_ptr_sum = $0 << 1;
    var $add_ptr20 = $row + $add_ptr_sum | 0;
    if (($flags & 128 | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 4:
    if (($0 | 0) == 0) {
      __label__ = 9;
      break;
    } else {
      var $dp19_040 = $add_ptr20;
      var $sp17_041 = $add_ptr;
      var $i_142 = 0;
      __label__ = 8;
      break;
    }
   case 5:
    var $cmp1234 = $0 >>> 0 > 1;
    HEAP8[$row + ($add_ptr_sum - 1) | 0] = $conv2;
    if ($cmp1234) {
      var $dp_036 = $add_ptr20;
      var $sp_037 = $add_ptr;
      var $i_038 = 1;
      __label__ = 6;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 6:
    var $i_038;
    var $sp_037;
    var $dp_036;
    var $incdec_ptr14 = $sp_037 - 1 | 0;
    var $3 = HEAP8[$incdec_ptr14];
    var $incdec_ptr15 = $dp_036 - 2 | 0;
    HEAP8[$incdec_ptr15] = $3;
    var $inc = $i_038 + 1 | 0;
    HEAP8[$dp_036 - 3 | 0] = $conv2;
    if (($inc | 0) == ($0 | 0)) {
      __label__ = 7;
      break;
    } else {
      var $dp_036 = $incdec_ptr15;
      var $sp_037 = $incdec_ptr14;
      var $i_038 = $inc;
      __label__ = 6;
      break;
    }
   case 7:
    HEAP8[$row_info + 10 | 0] = 2;
    HEAP8[$row_info + 11 | 0] = 16;
    HEAP32[$row_info + 4 >> 2] = $add_ptr_sum;
    __label__ = 32;
    break;
   case 8:
    var $i_142;
    var $sp17_041;
    var $dp19_040;
    var $incdec_ptr25 = $sp17_041 - 1 | 0;
    var $4 = HEAP8[$incdec_ptr25];
    HEAP8[$dp19_040 - 1 | 0] = $4;
    var $incdec_ptr27 = $dp19_040 - 2 | 0;
    HEAP8[$incdec_ptr27] = $conv2;
    var $inc29 = $i_142 + 1 | 0;
    if (($inc29 | 0) == ($0 | 0)) {
      __label__ = 9;
      break;
    } else {
      var $dp19_040 = $incdec_ptr27;
      var $sp17_041 = $incdec_ptr25;
      var $i_142 = $inc29;
      __label__ = 8;
      break;
    }
   case 9:
    HEAP8[$row_info + 10 | 0] = 2;
    HEAP8[$row_info + 11 | 0] = 16;
    HEAP32[$row_info + 4 >> 2] = $add_ptr_sum;
    __label__ = 32;
    break;
   case 10:
    var $add_ptr46 = $row + ($0 << 1) | 0;
    var $add_ptr46_sum = $0 << 2;
    var $add_ptr75 = $row + $add_ptr46_sum | 0;
    if (($flags & 128 | 0) == 0) {
      __label__ = 11;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 11:
    if (($0 | 0) == 0) {
      __label__ = 16;
      break;
    } else {
      var $dp73_031 = $add_ptr75;
      var $sp70_032 = $add_ptr46;
      var $i_333 = 0;
      __label__ = 15;
      break;
    }
   case 12:
    var $cmp5124 = $0 >>> 0 > 1;
    HEAP8[$row + ($add_ptr46_sum - 1) | 0] = $conv;
    HEAP8[$row + ($add_ptr46_sum - 2) | 0] = $conv2;
    if ($cmp5124) {
      var $dp47_027 = $add_ptr75;
      var $sp44_028 = $add_ptr46;
      var $i_229 = 1;
      __label__ = 13;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 13:
    var $i_229;
    var $sp44_028;
    var $dp47_027;
    var $5 = HEAP8[$sp44_028 - 1 | 0];
    HEAP8[$dp47_027 - 3 | 0] = $5;
    var $incdec_ptr58 = $sp44_028 - 2 | 0;
    var $6 = HEAP8[$incdec_ptr58];
    var $incdec_ptr59 = $dp47_027 - 4 | 0;
    HEAP8[$incdec_ptr59] = $6;
    var $inc61 = $i_229 + 1 | 0;
    HEAP8[$dp47_027 - 5 | 0] = $conv;
    HEAP8[$dp47_027 - 6 | 0] = $conv2;
    if (($inc61 | 0) == ($0 | 0)) {
      __label__ = 14;
      break;
    } else {
      var $dp47_027 = $incdec_ptr59;
      var $sp44_028 = $incdec_ptr58;
      var $i_229 = $inc61;
      __label__ = 13;
      break;
    }
   case 14:
    HEAP8[$row_info + 10 | 0] = 2;
    HEAP8[$row_info + 11 | 0] = 32;
    HEAP32[$row_info + 4 >> 2] = $add_ptr46_sum;
    __label__ = 32;
    break;
   case 15:
    var $i_333;
    var $sp70_032;
    var $dp73_031;
    var $7 = HEAP8[$sp70_032 - 1 | 0];
    HEAP8[$dp73_031 - 1 | 0] = $7;
    var $incdec_ptr82 = $sp70_032 - 2 | 0;
    var $8 = HEAP8[$incdec_ptr82];
    HEAP8[$dp73_031 - 2 | 0] = $8;
    HEAP8[$dp73_031 - 3 | 0] = $conv;
    var $incdec_ptr85 = $dp73_031 - 4 | 0;
    HEAP8[$incdec_ptr85] = $conv2;
    var $inc87 = $i_333 + 1 | 0;
    if (($inc87 | 0) == ($0 | 0)) {
      __label__ = 16;
      break;
    } else {
      var $dp73_031 = $incdec_ptr85;
      var $sp70_032 = $incdec_ptr82;
      var $i_333 = $inc87;
      __label__ = 15;
      break;
    }
   case 16:
    HEAP8[$row_info + 10 | 0] = 2;
    HEAP8[$row_info + 11 | 0] = 32;
    HEAP32[$row_info + 4 >> 2] = $add_ptr46_sum;
    __label__ = 32;
    break;
   case 17:
    var $9 = HEAP8[$row_info + 9 | 0];
    if ($9 << 24 >> 24 == 8) {
      __label__ = 18;
      break;
    } else if ($9 << 24 >> 24 == 16) {
      __label__ = 25;
      break;
    } else {
      __label__ = 32;
      break;
    }
   case 18:
    var $mul111 = $0 * 3 | 0;
    var $add_ptr112 = $row + $mul111 | 0;
    var $add_ptr112_sum = $mul111 + $0 | 0;
    var $add_ptr139 = $row + $add_ptr112_sum | 0;
    if (($flags & 128 | 0) == 0) {
      __label__ = 19;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 19:
    if (($0 | 0) == 0) {
      __label__ = 24;
      break;
    } else {
      var $sp135_021 = $add_ptr112;
      var $dp138_022 = $add_ptr139;
      var $i_523 = 0;
      __label__ = 23;
      break;
    }
   case 20:
    var $cmp11615 = $0 >>> 0 > 1;
    HEAP8[$row + ($add_ptr112_sum - 1) | 0] = $conv2;
    if ($cmp11615) {
      var $sp110_017 = $add_ptr112;
      var $dp113_018 = $add_ptr139;
      var $i_419 = 1;
      __label__ = 21;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 21:
    var $i_419;
    var $dp113_018;
    var $sp110_017;
    var $10 = HEAP8[$sp110_017 - 1 | 0];
    HEAP8[$dp113_018 - 2 | 0] = $10;
    var $11 = HEAP8[$sp110_017 - 2 | 0];
    HEAP8[$dp113_018 - 3 | 0] = $11;
    var $incdec_ptr124 = $sp110_017 - 3 | 0;
    var $12 = HEAP8[$incdec_ptr124];
    var $incdec_ptr125 = $dp113_018 - 4 | 0;
    HEAP8[$incdec_ptr125] = $12;
    var $inc127 = $i_419 + 1 | 0;
    HEAP8[$dp113_018 - 5 | 0] = $conv2;
    if (($inc127 | 0) == ($0 | 0)) {
      __label__ = 22;
      break;
    } else {
      var $sp110_017 = $incdec_ptr124;
      var $dp113_018 = $incdec_ptr125;
      var $i_419 = $inc127;
      __label__ = 21;
      break;
    }
   case 22:
    HEAP8[$row_info + 10 | 0] = 4;
    HEAP8[$row_info + 11 | 0] = 32;
    HEAP32[$row_info + 4 >> 2] = $0 << 2;
    __label__ = 32;
    break;
   case 23:
    var $i_523;
    var $dp138_022;
    var $sp135_021;
    var $13 = HEAP8[$sp135_021 - 1 | 0];
    HEAP8[$dp138_022 - 1 | 0] = $13;
    var $14 = HEAP8[$sp135_021 - 2 | 0];
    HEAP8[$dp138_022 - 2 | 0] = $14;
    var $incdec_ptr148 = $sp135_021 - 3 | 0;
    var $15 = HEAP8[$incdec_ptr148];
    HEAP8[$dp138_022 - 3 | 0] = $15;
    var $incdec_ptr150 = $dp138_022 - 4 | 0;
    HEAP8[$incdec_ptr150] = $conv2;
    var $inc152 = $i_523 + 1 | 0;
    if (($inc152 | 0) == ($0 | 0)) {
      __label__ = 24;
      break;
    } else {
      var $sp135_021 = $incdec_ptr148;
      var $dp138_022 = $incdec_ptr150;
      var $i_523 = $inc152;
      __label__ = 23;
      break;
    }
   case 24:
    HEAP8[$row_info + 10 | 0] = 4;
    HEAP8[$row_info + 11 | 0] = 32;
    HEAP32[$row_info + 4 >> 2] = $0 << 2;
    __label__ = 32;
    break;
   case 25:
    var $mul169 = $0 * 6 | 0;
    var $add_ptr170 = $row + $mul169 | 0;
    var $add_ptr170_sum = $mul169 + ($0 << 1) | 0;
    var $add_ptr207 = $row + $add_ptr170_sum | 0;
    if (($flags & 128 | 0) == 0) {
      __label__ = 26;
      break;
    } else {
      __label__ = 27;
      break;
    }
   case 26:
    if (($0 | 0) == 0) {
      __label__ = 31;
      break;
    } else {
      var $i_712 = 0;
      var $sp202_013 = $add_ptr170;
      var $dp205_014 = $add_ptr207;
      __label__ = 30;
      break;
    }
   case 27:
    var $cmp1755 = $0 >>> 0 > 1;
    HEAP8[$row + ($add_ptr170_sum - 1) | 0] = $conv;
    HEAP8[$row + ($add_ptr170_sum - 2) | 0] = $conv2;
    if ($cmp1755) {
      var $i_68 = 1;
      var $sp168_09 = $add_ptr170;
      var $dp171_010 = $add_ptr207;
      __label__ = 28;
      break;
    } else {
      __label__ = 29;
      break;
    }
   case 28:
    var $dp171_010;
    var $sp168_09;
    var $i_68;
    var $16 = HEAP8[$sp168_09 - 1 | 0];
    HEAP8[$dp171_010 - 3 | 0] = $16;
    var $17 = HEAP8[$sp168_09 - 2 | 0];
    HEAP8[$dp171_010 - 4 | 0] = $17;
    var $18 = HEAP8[$sp168_09 - 3 | 0];
    HEAP8[$dp171_010 - 5 | 0] = $18;
    var $19 = HEAP8[$sp168_09 - 4 | 0];
    HEAP8[$dp171_010 - 6 | 0] = $19;
    var $20 = HEAP8[$sp168_09 - 5 | 0];
    HEAP8[$dp171_010 - 7 | 0] = $20;
    var $incdec_ptr190 = $sp168_09 - 6 | 0;
    var $21 = HEAP8[$incdec_ptr190];
    var $incdec_ptr191 = $dp171_010 - 8 | 0;
    HEAP8[$incdec_ptr191] = $21;
    var $inc193 = $i_68 + 1 | 0;
    HEAP8[$dp171_010 - 9 | 0] = $conv;
    HEAP8[$dp171_010 - 10 | 0] = $conv2;
    if (($inc193 | 0) == ($0 | 0)) {
      __label__ = 29;
      break;
    } else {
      var $i_68 = $inc193;
      var $sp168_09 = $incdec_ptr190;
      var $dp171_010 = $incdec_ptr191;
      __label__ = 28;
      break;
    }
   case 29:
    HEAP8[$row_info + 10 | 0] = 4;
    HEAP8[$row_info + 11 | 0] = 64;
    HEAP32[$row_info + 4 >> 2] = $0 << 3;
    __label__ = 32;
    break;
   case 30:
    var $dp205_014;
    var $sp202_013;
    var $i_712;
    var $22 = HEAP8[$sp202_013 - 1 | 0];
    HEAP8[$dp205_014 - 1 | 0] = $22;
    var $23 = HEAP8[$sp202_013 - 2 | 0];
    HEAP8[$dp205_014 - 2 | 0] = $23;
    var $24 = HEAP8[$sp202_013 - 3 | 0];
    HEAP8[$dp205_014 - 3 | 0] = $24;
    var $25 = HEAP8[$sp202_013 - 4 | 0];
    HEAP8[$dp205_014 - 4 | 0] = $25;
    var $26 = HEAP8[$sp202_013 - 5 | 0];
    HEAP8[$dp205_014 - 5 | 0] = $26;
    var $incdec_ptr222 = $sp202_013 - 6 | 0;
    var $27 = HEAP8[$incdec_ptr222];
    HEAP8[$dp205_014 - 6 | 0] = $27;
    HEAP8[$dp205_014 - 7 | 0] = $conv;
    var $incdec_ptr225 = $dp205_014 - 8 | 0;
    HEAP8[$incdec_ptr225] = $conv2;
    var $inc227 = $i_712 + 1 | 0;
    if (($inc227 | 0) == ($0 | 0)) {
      __label__ = 31;
      break;
    } else {
      var $i_712 = $inc227;
      var $sp202_013 = $incdec_ptr222;
      var $dp205_014 = $incdec_ptr225;
      __label__ = 30;
      break;
    }
   case 31:
    HEAP8[$row_info + 10 | 0] = 4;
    HEAP8[$row_info + 11 | 0] = 64;
    HEAP32[$row_info + 4 >> 2] = $0 << 3;
    __label__ = 32;
    break;
   case 32:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_do_read_filler["X"] = 1;

function _png_do_read_invert_alpha($row_info, $row) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $0 = HEAP32[$row_info >> 2];
    var $1 = HEAP8[$row_info + 8 | 0];
    if ($1 << 24 >> 24 == 6) {
      __label__ = 2;
      break;
    } else if ($1 << 24 >> 24 == 4) {
      __label__ = 7;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 2:
    var $add_ptr = $row + HEAP32[$row_info + 4 >> 2] | 0;
    var $cmp614 = ($0 | 0) == 0;
    if (HEAP8[$row_info + 9 | 0] << 24 >> 24 == 8) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    if ($cmp614) {
      __label__ = 12;
      break;
    } else {
      var $i_015 = 0;
      var $dp_016 = $add_ptr;
      __label__ = 5;
      break;
    }
   case 4:
    if ($cmp614) {
      __label__ = 12;
      break;
    } else {
      var $i16_011 = 0;
      var $dp15_012 = $add_ptr;
      __label__ = 6;
      break;
    }
   case 5:
    var $dp_016;
    var $i_015;
    var $incdec_ptr = $dp_016 - 1 | 0;
    var $sub = HEAP8[$incdec_ptr] ^ -1;
    HEAP8[$incdec_ptr] = $sub;
    var $inc = $i_015 + 1 | 0;
    if (($inc | 0) == ($0 | 0)) {
      __label__ = 12;
      break;
    } else {
      var $i_015 = $inc;
      var $dp_016 = $dp_016 - 4 | 0;
      __label__ = 5;
      break;
    }
   case 6:
    var $dp15_012;
    var $i16_011;
    var $incdec_ptr21 = $dp15_012 - 1 | 0;
    var $sub23 = HEAP8[$incdec_ptr21] ^ -1;
    HEAP8[$incdec_ptr21] = $sub23;
    var $incdec_ptr26 = $dp15_012 - 2 | 0;
    var $sub28 = HEAP8[$incdec_ptr26] ^ -1;
    HEAP8[$incdec_ptr26] = $sub28;
    var $inc33 = $i16_011 + 1 | 0;
    if (($inc33 | 0) == ($0 | 0)) {
      __label__ = 12;
      break;
    } else {
      var $i16_011 = $inc33;
      var $dp15_012 = $dp15_012 - 8 | 0;
      __label__ = 6;
      break;
    }
   case 7:
    var $add_ptr48 = $row + HEAP32[$row_info + 4 >> 2] | 0;
    var $cmp525 = ($0 | 0) == 0;
    if (HEAP8[$row_info + 9 | 0] << 24 >> 24 == 8) {
      __label__ = 8;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 8:
    if ($cmp525) {
      __label__ = 12;
      break;
    } else {
      var $i50_06 = 0;
      var $sp46_08 = $add_ptr48;
      __label__ = 10;
      break;
    }
   case 9:
    if ($cmp525) {
      __label__ = 12;
      break;
    } else {
      var $sp66_02 = $add_ptr48;
      var $i70_03 = 0;
      __label__ = 11;
      break;
    }
   case 10:
    var $sp46_08;
    var $i50_06;
    var $incdec_ptr55 = $sp46_08 - 1 | 0;
    var $sub57 = HEAP8[$incdec_ptr55] ^ -1;
    HEAP8[$incdec_ptr55] = $sub57;
    var $inc63 = $i50_06 + 1 | 0;
    if (($inc63 | 0) == ($0 | 0)) {
      __label__ = 12;
      break;
    } else {
      var $i50_06 = $inc63;
      var $sp46_08 = $sp46_08 - 2 | 0;
      __label__ = 10;
      break;
    }
   case 11:
    var $i70_03;
    var $sp66_02;
    var $incdec_ptr75 = $sp66_02 - 1 | 0;
    var $sub77 = HEAP8[$incdec_ptr75] ^ -1;
    HEAP8[$incdec_ptr75] = $sub77;
    var $incdec_ptr80 = $sp66_02 - 2 | 0;
    var $sub82 = HEAP8[$incdec_ptr80] ^ -1;
    HEAP8[$incdec_ptr80] = $sub82;
    var $inc87 = $i70_03 + 1 | 0;
    if (($inc87 | 0) == ($0 | 0)) {
      __label__ = 12;
      break;
    } else {
      var $sp66_02 = $sp66_02 - 4 | 0;
      var $i70_03 = $inc87;
      __label__ = 11;
      break;
    }
   case 12:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_do_read_invert_alpha["X"] = 1;

function _png_do_read_swap_alpha($row_info, $row) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $0 = HEAP32[$row_info >> 2];
    var $1 = HEAP8[$row_info + 8 | 0];
    if ($1 << 24 >> 24 == 6) {
      __label__ = 2;
      break;
    } else if ($1 << 24 >> 24 == 4) {
      __label__ = 7;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 2:
    var $add_ptr = $row + HEAP32[$row_info + 4 >> 2] | 0;
    var $cmp616 = ($0 | 0) == 0;
    if (HEAP8[$row_info + 9 | 0] << 24 >> 24 == 8) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    if ($cmp616) {
      __label__ = 12;
      break;
    } else {
      var $i_017 = 0;
      var $sp_019 = $add_ptr;
      __label__ = 5;
      break;
    }
   case 4:
    if ($cmp616) {
      __label__ = 12;
      break;
    } else {
      var $i20_012 = 0;
      var $sp15_014 = $add_ptr;
      __label__ = 6;
      break;
    }
   case 5:
    var $sp_019;
    var $i_017;
    var $incdec_ptr = $sp_019 - 1 | 0;
    var $4 = HEAP8[$incdec_ptr];
    var $incdec_ptr8 = $sp_019 - 2 | 0;
    var $5 = HEAP8[$incdec_ptr8];
    HEAP8[$incdec_ptr] = $5;
    var $incdec_ptr10 = $sp_019 - 3 | 0;
    var $6 = HEAP8[$incdec_ptr10];
    HEAP8[$incdec_ptr8] = $6;
    var $incdec_ptr12 = $sp_019 - 4 | 0;
    var $7 = HEAP8[$incdec_ptr12];
    HEAP8[$incdec_ptr10] = $7;
    HEAP8[$incdec_ptr12] = $4;
    var $inc = $i_017 + 1 | 0;
    if (($inc | 0) == ($0 | 0)) {
      __label__ = 12;
      break;
    } else {
      var $i_017 = $inc;
      var $sp_019 = $incdec_ptr12;
      __label__ = 5;
      break;
    }
   case 6:
    var $sp15_014;
    var $i20_012;
    var $incdec_ptr25 = $sp15_014 - 1 | 0;
    var $8 = HEAP8[$incdec_ptr25];
    var $incdec_ptr26 = $sp15_014 - 2 | 0;
    var $9 = HEAP8[$incdec_ptr26];
    var $incdec_ptr28 = $sp15_014 - 3 | 0;
    var $10 = HEAP8[$incdec_ptr28];
    HEAP8[$incdec_ptr25] = $10;
    var $incdec_ptr30 = $sp15_014 - 4 | 0;
    var $11 = HEAP8[$incdec_ptr30];
    HEAP8[$incdec_ptr26] = $11;
    var $incdec_ptr32 = $sp15_014 - 5 | 0;
    var $12 = HEAP8[$incdec_ptr32];
    HEAP8[$incdec_ptr28] = $12;
    var $incdec_ptr34 = $sp15_014 - 6 | 0;
    var $13 = HEAP8[$incdec_ptr34];
    HEAP8[$incdec_ptr30] = $13;
    var $incdec_ptr36 = $sp15_014 - 7 | 0;
    var $14 = HEAP8[$incdec_ptr36];
    HEAP8[$incdec_ptr32] = $14;
    var $incdec_ptr38 = $sp15_014 - 8 | 0;
    var $15 = HEAP8[$incdec_ptr38];
    HEAP8[$incdec_ptr34] = $15;
    HEAP8[$incdec_ptr36] = $8;
    HEAP8[$incdec_ptr38] = $9;
    var $inc45 = $i20_012 + 1 | 0;
    if (($inc45 | 0) == ($0 | 0)) {
      __label__ = 12;
      break;
    } else {
      var $i20_012 = $inc45;
      var $sp15_014 = $incdec_ptr38;
      __label__ = 6;
      break;
    }
   case 7:
    var $add_ptr60 = $row + HEAP32[$row_info + 4 >> 2] | 0;
    var $cmp656 = ($0 | 0) == 0;
    if (HEAP8[$row_info + 9 | 0] << 24 >> 24 == 8) {
      __label__ = 8;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 8:
    if ($cmp656) {
      __label__ = 12;
      break;
    } else {
      var $sp58_08 = $add_ptr60;
      var $i63_09 = 0;
      __label__ = 10;
      break;
    }
   case 9:
    if ($cmp656) {
      __label__ = 12;
      break;
    } else {
      var $dp79_03 = $add_ptr60;
      var $i81_04 = 0;
      __label__ = 11;
      break;
    }
   case 10:
    var $i63_09;
    var $sp58_08;
    var $incdec_ptr68 = $sp58_08 - 1 | 0;
    var $18 = HEAP8[$incdec_ptr68];
    var $incdec_ptr69 = $sp58_08 - 2 | 0;
    var $19 = HEAP8[$incdec_ptr69];
    HEAP8[$incdec_ptr68] = $19;
    HEAP8[$incdec_ptr69] = $18;
    var $inc73 = $i63_09 + 1 | 0;
    if (($inc73 | 0) == ($0 | 0)) {
      __label__ = 12;
      break;
    } else {
      var $sp58_08 = $incdec_ptr69;
      var $i63_09 = $inc73;
      __label__ = 10;
      break;
    }
   case 11:
    var $i81_04;
    var $dp79_03;
    var $incdec_ptr86 = $dp79_03 - 1 | 0;
    var $20 = HEAP8[$incdec_ptr86];
    var $incdec_ptr88 = $dp79_03 - 2 | 0;
    var $21 = HEAP8[$incdec_ptr88];
    var $incdec_ptr90 = $dp79_03 - 3 | 0;
    var $22 = HEAP8[$incdec_ptr90];
    HEAP8[$incdec_ptr86] = $22;
    var $incdec_ptr97 = $dp79_03 - 4 | 0;
    var $23 = HEAP8[$incdec_ptr97];
    HEAP8[$incdec_ptr88] = $23;
    HEAP8[$incdec_ptr90] = $20;
    HEAP8[$incdec_ptr97] = $21;
    var $inc99 = $i81_04 + 1 | 0;
    if (($inc99 | 0) == ($0 | 0)) {
      __label__ = 12;
      break;
    } else {
      var $dp79_03 = $incdec_ptr97;
      var $i81_04 = $inc99;
      __label__ = 11;
      break;
    }
   case 12:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_do_read_swap_alpha["X"] = 1;

function _png_do_read_intrapixel($row_info_0_0_val, $row_info_0_2_val, $row_info_0_3_val, $row) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($row_info_0_2_val & 2) << 24 >> 24 == 0) {
      __label__ = 11;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    if ($row_info_0_3_val << 24 >> 24 == 8) {
      __label__ = 3;
      break;
    } else if ($row_info_0_3_val << 24 >> 24 == 16) {
      __label__ = 7;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 3:
    if ($row_info_0_2_val << 24 >> 24 == 6) {
      __label__ = 4;
      break;
    } else if ($row_info_0_2_val << 24 >> 24 == 2) {
      var $bytes_per_pixel_0 = 3;
      __label__ = 5;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 4:
    var $bytes_per_pixel_0 = 4;
    __label__ = 5;
    break;
   case 5:
    var $bytes_per_pixel_0;
    if (($row_info_0_0_val | 0) == 0) {
      __label__ = 11;
      break;
    } else {
      var $rp_08 = $row;
      var $i_09 = 0;
      __label__ = 6;
      break;
    }
   case 6:
    var $i_09;
    var $rp_08;
    var $1 = HEAP8[$rp_08 + 1 | 0];
    var $add20 = $1 + HEAP8[$rp_08] & 255;
    HEAP8[$rp_08] = $add20;
    var $add_ptr23 = $rp_08 + 2 | 0;
    var $add28 = $1 + HEAP8[$add_ptr23] & 255;
    HEAP8[$add_ptr23] = $add28;
    var $inc = $i_09 + 1 | 0;
    if (($inc | 0) == ($row_info_0_0_val | 0)) {
      __label__ = 11;
      break;
    } else {
      var $rp_08 = $rp_08 + $bytes_per_pixel_0 | 0;
      var $i_09 = $inc;
      __label__ = 6;
      break;
    }
   case 7:
    if ($row_info_0_2_val << 24 >> 24 == 6) {
      __label__ = 8;
      break;
    } else if ($row_info_0_2_val << 24 >> 24 == 2) {
      var $bytes_per_pixel_1 = 6;
      __label__ = 9;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 8:
    var $bytes_per_pixel_1 = 8;
    __label__ = 9;
    break;
   case 9:
    var $bytes_per_pixel_1;
    if (($row_info_0_0_val | 0) == 0) {
      __label__ = 11;
      break;
    } else {
      var $rp39_04 = $row;
      var $i40_05 = 0;
      __label__ = 10;
      break;
    }
   case 10:
    var $i40_05;
    var $rp39_04;
    var $add_ptr60 = $rp39_04 + 1 | 0;
    var $or67 = (HEAPU8[$rp39_04 + 2 | 0] & 255) << 8 | HEAPU8[$rp39_04 + 3 | 0] & 255;
    var $add_ptr68 = $rp39_04 + 4 | 0;
    var $add_ptr71 = $rp39_04 + 5 | 0;
    var $add75 = $or67 + ((HEAPU8[$rp39_04] & 255) << 8 | HEAPU8[$add_ptr60] & 255) | 0;
    var $add78 = ((HEAPU8[$add_ptr68] & 255) << 8 | HEAPU8[$add_ptr71] & 255) + $or67 | 0;
    HEAP8[$rp39_04] = $add75 >>> 8 & 255;
    HEAP8[$add_ptr60] = $add75 & 255;
    HEAP8[$add_ptr68] = $add78 >>> 8 & 255;
    HEAP8[$add_ptr71] = $add78 & 255;
    var $inc93 = $i40_05 + 1 | 0;
    if (($inc93 | 0) == ($row_info_0_0_val | 0)) {
      __label__ = 11;
      break;
    } else {
      var $rp39_04 = $rp39_04 + $bytes_per_pixel_1 | 0;
      var $i40_05 = $inc93;
      __label__ = 10;
      break;
    }
   case 11:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_do_read_intrapixel["X"] = 1;

function _png_get_uint_31($png_ptr, $buf) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $add9 = (HEAPU8[$buf + 1 | 0] & 255) << 16 | (HEAPU8[$buf] & 255) << 24 | HEAPU8[$buf + 3 | 0] & 255 | (HEAPU8[$buf + 2 | 0] & 255) << 8;
    if (($add9 | 0) < 0) {
      __label__ = 2;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 2:
    var $4 = $png_ptr;
    _png_error($4, STRING_TABLE.__str749 | 0);
    __label__ = 3;
    break;
   case 3:
    return $add9;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_read_sig($png_ptr, $info_ptr) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $sig_bytes = $png_ptr + 297 | 0;
    var $0 = HEAPU8[$sig_bytes];
    var $conv = $0 & 255;
    if (($0 & 255) > 7) {
      __label__ = 9;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $sub = 8 - $conv | 0;
    HEAP32[$png_ptr + 660 >> 2] = 17;
    var $arrayidx = $info_ptr + ($conv + 32) | 0;
    var $1 = $png_ptr;
    _png_read_data($1, $arrayidx, $sub);
    HEAP8[$sig_bytes] = 8;
    var $arraydecay = $info_ptr + 32 | 0;
    var $call = _png_sig_cmp($arraydecay, $conv, $sub);
    if (($call | 0) == 0) {
      __label__ = 7;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    if (($0 & 255) < 4) {
      __label__ = 4;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 4:
    var $sub11 = $sub - 4 | 0;
    var $call12 = _png_sig_cmp($arraydecay, $conv, $sub11);
    if (($call12 | 0) == 0) {
      __label__ = 6;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $2 = $png_ptr;
    _png_error($2, STRING_TABLE.__str1750 | 0);
    __label__ = 7;
    break;
   case 6:
    var $3 = $png_ptr;
    _png_error($3, STRING_TABLE.__str2751 | 0);
    __label__ = 7;
    break;
   case 7:
    if (($0 & 255) < 3) {
      __label__ = 8;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 8:
    var $mode = $png_ptr + 84 | 0;
    var $or = HEAP32[$mode >> 2] | 4096;
    HEAP32[$mode >> 2] = $or;
    __label__ = 9;
    break;
   case 9:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_read_chunk_header($png_ptr) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 8;
  var $buf = __stackBase__;
  var $io_state = $png_ptr + 660 | 0;
  HEAP32[$io_state >> 2] = 33;
  var $arraydecay = $buf | 0;
  var $0 = $png_ptr;
  _png_read_data($0, $arraydecay, 8);
  var $call = _png_get_uint_31($png_ptr, $arraydecay);
  var $add_ptr = $buf + 4 | 0;
  var $chunk_name = $png_ptr + 232 | 0;
  HEAP32[$chunk_name >> 2] = (HEAPU8[$buf + 5 | 0] & 255) << 16 | (HEAPU8[$add_ptr] & 255) << 24 | HEAPU8[$buf + 7 | 0] & 255 | (HEAPU8[$buf + 6 | 0] & 255) << 8;
  _png_reset_crc($png_ptr);
  _png_calculate_crc($png_ptr, $add_ptr, 4);
  var $5 = HEAP32[$chunk_name >> 2];
  _png_check_chunk_name($png_ptr, $5);
  HEAP32[$io_state >> 2] = 65;
  STACKTOP = __stackBase__;
  return $call;
}

function _png_check_chunk_name($png_ptr, $chunk_name) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $0 = $png_ptr;
    var $and = $chunk_name & 255;
    if (($and - 65 | 0) >>> 0 > 57 | ($and - 91 | 0) >>> 0 < 6) {
      __label__ = 2;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 2:
    _png_chunk_error($0, STRING_TABLE.__str133882 | 0);
    __label__ = 3;
    break;
   case 3:
    var $and_1 = $chunk_name >>> 8 & 255;
    if (($and_1 - 65 | 0) >>> 0 > 57 | ($and_1 - 91 | 0) >>> 0 < 6) {
      __label__ = 4;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 4:
    _png_chunk_error($0, STRING_TABLE.__str133882 | 0);
    __label__ = 5;
    break;
   case 5:
    var $and_2 = $chunk_name >>> 16 & 255;
    if (($and_2 - 65 | 0) >>> 0 > 57 | ($and_2 - 91 | 0) >>> 0 < 6) {
      __label__ = 6;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 6:
    _png_chunk_error($0, STRING_TABLE.__str133882 | 0);
    __label__ = 7;
    break;
   case 7:
    var $shr_2 = $chunk_name >>> 24;
    if (($shr_2 - 65 | 0) >>> 0 > 57 | ($shr_2 - 91 | 0) >>> 0 < 6) {
      __label__ = 8;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 8:
    _png_chunk_error($0, STRING_TABLE.__str133882 | 0);
    __label__ = 9;
    break;
   case 9:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_crc_read($png_ptr, $buf, $length) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $0 = $png_ptr;
    _png_read_data($0, $buf, $length);
    _png_calculate_crc($png_ptr, $buf, $length);
    __label__ = 3;
    break;
   case 3:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_crc_finish($png_ptr, $skip) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $zbuf_size = $png_ptr + 156 | 0;
    var $0 = HEAPU32[$zbuf_size >> 2];
    if ($0 >>> 0 < $skip >>> 0) {
      __label__ = 2;
      break;
    } else {
      var $i_0_lcssa = $skip;
      __label__ = 5;
      break;
    }
   case 2:
    var $zbuf = $png_ptr + 152 | 0;
    var $i_02 = $skip;
    var $1 = $0;
    __label__ = 3;
    break;
   case 3:
    var $1;
    var $i_02;
    var $2 = HEAP32[$zbuf >> 2];
    _png_crc_read($png_ptr, $2, $1);
    var $sub = $i_02 - $0 | 0;
    if ($sub >>> 0 > $0 >>> 0) {
      __label__ = 4;
      break;
    } else {
      var $i_0_lcssa = $sub;
      __label__ = 5;
      break;
    }
   case 4:
    var $i_02 = $sub;
    var $1 = HEAP32[$zbuf_size >> 2];
    __label__ = 3;
    break;
   case 5:
    var $i_0_lcssa;
    if (($i_0_lcssa | 0) == 0) {
      __label__ = 7;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    var $3 = HEAP32[$png_ptr + 152 >> 2];
    _png_crc_read($png_ptr, $3, $i_0_lcssa);
    __label__ = 7;
    break;
   case 7:
    var $call = _png_crc_error($png_ptr);
    if (($call | 0) == 0) {
      var $retval_0 = 0;
      __label__ = 13;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    var $5 = HEAP32[$png_ptr + 88 >> 2];
    if ((HEAP32[$png_ptr + 232 >> 2] & 536870912 | 0) == 0) {
      __label__ = 10;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    if (($5 & 512 | 0) == 0) {
      __label__ = 11;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 10:
    if (($5 & 1024 | 0) == 0) {
      __label__ = 12;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    var $6 = $png_ptr;
    _png_chunk_warning($6, STRING_TABLE.__str3752 | 0);
    var $retval_0 = 1;
    __label__ = 13;
    break;
   case 12:
    var $7 = $png_ptr;
    _png_chunk_benign_error($7);
    var $retval_0 = 0;
    __label__ = 13;
    break;
   case 13:
    var $retval_0;
    return $retval_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_crc_error($png_ptr) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $crc_bytes = __stackBase__;
    var $1 = HEAP32[$png_ptr + 88 >> 2];
    if ((HEAP32[$png_ptr + 232 >> 2] & 536870912 | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    if (($1 & 768 | 0) == 768) {
      __label__ = 3;
      break;
    } else {
      var $need_crc_0 = 1;
      __label__ = 6;
      break;
    }
   case 3:
    var $need_crc_0 = 0;
    __label__ = 6;
    break;
   case 4:
    if (($1 & 2048 | 0) == 0) {
      var $need_crc_0 = 1;
      __label__ = 6;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $need_crc_0 = 0;
    __label__ = 6;
    break;
   case 6:
    var $need_crc_0;
    HEAP32[$png_ptr + 660 >> 2] = 129;
    var $arraydecay = $crc_bytes | 0;
    var $2 = $png_ptr;
    _png_read_data($2, $arraydecay, 4);
    if ($need_crc_0) {
      __label__ = 7;
      break;
    } else {
      var $retval_0 = 0;
      __label__ = 8;
      break;
    }
   case 7:
    var $retval_0 = ((HEAPU8[$crc_bytes + 1 | 0] & 255) << 16 | (HEAPU8[$arraydecay] & 255) << 24 | HEAPU8[$crc_bytes + 3 | 0] & 255 | (HEAPU8[$crc_bytes + 2 | 0] & 255) << 8 | 0) != (HEAP32[$png_ptr + 268 >> 2] | 0) & 1;
    __label__ = 8;
    break;
   case 8:
    var $retval_0;
    STACKTOP = __stackBase__;
    return $retval_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_decompress_chunk($png_ptr, $comp_type, $chunklength, $prefix_size, $newlength) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 256;
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $p = __stackBase__;
    if ($prefix_size >>> 0 > $chunklength >>> 0) {
      __label__ = 2;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 2:
    var $0 = $png_ptr;
    _png_warning($0, STRING_TABLE.__str4753 | 0);
    var $prefix_size_addr_0 = 0;
    __label__ = 15;
    break;
   case 3:
    if (($comp_type | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 4:
    var $chunkdata = $png_ptr + 656 | 0;
    var $add_ptr = HEAP32[$chunkdata >> 2] + $prefix_size | 0;
    var $sub = $chunklength - $prefix_size | 0;
    var $call = _png_inflate($png_ptr, $add_ptr, $sub, 0, 0);
    if ($prefix_size >>> 0 < 4294967294 & $call >>> 0 < (-2 - $prefix_size | 0) >>> 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 5:
    var $2 = HEAPU32[$png_ptr + 628 >> 2];
    if (($2 | 0) == 0) {
      __label__ = 8;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    if (($call + $prefix_size | 0) >>> 0 < ($2 - 1 | 0) >>> 0) {
      __label__ = 8;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    var $3 = $png_ptr;
    _png_warning($3, STRING_TABLE.__str5754 | 0);
    var $prefix_size_addr_0 = $prefix_size;
    __label__ = 15;
    break;
   case 8:
    if (($call | 0) == 0) {
      var $prefix_size_addr_0 = $prefix_size;
      __label__ = 15;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    var $add14 = $call + $prefix_size | 0;
    var $add15 = $add14 + 1 | 0;
    var $4 = $png_ptr;
    var $call16 = _png_malloc_warn($4, $add15);
    if (($call16 | 0) == 0) {
      __label__ = 13;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 10:
    var $5 = HEAP32[$chunkdata >> 2];
    _memcpy($call16, $5, $prefix_size, 1);
    var $add_ptr21 = $5 + $prefix_size | 0;
    var $add_ptr23 = $call16 + $prefix_size | 0;
    var $call24 = _png_inflate($png_ptr, $add_ptr21, $sub, $add_ptr23, $call);
    HEAP8[$call16 + $add14 | 0] = 0;
    if (($call24 | 0) == ($call | 0)) {
      __label__ = 11;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 11:
    var $6 = HEAP32[$chunkdata >> 2];
    _png_free($4, $6);
    HEAP32[$chunkdata >> 2] = $call16;
    var $storemerge = $add14;
    __label__ = 19;
    break;
   case 12:
    var $7 = $png_ptr;
    _png_warning($7, STRING_TABLE.__str6755 | 0);
    _png_free($4, $call16);
    var $prefix_size_addr_0 = $prefix_size;
    __label__ = 15;
    break;
   case 13:
    var $8 = $png_ptr;
    _png_warning($8, STRING_TABLE.__str7756 | 0);
    var $prefix_size_addr_0 = $prefix_size;
    __label__ = 15;
    break;
   case 14:
    var $arraydecay = $p | 0;
    _png_warning_parameter_signed($arraydecay, 1, 1, $comp_type);
    var $9 = $png_ptr;
    _png_formatted_warning($9, $arraydecay, STRING_TABLE.__str611194 | 0);
    var $prefix_size_addr_0 = $prefix_size;
    __label__ = 15;
    break;
   case 15:
    var $prefix_size_addr_0;
    var $10 = $png_ptr;
    var $call41 = _png_malloc_warn($10, $prefix_size_addr_0 + 1 | 0);
    if (($call41 | 0) == 0) {
      var $storemerge = $prefix_size_addr_0;
      __label__ = 19;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 16:
    var $_pre = HEAP32[$png_ptr + 656 >> 2];
    if (($prefix_size_addr_0 | 0) == 0) {
      __label__ = 18;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 17:
    _memcpy($call41, $_pre, $prefix_size_addr_0, 1);
    __label__ = 18;
    break;
   case 18:
    var $chunkdata48 = $png_ptr + 656 | 0;
    _png_free($10, $_pre);
    HEAP32[$chunkdata48 >> 2] = $call41;
    HEAP8[$call41 + $prefix_size_addr_0 | 0] = 0;
    var $storemerge = $prefix_size_addr_0;
    __label__ = 19;
    break;
   case 19:
    var $storemerge;
    HEAP32[$newlength >> 2] = $storemerge;
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_decompress_chunk["X"] = 1;

function _png_inflate($png_ptr, $data, $size, $output, $output_size) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $zstream = $png_ptr + 96 | 0;
    HEAP32[$zstream >> 2] = $data;
    var $avail_in = $png_ptr + 100 | 0;
    HEAP32[$avail_in >> 2] = 0;
    var $zbuf = $png_ptr + 152 | 0;
    var $next_out = $png_ptr + 108 | 0;
    var $zbuf_size = $png_ptr + 156 | 0;
    var $avail_out = $png_ptr + 112 | 0;
    var $cmp24 = ($output | 0) != 0;
    var $size_addr_0 = $size;
    var $count_0 = 0;
    var $0 = 0;
    __label__ = 2;
    break;
   case 2:
    var $0;
    var $count_0;
    var $size_addr_0;
    if ($0 | ($size_addr_0 | 0) == 0) {
      var $size_addr_1 = $size_addr_0;
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    HEAP32[$avail_in >> 2] = $size_addr_0;
    var $size_addr_1 = 0;
    __label__ = 4;
    break;
   case 4:
    var $size_addr_1;
    var $1 = HEAP32[$zbuf >> 2];
    HEAP32[$next_out >> 2] = $1;
    var $2 = HEAP32[$zbuf_size >> 2];
    HEAP32[$avail_out >> 2] = $2;
    var $call = _inflate($zstream, 0);
    var $sub18 = HEAP32[$zbuf_size >> 2] - HEAP32[$avail_out >> 2] | 0;
    var $cmp19 = ($call | 0) == 0;
    if ($call >>> 0 < 2 & ($sub18 | 0) > 0) {
      __label__ = 5;
      break;
    } else {
      var $count_1 = $count_0;
      __label__ = 8;
      break;
    }
   case 5:
    if ($cmp24 & $count_0 >>> 0 < $output_size >>> 0) {
      __label__ = 6;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 6:
    var $sub28 = $output_size - $count_0 | 0;
    var $copy_0 = $sub18 >>> 0 < $sub28 >>> 0 ? $sub18 : $sub28;
    var $add_ptr = $output + $count_0 | 0;
    var $6 = HEAP32[$zbuf >> 2];
    _memcpy($add_ptr, $6, $copy_0, 1);
    __label__ = 7;
    break;
   case 7:
    var $count_1 = $sub18 + $count_0 | 0;
    __label__ = 8;
    break;
   case 8:
    var $count_1;
    if ($cmp19) {
      __label__ = 9;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 9:
    var $size_addr_0 = $size_addr_1;
    var $count_0 = $count_1;
    var $0 = (HEAP32[$avail_in >> 2] | 0) != 0;
    __label__ = 2;
    break;
   case 10:
    var $cmp20 = ($call | 0) == 1;
    HEAP32[$avail_in >> 2] = 0;
    var $call41 = _inflateReset($zstream);
    if ($cmp20) {
      var $retval_0 = $count_1;
      __label__ = 16;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    var $7 = HEAP32[$png_ptr + 120 >> 2];
    if (($7 | 0) == 0) {
      __label__ = 12;
      break;
    } else {
      var $msg_0 = $7;
      __label__ = 15;
      break;
    }
   case 12:
    if (($call | 0) == -3) {
      __label__ = 13;
      break;
    } else if (($call | 0) == -5) {
      var $msg_0 = STRING_TABLE.__str144893 | 0;
      __label__ = 15;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 13:
    var $msg_0 = STRING_TABLE.__str145894 | 0;
    __label__ = 15;
    break;
   case 14:
    var $msg_0 = STRING_TABLE.__str146895 | 0;
    __label__ = 15;
    break;
   case 15:
    var $msg_0;
    var $8 = $png_ptr;
    _png_chunk_warning($8, $msg_0);
    var $retval_0 = 0;
    __label__ = 16;
    break;
   case 16:
    var $retval_0;
    return $retval_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_inflate["X"] = 1;

function _png_handle_IHDR($png_ptr, $info_ptr, $length) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 16;
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $buf = __stackBase__;
    var $mode = $png_ptr + 84 | 0;
    if ((HEAP32[$mode >> 2] & 1 | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $1 = $png_ptr;
    _png_error($1, STRING_TABLE.__str9758 | 0);
    __label__ = 3;
    break;
   case 3:
    if (($length | 0) == 13) {
      __label__ = 5;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $2 = $png_ptr;
    _png_error($2, STRING_TABLE.__str10759 | 0);
    __label__ = 5;
    break;
   case 5:
    var $or = HEAP32[$mode >> 2] | 1;
    HEAP32[$mode >> 2] = $or;
    var $arraydecay = $buf | 0;
    _png_crc_read($png_ptr, $arraydecay, 13);
    var $call = _png_crc_finish($png_ptr, 0);
    var $call5 = _png_get_uint_31($png_ptr, $arraydecay);
    var $add_ptr = $buf + 4 | 0;
    var $call7 = _png_get_uint_31($png_ptr, $add_ptr);
    var $4 = HEAPU8[$buf + 8 | 0];
    var $conv = $4 & 255;
    var $5 = HEAPU8[$buf + 9 | 0];
    var $conv9 = $5 & 255;
    var $6 = HEAPU8[$buf + 10 | 0];
    var $conv11 = $6 & 255;
    var $7 = HEAPU8[$buf + 11 | 0];
    var $conv13 = $7 & 255;
    var $8 = HEAPU8[$buf + 12 | 0];
    var $conv15 = $8 & 255;
    HEAP32[$png_ptr + 204 >> 2] = $call5;
    HEAP32[$png_ptr + 208 >> 2] = $call7;
    HEAP8[$png_ptr + 292 | 0] = $4;
    HEAP8[$png_ptr + 288 | 0] = $8;
    HEAP8[$png_ptr + 291 | 0] = $5;
    HEAP8[$png_ptr + 580 | 0] = $7;
    HEAP8[$png_ptr + 612 | 0] = $6;
    if (($conv9 | 0) == 2) {
      __label__ = 7;
      break;
    } else if (($conv9 | 0) == 4) {
      __label__ = 8;
      break;
    } else if (($conv9 | 0) == 6) {
      __label__ = 9;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    HEAP8[$png_ptr + 295 | 0] = 1;
    var $9 = 1;
    __label__ = 10;
    break;
   case 7:
    HEAP8[$png_ptr + 295 | 0] = 3;
    var $9 = 3;
    __label__ = 10;
    break;
   case 8:
    HEAP8[$png_ptr + 295 | 0] = 2;
    var $9 = 2;
    __label__ = 10;
    break;
   case 9:
    HEAP8[$png_ptr + 295 | 0] = 4;
    var $9 = 4;
    __label__ = 10;
    break;
   case 10:
    var $9;
    var $mul = $9 * $4 & 255;
    HEAP8[$png_ptr + 294 | 0] = $mul;
    var $conv41 = $mul & 255;
    if (($mul & 255) > 7) {
      __label__ = 11;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 11:
    var $cond = ($conv41 >>> 3) * $call5 | 0;
    __label__ = 13;
    break;
   case 12:
    var $cond = ($conv41 * $call5 + 7 | 0) >>> 3;
    __label__ = 13;
    break;
   case 13:
    var $cond;
    HEAP32[$png_ptr + 220 >> 2] = $cond;
    _png_set_IHDR($png_ptr, $info_ptr, $call5, $call7, $conv, $conv9, $conv15, $conv11, $conv13);
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_handle_IHDR["X"] = 1;

function _png_handle_PLTE($png_ptr, $info_ptr, $length) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 772;
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $palette = __stackBase__;
    var $buf = __stackBase__ + 768;
    var $mode = $png_ptr + 84 | 0;
    var $0 = HEAP32[$mode >> 2];
    if (($0 & 1 | 0) == 0) {
      __label__ = 2;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 2:
    var $1 = $png_ptr;
    _png_error($1, STRING_TABLE.__str11760 | 0);
    __label__ = 7;
    break;
   case 3:
    if (($0 & 4 | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $2 = $png_ptr;
    _png_warning($2, STRING_TABLE.__str12761 | 0);
    var $call = _png_crc_finish($png_ptr, $length);
    __label__ = 22;
    break;
   case 5:
    if (($0 & 2 | 0) == 0) {
      __label__ = 7;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    var $3 = $png_ptr;
    _png_error($3, STRING_TABLE.__str13762 | 0);
    __label__ = 7;
    break;
   case 7:
    var $or = HEAP32[$mode >> 2] | 2;
    HEAP32[$mode >> 2] = $or;
    var $color_type = $png_ptr + 291 | 0;
    var $5 = HEAPU8[$color_type];
    if (($5 & 2) << 24 >> 24 == 0) {
      __label__ = 8;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 8:
    var $6 = $png_ptr;
    _png_warning($6, STRING_TABLE.__str14763 | 0);
    var $call16 = _png_crc_finish($png_ptr, $length);
    __label__ = 22;
    break;
   case 9:
    if ($length >>> 0 < 769 & (($length >>> 0) % 3 | 0) == 0) {
      __label__ = 13;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 10:
    var $7 = $png_ptr;
    if ($5 << 24 >> 24 == 3) {
      __label__ = 12;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    _png_warning($7, STRING_TABLE.__str15764 | 0);
    var $call26 = _png_crc_finish($png_ptr, $length);
    __label__ = 22;
    break;
   case 12:
    _png_error($7, STRING_TABLE.__str15764 | 0);
    __label__ = 13;
    break;
   case 13:
    var $div = ($length | 0) / 3 & -1;
    var $arraydecay = $palette | 0;
    if (($length | 0) > 2) {
      __label__ = 14;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 14:
    var $arraydecay32 = $buf | 0;
    var $arrayidx33 = $buf + 1 | 0;
    var $arrayidx34 = $buf + 2 | 0;
    var $i_03 = 0;
    var $pal_ptr_04 = $arraydecay;
    __label__ = 15;
    break;
   case 15:
    var $pal_ptr_04;
    var $i_03;
    _png_crc_read($png_ptr, $arraydecay32, 3);
    var $8 = HEAP8[$arraydecay32];
    HEAP8[$pal_ptr_04 | 0] = $8;
    var $9 = HEAP8[$arrayidx33];
    HEAP8[$pal_ptr_04 + 1 | 0] = $9;
    var $10 = HEAP8[$arrayidx34];
    HEAP8[$pal_ptr_04 + 2 | 0] = $10;
    var $inc = $i_03 + 1 | 0;
    if (($inc | 0) < ($div | 0)) {
      var $i_03 = $inc;
      var $pal_ptr_04 = $pal_ptr_04 + 3 | 0;
      __label__ = 15;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 16:
    var $call35 = _png_crc_finish($png_ptr, 0);
    _png_set_PLTE($png_ptr, $info_ptr, $arraydecay, $div);
    if (HEAP8[$color_type] << 24 >> 24 != 3 | ($info_ptr | 0) == 0) {
      __label__ = 22;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 17:
    if ((HEAP32[$info_ptr + 8 >> 2] & 16 | 0) == 0) {
      __label__ = 22;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 18:
    var $num_trans = $png_ptr + 284 | 0;
    var $conv48 = $div & 65535;
    var $conv49 = $div & 65535;
    if ((HEAPU16[$num_trans >> 1] & 65535) >>> 0 > $conv49 >>> 0) {
      __label__ = 19;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 19:
    var $14 = $png_ptr;
    _png_warning($14, STRING_TABLE.__str16765 | 0);
    HEAP16[$num_trans >> 1] = $conv48;
    __label__ = 20;
    break;
   case 20:
    var $num_trans56 = $info_ptr + 22 | 0;
    if ((HEAPU16[$num_trans56 >> 1] & 65535) >>> 0 > $conv49 >>> 0) {
      __label__ = 21;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 21:
    var $16 = $png_ptr;
    _png_warning($16, STRING_TABLE.__str17766 | 0);
    HEAP16[$num_trans56 >> 1] = $conv48;
    __label__ = 22;
    break;
   case 22:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_handle_PLTE["X"] = 1;

function _png_handle_IEND($png_ptr, $length) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $mode = $png_ptr + 84 | 0;
    var $0 = HEAP32[$mode >> 2];
    if (($0 & 5 | 0) == 5) {
      var $4 = $0;
      __label__ = 3;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $3 = $png_ptr;
    _png_error($3, STRING_TABLE.__str18767 | 0);
    var $4 = HEAP32[$mode >> 2];
    __label__ = 3;
    break;
   case 3:
    var $4;
    HEAP32[$mode >> 2] = $4 | 24;
    if (($length | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $5 = $png_ptr;
    _png_warning($5, STRING_TABLE.__str19768 | 0);
    __label__ = 5;
    break;
   case 5:
    var $call = _png_crc_finish($png_ptr, $length);
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_get_fixed_point($buf) {
  var $add9 = (HEAPU8[$buf + 1 | 0] & 255) << 16 | (HEAPU8[$buf] & 255) << 24 | HEAPU8[$buf + 3 | 0] & 255 | (HEAPU8[$buf + 2 | 0] & 255) << 8;
  var $retval_0 = ($add9 | 0) > -1 ? $add9 : -1;
  return $retval_0;
}

function _png_handle_gAMA($png_ptr, $info_ptr, $length) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 260;
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $buf = __stackBase__;
    var $p = __stackBase__ + 4;
    var $0 = HEAP32[$png_ptr + 84 >> 2];
    if (($0 & 1 | 0) == 0) {
      __label__ = 2;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 2:
    var $1 = $png_ptr;
    _png_error($1, STRING_TABLE.__str20769 | 0);
    __label__ = 7;
    break;
   case 3:
    if (($0 & 4 | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $2 = $png_ptr;
    _png_warning($2, STRING_TABLE.__str21770 | 0);
    var $call = _png_crc_finish($png_ptr, $length);
    __label__ = 20;
    break;
   case 5:
    if (($0 & 2 | 0) == 0) {
      __label__ = 7;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    var $3 = $png_ptr;
    _png_warning($3, STRING_TABLE.__str22771 | 0);
    __label__ = 7;
    break;
   case 7:
    var $cmp = ($info_ptr | 0) != 0;
    if ($cmp) {
      __label__ = 8;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 8:
    if ((HEAP32[$info_ptr + 8 >> 2] & 2049 | 0) == 1) {
      __label__ = 9;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 9:
    var $7 = $png_ptr;
    _png_warning($7, STRING_TABLE.__str23772 | 0);
    var $call19 = _png_crc_finish($png_ptr, $length);
    __label__ = 20;
    break;
   case 10:
    if (($length | 0) == 4) {
      __label__ = 12;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    var $8 = $png_ptr;
    _png_warning($8, STRING_TABLE.__str24773 | 0);
    var $call23 = _png_crc_finish($png_ptr, $length);
    __label__ = 20;
    break;
   case 12:
    var $arraydecay = $buf | 0;
    _png_crc_read($png_ptr, $arraydecay, 4);
    var $call25 = _png_crc_finish($png_ptr, 0);
    if (($call25 | 0) == 0) {
      __label__ = 13;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 13:
    var $call30 = _png_get_fixed_point($arraydecay);
    if (($call30 | 0) < 1) {
      __label__ = 14;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 14:
    var $9 = $png_ptr;
    _png_warning($9, STRING_TABLE.__str25774 | 0);
    __label__ = 20;
    break;
   case 15:
    if ($cmp) {
      __label__ = 16;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 16:
    if ((HEAP32[$info_ptr + 8 >> 2] & 2048 | 0) == 0) {
      __label__ = 19;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 17:
    if (($call30 - 45e3 | 0) >>> 0 > 1e3) {
      __label__ = 18;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 18:
    var $arraydecay43 = $p | 0;
    _png_warning_parameter_signed($arraydecay43, 1, 5, $call30);
    var $12 = $png_ptr;
    _png_formatted_warning($12, $arraydecay43, STRING_TABLE.__str26775 | 0);
    __label__ = 20;
    break;
   case 19:
    HEAP32[$png_ptr + 352 >> 2] = $call30;
    _png_set_gAMA_fixed($png_ptr, $info_ptr, $call30);
    __label__ = 20;
    break;
   case 20:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_handle_gAMA["X"] = 1;

function _png_handle_sBIT($png_ptr, $info_ptr, $length) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $buf = __stackBase__;
    var $arrayidx3 = $buf;
    var $mode = $png_ptr + 84 | 0;
    HEAP32[$buf >> 2] = 0;
    var $0 = HEAP32[$mode >> 2];
    if (($0 & 1 | 0) == 0) {
      __label__ = 2;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 2:
    var $1 = $png_ptr;
    _png_error($1, STRING_TABLE.__str27776 | 0);
    __label__ = 7;
    break;
   case 3:
    if (($0 & 4 | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $2 = $png_ptr;
    _png_warning($2, STRING_TABLE.__str28777 | 0);
    var $call = _png_crc_finish($png_ptr, $length);
    __label__ = 19;
    break;
   case 5:
    if (($0 & 2 | 0) == 0) {
      __label__ = 7;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    var $3 = $png_ptr;
    _png_warning($3, STRING_TABLE.__str29778 | 0);
    __label__ = 7;
    break;
   case 7:
    if (($info_ptr | 0) == 0) {
      __label__ = 10;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    if ((HEAP32[$info_ptr + 8 >> 2] & 2 | 0) == 0) {
      __label__ = 10;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    var $5 = $png_ptr;
    _png_warning($5, STRING_TABLE.__str30779 | 0);
    var $call18 = _png_crc_finish($png_ptr, $length);
    __label__ = 19;
    break;
   case 10:
    var $color_type = $png_ptr + 291 | 0;
    if (HEAP8[$color_type] << 24 >> 24 == 3) {
      var $truelen_0 = 3;
      __label__ = 12;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    var $truelen_0 = HEAPU8[$png_ptr + 295 | 0] & 255;
    __label__ = 12;
    break;
   case 12:
    var $truelen_0;
    if (($truelen_0 | 0) != ($length | 0) | $length >>> 0 > 4) {
      __label__ = 13;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 13:
    var $8 = $png_ptr;
    _png_warning($8, STRING_TABLE.__str31780 | 0);
    var $call31 = _png_crc_finish($png_ptr, $length);
    __label__ = 19;
    break;
   case 14:
    _png_crc_read($png_ptr, $arrayidx3, $truelen_0);
    var $call33 = _png_crc_finish($png_ptr, 0);
    if (($call33 | 0) == 0) {
      __label__ = 15;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 15:
    var $10 = HEAPU32[$buf >> 2];
    var $11 = $10 & 255;
    var $sig_bit = $png_ptr + 384 | 0;
    if ((HEAP8[$color_type] & 2) << 24 >> 24 == 0) {
      __label__ = 17;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 16:
    var $17 = $10 >>> 24 & 255;
    var $18 = $10 >>> 16 & 255;
    var $19 = (HEAPU16[$buf >> 1] & 65535) >>> 8 & 255;
    HEAP8[$sig_bit | 0] = $11;
    HEAP8[$png_ptr + 385 | 0] = $19;
    HEAP8[$png_ptr + 386 | 0] = $18;
    HEAP8[$png_ptr + 388 | 0] = $17;
    __label__ = 18;
    break;
   case 17:
    var $22 = ($10 & 65535 & 65535) >>> 8 & 255;
    var $red54 = $sig_bit | 0;
    var $alpha63 = $png_ptr + 388 | 0;
    _memset($red54, $11, 4, 1);
    HEAP8[$alpha63] = $22;
    __label__ = 18;
    break;
   case 18:
    _png_set_sBIT($png_ptr, $info_ptr, $sig_bit);
    __label__ = 19;
    break;
   case 19:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_handle_sBIT["X"] = 1;

function _png_handle_cHRM($png_ptr, $info_ptr, $length) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 368;
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $buf = __stackBase__;
    var $p = __stackBase__ + 32;
    var $XYZ = __stackBase__ + 288;
    var $xy = __stackBase__ + 324;
    var $r = __stackBase__ + 356;
    var $g = __stackBase__ + 360;
    var $b = __stackBase__ + 364;
    var $0 = HEAP32[$png_ptr + 84 >> 2];
    if (($0 & 1 | 0) == 0) {
      __label__ = 2;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 2:
    var $1 = $png_ptr;
    _png_error($1, STRING_TABLE.__str32781 | 0);
    __label__ = 7;
    break;
   case 3:
    if (($0 & 4 | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $2 = $png_ptr;
    _png_warning($2, STRING_TABLE.__str33782 | 0);
    var $call = _png_crc_finish($png_ptr, $length);
    __label__ = 44;
    break;
   case 5:
    if (($0 & 2 | 0) == 0) {
      __label__ = 7;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    var $3 = $png_ptr;
    _png_warning($3, STRING_TABLE.__str34783 | 0);
    __label__ = 7;
    break;
   case 7:
    var $cmp = ($info_ptr | 0) != 0;
    if ($cmp) {
      __label__ = 8;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 8:
    if ((HEAP32[$info_ptr + 8 >> 2] & 2052 | 0) == 4) {
      __label__ = 9;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 9:
    var $7 = $png_ptr;
    _png_warning($7, STRING_TABLE.__str35784 | 0);
    var $call19 = _png_crc_finish($png_ptr, $length);
    __label__ = 44;
    break;
   case 10:
    if (($length | 0) == 32) {
      __label__ = 12;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    var $8 = $png_ptr;
    _png_warning($8, STRING_TABLE.__str36785 | 0);
    var $call23 = _png_crc_finish($png_ptr, $length);
    __label__ = 44;
    break;
   case 12:
    var $arraydecay = $buf | 0;
    _png_crc_read($png_ptr, $arraydecay, 32);
    var $call25 = _png_crc_finish($png_ptr, 0);
    if (($call25 | 0) == 0) {
      __label__ = 13;
      break;
    } else {
      __label__ = 44;
      break;
    }
   case 13:
    var $call30 = _png_get_fixed_point($arraydecay);
    var $add_ptr = $buf + 4 | 0;
    var $call32 = _png_get_fixed_point($add_ptr);
    var $add_ptr34 = $buf + 8 | 0;
    var $call35 = _png_get_fixed_point($add_ptr34);
    var $add_ptr37 = $buf + 12 | 0;
    var $call38 = _png_get_fixed_point($add_ptr37);
    var $add_ptr40 = $buf + 16 | 0;
    var $call41 = _png_get_fixed_point($add_ptr40);
    var $add_ptr43 = $buf + 20 | 0;
    var $call44 = _png_get_fixed_point($add_ptr43);
    var $add_ptr46 = $buf + 24 | 0;
    var $call47 = _png_get_fixed_point($add_ptr46);
    var $add_ptr49 = $buf + 28 | 0;
    var $call50 = _png_get_fixed_point($add_ptr49);
    if (($call30 | 0) == -1 | ($call32 | 0) == -1 | ($call35 | 0) == -1 | ($call38 | 0) == -1 | ($call41 | 0) == -1 | ($call44 | 0) == -1 | ($call47 | 0) == -1 | ($call50 | 0) == -1) {
      __label__ = 14;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 14:
    var $9 = $png_ptr;
    _png_warning($9, STRING_TABLE.__str37786 | 0);
    __label__ = 44;
    break;
   case 15:
    if ($cmp) {
      __label__ = 16;
      break;
    } else {
      __label__ = 26;
      break;
    }
   case 16:
    if ((HEAP32[$info_ptr + 8 >> 2] & 2048 | 0) == 0) {
      __label__ = 26;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 17:
    if (($call30 - 30270 | 0) >>> 0 > 2e3) {
      __label__ = 25;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 18:
    if (($call32 - 31900 | 0) >>> 0 > 2e3) {
      __label__ = 25;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 19:
    if (($call35 - 63e3 | 0) >>> 0 > 2e3) {
      __label__ = 25;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 20:
    if (($call38 - 32e3 | 0) >>> 0 > 2e3) {
      __label__ = 25;
      break;
    } else {
      __label__ = 21;
      break;
    }
   case 21:
    if (($call41 - 29e3 | 0) >>> 0 > 2e3) {
      __label__ = 25;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 22:
    if (($call44 - 59e3 | 0) >>> 0 > 2e3) {
      __label__ = 25;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 23:
    if (($call47 - 14e3 | 0) >>> 0 > 2e3) {
      __label__ = 25;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 24:
    if (($call50 - 5e3 | 0) >>> 0 > 2e3) {
      __label__ = 25;
      break;
    } else {
      __label__ = 44;
      break;
    }
   case 25:
    var $arraydecay105 = $p | 0;
    _png_warning_parameter_signed($arraydecay105, 1, 5, $call30);
    _png_warning_parameter_signed($arraydecay105, 2, 5, $call32);
    _png_warning_parameter_signed($arraydecay105, 3, 5, $call35);
    _png_warning_parameter_signed($arraydecay105, 4, 5, $call38);
    _png_warning_parameter_signed($arraydecay105, 5, 5, $call41);
    _png_warning_parameter_signed($arraydecay105, 6, 5, $call44);
    _png_warning_parameter_signed($arraydecay105, 7, 5, $call47);
    _png_warning_parameter_signed($arraydecay105, 8, 5, $call50);
    var $19 = $png_ptr;
    _png_formatted_warning($19, $arraydecay105, STRING_TABLE.__str38787 | 0);
    __label__ = 44;
    break;
   case 26:
    if (HEAP8[$png_ptr + 570 | 0] << 24 >> 24 == 0) {
      __label__ = 27;
      break;
    } else {
      __label__ = 43;
      break;
    }
   case 27:
    HEAP32[$xy >> 2] = $call35;
    HEAP32[$xy + 4 >> 2] = $call38;
    HEAP32[$xy + 8 >> 2] = $call41;
    HEAP32[$xy + 12 >> 2] = $call44;
    HEAP32[$xy + 16 >> 2] = $call47;
    HEAP32[$xy + 20 >> 2] = $call50;
    HEAP32[$xy + 24 >> 2] = $call30;
    HEAP32[$xy + 28 >> 2] = $call32;
    var $call118 = _png_XYZ_from_xy_checked($png_ptr, $XYZ, $xy);
    if (($call118 | 0) == 0) {
      __label__ = 43;
      break;
    } else {
      __label__ = 28;
      break;
    }
   case 28:
    var $21 = HEAP32[$XYZ + 4 >> 2];
    var $call121 = _png_muldiv($r, $21, 32768, 1e5);
    var $22 = HEAPU32[$r >> 2];
    if (($call121 | 0) != 0 & ($22 | 0) > -1 & ($22 | 0) < 32769) {
      __label__ = 29;
      break;
    } else {
      __label__ = 42;
      break;
    }
   case 29:
    var $23 = HEAP32[$XYZ + 16 >> 2];
    var $call128 = _png_muldiv($g, $23, 32768, 1e5);
    var $24 = HEAP32[$g >> 2];
    if (($call128 | 0) != 0 & ($24 | 0) > -1 & ($24 | 0) < 32769) {
      __label__ = 30;
      break;
    } else {
      __label__ = 42;
      break;
    }
   case 30:
    var $25 = HEAP32[$XYZ + 28 >> 2];
    var $call135 = _png_muldiv($b, $25, 32768, 1e5);
    var $26 = HEAP32[$b >> 2];
    if (($call135 | 0) != 0 & ($26 | 0) > -1 & ($26 | 0) < 32769) {
      __label__ = 31;
      break;
    } else {
      __label__ = 42;
      break;
    }
   case 31:
    var $add142 = $22 + $26 + $24 | 0;
    if (($add142 | 0) < 32770) {
      __label__ = 32;
      break;
    } else {
      __label__ = 42;
      break;
    }
   case 32:
    if (($add142 | 0) > 32768) {
      var $add145_0_ph = -1;
      __label__ = 34;
      break;
    } else {
      __label__ = 33;
      break;
    }
   case 33:
    if (($add142 | 0) < 32768) {
      var $add145_0_ph = 1;
      __label__ = 34;
      break;
    } else {
      var $29 = $22;
      var $28 = $24;
      var $27 = $26;
      __label__ = 39;
      break;
    }
   case 34:
    var $add145_0_ph;
    if (($24 | 0) < ($22 | 0) | ($24 | 0) < ($26 | 0)) {
      __label__ = 36;
      break;
    } else {
      __label__ = 35;
      break;
    }
   case 35:
    var $add163 = $24 + $add145_0_ph | 0;
    HEAP32[$g >> 2] = $add163;
    var $29 = $22;
    var $28 = $add163;
    var $27 = $26;
    __label__ = 39;
    break;
   case 36:
    if (($22 | 0) < ($24 | 0) | ($22 | 0) < ($26 | 0)) {
      __label__ = 38;
      break;
    } else {
      __label__ = 37;
      break;
    }
   case 37:
    var $add169 = $22 + $add145_0_ph | 0;
    HEAP32[$r >> 2] = $add169;
    var $29 = $add169;
    var $28 = $24;
    var $27 = $26;
    __label__ = 39;
    break;
   case 38:
    var $add171 = $26 + $add145_0_ph | 0;
    HEAP32[$b >> 2] = $add171;
    var $29 = $22;
    var $28 = $24;
    var $27 = $add171;
    __label__ = 39;
    break;
   case 39:
    var $27;
    var $28;
    var $29;
    if (($28 + $29 + $27 | 0) == 32768) {
      __label__ = 41;
      break;
    } else {
      __label__ = 40;
      break;
    }
   case 40:
    var $30 = $png_ptr;
    _png_error($30, STRING_TABLE.__str39788 | 0);
    __label__ = 41;
    break;
   case 41:
    HEAP16[$png_ptr + 572 >> 1] = $29 & 65535;
    HEAP16[$png_ptr + 574 >> 1] = $28 & 65535;
    __label__ = 43;
    break;
   case 42:
    var $31 = $png_ptr;
    _png_error($31, STRING_TABLE.__str40789 | 0);
    __label__ = 43;
    break;
   case 43:
    _png_set_cHRM_fixed($png_ptr, $info_ptr, $call30, $call32, $call35, $call38, $call41, $call44, $call47, $call50);
    __label__ = 44;
    break;
   case 44:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_handle_cHRM["X"] = 1;

function _png_handle_sRGB($png_ptr, $info_ptr, $length) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 260;
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $buf = __stackBase__;
    var $p = __stackBase__ + 4;
    var $0 = HEAP32[$png_ptr + 84 >> 2];
    if (($0 & 1 | 0) == 0) {
      __label__ = 2;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 2:
    var $1 = $png_ptr;
    _png_error($1, STRING_TABLE.__str41790 | 0);
    __label__ = 7;
    break;
   case 3:
    if (($0 & 4 | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $2 = $png_ptr;
    _png_warning($2, STRING_TABLE.__str42791 | 0);
    var $call = _png_crc_finish($png_ptr, $length);
    __label__ = 33;
    break;
   case 5:
    if (($0 & 2 | 0) == 0) {
      __label__ = 7;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    var $3 = $png_ptr;
    _png_warning($3, STRING_TABLE.__str43792 | 0);
    __label__ = 7;
    break;
   case 7:
    var $cmp = ($info_ptr | 0) != 0;
    if ($cmp) {
      __label__ = 8;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 8:
    if ((HEAP32[$info_ptr + 8 >> 2] & 2048 | 0) == 0) {
      __label__ = 10;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    var $5 = $png_ptr;
    _png_warning($5, STRING_TABLE.__str44793 | 0);
    var $call15 = _png_crc_finish($png_ptr, $length);
    __label__ = 33;
    break;
   case 10:
    if (($length | 0) == 1) {
      __label__ = 12;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    var $6 = $png_ptr;
    _png_warning($6, STRING_TABLE.__str45794 | 0);
    var $call19 = _png_crc_finish($png_ptr, $length);
    __label__ = 33;
    break;
   case 12:
    var $arraydecay = $buf | 0;
    _png_crc_read($png_ptr, $arraydecay, 1);
    var $call21 = _png_crc_finish($png_ptr, 0);
    if (($call21 | 0) == 0) {
      __label__ = 13;
      break;
    } else {
      __label__ = 33;
      break;
    }
   case 13:
    var $7 = HEAPU8[$arraydecay];
    var $conv = $7 & 255;
    if (($7 & 255) > 3) {
      __label__ = 14;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 14:
    var $8 = $png_ptr;
    _png_warning($8, STRING_TABLE.__str46795 | 0);
    __label__ = 33;
    break;
   case 15:
    if ($cmp) {
      __label__ = 16;
      break;
    } else {
      __label__ = 30;
      break;
    }
   case 16:
    var $valid32 = $info_ptr + 8 | 0;
    var $9 = HEAPU32[$valid32 >> 2];
    if (($9 & 1 | 0) == 0) {
      var $13 = $9;
      __label__ = 20;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 17:
    var $10 = HEAPU32[$info_ptr + 40 >> 2];
    if (($10 - 45e3 | 0) >>> 0 > 1e3) {
      __label__ = 18;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 18:
    var $arraydecay42 = $p | 0;
    _png_warning_parameter_signed($arraydecay42, 1, 5, $10);
    var $12 = $png_ptr;
    _png_formatted_warning($12, $arraydecay42, STRING_TABLE.__str26775 | 0);
    __label__ = 19;
    break;
   case 19:
    var $13 = HEAP32[$valid32 >> 2];
    __label__ = 20;
    break;
   case 20:
    var $13;
    if (($13 & 4 | 0) == 0) {
      __label__ = 30;
      break;
    } else {
      __label__ = 21;
      break;
    }
   case 21:
    if ((HEAP32[$info_ptr + 128 >> 2] - 30270 | 0) >>> 0 > 2e3) {
      __label__ = 29;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 22:
    if ((HEAP32[$info_ptr + 132 >> 2] - 31900 | 0) >>> 0 > 2e3) {
      __label__ = 29;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 23:
    if ((HEAP32[$info_ptr + 136 >> 2] - 63e3 | 0) >>> 0 > 2e3) {
      __label__ = 29;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 24:
    if ((HEAP32[$info_ptr + 140 >> 2] - 32e3 | 0) >>> 0 > 2e3) {
      __label__ = 29;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 25:
    if ((HEAP32[$info_ptr + 144 >> 2] - 29e3 | 0) >>> 0 > 2e3) {
      __label__ = 29;
      break;
    } else {
      __label__ = 26;
      break;
    }
   case 26:
    if ((HEAP32[$info_ptr + 148 >> 2] - 59e3 | 0) >>> 0 > 2e3) {
      __label__ = 29;
      break;
    } else {
      __label__ = 27;
      break;
    }
   case 27:
    if ((HEAP32[$info_ptr + 152 >> 2] - 14e3 | 0) >>> 0 > 2e3) {
      __label__ = 29;
      break;
    } else {
      __label__ = 28;
      break;
    }
   case 28:
    if ((HEAP32[$info_ptr + 156 >> 2] - 5e3 | 0) >>> 0 > 2e3) {
      __label__ = 29;
      break;
    } else {
      __label__ = 30;
      break;
    }
   case 29:
    var $30 = $png_ptr;
    _png_warning($30, STRING_TABLE.__str47796 | 0);
    __label__ = 30;
    break;
   case 30:
    HEAP8[$png_ptr + 568 | 0] = 1;
    var $rgb_to_gray_coefficients_set = $png_ptr + 570 | 0;
    if (HEAP8[$rgb_to_gray_coefficients_set] << 24 >> 24 == 0) {
      __label__ = 31;
      break;
    } else {
      __label__ = 32;
      break;
    }
   case 31:
    HEAP16[$png_ptr + 572 >> 1] = 6968;
    HEAP16[$png_ptr + 574 >> 1] = 23434;
    HEAP8[$rgb_to_gray_coefficients_set] = 1;
    __label__ = 32;
    break;
   case 32:
    _png_set_sRGB_gAMA_and_cHRM($png_ptr, $info_ptr, $conv);
    __label__ = 33;
    break;
   case 33:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_handle_sRGB["X"] = 1;

function _png_handle_iCCP($png_ptr, $info_ptr, $length) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 260;
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $data_length = __stackBase__;
    var $p = __stackBase__ + 4;
    var $mode = $png_ptr + 84 | 0;
    var $0 = HEAP32[$mode >> 2];
    if (($0 & 1 | 0) == 0) {
      __label__ = 2;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 2:
    var $1 = $png_ptr;
    _png_error($1, STRING_TABLE.__str48797 | 0);
    __label__ = 7;
    break;
   case 3:
    if (($0 & 4 | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $2 = $png_ptr;
    _png_warning($2, STRING_TABLE.__str49798 | 0);
    var $call = _png_crc_finish($png_ptr, $length);
    __label__ = 24;
    break;
   case 5:
    if (($0 & 2 | 0) == 0) {
      __label__ = 7;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    var $3 = $png_ptr;
    _png_warning($3, STRING_TABLE.__str50799 | 0);
    __label__ = 7;
    break;
   case 7:
    var $4 = HEAP32[$mode >> 2];
    if (($4 & 16384 | 0) == 0) {
      __label__ = 8;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 8:
    if (($info_ptr | 0) == 0) {
      __label__ = 11;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    if ((HEAP32[$info_ptr + 8 >> 2] & 6144 | 0) == 0) {
      __label__ = 11;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 10:
    var $6 = $png_ptr;
    _png_warning($6, STRING_TABLE.__str51800 | 0);
    var $call18 = _png_crc_finish($png_ptr, $length);
    __label__ = 24;
    break;
   case 11:
    var $or = $4 | 16384;
    HEAP32[$mode >> 2] = $or;
    var $chunkdata = $png_ptr + 656 | 0;
    var $7 = HEAP32[$chunkdata >> 2];
    var $8 = $png_ptr;
    _png_free($8, $7);
    var $add = $length + 1 | 0;
    var $call21 = _png_malloc($8, $add);
    HEAP32[$chunkdata >> 2] = $call21;
    _png_crc_read($png_ptr, $call21, $length);
    var $call24 = _png_crc_finish($png_ptr, 0);
    var $9 = HEAP32[$chunkdata >> 2];
    if (($call24 | 0) == 0) {
      __label__ = 13;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 12:
    _png_free($8, $9);
    HEAP32[$chunkdata >> 2] = 0;
    __label__ = 24;
    break;
   case 13:
    HEAP8[$9 + $length | 0] = 0;
    var $10 = HEAPU32[$chunkdata >> 2];
    var $profile_0 = $10;
    __label__ = 14;
    break;
   case 14:
    var $profile_0;
    var $incdec_ptr = $profile_0 + 1 | 0;
    if (HEAP8[$profile_0] << 24 >> 24 == 0) {
      __label__ = 15;
      break;
    } else {
      var $profile_0 = $incdec_ptr;
      __label__ = 14;
      break;
    }
   case 15:
    if ($incdec_ptr >>> 0 < ($10 + ($length - 1) | 0) >>> 0) {
      __label__ = 17;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 16:
    _png_free($8, $10);
    HEAP32[$chunkdata >> 2] = 0;
    var $12 = $png_ptr;
    _png_warning($12, STRING_TABLE.__str52801 | 0);
    __label__ = 24;
    break;
   case 17:
    var $incdec_ptr41 = $profile_0 + 2 | 0;
    if (HEAP8[$incdec_ptr] << 24 >> 24 == 0) {
      var $15 = $10;
      __label__ = 19;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 18:
    var $14 = $png_ptr;
    _png_warning($14, STRING_TABLE.__str53802 | 0);
    var $15 = HEAP32[$chunkdata >> 2];
    __label__ = 19;
    break;
   case 19:
    var $15;
    var $sub_ptr_sub = $incdec_ptr41 - $15 | 0;
    _png_decompress_chunk($png_ptr, 0, $length, $sub_ptr_sub, $data_length);
    var $16 = HEAPU32[$data_length >> 2];
    var $sub = $16 - $sub_ptr_sub | 0;
    var $17 = HEAPU32[$chunkdata >> 2];
    if ($sub_ptr_sub >>> 0 > $16 >>> 0 | $sub >>> 0 < 4) {
      __label__ = 20;
      break;
    } else {
      __label__ = 21;
      break;
    }
   case 20:
    _png_free($8, $17);
    HEAP32[$chunkdata >> 2] = 0;
    var $18 = $png_ptr;
    _png_warning($18, STRING_TABLE.__str54803 | 0);
    __label__ = 24;
    break;
   case 21:
    var $add_ptr56 = $17 + $sub_ptr_sub | 0;
    var $or68 = (HEAPU8[$sub_ptr_sub + ($17 + 1) | 0] & 255) << 16 | (HEAPU8[$add_ptr56] & 255) << 24 | HEAPU8[$sub_ptr_sub + ($17 + 3) | 0] & 255 | (HEAPU8[$sub_ptr_sub + ($17 + 2) | 0] & 255) << 8;
    var $profile_length_0 = $or68 >>> 0 < $sub >>> 0 ? $or68 : $sub;
    if ($or68 >>> 0 > $profile_length_0 >>> 0) {
      __label__ = 22;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 22:
    _png_free($8, $17);
    HEAP32[$chunkdata >> 2] = 0;
    var $arraydecay = $p | 0;
    _png_warning_parameter_unsigned($arraydecay, 1, 1, $or68);
    _png_warning_parameter_unsigned($arraydecay, 2, 1, $profile_length_0);
    var $23 = $png_ptr;
    _png_formatted_warning($23, $arraydecay, STRING_TABLE.__str55804 | 0);
    __label__ = 24;
    break;
   case 23:
    _png_set_iCCP($png_ptr, $info_ptr, $17, 0, $add_ptr56, $or68);
    var $24 = HEAP32[$chunkdata >> 2];
    _png_free($8, $24);
    HEAP32[$chunkdata >> 2] = 0;
    __label__ = 24;
    break;
   case 24:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_handle_iCCP["X"] = 1;

function _png_handle_sPLT($png_ptr, $info_ptr, $length) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 16;
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $new_palette = __stackBase__;
    var $user_chunk_cache_max = $png_ptr + 624 | 0;
    var $0 = HEAP32[$user_chunk_cache_max >> 2];
    if (($0 | 0) == 1) {
      __label__ = 2;
      break;
    } else if (($0 | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 2:
    var $call = _png_crc_finish($png_ptr, $length);
    __label__ = 27;
    break;
   case 3:
    var $dec = $0 - 1 | 0;
    HEAP32[$user_chunk_cache_max >> 2] = $dec;
    if (($dec | 0) == 1) {
      __label__ = 4;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 4:
    var $1 = $png_ptr;
    _png_warning($1, STRING_TABLE.__str56805 | 0);
    var $call7 = _png_crc_finish($png_ptr, $length);
    __label__ = 27;
    break;
   case 5:
    var $2 = HEAP32[$png_ptr + 84 >> 2];
    if (($2 & 1 | 0) == 0) {
      __label__ = 6;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 6:
    var $3 = $png_ptr;
    _png_error($3, STRING_TABLE.__str57806 | 0);
    __label__ = 9;
    break;
   case 7:
    if (($2 & 4 | 0) == 0) {
      __label__ = 9;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    var $4 = $png_ptr;
    _png_warning($4, STRING_TABLE.__str58807 | 0);
    var $call15 = _png_crc_finish($png_ptr, $length);
    __label__ = 27;
    break;
   case 9:
    var $chunkdata = $png_ptr + 656 | 0;
    var $5 = HEAP32[$chunkdata >> 2];
    var $6 = $png_ptr;
    _png_free($6, $5);
    var $add = $length + 1 | 0;
    var $call18 = _png_malloc($6, $add);
    HEAP32[$chunkdata >> 2] = $call18;
    _png_crc_read($png_ptr, $call18, $length);
    var $call21 = _png_crc_finish($png_ptr, 0);
    var $7 = HEAP32[$chunkdata >> 2];
    if (($call21 | 0) == 0) {
      __label__ = 11;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 10:
    _png_free($6, $7);
    HEAP32[$chunkdata >> 2] = 0;
    __label__ = 27;
    break;
   case 11:
    HEAP8[$7 + $length | 0] = 0;
    var $8 = HEAPU32[$chunkdata >> 2];
    var $entry_start_0 = $8;
    __label__ = 12;
    break;
   case 12:
    var $entry_start_0;
    var $incdec_ptr = $entry_start_0 + 1 | 0;
    if (HEAP8[$entry_start_0] << 24 >> 24 == 0) {
      __label__ = 13;
      break;
    } else {
      var $entry_start_0 = $incdec_ptr;
      __label__ = 12;
      break;
    }
   case 13:
    if ($incdec_ptr >>> 0 > ($8 + ($length - 2) | 0) >>> 0) {
      __label__ = 14;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 14:
    _png_free($6, $8);
    HEAP32[$chunkdata >> 2] = 0;
    var $10 = $png_ptr;
    _png_warning($10, STRING_TABLE.__str59808 | 0);
    __label__ = 27;
    break;
   case 15:
    var $incdec_ptr38 = $entry_start_0 + 2 | 0;
    var $11 = HEAP8[$incdec_ptr];
    HEAP8[$new_palette + 4 | 0] = $11;
    var $cmp40 = $11 << 24 >> 24 == 8;
    var $cond = $cmp40 ? 6 : 10;
    var $sub = $8 - $incdec_ptr38 + $length | 0;
    if ((($sub >>> 0) % ($cond >>> 0) | 0) == 0) {
      __label__ = 17;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 16:
    _png_free($6, $8);
    HEAP32[$chunkdata >> 2] = 0;
    var $12 = $png_ptr;
    _png_warning($12, STRING_TABLE.__str60809 | 0);
    __label__ = 27;
    break;
   case 17:
    var $div = Math.floor(($sub >>> 0) / ($cond >>> 0));
    if ($div >>> 0 > 429496729) {
      __label__ = 18;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 18:
    var $13 = $png_ptr;
    _png_warning($13, STRING_TABLE.__str61810 | 0);
    __label__ = 27;
    break;
   case 19:
    HEAP32[$new_palette + 12 >> 2] = $div;
    var $mul = $div * 10 | 0;
    var $call54 = _png_malloc_warn($6, $mul);
    var $14 = $call54;
    var $entries = $new_palette + 8 | 0;
    HEAP32[$entries >> 2] = $14;
    if (($call54 | 0) == 0) {
      __label__ = 21;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 20:
    if (($div | 0) == 0) {
      __label__ = 26;
      break;
    } else {
      var $entry_start_13 = $incdec_ptr38;
      var $i_04 = 0;
      __label__ = 22;
      break;
    }
   case 21:
    var $15 = $png_ptr;
    _png_warning($15, STRING_TABLE.__str62811 | 0);
    __label__ = 27;
    break;
   case 22:
    var $i_04;
    var $entry_start_13;
    var $add_ptr66 = $14 + $i_04 * 10 | 0;
    if ($cmp40) {
      __label__ = 23;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 23:
    HEAP16[$add_ptr66 >> 1] = HEAPU8[$entry_start_13] & 255;
    HEAP16[$14 + $i_04 * 10 + 2 >> 1] = HEAPU8[$entry_start_13 + 1 | 0] & 255;
    HEAP16[$14 + $i_04 * 10 + 4 >> 1] = HEAPU8[$entry_start_13 + 2 | 0] & 255;
    HEAP16[$14 + $i_04 * 10 + 6 >> 1] = HEAPU8[$entry_start_13 + 3 | 0] & 255;
    var $entry_start_2 = $entry_start_13 + 4 | 0;
    __label__ = 25;
    break;
   case 24:
    HEAP16[$add_ptr66 >> 1] = (HEAPU8[$entry_start_13] & 255) << 8 | HEAPU8[$entry_start_13 + 1 | 0] & 255;
    HEAP16[$14 + $i_04 * 10 + 2 >> 1] = (HEAPU8[$entry_start_13 + 2 | 0] & 255) << 8 | HEAPU8[$entry_start_13 + 3 | 0] & 255;
    HEAP16[$14 + $i_04 * 10 + 4 >> 1] = (HEAPU8[$entry_start_13 + 4 | 0] & 255) << 8 | HEAPU8[$entry_start_13 + 5 | 0] & 255;
    HEAP16[$14 + $i_04 * 10 + 6 >> 1] = (HEAPU8[$entry_start_13 + 6 | 0] & 255) << 8 | HEAPU8[$entry_start_13 + 7 | 0] & 255;
    var $entry_start_2 = $entry_start_13 + 8 | 0;
    __label__ = 25;
    break;
   case 25:
    var $entry_start_2;
    HEAP16[$14 + $i_04 * 10 + 8 >> 1] = (HEAPU8[$entry_start_2] & 255) << 8 | HEAPU8[$entry_start_2 + 1 | 0] & 255;
    var $inc = $i_04 + 1 | 0;
    if (($inc | 0) < ($div | 0)) {
      var $entry_start_13 = $entry_start_2 + 2 | 0;
      var $i_04 = $inc;
      __label__ = 22;
      break;
    } else {
      __label__ = 26;
      break;
    }
   case 26:
    var $30 = HEAP32[$chunkdata >> 2];
    HEAP32[$new_palette >> 2] = $30;
    _png_set_sPLT($png_ptr, $info_ptr, $new_palette, 1);
    var $31 = HEAP32[$chunkdata >> 2];
    _png_free($6, $31);
    HEAP32[$chunkdata >> 2] = 0;
    var $33 = HEAP32[$entries >> 2];
    _png_free($6, $33);
    __label__ = 27;
    break;
   case 27:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_handle_sPLT["X"] = 1;

function _png_handle_tRNS($png_ptr, $info_ptr, $length) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 268;
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $readbuf = __stackBase__;
    var $buf = __stackBase__ + 256;
    var $buf31 = __stackBase__ + 260;
    var $mode = $png_ptr + 84 | 0;
    var $0 = HEAP32[$mode >> 2];
    if (($0 & 1 | 0) == 0) {
      __label__ = 2;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 2:
    var $1 = $png_ptr;
    _png_error($1, STRING_TABLE.__str63812 | 0);
    __label__ = 8;
    break;
   case 3:
    if (($0 & 4 | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $2 = $png_ptr;
    _png_warning($2, STRING_TABLE.__str64813 | 0);
    var $call = _png_crc_finish($png_ptr, $length);
    __label__ = 26;
    break;
   case 5:
    if (($info_ptr | 0) == 0) {
      __label__ = 8;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    if ((HEAP32[$info_ptr + 8 >> 2] & 16 | 0) == 0) {
      __label__ = 8;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    var $4 = $png_ptr;
    _png_warning($4, STRING_TABLE.__str65814 | 0);
    var $call9 = _png_crc_finish($png_ptr, $length);
    __label__ = 26;
    break;
   case 8:
    var $5 = HEAP8[$png_ptr + 291 | 0];
    if ($5 << 24 >> 24 == 0) {
      __label__ = 9;
      break;
    } else if ($5 << 24 >> 24 == 2) {
      __label__ = 12;
      break;
    } else if ($5 << 24 >> 24 == 3) {
      __label__ = 15;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 9:
    if (($length | 0) == 2) {
      __label__ = 11;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 10:
    var $6 = $png_ptr;
    _png_warning($6, STRING_TABLE.__str66815 | 0);
    var $call18 = _png_crc_finish($png_ptr, $length);
    __label__ = 26;
    break;
   case 11:
    var $arraydecay = $buf | 0;
    _png_crc_read($png_ptr, $arraydecay, 2);
    HEAP16[$png_ptr + 284 >> 1] = 1;
    HEAP16[$png_ptr + 408 >> 1] = (HEAPU8[$arraydecay] & 255) << 8 | HEAPU8[$buf + 1 | 0] & 255;
    __label__ = 23;
    break;
   case 12:
    if (($length | 0) == 6) {
      __label__ = 14;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 13:
    var $9 = $png_ptr;
    _png_warning($9, STRING_TABLE.__str66815 | 0);
    var $call35 = _png_crc_finish($png_ptr, $length);
    __label__ = 26;
    break;
   case 14:
    var $arraydecay37 = $buf31 | 0;
    _png_crc_read($png_ptr, $arraydecay37, 6);
    HEAP16[$png_ptr + 284 >> 1] = 1;
    HEAP16[$png_ptr + 402 >> 1] = (HEAPU8[$arraydecay37] & 255) << 8 | HEAPU8[$buf31 + 1 | 0] & 255;
    HEAP16[$png_ptr + 404 >> 1] = (HEAPU8[$buf31 + 2 | 0] & 255) << 8 | HEAPU8[$buf31 + 3 | 0] & 255;
    HEAP16[$png_ptr + 406 >> 1] = (HEAPU8[$buf31 + 4 | 0] & 255) << 8 | HEAPU8[$buf31 + 5 | 0] & 255;
    __label__ = 23;
    break;
   case 15:
    if ((HEAP32[$mode >> 2] & 2 | 0) == 0) {
      __label__ = 16;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 16:
    var $17 = $png_ptr;
    _png_warning($17, STRING_TABLE.__str67816 | 0);
    __label__ = 17;
    break;
   case 17:
    if ((HEAPU16[$png_ptr + 276 >> 1] & 65535) >>> 0 < $length >>> 0 | $length >>> 0 > 256) {
      __label__ = 18;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 18:
    var $19 = $png_ptr;
    _png_warning($19, STRING_TABLE.__str66815 | 0);
    var $call87 = _png_crc_finish($png_ptr, $length);
    __label__ = 26;
    break;
   case 19:
    if (($length | 0) == 0) {
      __label__ = 20;
      break;
    } else {
      __label__ = 21;
      break;
    }
   case 20:
    var $20 = $png_ptr;
    _png_warning($20, STRING_TABLE.__str68817 | 0);
    var $call92 = _png_crc_finish($png_ptr, 0);
    __label__ = 26;
    break;
   case 21:
    var $arraydecay94 = $readbuf | 0;
    _png_crc_read($png_ptr, $arraydecay94, $length);
    HEAP16[$png_ptr + 284 >> 1] = $length & 65535;
    __label__ = 23;
    break;
   case 22:
    var $21 = $png_ptr;
    _png_warning($21, STRING_TABLE.__str69818 | 0);
    var $call98 = _png_crc_finish($png_ptr, $length);
    __label__ = 26;
    break;
   case 23:
    var $call102 = _png_crc_finish($png_ptr, 0);
    if (($call102 | 0) == 0) {
      __label__ = 25;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 24:
    HEAP16[$png_ptr + 284 >> 1] = 0;
    __label__ = 26;
    break;
   case 25:
    var $arraydecay107 = $readbuf | 0;
    var $conv109 = HEAPU16[$png_ptr + 284 >> 1] & 65535;
    var $trans_color110 = $png_ptr + 400 | 0;
    _png_set_tRNS($png_ptr, $info_ptr, $arraydecay107, $conv109, $trans_color110);
    __label__ = 26;
    break;
   case 26:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_handle_tRNS["X"] = 1;

function _png_handle_bKGD($png_ptr, $info_ptr, $length) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 20;
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $buf = __stackBase__;
    var $background = __stackBase__ + 8;
    var $0 = HEAP32[$png_ptr + 84 >> 2];
    if (($0 & 1 | 0) == 0) {
      __label__ = 2;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 2:
    var $1 = $png_ptr;
    _png_error($1, STRING_TABLE.__str70819 | 0);
    var $7 = HEAP8[$png_ptr + 291 | 0];
    __label__ = 11;
    break;
   case 3:
    if (($0 & 4 | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $2 = $png_ptr;
    _png_warning($2, STRING_TABLE.__str71820 | 0);
    var $call = _png_crc_finish($png_ptr, $length);
    __label__ = 28;
    break;
   case 5:
    var $3 = HEAP8[$png_ptr + 291 | 0];
    if ($3 << 24 >> 24 == 3) {
      __label__ = 6;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 6:
    if (($0 & 2 | 0) == 0) {
      __label__ = 7;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 7:
    var $4 = $png_ptr;
    _png_warning($4, STRING_TABLE.__str72821 | 0);
    var $call11 = _png_crc_finish($png_ptr, $length);
    __label__ = 28;
    break;
   case 8:
    if (($info_ptr | 0) == 0) {
      var $7 = $3;
      __label__ = 11;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    if ((HEAP32[$info_ptr + 8 >> 2] & 32 | 0) == 0) {
      var $7 = $3;
      __label__ = 11;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 10:
    var $6 = $png_ptr;
    _png_warning($6, STRING_TABLE.__str73822 | 0);
    var $call19 = _png_crc_finish($png_ptr, $length);
    __label__ = 28;
    break;
   case 11:
    var $7;
    var $color_type23 = $png_ptr + 291 | 0;
    if ($7 << 24 >> 24 == 3) {
      var $truelen_0 = 1;
      __label__ = 13;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 12:
    var $_ = ($7 & 2) << 24 >> 24 == 0 ? 2 : 6;
    var $truelen_0 = $_;
    __label__ = 13;
    break;
   case 13:
    var $truelen_0;
    if (($truelen_0 | 0) == ($length | 0)) {
      __label__ = 15;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 14:
    var $8 = $png_ptr;
    _png_warning($8, STRING_TABLE.__str74823 | 0);
    var $call40 = _png_crc_finish($png_ptr, $length);
    __label__ = 28;
    break;
   case 15:
    var $arraydecay = $buf | 0;
    _png_crc_read($png_ptr, $arraydecay, $truelen_0);
    var $call42 = _png_crc_finish($png_ptr, 0);
    if (($call42 | 0) == 0) {
      __label__ = 16;
      break;
    } else {
      __label__ = 28;
      break;
    }
   case 16:
    var $9 = HEAPU8[$color_type23];
    if ($9 << 24 >> 24 == 3) {
      __label__ = 17;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 17:
    var $10 = HEAPU8[$arraydecay];
    HEAP8[$background | 0] = $10;
    if (($info_ptr | 0) == 0) {
      __label__ = 22;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 18:
    var $11 = HEAPU16[$info_ptr + 20 >> 1];
    if ($11 << 16 >> 16 == 0) {
      __label__ = 22;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 19:
    var $conv57 = $10 & 255;
    if ($conv57 >>> 0 < ($11 & 65535) >>> 0) {
      __label__ = 21;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 20:
    var $12 = $png_ptr;
    _png_warning($12, STRING_TABLE.__str75824 | 0);
    __label__ = 28;
    break;
   case 21:
    var $13 = HEAPU32[$png_ptr + 272 >> 2];
    HEAP16[$background + 2 >> 1] = HEAPU8[$13 + $conv57 * 3 | 0] & 255;
    HEAP16[$background + 4 >> 1] = HEAPU8[$13 + $conv57 * 3 + 1 | 0] & 255;
    HEAP16[$background + 6 >> 1] = HEAPU8[$13 + $conv57 * 3 + 2 | 0] & 255;
    __label__ = 23;
    break;
   case 22:
    HEAP16[$background + 6 >> 1] = 0;
    HEAP16[$background + 4 >> 1] = 0;
    HEAP16[$background + 2 >> 1] = 0;
    __label__ = 23;
    break;
   case 23:
    HEAP16[$background + 8 >> 1] = 0;
    __label__ = 27;
    break;
   case 24:
    var $tobool89 = ($9 & 2) << 24 >> 24 == 0;
    HEAP8[$background | 0] = 0;
    var $add109 = (HEAPU8[$arraydecay] & 255) << 8 | HEAPU8[$buf + 1 | 0] & 255;
    if ($tobool89) {
      __label__ = 25;
      break;
    } else {
      __label__ = 26;
      break;
    }
   case 25:
    HEAP16[$background + 8 >> 1] = $add109;
    HEAP16[$background + 6 >> 1] = $add109;
    HEAP16[$background + 4 >> 1] = $add109;
    HEAP16[$background + 2 >> 1] = $add109;
    __label__ = 27;
    break;
   case 26:
    HEAP16[$background + 2 >> 1] = $add109;
    HEAP16[$background + 4 >> 1] = (HEAPU8[$buf + 2 | 0] & 255) << 8 | HEAPU8[$buf + 3 | 0] & 255;
    HEAP16[$background + 6 >> 1] = (HEAPU8[$buf + 4 | 0] & 255) << 8 | HEAPU8[$buf + 5 | 0] & 255;
    HEAP16[$background + 8 >> 1] = 0;
    __label__ = 27;
    break;
   case 27:
    _png_set_bKGD($png_ptr, $info_ptr, $background);
    __label__ = 28;
    break;
   case 28:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_handle_bKGD["X"] = 1;

function _png_handle_hIST($png_ptr, $info_ptr, $length) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 516;
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $readbuf = __stackBase__;
    var $buf = __stackBase__ + 512;
    var $0 = HEAP32[$png_ptr + 84 >> 2];
    if (($0 & 1 | 0) == 0) {
      __label__ = 2;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 2:
    var $1 = $png_ptr;
    _png_error($1, STRING_TABLE.__str76825 | 0);
    __label__ = 10;
    break;
   case 3:
    if (($0 & 4 | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $2 = $png_ptr;
    _png_warning($2, STRING_TABLE.__str77826 | 0);
    var $call = _png_crc_finish($png_ptr, $length);
    __label__ = 18;
    break;
   case 5:
    if (($0 & 2 | 0) == 0) {
      __label__ = 6;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 6:
    var $3 = $png_ptr;
    _png_warning($3, STRING_TABLE.__str78827 | 0);
    var $call10 = _png_crc_finish($png_ptr, $length);
    __label__ = 18;
    break;
   case 7:
    if (($info_ptr | 0) == 0) {
      __label__ = 10;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    if ((HEAP32[$info_ptr + 8 >> 2] & 64 | 0) == 0) {
      __label__ = 10;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    var $5 = $png_ptr;
    _png_warning($5, STRING_TABLE.__str79828 | 0);
    var $call15 = _png_crc_finish($png_ptr, $length);
    __label__ = 18;
    break;
   case 10:
    if ($length >>> 0 > 512) {
      __label__ = 12;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    if (((HEAPU16[$png_ptr + 276 >> 1] & 65535) << 1 | 0) == ($length | 0)) {
      __label__ = 13;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 12:
    var $7 = $png_ptr;
    _png_warning($7, STRING_TABLE.__str80829 | 0);
    var $call23 = _png_crc_finish($png_ptr, $length);
    __label__ = 18;
    break;
   case 13:
    var $div = $length >>> 1;
    if (($div | 0) == 0) {
      __label__ = 16;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 14:
    var $arraydecay = $buf | 0;
    var $add_ptr = $buf + 1 | 0;
    var $i_02 = 0;
    __label__ = 15;
    break;
   case 15:
    var $i_02;
    _png_crc_read($png_ptr, $arraydecay, 2);
    HEAP16[$readbuf + ($i_02 << 1) >> 1] = (HEAPU8[$arraydecay] & 255) << 8 | HEAPU8[$add_ptr] & 255;
    var $inc = $i_02 + 1 | 0;
    if ($inc >>> 0 < $div >>> 0) {
      var $i_02 = $inc;
      __label__ = 15;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 16:
    var $call32 = _png_crc_finish($png_ptr, 0);
    if (($call32 | 0) == 0) {
      __label__ = 17;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 17:
    var $arraydecay36 = $readbuf | 0;
    _png_set_hIST($png_ptr, $info_ptr, $arraydecay36);
    __label__ = 18;
    break;
   case 18:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_handle_hIST["X"] = 1;

function _png_handle_pHYs($png_ptr, $info_ptr, $length) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 12;
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $buf = __stackBase__;
    var $0 = HEAP32[$png_ptr + 84 >> 2];
    if (($0 & 1 | 0) == 0) {
      __label__ = 2;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 2:
    var $1 = $png_ptr;
    _png_error($1, STRING_TABLE.__str81830 | 0);
    __label__ = 8;
    break;
   case 3:
    if (($0 & 4 | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $2 = $png_ptr;
    _png_warning($2, STRING_TABLE.__str82831 | 0);
    var $call = _png_crc_finish($png_ptr, $length);
    __label__ = 12;
    break;
   case 5:
    if (($info_ptr | 0) == 0) {
      __label__ = 8;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    if ((HEAP32[$info_ptr + 8 >> 2] & 128 | 0) == 0) {
      __label__ = 8;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    var $4 = $png_ptr;
    _png_warning($4, STRING_TABLE.__str83832 | 0);
    var $call9 = _png_crc_finish($png_ptr, $length);
    __label__ = 12;
    break;
   case 8:
    if (($length | 0) == 9) {
      __label__ = 10;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    var $5 = $png_ptr;
    _png_warning($5, STRING_TABLE.__str84833 | 0);
    var $call14 = _png_crc_finish($png_ptr, $length);
    __label__ = 12;
    break;
   case 10:
    var $arraydecay = $buf | 0;
    _png_crc_read($png_ptr, $arraydecay, 9);
    var $call16 = _png_crc_finish($png_ptr, 0);
    if (($call16 | 0) == 0) {
      __label__ = 11;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 11:
    var $add32 = (HEAPU8[$buf + 1 | 0] & 255) << 16 | (HEAPU8[$arraydecay] & 255) << 24 | HEAPU8[$buf + 3 | 0] & 255 | (HEAPU8[$buf + 2 | 0] & 255) << 8;
    var $add53 = (HEAPU8[$buf + 5 | 0] & 255) << 16 | (HEAPU8[$buf + 4 | 0] & 255) << 24 | HEAPU8[$buf + 7 | 0] & 255 | (HEAPU8[$buf + 6 | 0] & 255) << 8;
    var $conv54 = HEAPU8[$buf + 8 | 0] & 255;
    _png_set_pHYs($png_ptr, $info_ptr, $add32, $add53, $conv54);
    __label__ = 12;
    break;
   case 12:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_handle_pHYs["X"] = 1;

function _png_handle_oFFs($png_ptr, $info_ptr, $length) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 12;
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $buf = __stackBase__;
    var $0 = HEAP32[$png_ptr + 84 >> 2];
    if (($0 & 1 | 0) == 0) {
      __label__ = 2;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 2:
    var $1 = $png_ptr;
    _png_error($1, STRING_TABLE.__str85834 | 0);
    __label__ = 8;
    break;
   case 3:
    if (($0 & 4 | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $2 = $png_ptr;
    _png_warning($2, STRING_TABLE.__str86835 | 0);
    var $call = _png_crc_finish($png_ptr, $length);
    __label__ = 12;
    break;
   case 5:
    if (($info_ptr | 0) == 0) {
      __label__ = 8;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    if ((HEAP32[$info_ptr + 8 >> 2] & 256 | 0) == 0) {
      __label__ = 8;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    var $4 = $png_ptr;
    _png_warning($4, STRING_TABLE.__str87836 | 0);
    var $call9 = _png_crc_finish($png_ptr, $length);
    __label__ = 12;
    break;
   case 8:
    if (($length | 0) == 9) {
      __label__ = 10;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    var $5 = $png_ptr;
    _png_warning($5, STRING_TABLE.__str88837 | 0);
    var $call14 = _png_crc_finish($png_ptr, $length);
    __label__ = 12;
    break;
   case 10:
    var $arraydecay = $buf | 0;
    _png_crc_read($png_ptr, $arraydecay, 9);
    var $call16 = _png_crc_finish($png_ptr, 0);
    if (($call16 | 0) == 0) {
      __label__ = 11;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 11:
    var $add36 = (HEAPU8[$buf + 1 | 0] & 255) << 16 | (HEAPU8[$arraydecay] & 255) << 24 | HEAPU8[$buf + 3 | 0] & 255 | (HEAPU8[$buf + 2 | 0] & 255) << 8;
    var $add81 = (HEAPU8[$buf + 5 | 0] & 255) << 16 | (HEAPU8[$buf + 4 | 0] & 255) << 24 | HEAPU8[$buf + 7 | 0] & 255 | (HEAPU8[$buf + 6 | 0] & 255) << 8;
    var $conv109 = HEAPU8[$buf + 8 | 0] & 255;
    _png_set_oFFs($png_ptr, $info_ptr, $add36, $add81, $conv109);
    __label__ = 12;
    break;
   case 12:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_handle_oFFs["X"] = 1;

function _png_handle_pCAL($png_ptr, $info_ptr, $length) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $0 = HEAP32[$png_ptr + 84 >> 2];
    if (($0 & 1 | 0) == 0) {
      __label__ = 2;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 2:
    var $1 = $png_ptr;
    _png_error($1, STRING_TABLE.__str89838 | 0);
    __label__ = 8;
    break;
   case 3:
    if (($0 & 4 | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $2 = $png_ptr;
    _png_warning($2, STRING_TABLE.__str90839 | 0);
    var $call = _png_crc_finish($png_ptr, $length);
    __label__ = 34;
    break;
   case 5:
    if (($info_ptr | 0) == 0) {
      __label__ = 8;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    if ((HEAP32[$info_ptr + 8 >> 2] & 1024 | 0) == 0) {
      __label__ = 8;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    var $4 = $png_ptr;
    _png_warning($4, STRING_TABLE.__str91840 | 0);
    var $call9 = _png_crc_finish($png_ptr, $length);
    __label__ = 34;
    break;
   case 8:
    var $chunkdata = $png_ptr + 656 | 0;
    var $5 = HEAP32[$chunkdata >> 2];
    var $6 = $png_ptr;
    _png_free($6, $5);
    var $add = $length + 1 | 0;
    var $call12 = _png_malloc_warn($6, $add);
    HEAP32[$chunkdata >> 2] = $call12;
    if (($call12 | 0) == 0) {
      __label__ = 9;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 9:
    var $7 = $png_ptr;
    _png_warning($7, STRING_TABLE.__str92841 | 0);
    __label__ = 34;
    break;
   case 10:
    _png_crc_read($png_ptr, $call12, $length);
    var $call19 = _png_crc_finish($png_ptr, 0);
    var $8 = HEAP32[$chunkdata >> 2];
    if (($call19 | 0) == 0) {
      __label__ = 12;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    _png_free($6, $8);
    HEAP32[$chunkdata >> 2] = 0;
    __label__ = 34;
    break;
   case 12:
    HEAP8[$8 + $length | 0] = 0;
    var $9 = HEAP32[$chunkdata >> 2];
    if (HEAP8[$9] << 24 >> 24 == 0) {
      var $buf_0_lcssa = $9;
      __label__ = 14;
      break;
    } else {
      var $buf_011 = $9;
      __label__ = 13;
      break;
    }
   case 13:
    var $buf_011;
    var $incdec_ptr = $buf_011 + 1 | 0;
    if (HEAP8[$incdec_ptr] << 24 >> 24 == 0) {
      var $buf_0_lcssa = $incdec_ptr;
      __label__ = 14;
      break;
    } else {
      var $buf_011 = $incdec_ptr;
      __label__ = 13;
      break;
    }
   case 14:
    var $buf_0_lcssa;
    var $add_ptr = $9 + $length | 0;
    if ($add_ptr >>> 0 > ($buf_0_lcssa + 12 | 0) >>> 0) {
      __label__ = 16;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 15:
    var $12 = $png_ptr;
    _png_warning($12, STRING_TABLE.__str93842 | 0);
    var $13 = HEAP32[$chunkdata >> 2];
    _png_free($6, $13);
    HEAP32[$chunkdata >> 2] = 0;
    __label__ = 34;
    break;
   case 16:
    var $add53 = (HEAPU8[$buf_0_lcssa + 2 | 0] & 255) << 16 | (HEAPU8[$buf_0_lcssa + 1 | 0] & 255) << 24 | HEAPU8[$buf_0_lcssa + 4 | 0] & 255 | (HEAPU8[$buf_0_lcssa + 3 | 0] & 255) << 8;
    var $add93 = (HEAPU8[$buf_0_lcssa + 6 | 0] & 255) << 16 | (HEAPU8[$buf_0_lcssa + 5 | 0] & 255) << 24 | HEAPU8[$buf_0_lcssa + 8 | 0] & 255 | (HEAPU8[$buf_0_lcssa + 7 | 0] & 255) << 8;
    var $22 = HEAPU8[$buf_0_lcssa + 9 | 0];
    var $23 = HEAPU8[$buf_0_lcssa + 10 | 0];
    var $add_ptr119 = $buf_0_lcssa + 11 | 0;
    var $conv120 = $22 & 255;
    if ($22 << 24 >> 24 != 0 | $23 << 24 >> 24 == 2) {
      __label__ = 17;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 17:
    if (($22 - 1 & 255 & 255) > 1 | $23 << 24 >> 24 == 3) {
      __label__ = 18;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 18:
    if ($22 << 24 >> 24 != 3 | $23 << 24 >> 24 == 4) {
      __label__ = 20;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 19:
    var $25 = $png_ptr;
    _png_warning($25, STRING_TABLE.__str94843 | 0);
    var $26 = HEAP32[$chunkdata >> 2];
    _png_free($6, $26);
    HEAP32[$chunkdata >> 2] = 0;
    __label__ = 34;
    break;
   case 20:
    if (($22 & 255) > 3) {
      __label__ = 21;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 21:
    var $27 = $png_ptr;
    _png_warning($27, STRING_TABLE.__str361169 | 0);
    __label__ = 22;
    break;
   case 22:
    if (HEAP8[$add_ptr119] << 24 >> 24 == 0) {
      var $buf_1_lcssa = $add_ptr119;
      __label__ = 24;
      break;
    } else {
      var $buf_19 = $add_ptr119;
      __label__ = 23;
      break;
    }
   case 23:
    var $buf_19;
    var $incdec_ptr164 = $buf_19 + 1 | 0;
    if (HEAP8[$incdec_ptr164] << 24 >> 24 == 0) {
      var $buf_1_lcssa = $incdec_ptr164;
      __label__ = 24;
      break;
    } else {
      var $buf_19 = $incdec_ptr164;
      __label__ = 23;
      break;
    }
   case 24:
    var $buf_1_lcssa;
    var $conv166 = $23 & 255;
    var $mul = $conv166 << 2;
    var $call167 = _png_malloc_warn($6, $mul);
    var $30 = $call167;
    if (($call167 | 0) == 0) {
      __label__ = 25;
      break;
    } else {
      var $i_0 = 0;
      var $buf_2 = $buf_1_lcssa;
      __label__ = 26;
      break;
    }
   case 25:
    var $31 = HEAP32[$chunkdata >> 2];
    _png_free($6, $31);
    HEAP32[$chunkdata >> 2] = 0;
    var $32 = $png_ptr;
    _png_warning($32, STRING_TABLE.__str96845 | 0);
    __label__ = 34;
    break;
   case 26:
    var $buf_2;
    var $i_0;
    if (($i_0 | 0) < ($conv166 | 0)) {
      __label__ = 27;
      break;
    } else {
      __label__ = 33;
      break;
    }
   case 27:
    var $incdec_ptr179 = $buf_2 + 1 | 0;
    HEAP32[$30 + ($i_0 << 2) >> 2] = $incdec_ptr179;
    var $buf_3 = $incdec_ptr179;
    __label__ = 28;
    break;
   case 28:
    var $buf_3;
    if ($buf_3 >>> 0 > $add_ptr >>> 0) {
      __label__ = 31;
      break;
    } else {
      __label__ = 29;
      break;
    }
   case 29:
    if (HEAP8[$buf_3] << 24 >> 24 == 0) {
      __label__ = 32;
      break;
    } else {
      __label__ = 30;
      break;
    }
   case 30:
    var $buf_3 = $buf_3 + 1 | 0;
    __label__ = 28;
    break;
   case 31:
    var $34 = $png_ptr;
    _png_warning($34, STRING_TABLE.__str93842 | 0);
    var $35 = HEAP32[$chunkdata >> 2];
    _png_free($6, $35);
    HEAP32[$chunkdata >> 2] = 0;
    _png_free($6, $call167);
    __label__ = 34;
    break;
   case 32:
    var $i_0 = $i_0 + 1 | 0;
    var $buf_2 = $buf_3;
    __label__ = 26;
    break;
   case 33:
    var $36 = HEAP32[$chunkdata >> 2];
    _png_set_pCAL($png_ptr, $info_ptr, $36, $add53, $add93, $conv120, $conv166, $add_ptr119, $30);
    var $37 = HEAP32[$chunkdata >> 2];
    _png_free($6, $37);
    HEAP32[$chunkdata >> 2] = 0;
    _png_free($6, $call167);
    __label__ = 34;
    break;
   case 34:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_handle_pCAL["X"] = 1;

function _png_handle_sCAL($png_ptr, $info_ptr, $length) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 8;
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $i = __stackBase__;
    var $state = __stackBase__ + 4;
    var $0 = HEAP32[$png_ptr + 84 >> 2];
    if (($0 & 1 | 0) == 0) {
      __label__ = 2;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 2:
    var $1 = $png_ptr;
    _png_error($1, STRING_TABLE.__str97846 | 0);
    __label__ = 10;
    break;
   case 3:
    if (($0 & 4 | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $2 = $png_ptr;
    _png_warning($2, STRING_TABLE.__str98847 | 0);
    var $call = _png_crc_finish($png_ptr, $length);
    __label__ = 28;
    break;
   case 5:
    if (($info_ptr | 0) == 0) {
      __label__ = 8;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    if ((HEAP32[$info_ptr + 8 >> 2] & 16384 | 0) == 0) {
      __label__ = 8;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    var $4 = $png_ptr;
    _png_warning($4, STRING_TABLE.__str99848 | 0);
    var $call9 = _png_crc_finish($png_ptr, $length);
    __label__ = 28;
    break;
   case 8:
    if ($length >>> 0 < 4) {
      __label__ = 9;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 9:
    var $5 = $png_ptr;
    _png_warning($5, STRING_TABLE.__str100849 | 0);
    var $call13 = _png_crc_finish($png_ptr, $length);
    __label__ = 28;
    break;
   case 10:
    var $add = $length + 1 | 0;
    var $6 = $png_ptr;
    var $call17 = _png_malloc_warn($6, $add);
    var $chunkdata = $png_ptr + 656 | 0;
    HEAP32[$chunkdata >> 2] = $call17;
    if (($call17 | 0) == 0) {
      __label__ = 11;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 11:
    var $7 = $png_ptr;
    _png_warning($7, STRING_TABLE.__str101850 | 0);
    var $call21 = _png_crc_finish($png_ptr, $length);
    __label__ = 28;
    break;
   case 12:
    _png_crc_read($png_ptr, $call17, $length);
    HEAP8[HEAP32[$chunkdata >> 2] + $length | 0] = 0;
    var $call25 = _png_crc_finish($png_ptr, 0);
    var $9 = HEAPU32[$chunkdata >> 2];
    if (($call25 | 0) == 0) {
      __label__ = 14;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 13:
    _png_free($6, $9);
    HEAP32[$chunkdata >> 2] = 0;
    __label__ = 28;
    break;
   case 14:
    if ((HEAP8[$9] - 1 & 255 & 255) < 2) {
      __label__ = 16;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 15:
    var $11 = $png_ptr;
    _png_warning($11, STRING_TABLE.__str102851 | 0);
    var $12 = HEAP32[$chunkdata >> 2];
    _png_free($6, $12);
    HEAP32[$chunkdata >> 2] = 0;
    __label__ = 28;
    break;
   case 16:
    HEAP32[$i >> 2] = 1;
    HEAP32[$state >> 2] = 0;
    var $call46 = _png_check_fp_number($9, $length, $state, $i);
    if (($call46 | 0) == 0) {
      __label__ = 19;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 17:
    var $13 = HEAPU32[$i >> 2];
    if ($13 >>> 0 < $length >>> 0) {
      __label__ = 18;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 18:
    var $inc = $13 + 1 | 0;
    HEAP32[$i >> 2] = $inc;
    var $14 = HEAPU32[$chunkdata >> 2];
    if (HEAP8[$14 + $13 | 0] << 24 >> 24 == 0) {
      __label__ = 20;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 19:
    var $16 = $png_ptr;
    _png_warning($16, STRING_TABLE.__str103852 | 0);
    __label__ = 27;
    break;
   case 20:
    if ((HEAP32[$state >> 2] & 392 | 0) == 264) {
      __label__ = 22;
      break;
    } else {
      __label__ = 21;
      break;
    }
   case 21:
    var $18 = $png_ptr;
    _png_warning($18, STRING_TABLE.__str104853 | 0);
    __label__ = 27;
    break;
   case 22:
    HEAP32[$state >> 2] = 0;
    var $call64 = _png_check_fp_number($14, $length, $state, $i);
    if (($call64 | 0) != 0 & (HEAP32[$i >> 2] | 0) == ($length | 0)) {
      __label__ = 24;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 23:
    var $20 = $png_ptr;
    _png_warning($20, STRING_TABLE.__str105854 | 0);
    __label__ = 27;
    break;
   case 24:
    if ((HEAP32[$state >> 2] & 392 | 0) == 264) {
      __label__ = 26;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 25:
    var $22 = $png_ptr;
    _png_warning($22, STRING_TABLE.__str106855 | 0);
    __label__ = 27;
    break;
   case 26:
    var $23 = HEAP32[$chunkdata >> 2];
    var $conv78 = HEAP8[$23] << 24 >> 24;
    var $add_ptr = $23 + 1 | 0;
    var $add_ptr81 = $23 + $inc | 0;
    _png_set_sCAL_s($png_ptr, $info_ptr, $conv78, $add_ptr, $add_ptr81);
    __label__ = 27;
    break;
   case 27:
    var $25 = HEAP32[$chunkdata >> 2];
    _png_free($6, $25);
    HEAP32[$chunkdata >> 2] = 0;
    __label__ = 28;
    break;
   case 28:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_handle_sCAL["X"] = 1;

function _png_handle_tIME($png_ptr, $info_ptr, $length) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 16;
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $buf = __stackBase__;
    var $mod_time = __stackBase__ + 8;
    var $mode = $png_ptr + 84 | 0;
    var $0 = HEAP32[$mode >> 2];
    if (($0 & 1 | 0) == 0) {
      __label__ = 2;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 2:
    var $1 = $png_ptr;
    _png_error($1, STRING_TABLE.__str107856 | 0);
    var $4 = HEAP32[$mode >> 2];
    __label__ = 6;
    break;
   case 3:
    if (($info_ptr | 0) == 0) {
      var $4 = $0;
      __label__ = 6;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    if ((HEAP32[$info_ptr + 8 >> 2] & 512 | 0) == 0) {
      var $4 = $0;
      __label__ = 6;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $3 = $png_ptr;
    _png_warning($3, STRING_TABLE.__str108857 | 0);
    var $call = _png_crc_finish($png_ptr, $length);
    __label__ = 12;
    break;
   case 6:
    var $4;
    if (($4 & 4 | 0) == 0) {
      __label__ = 8;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    HEAP32[$mode >> 2] = $4 | 8;
    __label__ = 8;
    break;
   case 8:
    if (($length | 0) == 7) {
      __label__ = 10;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    var $5 = $png_ptr;
    _png_warning($5, STRING_TABLE.__str109858 | 0);
    var $call13 = _png_crc_finish($png_ptr, $length);
    __label__ = 12;
    break;
   case 10:
    var $arraydecay = $buf | 0;
    _png_crc_read($png_ptr, $arraydecay, 7);
    var $call15 = _png_crc_finish($png_ptr, 0);
    if (($call15 | 0) == 0) {
      __label__ = 11;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 11:
    var $6 = HEAP8[$buf + 6 | 0];
    HEAP8[$mod_time + 6 | 0] = $6;
    var $7 = HEAP8[$buf + 5 | 0];
    HEAP8[$mod_time + 5 | 0] = $7;
    var $8 = HEAP8[$buf + 4 | 0];
    HEAP8[$mod_time + 4 | 0] = $8;
    var $9 = HEAP8[$buf + 3 | 0];
    HEAP8[$mod_time + 3 | 0] = $9;
    var $10 = HEAP8[$buf + 2 | 0];
    HEAP8[$mod_time + 2 | 0] = $10;
    HEAP16[$mod_time >> 1] = (HEAPU8[$arraydecay] & 255) << 8 | HEAPU8[$buf + 1 | 0] & 255;
    _png_set_tIME($png_ptr, $info_ptr, $mod_time);
    __label__ = 12;
    break;
   case 12:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_handle_tIME["X"] = 1;

function _png_handle_tEXt($png_ptr, $info_ptr, $length) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $user_chunk_cache_max = $png_ptr + 624 | 0;
    var $0 = HEAP32[$user_chunk_cache_max >> 2];
    if (($0 | 0) == 1) {
      __label__ = 2;
      break;
    } else if (($0 | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 2:
    var $call = _png_crc_finish($png_ptr, $length);
    __label__ = 19;
    break;
   case 3:
    var $dec = $0 - 1 | 0;
    HEAP32[$user_chunk_cache_max >> 2] = $dec;
    if (($dec | 0) == 1) {
      __label__ = 4;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 4:
    var $1 = $png_ptr;
    _png_warning($1, STRING_TABLE.__str110859 | 0);
    var $call7 = _png_crc_finish($png_ptr, $length);
    __label__ = 19;
    break;
   case 5:
    var $mode = $png_ptr + 84 | 0;
    var $2 = HEAP32[$mode >> 2];
    if (($2 & 1 | 0) == 0) {
      __label__ = 6;
      break;
    } else {
      var $4 = $2;
      __label__ = 7;
      break;
    }
   case 6:
    var $3 = $png_ptr;
    _png_error($3, STRING_TABLE.__str111860 | 0);
    var $4 = HEAP32[$mode >> 2];
    __label__ = 7;
    break;
   case 7:
    var $4;
    if (($4 & 4 | 0) == 0) {
      __label__ = 9;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    HEAP32[$mode >> 2] = $4 | 8;
    __label__ = 9;
    break;
   case 9:
    var $chunkdata = $png_ptr + 656 | 0;
    var $5 = HEAP32[$chunkdata >> 2];
    var $6 = $png_ptr;
    _png_free($6, $5);
    var $add = $length + 1 | 0;
    var $call18 = _png_malloc_warn($6, $add);
    HEAP32[$chunkdata >> 2] = $call18;
    if (($call18 | 0) == 0) {
      __label__ = 10;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 10:
    var $7 = $png_ptr;
    _png_warning($7, STRING_TABLE.__str112861 | 0);
    __label__ = 19;
    break;
   case 11:
    _png_crc_read($png_ptr, $call18, $length);
    var $call25 = _png_crc_finish($png_ptr, 0);
    var $8 = HEAP32[$chunkdata >> 2];
    if (($call25 | 0) == 0) {
      __label__ = 13;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 12:
    _png_free($6, $8);
    HEAP32[$chunkdata >> 2] = 0;
    __label__ = 19;
    break;
   case 13:
    var $arrayidx = $8 + $length | 0;
    HEAP8[$arrayidx] = 0;
    if (HEAP8[$8] << 24 >> 24 == 0) {
      var $text_0_lcssa = $8;
      __label__ = 15;
      break;
    } else {
      var $text_02 = $8;
      __label__ = 14;
      break;
    }
   case 14:
    var $text_02;
    var $incdec_ptr = $text_02 + 1 | 0;
    if (HEAP8[$incdec_ptr] << 24 >> 24 == 0) {
      var $text_0_lcssa = $incdec_ptr;
      __label__ = 15;
      break;
    } else {
      var $text_02 = $incdec_ptr;
      __label__ = 14;
      break;
    }
   case 15:
    var $text_0_lcssa;
    var $text_1 = ($text_0_lcssa | 0) == ($arrayidx | 0) ? $text_0_lcssa : $text_0_lcssa + 1 | 0;
    var $call37 = _png_malloc_warn($6, 28);
    if (($call37 | 0) == 0) {
      __label__ = 16;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 16:
    var $11 = $png_ptr;
    _png_warning($11, STRING_TABLE.__str113862 | 0);
    var $12 = HEAP32[$chunkdata >> 2];
    _png_free($6, $12);
    HEAP32[$chunkdata >> 2] = 0;
    __label__ = 19;
    break;
   case 17:
    var $13 = $call37;
    HEAP32[$call37 >> 2] = -1;
    HEAP32[$call37 + 4 >> 2] = $8;
    HEAP32[$call37 + 20 >> 2] = 0;
    HEAP32[$call37 + 24 >> 2] = 0;
    HEAP32[$call37 + 16 >> 2] = 0;
    HEAP32[$call37 + 8 >> 2] = $text_1;
    var $call45 = _strlen($text_1);
    HEAP32[$call37 + 12 >> 2] = $call45;
    var $call46 = _png_set_text_2($png_ptr, $info_ptr, $13, 1);
    var $20 = HEAP32[$chunkdata >> 2];
    _png_free($6, $20);
    HEAP32[$chunkdata >> 2] = 0;
    _png_free($6, $call37);
    if (($call46 | 0) == 0) {
      __label__ = 19;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 18:
    var $21 = $png_ptr;
    _png_warning($21, STRING_TABLE.__str114863 | 0);
    __label__ = 19;
    break;
   case 19:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_handle_tEXt["X"] = 1;

function _png_handle_zTXt($png_ptr, $info_ptr, $length) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $data_len = __stackBase__;
    var $user_chunk_cache_max = $png_ptr + 624 | 0;
    var $0 = HEAP32[$user_chunk_cache_max >> 2];
    if (($0 | 0) == 1) {
      __label__ = 2;
      break;
    } else if (($0 | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 2:
    var $call = _png_crc_finish($png_ptr, $length);
    __label__ = 23;
    break;
   case 3:
    var $dec = $0 - 1 | 0;
    HEAP32[$user_chunk_cache_max >> 2] = $dec;
    if (($dec | 0) == 1) {
      __label__ = 4;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 4:
    var $1 = $png_ptr;
    _png_warning($1, STRING_TABLE.__str115864 | 0);
    var $call7 = _png_crc_finish($png_ptr, $length);
    __label__ = 23;
    break;
   case 5:
    var $mode = $png_ptr + 84 | 0;
    var $2 = HEAP32[$mode >> 2];
    if (($2 & 1 | 0) == 0) {
      __label__ = 6;
      break;
    } else {
      var $4 = $2;
      __label__ = 7;
      break;
    }
   case 6:
    var $3 = $png_ptr;
    _png_error($3, STRING_TABLE.__str116865 | 0);
    var $4 = HEAP32[$mode >> 2];
    __label__ = 7;
    break;
   case 7:
    var $4;
    if (($4 & 4 | 0) == 0) {
      __label__ = 9;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    HEAP32[$mode >> 2] = $4 | 8;
    __label__ = 9;
    break;
   case 9:
    var $chunkdata = $png_ptr + 656 | 0;
    var $5 = HEAP32[$chunkdata >> 2];
    var $6 = $png_ptr;
    _png_free($6, $5);
    var $add = $length + 1 | 0;
    var $call18 = _png_malloc_warn($6, $add);
    HEAP32[$chunkdata >> 2] = $call18;
    if (($call18 | 0) == 0) {
      __label__ = 10;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 10:
    var $7 = $png_ptr;
    _png_warning($7, STRING_TABLE.__str117866 | 0);
    __label__ = 23;
    break;
   case 11:
    _png_crc_read($png_ptr, $call18, $length);
    var $call25 = _png_crc_finish($png_ptr, 0);
    var $8 = HEAP32[$chunkdata >> 2];
    if (($call25 | 0) == 0) {
      __label__ = 13;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 12:
    _png_free($6, $8);
    HEAP32[$chunkdata >> 2] = 0;
    __label__ = 23;
    break;
   case 13:
    HEAP8[$8 + $length | 0] = 0;
    var $9 = HEAPU32[$chunkdata >> 2];
    if (HEAP8[$9] << 24 >> 24 == 0) {
      var $text_0_lcssa = $9;
      __label__ = 15;
      break;
    } else {
      var $text_02 = $9;
      __label__ = 14;
      break;
    }
   case 14:
    var $text_02;
    var $incdec_ptr = $text_02 + 1 | 0;
    if (HEAP8[$incdec_ptr] << 24 >> 24 == 0) {
      var $text_0_lcssa = $incdec_ptr;
      __label__ = 15;
      break;
    } else {
      var $text_02 = $incdec_ptr;
      __label__ = 14;
      break;
    }
   case 15:
    var $text_0_lcssa;
    if ($text_0_lcssa >>> 0 < ($9 + ($length - 2) | 0) >>> 0) {
      __label__ = 17;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 16:
    var $12 = $png_ptr;
    _png_warning($12, STRING_TABLE.__str118867 | 0);
    var $13 = HEAP32[$chunkdata >> 2];
    _png_free($6, $13);
    HEAP32[$chunkdata >> 2] = 0;
    __label__ = 23;
    break;
   case 17:
    var $14 = HEAP8[$text_0_lcssa + 1 | 0];
    if ($14 << 24 >> 24 == 0) {
      var $comp_type_0 = $14 << 24 >> 24;
      var $16 = $9;
      __label__ = 19;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 18:
    var $15 = $png_ptr;
    _png_warning($15, STRING_TABLE.__str119868 | 0);
    var $comp_type_0 = 0;
    var $16 = HEAP32[$chunkdata >> 2];
    __label__ = 19;
    break;
   case 19:
    var $16;
    var $comp_type_0;
    var $sub_ptr_sub = $text_0_lcssa + 2 - $16 | 0;
    _png_decompress_chunk($png_ptr, $comp_type_0, $length, $sub_ptr_sub, $data_len);
    var $call48 = _png_malloc_warn($6, 28);
    if (($call48 | 0) == 0) {
      __label__ = 20;
      break;
    } else {
      __label__ = 21;
      break;
    }
   case 20:
    var $17 = $png_ptr;
    _png_warning($17, STRING_TABLE.__str120869 | 0);
    var $18 = HEAP32[$chunkdata >> 2];
    _png_free($6, $18);
    HEAP32[$chunkdata >> 2] = 0;
    __label__ = 23;
    break;
   case 21:
    var $19 = $call48;
    HEAP32[$call48 >> 2] = $comp_type_0;
    var $20 = HEAP32[$chunkdata >> 2];
    HEAP32[$call48 + 4 >> 2] = $20;
    HEAP32[$call48 + 20 >> 2] = 0;
    HEAP32[$call48 + 24 >> 2] = 0;
    HEAP32[$call48 + 16 >> 2] = 0;
    var $add_ptr57 = $20 + $sub_ptr_sub | 0;
    HEAP32[$call48 + 8 >> 2] = $add_ptr57;
    var $26 = HEAP32[$data_len >> 2];
    HEAP32[$call48 + 12 >> 2] = $26;
    var $call59 = _png_set_text_2($png_ptr, $info_ptr, $19, 1);
    _png_free($6, $call48);
    var $28 = HEAP32[$chunkdata >> 2];
    _png_free($6, $28);
    HEAP32[$chunkdata >> 2] = 0;
    if (($call59 | 0) == 0) {
      __label__ = 23;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 22:
    var $29 = $png_ptr;
    _png_error($29, STRING_TABLE.__str121870 | 0);
    __label__ = 23;
    break;
   case 23:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_handle_zTXt["X"] = 1;

function _png_handle_iTXt($png_ptr, $info_ptr, $length) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $data_len;
    var $user_chunk_cache_max = $png_ptr + 624 | 0;
    var $0 = HEAP32[$user_chunk_cache_max >> 2];
    if (($0 | 0) == 1) {
      __label__ = 2;
      break;
    } else if (($0 | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 2:
    var $call = _png_crc_finish($png_ptr, $length);
    __label__ = 29;
    break;
   case 3:
    var $dec = $0 - 1 | 0;
    HEAP32[$user_chunk_cache_max >> 2] = $dec;
    if (($dec | 0) == 1) {
      __label__ = 4;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 4:
    var $1 = $png_ptr;
    _png_warning($1, STRING_TABLE.__str122871 | 0);
    var $call7 = _png_crc_finish($png_ptr, $length);
    __label__ = 29;
    break;
   case 5:
    var $mode = $png_ptr + 84 | 0;
    var $2 = HEAP32[$mode >> 2];
    if (($2 & 1 | 0) == 0) {
      __label__ = 6;
      break;
    } else {
      var $4 = $2;
      __label__ = 7;
      break;
    }
   case 6:
    var $3 = $png_ptr;
    _png_error($3, STRING_TABLE.__str123872 | 0);
    var $4 = HEAP32[$mode >> 2];
    __label__ = 7;
    break;
   case 7:
    var $4;
    if (($4 & 4 | 0) == 0) {
      __label__ = 9;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    HEAP32[$mode >> 2] = $4 | 8;
    __label__ = 9;
    break;
   case 9:
    var $chunkdata = $png_ptr + 656 | 0;
    var $5 = HEAP32[$chunkdata >> 2];
    var $6 = $png_ptr;
    _png_free($6, $5);
    var $add = $length + 1 | 0;
    var $call18 = _png_malloc_warn($6, $add);
    HEAP32[$chunkdata >> 2] = $call18;
    if (($call18 | 0) == 0) {
      __label__ = 10;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 10:
    var $7 = $png_ptr;
    _png_warning($7, STRING_TABLE.__str124873 | 0);
    __label__ = 29;
    break;
   case 11:
    _png_crc_read($png_ptr, $call18, $length);
    var $call25 = _png_crc_finish($png_ptr, 0);
    var $8 = HEAP32[$chunkdata >> 2];
    if (($call25 | 0) == 0) {
      __label__ = 13;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 12:
    _png_free($6, $8);
    HEAP32[$chunkdata >> 2] = 0;
    __label__ = 29;
    break;
   case 13:
    HEAP8[$8 + $length | 0] = 0;
    var $9 = HEAPU32[$chunkdata >> 2];
    var $lang_0 = $9;
    __label__ = 14;
    break;
   case 14:
    var $lang_0;
    var $incdec_ptr = $lang_0 + 1 | 0;
    if (HEAP8[$lang_0] << 24 >> 24 == 0) {
      __label__ = 15;
      break;
    } else {
      var $lang_0 = $incdec_ptr;
      __label__ = 14;
      break;
    }
   case 15:
    if ($incdec_ptr >>> 0 < ($9 + ($length - 3) | 0) >>> 0) {
      __label__ = 17;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 16:
    var $11 = $png_ptr;
    _png_warning($11, STRING_TABLE.__str125874 | 0);
    var $12 = HEAP32[$chunkdata >> 2];
    _png_free($6, $12);
    HEAP32[$chunkdata >> 2] = 0;
    __label__ = 29;
    break;
   case 17:
    var $13 = HEAP8[$incdec_ptr];
    var $conv = $13 << 24 >> 24;
    var $incdec_ptr42 = $lang_0 + 3 | 0;
    if (HEAP8[$lang_0 + 2 | 0] << 24 >> 24 == 0 & $13 << 24 >> 24 == 0) {
      var $lang_key_0 = $incdec_ptr42;
      __label__ = 19;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 18:
    var $15 = $png_ptr;
    _png_warning($15, STRING_TABLE.__str126875 | 0);
    var $16 = HEAP32[$chunkdata >> 2];
    _png_free($6, $16);
    HEAP32[$chunkdata >> 2] = 0;
    __label__ = 29;
    break;
   case 19:
    var $lang_key_0;
    var $incdec_ptr57 = $lang_key_0 + 1 | 0;
    if (HEAP8[$lang_key_0] << 24 >> 24 == 0) {
      __label__ = 20;
      break;
    } else {
      var $lang_key_0 = $incdec_ptr57;
      __label__ = 19;
      break;
    }
   case 20:
    var $add_ptr61 = $9 + $length | 0;
    if ($incdec_ptr57 >>> 0 < $add_ptr61 >>> 0) {
      var $text_0 = $incdec_ptr57;
      __label__ = 22;
      break;
    } else {
      __label__ = 21;
      break;
    }
   case 21:
    var $18 = $png_ptr;
    _png_warning($18, STRING_TABLE.__str125874 | 0);
    var $19 = HEAP32[$chunkdata >> 2];
    _png_free($6, $19);
    HEAP32[$chunkdata >> 2] = 0;
    __label__ = 29;
    break;
   case 22:
    var $text_0;
    var $incdec_ptr72 = $text_0 + 1 | 0;
    if (HEAP8[$text_0] << 24 >> 24 == 0) {
      __label__ = 23;
      break;
    } else {
      var $text_0 = $incdec_ptr72;
      __label__ = 22;
      break;
    }
   case 23:
    if ($incdec_ptr72 >>> 0 < $add_ptr61 >>> 0) {
      __label__ = 25;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 24:
    var $21 = $png_ptr;
    _png_warning($21, STRING_TABLE.__str127876 | 0);
    var $22 = HEAP32[$chunkdata >> 2];
    _png_free($6, $22);
    HEAP32[$chunkdata >> 2] = 0;
    __label__ = 29;
    break;
   case 25:
    var $sub_ptr_rhs_cast = $9;
    var $sub_ptr_sub = $incdec_ptr72 - $sub_ptr_rhs_cast | 0;
    var $add_ptr89 = $9 + $sub_ptr_sub | 0;
    var $call90 = _strlen($add_ptr89);
    $data_len = $call90;
    var $call92 = _png_malloc_warn($6, 28);
    if (($call92 | 0) == 0) {
      __label__ = 26;
      break;
    } else {
      __label__ = 27;
      break;
    }
   case 26:
    var $23 = $png_ptr;
    _png_warning($23, STRING_TABLE.__str128877 | 0);
    var $24 = HEAP32[$chunkdata >> 2];
    _png_free($6, $24);
    HEAP32[$chunkdata >> 2] = 0;
    __label__ = 29;
    break;
   case 27:
    var $25 = $call92;
    HEAP32[$call92 >> 2] = $conv + 1 | 0;
    var $26 = HEAP32[$chunkdata >> 2];
    var $add_ptr104 = $26 + ($incdec_ptr57 - $sub_ptr_rhs_cast) | 0;
    HEAP32[$call92 + 24 >> 2] = $add_ptr104;
    var $add_ptr110 = $26 + ($incdec_ptr42 - $sub_ptr_rhs_cast) | 0;
    HEAP32[$call92 + 20 >> 2] = $add_ptr110;
    HEAP32[$call92 + 16 >> 2] = $data_len;
    HEAP32[$call92 + 12 >> 2] = 0;
    HEAP32[$call92 + 4 >> 2] = $26;
    var $add_ptr115 = $26 + $sub_ptr_sub | 0;
    HEAP32[$call92 + 8 >> 2] = $add_ptr115;
    var $call117 = _png_set_text_2($png_ptr, $info_ptr, $25, 1);
    _png_free($6, $call92);
    var $34 = HEAP32[$chunkdata >> 2];
    _png_free($6, $34);
    HEAP32[$chunkdata >> 2] = 0;
    if (($call117 | 0) == 0) {
      __label__ = 29;
      break;
    } else {
      __label__ = 28;
      break;
    }
   case 28:
    var $35 = $png_ptr;
    _png_error($35, STRING_TABLE.__str129878 | 0);
    __label__ = 29;
    break;
   case 29:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_handle_iTXt["X"] = 1;

function _png_handle_unknown($png_ptr, $info_ptr, $length) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $user_chunk_cache_max = $png_ptr + 624 | 0;
    var $0 = HEAP32[$user_chunk_cache_max >> 2];
    if (($0 | 0) == 1) {
      __label__ = 2;
      break;
    } else if (($0 | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 2:
    var $call = _png_crc_finish($png_ptr, $length);
    __label__ = 29;
    break;
   case 3:
    var $dec = $0 - 1 | 0;
    HEAP32[$user_chunk_cache_max >> 2] = $dec;
    if (($dec | 0) == 1) {
      __label__ = 4;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 4:
    var $1 = $png_ptr;
    _png_warning($1, STRING_TABLE.__str130879 | 0);
    var $call7 = _png_crc_finish($png_ptr, $length);
    __label__ = 29;
    break;
   case 5:
    var $mode = $png_ptr + 84 | 0;
    var $2 = HEAP32[$mode >> 2];
    var $_pre = HEAP32[$png_ptr + 232 >> 2];
    if (($2 & 4 | 0) == 0) {
      var $3 = $_pre;
      __label__ = 9;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    if (($_pre | 0) == 1229209940) {
      __label__ = 7;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 7:
    var $4 = $_pre;
    var $chunk_name165 = $png_ptr + 232 | 0;
    __label__ = 10;
    break;
   case 8:
    var $or = $2 | 8;
    HEAP32[$mode >> 2] = $or;
    var $3 = $_pre;
    __label__ = 9;
    break;
   case 9:
    var $3;
    var $chunk_name16 = $png_ptr + 232 | 0;
    if (($3 & 536870912 | 0) == 0) {
      var $4 = $3;
      var $chunk_name165 = $chunk_name16;
      __label__ = 10;
      break;
    } else {
      var $chunk_name164 = $chunk_name16;
      __label__ = 13;
      break;
    }
   case 10:
    var $chunk_name165;
    var $4;
    var $call21 = _png_chunk_unknown_handling($png_ptr, $4);
    if (($call21 | 0) == 3) {
      var $chunk_name164 = $chunk_name165;
      __label__ = 13;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    if ((HEAP32[$png_ptr + 556 >> 2] | 0) == 0) {
      __label__ = 12;
      break;
    } else {
      var $chunk_name164 = $chunk_name165;
      __label__ = 13;
      break;
    }
   case 12:
    var $6 = $png_ptr;
    _png_chunk_error($6, STRING_TABLE.__str131880 | 0);
    var $chunk_name164 = $chunk_name165;
    __label__ = 13;
    break;
   case 13:
    var $chunk_name164;
    if ((HEAP32[$png_ptr + 88 >> 2] & 32768 | 0) == 0) {
      __label__ = 14;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 14:
    if ((HEAP32[$png_ptr + 556 >> 2] | 0) == 0) {
      var $skip_0 = $length;
      __label__ = 28;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 15:
    var $9 = HEAPU32[$chunk_name164 >> 2];
    var $unknown_chunk = $png_ptr + 632 | 0;
    HEAP8[$unknown_chunk | 0] = $9 >>> 24 & 255;
    HEAP8[$png_ptr + 633 | 0] = $9 >>> 16 & 255;
    HEAP8[$png_ptr + 634 | 0] = $9 >>> 8 & 255;
    HEAP8[$png_ptr + 635 | 0] = $9 & 255;
    HEAP8[$png_ptr + 636 | 0] = 0;
    HEAP32[$png_ptr + 644 >> 2] = $length;
    if (($length | 0) == 0) {
      __label__ = 16;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 16:
    HEAP32[$png_ptr + 640 >> 2] = 0;
    __label__ = 18;
    break;
   case 17:
    var $10 = $png_ptr;
    var $call63 = _png_malloc($10, $length);
    HEAP32[$png_ptr + 640 >> 2] = $call63;
    _png_crc_read($png_ptr, $call63, $length);
    __label__ = 18;
    break;
   case 18:
    var $11 = HEAP32[$png_ptr + 556 >> 2];
    if (($11 | 0) == 0) {
      __label__ = 26;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 19:
    var $call75 = FUNCTION_TABLE[$11]($png_ptr, $unknown_chunk);
    if (($call75 | 0) < 0) {
      __label__ = 20;
      break;
    } else {
      __label__ = 21;
      break;
    }
   case 20:
    var $12 = $png_ptr;
    _png_chunk_error($12, STRING_TABLE.__str132881 | 0);
    __label__ = 27;
    break;
   case 21:
    if (($call75 | 0) == 0) {
      __label__ = 22;
      break;
    } else {
      __label__ = 27;
      break;
    }
   case 22:
    var $13 = HEAP32[$chunk_name164 >> 2];
    if (($13 & 536870912 | 0) == 0) {
      __label__ = 23;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 23:
    var $call89 = _png_chunk_unknown_handling($png_ptr, $13);
    if (($call89 | 0) == 3) {
      __label__ = 25;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 24:
    var $14 = $png_ptr;
    _png_chunk_error($14, STRING_TABLE.__str131880 | 0);
    __label__ = 25;
    break;
   case 25:
    _png_set_unknown_chunks($png_ptr, $info_ptr, $unknown_chunk, 1);
    __label__ = 27;
    break;
   case 26:
    _png_set_unknown_chunks($png_ptr, $info_ptr, $unknown_chunk, 1);
    __label__ = 27;
    break;
   case 27:
    var $data101 = $png_ptr + 640 | 0;
    var $15 = HEAP32[$data101 >> 2];
    var $16 = $png_ptr;
    _png_free($16, $15);
    HEAP32[$data101 >> 2] = 0;
    var $skip_0 = 0;
    __label__ = 28;
    break;
   case 28:
    var $skip_0;
    var $call106 = _png_crc_finish($png_ptr, $skip_0);
    __label__ = 29;
    break;
   case 29:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_handle_unknown["X"] = 1;

function _png_init_filter_functions($pp) {
  var $add = (HEAPU8[$pp + 294 | 0] & 255) + 7 | 0;
  HEAP32[$pp + 668 >> 2] = 16;
  HEAP32[$pp + 672 >> 2] = 18;
  HEAP32[$pp + 676 >> 2] = 20;
  var $png_read_filter_row_paeth_1byte_pixel_png_read_filter_row_paeth_multibyte_pixel = ($add & 504 | 0) == 8 ? 22 : 24;
  HEAP32[$pp + 680 >> 2] = $png_read_filter_row_paeth_1byte_pixel_png_read_filter_row_paeth_multibyte_pixel;
  return;
}

function _png_combine_row($png_ptr, $dp, $display) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $0 = HEAPU8[$png_ptr + 299 | 0];
    var $conv = $0 & 255;
    var $1 = HEAPU32[$png_ptr + 240 >> 2];
    var $add_ptr = $1 + 1 | 0;
    var $2 = HEAPU32[$png_ptr + 204 >> 2];
    var $3 = HEAPU8[$png_ptr + 289 | 0];
    var $conv2 = $3 & 255;
    if ($0 << 24 >> 24 == 0) {
      __label__ = 2;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 2:
    var $4 = $png_ptr;
    _png_error($4, STRING_TABLE.__str134883 | 0);
    __label__ = 3;
    break;
   case 3:
    var $5 = HEAPU32[$png_ptr + 260 >> 2];
    if (($5 | 0) == 0) {
      __label__ = 9;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    if (($0 & 255) > 7) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    var $cond = $2 * ($conv >>> 3) | 0;
    __label__ = 7;
    break;
   case 6:
    var $cond = ($2 * $conv + 7 | 0) >>> 3;
    __label__ = 7;
    break;
   case 7:
    var $cond;
    if (($5 | 0) == ($cond | 0)) {
      __label__ = 9;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    var $6 = $png_ptr;
    _png_error($6, STRING_TABLE.__str135884 | 0);
    __label__ = 9;
    break;
   case 9:
    if (($2 | 0) == 0) {
      __label__ = 10;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 10:
    var $7 = $png_ptr;
    _png_error($7, STRING_TABLE.__str136885 | 0);
    __label__ = 11;
    break;
   case 11:
    var $mul19 = $2 * $conv | 0;
    var $and = $mul19 & 7;
    if (($and | 0) == 0) {
      var $end_ptr_0 = 0;
      var $end_byte_0 = 0;
      var $end_mask_0 = 0;
      __label__ = 18;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 12:
    if (($0 & 255) > 7) {
      __label__ = 13;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 13:
    var $cond33 = $2 * ($conv >>> 3) | 0;
    __label__ = 15;
    break;
   case 14:
    var $cond33 = ($mul19 + 7 | 0) >>> 3;
    __label__ = 15;
    break;
   case 15:
    var $cond33;
    var $add_ptr35 = $dp + ($cond33 - 1) | 0;
    var $8 = HEAP8[$add_ptr35];
    if ((HEAP32[$png_ptr + 92 >> 2] & 65536 | 0) == 0) {
      __label__ = 17;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 16:
    var $end_ptr_0 = $add_ptr35;
    var $end_byte_0 = $8;
    var $end_mask_0 = 255 << $and;
    __label__ = 18;
    break;
   case 17:
    var $end_ptr_0 = $add_ptr35;
    var $end_byte_0 = $8;
    var $end_mask_0 = 255 >>> ($and >>> 0);
    __label__ = 18;
    break;
   case 18:
    var $end_mask_0;
    var $end_byte_0;
    var $end_ptr_0;
    if (HEAP8[$png_ptr + 288 | 0] << 24 >> 24 == 0) {
      __label__ = 86;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 19:
    var $11 = HEAPU32[$png_ptr + 92 >> 2];
    if (($11 & 2 | 0) != 0 & ($3 & 255) < 6) {
      __label__ = 20;
      break;
    } else {
      __label__ = 86;
      break;
    }
   case 20:
    if (($display | 0) == 0) {
      __label__ = 21;
      break;
    } else if (($display | 0) == 1) {
      __label__ = 22;
      break;
    } else {
      __label__ = 86;
      break;
    }
   case 21:
    var $and60_pre_phi = $conv2 & 1;
    __label__ = 23;
    break;
   case 22:
    var $and56 = $conv2 & 1;
    if (($and56 | 0) == 0) {
      __label__ = 86;
      break;
    } else {
      var $and60_pre_phi = $and56;
      __label__ = 23;
      break;
    }
   case 23:
    var $and60_pre_phi;
    var $and64 = $and60_pre_phi << 3 - (($conv2 + 1 | 0) >>> 1) & 7;
    if ($2 >>> 0 > $and64 >>> 0) {
      __label__ = 24;
      break;
    } else {
      __label__ = 92;
      break;
    }
   case 24:
    if (($0 & 255) < 8) {
      __label__ = 25;
      break;
    } else {
      __label__ = 46;
      break;
    }
   case 25:
    var $div = Math.floor(8 / ($conv >>> 0));
    var $tobool76 = ($display | 0) != 0;
    if (($11 & 65536 | 0) == 0) {
      __label__ = 33;
      break;
    } else {
      __label__ = 26;
      break;
    }
   case 26:
    if ($tobool76) {
      __label__ = 27;
      break;
    } else {
      __label__ = 30;
      break;
    }
   case 27:
    var $shr78 = $conv2 >>> 1;
    if ($0 << 24 >> 24 == 1) {
      var $cond87 = 0;
      __label__ = 29;
      break;
    } else {
      __label__ = 28;
      break;
    }
   case 28:
    var $cond85 = $0 << 24 >> 24 == 2 ? 1 : 2;
    var $cond87 = $cond85;
    __label__ = 29;
    break;
   case 29:
    var $cond87;
    var $mask_0_ph_in = _png_combine_row_display_mask + $cond87 * 12 + ($shr78 << 2) | 0;
    __label__ = 40;
    break;
   case 30:
    if ($0 << 24 >> 24 == 1) {
      var $cond98 = 0;
      __label__ = 32;
      break;
    } else {
      __label__ = 31;
      break;
    }
   case 31:
    var $cond96 = $0 << 24 >> 24 == 2 ? 1 : 2;
    var $cond98 = $cond96;
    __label__ = 32;
    break;
   case 32:
    var $cond98;
    var $mask_0_ph_in = _png_combine_row_row_mask + $cond98 * 24 + ($conv2 << 2) | 0;
    __label__ = 40;
    break;
   case 33:
    if ($tobool76) {
      __label__ = 34;
      break;
    } else {
      __label__ = 37;
      break;
    }
   case 34:
    var $shr106 = $conv2 >>> 1;
    if ($0 << 24 >> 24 == 1) {
      var $cond115 = 0;
      __label__ = 36;
      break;
    } else {
      __label__ = 35;
      break;
    }
   case 35:
    var $cond113 = $0 << 24 >> 24 == 2 ? 1 : 2;
    var $cond115 = $cond113;
    __label__ = 36;
    break;
   case 36:
    var $cond115;
    var $mask_0_ph_in = _png_combine_row_display_mask + 36 + $cond115 * 12 + ($shr106 << 2) | 0;
    __label__ = 40;
    break;
   case 37:
    if ($0 << 24 >> 24 == 1) {
      var $cond127 = 0;
      __label__ = 39;
      break;
    } else {
      __label__ = 38;
      break;
    }
   case 38:
    var $cond125 = $0 << 24 >> 24 == 2 ? 1 : 2;
    var $cond127 = $cond125;
    __label__ = 39;
    break;
   case 39:
    var $cond127;
    var $mask_0_ph_in = _png_combine_row_row_mask + 72 + $cond127 * 24 + ($conv2 << 2) | 0;
    __label__ = 40;
    break;
   case 40:
    var $mask_0_ph_in;
    var $dp_addr_0 = $dp;
    var $sp_0 = $add_ptr;
    var $row_width_0 = $2;
    var $mask_0 = HEAP32[$mask_0_ph_in >> 2];
    __label__ = 41;
    break;
   case 41:
    var $mask_0;
    var $row_width_0;
    var $sp_0;
    var $dp_addr_0;
    var $or = $mask_0 >>> 8 | $mask_0 << 24;
    var $and135 = $mask_0 & 255;
    if (($and135 | 0) == 255) {
      __label__ = 43;
      break;
    } else if (($and135 | 0) == 0) {
      __label__ = 44;
      break;
    } else {
      __label__ = 42;
      break;
    }
   case 42:
    HEAP8[$dp_addr_0] = (HEAPU8[$sp_0] & 255 & $mask_0 | HEAPU8[$dp_addr_0] & 255 & ($mask_0 ^ 255)) & 255;
    __label__ = 44;
    break;
   case 43:
    var $14 = HEAP8[$sp_0];
    HEAP8[$dp_addr_0] = $14;
    __label__ = 44;
    break;
   case 44:
    if ($row_width_0 >>> 0 > $div >>> 0) {
      __label__ = 45;
      break;
    } else {
      __label__ = 90;
      break;
    }
   case 45:
    var $dp_addr_0 = $dp_addr_0 + 1 | 0;
    var $sp_0 = $sp_0 + 1 | 0;
    var $row_width_0 = $row_width_0 - $div | 0;
    var $mask_0 = $or;
    __label__ = 41;
    break;
   case 46:
    if (($conv & 7 | 0) == 0) {
      __label__ = 48;
      break;
    } else {
      __label__ = 47;
      break;
    }
   case 47:
    var $15 = $png_ptr;
    _png_error($15, STRING_TABLE.__str137886 | 0);
    __label__ = 48;
    break;
   case 48:
    var $shr162 = $conv >>> 3;
    var $mul170 = $and64 * $shr162 | 0;
    var $sub171 = $2 * $shr162 - $mul170 | 0;
    var $add_ptr172 = $dp + $mul170 | 0;
    var $add_ptr_sum = $mul170 + 1 | 0;
    var $add_ptr173 = $1 + $add_ptr_sum | 0;
    if (($display | 0) == 0) {
      var $bytes_to_copy_0 = $shr162;
      __label__ = 51;
      break;
    } else {
      __label__ = 49;
      break;
    }
   case 49:
    var $mul179 = $shr162 << ((6 - $conv2 | 0) >>> 1);
    if ($mul179 >>> 0 > $sub171 >>> 0) {
      __label__ = 50;
      break;
    } else {
      var $bytes_to_copy_0 = $mul179;
      __label__ = 51;
      break;
    }
   case 50:
    var $bytes_to_copy_0 = $sub171;
    __label__ = 51;
    break;
   case 51:
    var $bytes_to_copy_0;
    var $mul189 = $shr162 << ((7 - $conv2 | 0) >>> 1);
    if (($bytes_to_copy_0 | 0) == 1) {
      __label__ = 52;
      break;
    } else if (($bytes_to_copy_0 | 0) == 3) {
      __label__ = 53;
      break;
    } else if (($bytes_to_copy_0 | 0) == 2) {
      var $dp_addr_2 = $add_ptr172;
      var $sp_2 = $add_ptr173;
      var $row_width_2 = $sub171;
      __label__ = 56;
      break;
    } else {
      __label__ = 60;
      break;
    }
   case 52:
    var $16 = HEAP8[$add_ptr173];
    HEAP8[$add_ptr172] = $16;
    if ($sub171 >>> 0 > $mul189 >>> 0) {
      var $row_width_112 = $sub171;
      var $sp_113 = $add_ptr173;
      var $dp_addr_114 = $add_ptr172;
      __label__ = 55;
      break;
    } else {
      __label__ = 92;
      break;
    }
   case 53:
    var $17 = HEAP8[$add_ptr173];
    HEAP8[$add_ptr172] = $17;
    var $add_ptr173_sum = $mul170 + 2 | 0;
    var $18 = HEAP8[$1 + $add_ptr173_sum | 0];
    HEAP8[$dp + $add_ptr_sum | 0] = $18;
    var $19 = HEAP8[$mul170 + ($1 + 3) | 0];
    HEAP8[$dp + $add_ptr173_sum | 0] = $19;
    if ($sub171 >>> 0 > $mul189 >>> 0) {
      __label__ = 54;
      break;
    } else {
      __label__ = 92;
      break;
    }
   case 54:
    var $add_ptr224_sum = $mul189 + 1 | 0;
    var $add_ptr224_sum22 = $mul189 + 2 | 0;
    var $row_width_36 = $sub171;
    var $sp_37 = $add_ptr173;
    var $dp_addr_38 = $add_ptr172;
    __label__ = 59;
    break;
   case 55:
    var $dp_addr_114;
    var $sp_113;
    var $row_width_112;
    var $add_ptr195 = $dp_addr_114 + $mul189 | 0;
    var $add_ptr196 = $sp_113 + $mul189 | 0;
    var $sub197 = $row_width_112 - $mul189 | 0;
    var $20 = HEAP8[$add_ptr196];
    HEAP8[$add_ptr195] = $20;
    if ($sub197 >>> 0 > $mul189 >>> 0) {
      var $row_width_112 = $sub197;
      var $sp_113 = $add_ptr196;
      var $dp_addr_114 = $add_ptr195;
      __label__ = 55;
      break;
    } else {
      __label__ = 92;
      break;
    }
   case 56:
    var $row_width_2;
    var $sp_2;
    var $dp_addr_2;
    var $21 = HEAP8[$sp_2];
    HEAP8[$dp_addr_2] = $21;
    var $22 = HEAP8[$sp_2 + 1 | 0];
    HEAP8[$dp_addr_2 + 1 | 0] = $22;
    if ($row_width_2 >>> 0 > $mul189 >>> 0) {
      __label__ = 57;
      break;
    } else {
      __label__ = 92;
      break;
    }
   case 57:
    var $add_ptr207 = $sp_2 + $mul189 | 0;
    var $add_ptr208 = $dp_addr_2 + $mul189 | 0;
    var $sub209 = $row_width_2 - $mul189 | 0;
    if ($sub209 >>> 0 > 1) {
      var $dp_addr_2 = $add_ptr208;
      var $sp_2 = $add_ptr207;
      var $row_width_2 = $sub209;
      __label__ = 56;
      break;
    } else {
      __label__ = 58;
      break;
    }
   case 58:
    var $23 = HEAP8[$add_ptr207];
    HEAP8[$add_ptr208] = $23;
    __label__ = 92;
    break;
   case 59:
    var $dp_addr_38;
    var $sp_37;
    var $row_width_36;
    var $add_ptr224 = $sp_37 + $mul189 | 0;
    var $add_ptr225 = $dp_addr_38 + $mul189 | 0;
    var $sub226 = $row_width_36 - $mul189 | 0;
    var $24 = HEAP8[$add_ptr224];
    HEAP8[$add_ptr225] = $24;
    var $25 = HEAP8[$sp_37 + $add_ptr224_sum | 0];
    HEAP8[$dp_addr_38 + $add_ptr224_sum | 0] = $25;
    var $26 = HEAP8[$sp_37 + $add_ptr224_sum22 | 0];
    HEAP8[$dp_addr_38 + $add_ptr224_sum22 | 0] = $26;
    if ($sub226 >>> 0 > $mul189 >>> 0) {
      var $row_width_36 = $sub226;
      var $sp_37 = $add_ptr224;
      var $dp_addr_38 = $add_ptr225;
      __label__ = 59;
      break;
    } else {
      __label__ = 92;
      break;
    }
   case 60:
    if ($bytes_to_copy_0 >>> 0 < 16) {
      __label__ = 61;
      break;
    } else {
      var $dp_addr_6_ph = $add_ptr172;
      var $sp_6_ph = $add_ptr173;
      var $row_width_8_ph = $sub171;
      var $bytes_to_copy_1_ph = $bytes_to_copy_0;
      __label__ = 85;
      break;
    }
   case 61:
    var $sub_ptr_lhs_cast = $add_ptr172;
    if (($sub_ptr_lhs_cast & 1 | 0) == 0) {
      __label__ = 62;
      break;
    } else {
      var $dp_addr_6_ph = $add_ptr172;
      var $sp_6_ph = $add_ptr173;
      var $row_width_8_ph = $sub171;
      var $bytes_to_copy_1_ph = $bytes_to_copy_0;
      __label__ = 85;
      break;
    }
   case 62:
    var $sub_ptr_lhs_cast234 = $add_ptr173;
    if (($sub_ptr_lhs_cast234 & 1 | 0) == 0) {
      __label__ = 63;
      break;
    } else {
      var $dp_addr_6_ph = $add_ptr172;
      var $sp_6_ph = $add_ptr173;
      var $row_width_8_ph = $sub171;
      var $bytes_to_copy_1_ph = $bytes_to_copy_0;
      __label__ = 85;
      break;
    }
   case 63:
    if (($bytes_to_copy_0 & 1 | 0) == 0) {
      __label__ = 64;
      break;
    } else {
      var $dp_addr_6_ph = $add_ptr172;
      var $sp_6_ph = $add_ptr173;
      var $row_width_8_ph = $sub171;
      var $bytes_to_copy_1_ph = $bytes_to_copy_0;
      __label__ = 85;
      break;
    }
   case 64:
    if (($mul189 & 1 | 0) == 0) {
      __label__ = 65;
      break;
    } else {
      var $dp_addr_6_ph = $add_ptr172;
      var $sp_6_ph = $add_ptr173;
      var $row_width_8_ph = $sub171;
      var $bytes_to_copy_1_ph = $bytes_to_copy_0;
      __label__ = 85;
      break;
    }
   case 65:
    if (($sub_ptr_lhs_cast & 3 | 0) == 0) {
      __label__ = 66;
      break;
    } else {
      __label__ = 76;
      break;
    }
   case 66:
    if (($sub_ptr_lhs_cast234 & 3 | 0) == 0) {
      __label__ = 67;
      break;
    } else {
      __label__ = 76;
      break;
    }
   case 67:
    if (($bytes_to_copy_0 & 3 | 0) == 0) {
      __label__ = 68;
      break;
    } else {
      __label__ = 76;
      break;
    }
   case 68:
    if (($mul189 & 3 | 0) == 0) {
      __label__ = 69;
      break;
    } else {
      __label__ = 76;
      break;
    }
   case 69:
    var $incdec_ptr272_sum = (($mul189 - $bytes_to_copy_0 | 0) >>> 2) + 1 | 0;
    var $row_width_4 = $sub171;
    var $sp32_0 = $add_ptr173;
    var $dp32_0 = $add_ptr172;
    __label__ = 70;
    break;
   case 70:
    var $dp32_0;
    var $sp32_0;
    var $row_width_4;
    var $c_0 = $bytes_to_copy_0;
    var $sp32_1 = $sp32_0;
    var $dp32_1 = $dp32_0;
    __label__ = 71;
    break;
   case 71:
    var $dp32_1;
    var $sp32_1;
    var $c_0;
    var $29 = HEAP32[$sp32_1 >> 2];
    HEAP32[$dp32_1 >> 2] = $29;
    var $sub273 = $c_0 - 4 | 0;
    if (($sub273 | 0) == 0) {
      __label__ = 72;
      break;
    } else {
      var $c_0 = $sub273;
      var $sp32_1 = $sp32_1 + 4 | 0;
      var $dp32_1 = $dp32_1 + 4 | 0;
      __label__ = 71;
      break;
    }
   case 72:
    if ($row_width_4 >>> 0 > $mul189 >>> 0) {
      __label__ = 73;
      break;
    } else {
      __label__ = 92;
      break;
    }
   case 73:
    var $add_ptr282 = $dp32_1 + ($incdec_ptr272_sum << 2) | 0;
    var $add_ptr283 = $sp32_1 + ($incdec_ptr272_sum << 2) | 0;
    var $sub284 = $row_width_4 - $mul189 | 0;
    if ($bytes_to_copy_0 >>> 0 > $sub284 >>> 0) {
      __label__ = 74;
      break;
    } else {
      var $row_width_4 = $sub284;
      var $sp32_0 = $add_ptr283;
      var $dp32_0 = $add_ptr282;
      __label__ = 70;
      break;
    }
   case 74:
    var $dp_addr_4 = $add_ptr282;
    var $sp_4 = $add_ptr283;
    var $row_width_5 = $sub284;
    __label__ = 75;
    break;
   case 75:
    var $row_width_5;
    var $sp_4;
    var $dp_addr_4;
    var $32 = HEAP8[$sp_4];
    HEAP8[$dp_addr_4] = $32;
    var $dec = $row_width_5 - 1 | 0;
    if (($dec | 0) == 0) {
      __label__ = 92;
      break;
    } else {
      var $dp_addr_4 = $dp_addr_4 + 1 | 0;
      var $sp_4 = $sp_4 + 1 | 0;
      var $row_width_5 = $dec;
      __label__ = 75;
      break;
    }
   case 76:
    var $incdec_ptr304_sum = (($mul189 - $bytes_to_copy_0 | 0) >>> 1) + 1 | 0;
    var $sp16_0 = $add_ptr173;
    var $row_width_6 = $sub171;
    var $dp16_0 = $add_ptr172;
    __label__ = 77;
    break;
   case 77:
    var $dp16_0;
    var $row_width_6;
    var $sp16_0;
    var $c301_0 = $bytes_to_copy_0;
    var $sp16_1 = $sp16_0;
    var $dp16_1 = $dp16_0;
    __label__ = 78;
    break;
   case 78:
    var $dp16_1;
    var $sp16_1;
    var $c301_0;
    var $35 = HEAP16[$sp16_1 >> 1];
    HEAP16[$dp16_1 >> 1] = $35;
    var $sub305 = $c301_0 - 2 | 0;
    if (($sub305 | 0) == 0) {
      __label__ = 79;
      break;
    } else {
      var $c301_0 = $sub305;
      var $sp16_1 = $sp16_1 + 2 | 0;
      var $dp16_1 = $dp16_1 + 2 | 0;
      __label__ = 78;
      break;
    }
   case 79:
    if ($row_width_6 >>> 0 > $mul189 >>> 0) {
      __label__ = 80;
      break;
    } else {
      __label__ = 92;
      break;
    }
   case 80:
    var $add_ptr314 = $dp16_1 + ($incdec_ptr304_sum << 1) | 0;
    var $add_ptr315 = $sp16_1 + ($incdec_ptr304_sum << 1) | 0;
    var $sub316 = $row_width_6 - $mul189 | 0;
    if ($bytes_to_copy_0 >>> 0 > $sub316 >>> 0) {
      __label__ = 81;
      break;
    } else {
      var $sp16_0 = $add_ptr315;
      var $row_width_6 = $sub316;
      var $dp16_0 = $add_ptr314;
      __label__ = 77;
      break;
    }
   case 81:
    var $dp_addr_5 = $add_ptr314;
    var $sp_5 = $add_ptr315;
    var $row_width_7 = $sub316;
    __label__ = 82;
    break;
   case 82:
    var $row_width_7;
    var $sp_5;
    var $dp_addr_5;
    var $38 = HEAP8[$sp_5];
    HEAP8[$dp_addr_5] = $38;
    var $dec325 = $row_width_7 - 1 | 0;
    if (($dec325 | 0) == 0) {
      __label__ = 92;
      break;
    } else {
      var $dp_addr_5 = $dp_addr_5 + 1 | 0;
      var $sp_5 = $sp_5 + 1 | 0;
      var $row_width_7 = $dec325;
      __label__ = 82;
      break;
    }
   case 83:
    var $row_width_8;
    var $sp_6;
    var $dp_addr_6;
    _memcpy($dp_addr_6, $sp_6, $bytes_to_copy_1_ph, 1);
    if ($row_width_8 >>> 0 > $mul189 >>> 0) {
      __label__ = 84;
      break;
    } else {
      __label__ = 92;
      break;
    }
   case 84:
    var $add_ptr335 = $sp_6 + $mul189 | 0;
    var $add_ptr336 = $dp_addr_6 + $mul189 | 0;
    var $sub337 = $row_width_8 - $mul189 | 0;
    if ($bytes_to_copy_1_ph >>> 0 > $sub337 >>> 0) {
      var $dp_addr_6_ph = $add_ptr336;
      var $sp_6_ph = $add_ptr335;
      var $row_width_8_ph = $sub337;
      var $bytes_to_copy_1_ph = $sub337;
      __label__ = 85;
      break;
    } else {
      var $dp_addr_6 = $add_ptr336;
      var $sp_6 = $add_ptr335;
      var $row_width_8 = $sub337;
      __label__ = 83;
      break;
    }
   case 85:
    var $bytes_to_copy_1_ph;
    var $row_width_8_ph;
    var $sp_6_ph;
    var $dp_addr_6_ph;
    var $dp_addr_6 = $dp_addr_6_ph;
    var $sp_6 = $sp_6_ph;
    var $row_width_8 = $row_width_8_ph;
    __label__ = 83;
    break;
   case 86:
    if (($0 & 255) > 7) {
      __label__ = 87;
      break;
    } else {
      __label__ = 88;
      break;
    }
   case 87:
    var $cond354 = $2 * ($conv >>> 3) | 0;
    __label__ = 89;
    break;
   case 88:
    var $cond354 = ($mul19 + 7 | 0) >>> 3;
    __label__ = 89;
    break;
   case 89:
    var $cond354;
    _memcpy($dp, $add_ptr, $cond354, 1);
    __label__ = 90;
    break;
   case 90:
    if (($end_ptr_0 | 0) == 0) {
      __label__ = 92;
      break;
    } else {
      __label__ = 91;
      break;
    }
   case 91:
    HEAP8[$end_ptr_0] = (HEAPU8[$end_ptr_0] & 255 & ($end_mask_0 ^ 255) | $end_byte_0 & 255 & $end_mask_0) & 255;
    __label__ = 92;
    break;
   case 92:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_combine_row["X"] = 1;

function _png_do_read_interlace($row_info, $row, $pass, $transformations) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 8;
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $v257 = __stackBase__;
    if (($row | 0) == 0 | ($row_info | 0) == 0) {
      __label__ = 35;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $width = $row_info | 0;
    var $0 = HEAPU32[$width >> 2];
    var $1 = HEAPU32[_png_do_read_interlace_png_pass_inc + ($pass << 2) >> 2];
    var $mul = $1 * $0 | 0;
    var $pixel_depth = $row_info + 11 | 0;
    var $conv = HEAPU8[$pixel_depth] & 255;
    if (($conv | 0) == 1) {
      __label__ = 3;
      break;
    } else if (($conv | 0) == 2) {
      __label__ = 10;
      break;
    } else if (($conv | 0) == 4) {
      __label__ = 18;
      break;
    } else {
      __label__ = 26;
      break;
    }
   case 3:
    var $add_ptr = $row + (($0 - 1 | 0) >>> 3) | 0;
    var $add_ptr5 = $row + (($mul - 1 | 0) >>> 3) | 0;
    var $and9 = $0 + 7 & 7;
    if (($transformations & 65536 | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $sshift_0 = $and9;
    var $dshift_0 = $mul + 7 & 7;
    var $s_start_0 = 7;
    var $s_end_0 = 0;
    var $s_inc_0 = -1;
    __label__ = 6;
    break;
   case 5:
    var $sshift_0 = 7 - $and9 | 0;
    var $dshift_0 = $mul + 7 & 7 ^ 7;
    var $s_start_0 = 0;
    var $s_end_0 = 7;
    var $s_inc_0 = 1;
    __label__ = 6;
    break;
   case 6:
    var $s_inc_0;
    var $s_end_0;
    var $s_start_0;
    var $dshift_0;
    var $sshift_0;
    if (($0 | 0) == 0) {
      __label__ = 31;
      break;
    } else {
      var $i_034 = 0;
      var $dshift_135 = $dshift_0;
      var $sshift_136 = $sshift_0;
      var $dp_037 = $add_ptr5;
      var $sp_038 = $add_ptr;
      __label__ = 7;
      break;
    }
   case 7:
    var $sp_038;
    var $dp_037;
    var $sshift_136;
    var $dshift_135;
    var $i_034;
    var $conv25 = (HEAPU8[$sp_038] & 255) >>> ($sshift_136 >>> 0) & 1;
    var $j_027 = 0;
    var $dshift_228 = $dshift_135;
    var $dp_129 = $dp_037;
    __label__ = 8;
    break;
   case 8:
    var $dp_129;
    var $dshift_228;
    var $j_027;
    HEAP8[$dp_129] = (HEAPU8[$dp_129] & 255 & 32639 >>> ((7 - $dshift_228 | 0) >>> 0) | $conv25 << $dshift_228) & 255;
    var $cmp43 = ($dshift_228 | 0) == ($s_end_0 | 0);
    var $dshift_3 = $cmp43 ? $s_start_0 : $dshift_228 + $s_inc_0 | 0;
    var $dp_2 = $cmp43 ? $dp_129 - 1 | 0 : $dp_129;
    var $inc = $j_027 + 1 | 0;
    if (($inc | 0) < ($1 | 0)) {
      var $j_027 = $inc;
      var $dshift_228 = $dshift_3;
      var $dp_129 = $dp_2;
      __label__ = 8;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    var $cmp49 = ($sshift_136 | 0) == ($s_end_0 | 0);
    var $sshift_2 = $cmp49 ? $s_start_0 : $sshift_136 + $s_inc_0 | 0;
    var $sp_1 = $cmp49 ? $sp_038 - 1 | 0 : $sp_038;
    var $inc57 = $i_034 + 1 | 0;
    if ($inc57 >>> 0 < HEAPU32[$width >> 2] >>> 0) {
      var $i_034 = $inc57;
      var $dshift_135 = $dshift_3;
      var $sshift_136 = $sshift_2;
      var $dp_037 = $dp_2;
      var $sp_038 = $sp_1;
      __label__ = 7;
      break;
    } else {
      __label__ = 31;
      break;
    }
   case 10:
    var $add_ptr64 = $row + (($0 - 1 | 0) >>> 2) | 0;
    var $add_ptr68 = $row + (($mul - 1 | 0) >>> 2) | 0;
    var $and82 = $0 + 3 & 3;
    if (($transformations & 65536 | 0) == 0) {
      __label__ = 12;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    var $sshift69_0_in = $and82;
    var $dshift70_0 = ($mul << 1) + 6 & 6;
    var $s_start71_0 = 6;
    var $s_end72_0 = 0;
    var $s_inc73_0 = -2;
    __label__ = 13;
    break;
   case 12:
    var $sshift69_0_in = 3 - $and82 | 0;
    var $dshift70_0 = ($mul << 1) + 6 & 6 ^ 6;
    var $s_start71_0 = 0;
    var $s_end72_0 = 6;
    var $s_inc73_0 = 2;
    __label__ = 13;
    break;
   case 13:
    var $s_inc73_0;
    var $s_end72_0;
    var $s_start71_0;
    var $dshift70_0;
    var $sshift69_0_in;
    if (($0 | 0) == 0) {
      __label__ = 31;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 14:
    var $i76_021 = 0;
    var $dshift70_122 = $dshift70_0;
    var $sshift69_123 = $sshift69_0_in << 1;
    var $dp65_024 = $add_ptr68;
    var $sp60_025 = $add_ptr64;
    __label__ = 15;
    break;
   case 15:
    var $sp60_025;
    var $dp65_024;
    var $sshift69_123;
    var $dshift70_122;
    var $i76_021;
    var $conv108 = (HEAPU8[$sp60_025] & 255) >>> ($sshift69_123 >>> 0) & 3;
    var $j104_014 = 0;
    var $dshift70_215 = $dshift70_122;
    var $dp65_116 = $dp65_024;
    __label__ = 16;
    break;
   case 16:
    var $dp65_116;
    var $dshift70_215;
    var $j104_014;
    HEAP8[$dp65_116] = (HEAPU8[$dp65_116] & 255 & 16191 >>> ((6 - $dshift70_215 | 0) >>> 0) | $conv108 << $dshift70_215) & 255;
    var $cmp128 = ($dshift70_215 | 0) == ($s_end72_0 | 0);
    var $dshift70_3 = $cmp128 ? $s_start71_0 : $dshift70_215 + $s_inc73_0 | 0;
    var $dp65_2 = $cmp128 ? $dp65_116 - 1 | 0 : $dp65_116;
    var $inc136 = $j104_014 + 1 | 0;
    if (($inc136 | 0) < ($1 | 0)) {
      var $j104_014 = $inc136;
      var $dshift70_215 = $dshift70_3;
      var $dp65_116 = $dp65_2;
      __label__ = 16;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 17:
    var $cmp138 = ($sshift69_123 | 0) == ($s_end72_0 | 0);
    var $sshift69_2 = $cmp138 ? $s_start71_0 : $sshift69_123 + $s_inc73_0 | 0;
    var $sp60_1 = $cmp138 ? $sp60_025 - 1 | 0 : $sp60_025;
    var $inc146 = $i76_021 + 1 | 0;
    if ($inc146 >>> 0 < HEAPU32[$width >> 2] >>> 0) {
      var $i76_021 = $inc146;
      var $dshift70_122 = $dshift70_3;
      var $sshift69_123 = $sshift69_2;
      var $dp65_024 = $dp65_2;
      var $sp60_025 = $sp60_1;
      __label__ = 15;
      break;
    } else {
      __label__ = 31;
      break;
    }
   case 18:
    var $add_ptr153 = $row + (($0 - 1 | 0) >>> 1) | 0;
    var $add_ptr157 = $row + (($mul - 1 | 0) >>> 1) | 0;
    var $and171 = $0 & 1 ^ 1;
    if (($transformations & 65536 | 0) == 0) {
      __label__ = 20;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 19:
    var $s_inc162_0 = -4;
    var $s_end161_0 = 0;
    var $s_start160_0 = 4;
    var $sshift158_0_in = $and171;
    var $dshift159_0_in = $mul & 1 ^ 1;
    __label__ = 21;
    break;
   case 20:
    var $s_inc162_0 = 4;
    var $s_end161_0 = 4;
    var $s_start160_0 = 0;
    var $sshift158_0_in = 1 - $and171 | 0;
    var $dshift159_0_in = 1 - ($mul & 1 ^ 1) | 0;
    __label__ = 21;
    break;
   case 21:
    var $dshift159_0_in;
    var $sshift158_0_in;
    var $s_start160_0;
    var $s_end161_0;
    var $s_inc162_0;
    if (($0 | 0) == 0) {
      __label__ = 31;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 22:
    var $dshift159_18 = $dshift159_0_in << 2;
    var $sshift158_19 = $sshift158_0_in << 2;
    var $dp154_010 = $add_ptr157;
    var $sp149_011 = $add_ptr153;
    var $i163_012 = 0;
    __label__ = 23;
    break;
   case 23:
    var $i163_012;
    var $sp149_011;
    var $dp154_010;
    var $sshift158_19;
    var $dshift159_18;
    var $conv196 = (HEAPU8[$sp149_011] & 255) >>> ($sshift158_19 >>> 0) & 15;
    var $dshift159_23 = $dshift159_18;
    var $dp154_14 = $dp154_010;
    var $j197_05 = 0;
    __label__ = 24;
    break;
   case 24:
    var $j197_05;
    var $dp154_14;
    var $dshift159_23;
    HEAP8[$dp154_14] = (HEAPU8[$dp154_14] & 255 & 3855 >>> ((4 - $dshift159_23 | 0) >>> 0) | $conv196 << $dshift159_23) & 255;
    var $cmp217 = ($dshift159_23 | 0) == ($s_end161_0 | 0);
    var $dshift159_3 = $cmp217 ? $s_start160_0 : $dshift159_23 + $s_inc162_0 | 0;
    var $dp154_2 = $cmp217 ? $dp154_14 - 1 | 0 : $dp154_14;
    var $inc225 = $j197_05 + 1 | 0;
    if (($inc225 | 0) < ($1 | 0)) {
      var $dshift159_23 = $dshift159_3;
      var $dp154_14 = $dp154_2;
      var $j197_05 = $inc225;
      __label__ = 24;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 25:
    var $cmp227 = ($sshift158_19 | 0) == ($s_end161_0 | 0);
    var $sshift158_2 = $cmp227 ? $s_start160_0 : $sshift158_19 + $s_inc162_0 | 0;
    var $sp149_1 = $cmp227 ? $sp149_011 - 1 | 0 : $sp149_011;
    var $inc235 = $i163_012 + 1 | 0;
    if ($inc235 >>> 0 < HEAPU32[$width >> 2] >>> 0) {
      var $dshift159_18 = $dshift159_3;
      var $sshift158_19 = $sshift158_2;
      var $dp154_010 = $dp154_2;
      var $sp149_011 = $sp149_1;
      var $i163_012 = $inc235;
      __label__ = 23;
      break;
    } else {
      __label__ = 31;
      break;
    }
   case 26:
    var $shr2391 = $conv >>> 3;
    if (($0 | 0) == 0) {
      __label__ = 31;
      break;
    } else {
      __label__ = 27;
      break;
    }
   case 27:
    var $arraydecay = $v257 | 0;
    var $idx_neg268 = -$shr2391 | 0;
    var $smax = ($1 | 0) > 1 ? $1 : 1;
    var $14 = -($smax * $shr2391 | 0) | 0;
    var $sp240_045 = $row + $shr2391 * ($0 - 1) | 0;
    var $dp245_046 = $row + $shr2391 * ($mul - 1) | 0;
    var $i251_047 = 0;
    __label__ = 28;
    break;
   case 28:
    var $i251_047;
    var $dp245_046;
    var $sp240_045;
    _memcpy($arraydecay, $sp240_045, $shr2391, 1);
    var $dp245_140 = $dp245_046;
    var $j258_041 = 0;
    __label__ = 29;
    break;
   case 29:
    var $j258_041;
    var $dp245_140;
    _memcpy($dp245_140, $arraydecay, $shr2391, 1);
    var $inc266 = $j258_041 + 1 | 0;
    if (($inc266 | 0) < ($1 | 0)) {
      var $dp245_140 = $dp245_140 + $idx_neg268 | 0;
      var $j258_041 = $inc266;
      __label__ = 29;
      break;
    } else {
      __label__ = 30;
      break;
    }
   case 30:
    var $inc271 = $i251_047 + 1 | 0;
    if ($inc271 >>> 0 < HEAPU32[$width >> 2] >>> 0) {
      var $sp240_045 = $sp240_045 + $idx_neg268 | 0;
      var $dp245_046 = $dp245_046 + $14 | 0;
      var $i251_047 = $inc271;
      __label__ = 28;
      break;
    } else {
      __label__ = 31;
      break;
    }
   case 31:
    HEAP32[$width >> 2] = $mul;
    var $16 = HEAPU8[$pixel_depth];
    var $conv275 = $16 & 255;
    if (($16 & 255) > 7) {
      __label__ = 32;
      break;
    } else {
      __label__ = 33;
      break;
    }
   case 32:
    var $cond = ($conv275 >>> 3) * $mul | 0;
    __label__ = 34;
    break;
   case 33:
    var $cond = ($conv275 * $mul + 7 | 0) >>> 3;
    __label__ = 34;
    break;
   case 34:
    var $cond;
    HEAP32[$row_info + 4 >> 2] = $cond;
    __label__ = 35;
    break;
   case 35:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_do_read_interlace["X"] = 1;

function _png_read_filter_row($pp, $row_info, $row, $prev_row, $filter) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if ((HEAP32[$pp + 668 >> 2] | 0) == 0) {
      __label__ = 2;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 2:
    _png_init_filter_functions($pp);
    __label__ = 3;
    break;
   case 3:
    var $filter_off = $filter - 1 | 0;
    if ($filter_off >>> 0 < 4) {
      __label__ = 4;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 4:
    var $2 = HEAP32[$pp + 668 + ($filter_off << 2) >> 2];
    FUNCTION_TABLE[$2]($row_info, $row, $prev_row);
    __label__ = 5;
    break;
   case 5:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_read_filter_row_sub($row_info, $row, $prev_row) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $0 = HEAPU32[$row_info + 4 >> 2];
    var $shr1 = ((HEAPU8[$row_info + 11 | 0] & 255) + 7 | 0) >>> 3;
    if ($shr1 >>> 0 < $0 >>> 0) {
      __label__ = 2;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 2:
    var $idx_neg = -$shr1 | 0;
    var $lftr_limit = $row + $0 | 0;
    var $rp_04 = $row + $shr1 | 0;
    __label__ = 3;
    break;
   case 3:
    var $rp_04;
    var $add5 = HEAP8[$rp_04 + $idx_neg | 0] + HEAP8[$rp_04] & 255;
    HEAP8[$rp_04] = $add5;
    var $incdec_ptr = $rp_04 + 1 | 0;
    if (($incdec_ptr | 0) == ($lftr_limit | 0)) {
      __label__ = 4;
      break;
    } else {
      var $rp_04 = $incdec_ptr;
      __label__ = 3;
      break;
    }
   case 4:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_read_filter_row_up($row_info, $row, $prev_row) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $0 = HEAP32[$row_info + 4 >> 2];
    if (($0 | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $lftr_limit = $prev_row + $0 | 0;
    var $rp_03 = $row;
    var $pp_04 = $prev_row;
    __label__ = 3;
    break;
   case 3:
    var $pp_04;
    var $rp_03;
    var $incdec_ptr = $pp_04 + 1 | 0;
    var $add = HEAP8[$pp_04] + HEAP8[$rp_03] & 255;
    HEAP8[$rp_03] = $add;
    if (($incdec_ptr | 0) == ($lftr_limit | 0)) {
      __label__ = 4;
      break;
    } else {
      var $rp_03 = $rp_03 + 1 | 0;
      var $pp_04 = $incdec_ptr;
      __label__ = 3;
      break;
    }
   case 4:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_read_filter_row_avg($row_info, $row, $prev_row) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $shr1 = ((HEAPU8[$row_info + 11 | 0] & 255) + 7 | 0) >>> 3;
    var $1 = HEAPU32[$row_info + 4 >> 2];
    var $sub = $1 - $shr1 | 0;
    if (($shr1 | 0) == 0) {
      var $rp_0_lcssa = $row;
      var $pp_0_lcssa = $prev_row;
      __label__ = 4;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $scevgep = $row + $shr1 | 0;
    var $i_07 = 0;
    var $rp_08 = $row;
    var $pp_09 = $prev_row;
    __label__ = 6;
    break;
   case 3:
    var $rp_0_lcssa = $scevgep;
    var $pp_0_lcssa = $prev_row + $shr1 | 0;
    __label__ = 4;
    break;
   case 4:
    var $pp_0_lcssa;
    var $rp_0_lcssa;
    if (($1 | 0) == ($shr1 | 0)) {
      __label__ = 8;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $idx_neg = -$shr1 | 0;
    var $i_13 = 0;
    var $rp_14 = $rp_0_lcssa;
    var $pp_15 = $pp_0_lcssa;
    __label__ = 7;
    break;
   case 6:
    var $pp_09;
    var $rp_08;
    var $i_07;
    var $add4 = ((HEAPU8[$pp_09] & 255) >>> 1) + HEAP8[$rp_08] & 255;
    HEAP8[$rp_08] = $add4;
    var $inc = $i_07 + 1 | 0;
    if ($inc >>> 0 < $shr1 >>> 0) {
      var $i_07 = $inc;
      var $rp_08 = $rp_08 + 1 | 0;
      var $pp_09 = $pp_09 + 1 | 0;
      __label__ = 6;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 7:
    var $pp_15;
    var $rp_14;
    var $i_13;
    HEAP8[$rp_14] = (((HEAPU8[$rp_14 + $idx_neg | 0] & 255) + (HEAPU8[$pp_15] & 255) | 0) >>> 1) + (HEAPU8[$rp_14] & 255) & 255;
    var $inc22 = $i_13 + 1 | 0;
    if ($inc22 >>> 0 < $sub >>> 0) {
      var $i_13 = $inc22;
      var $rp_14 = $rp_14 + 1 | 0;
      var $pp_15 = $pp_15 + 1 | 0;
      __label__ = 7;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_read_filter_row_avg["X"] = 1;

function _png_read_filter_row_paeth_1byte_pixel($row_info, $row, $prev_row) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $0 = HEAPU32[$row_info + 4 >> 2];
    var $add_ptr = $row + $0 | 0;
    var $conv = HEAPU8[$prev_row] & 255;
    var $add = (HEAPU8[$row] & 255) + $conv | 0;
    HEAP8[$row] = $add & 255;
    if (($0 | 0) > 1) {
      __label__ = 2;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 2:
    var $c_04 = $conv;
    var $a_05 = $add;
    var $row_addr_06 = $row + 1 | 0;
    var $prev_row_pn = $prev_row;
    __label__ = 3;
    break;
   case 3:
    var $prev_row_pn;
    var $row_addr_06;
    var $a_05;
    var $c_04;
    var $prev_row_addr_07 = $prev_row_pn + 1 | 0;
    var $and = $a_05 & 255;
    var $conv6 = HEAPU8[$prev_row_addr_07] & 255;
    var $sub = $conv6 - $c_04 | 0;
    var $sub7 = $and - $c_04 | 0;
    var $cond = ($sub | 0) < 0 ? -$sub | 0 : $sub;
    var $cond17 = ($sub7 | 0) < 0 ? -$sub7 | 0 : $sub7;
    var $add18 = $sub + $sub7 | 0;
    var $cond27 = ($add18 | 0) < 0 ? -$add18 | 0 : $add18;
    var $cmp28 = ($cond17 | 0) < ($cond | 0);
    var $a_1 = $cmp28 ? $conv6 : $and;
    var $pa_0 = $cmp28 ? $cond17 : $cond;
    var $a_2 = ($cond27 | 0) < ($pa_0 | 0) ? $c_04 : $a_1;
    var $add35 = $a_2 + (HEAPU8[$row_addr_06] & 255) | 0;
    HEAP8[$row_addr_06] = $add35 & 255;
    var $row_addr_0 = $row_addr_06 + 1 | 0;
    if ($row_addr_0 >>> 0 < $add_ptr >>> 0) {
      var $c_04 = $conv6;
      var $a_05 = $add35;
      var $row_addr_06 = $row_addr_0;
      var $prev_row_pn = $prev_row_addr_07;
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_read_filter_row_paeth_multibyte_pixel($row_info, $row, $prev_row) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $shr1 = ((HEAPU8[$row_info + 11 | 0] & 255) + 7 | 0) >>> 3;
    var $add_ptr = $row + $shr1 | 0;
    if (($shr1 | 0) == 0) {
      var $prev_row_addr_0_lcssa = $prev_row;
      var $row_addr_0_lcssa = $row;
      __label__ = 5;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $scevgep9 = $row + 1 | 0;
    var $umax = $add_ptr >>> 0 > $scevgep9 >>> 0 ? $add_ptr : $scevgep9;
    var $scevgep1112 = $umax + -$row | 0;
    var $prev_row_addr_06 = $prev_row;
    var $row_addr_07 = $row;
    __label__ = 3;
    break;
   case 3:
    var $row_addr_07;
    var $prev_row_addr_06;
    var $add4 = HEAP8[$prev_row_addr_06] + HEAP8[$row_addr_07] & 255;
    var $incdec_ptr6 = $row_addr_07 + 1 | 0;
    HEAP8[$row_addr_07] = $add4;
    if ($incdec_ptr6 >>> 0 < $add_ptr >>> 0) {
      var $prev_row_addr_06 = $prev_row_addr_06 + 1 | 0;
      var $row_addr_07 = $incdec_ptr6;
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $prev_row_addr_0_lcssa = $prev_row + $scevgep1112 | 0;
    var $row_addr_0_lcssa = $incdec_ptr6;
    __label__ = 5;
    break;
   case 5:
    var $row_addr_0_lcssa;
    var $prev_row_addr_0_lcssa;
    var $add_ptr7 = $row + HEAP32[$row_info + 4 >> 2] | 0;
    if ($row_addr_0_lcssa >>> 0 < $add_ptr7 >>> 0) {
      __label__ = 6;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 6:
    var $idx_neg = -$shr1 | 0;
    var $prev_row_addr_13 = $prev_row_addr_0_lcssa;
    var $row_addr_14 = $row_addr_0_lcssa;
    __label__ = 7;
    break;
   case 7:
    var $row_addr_14;
    var $prev_row_addr_13;
    var $6 = HEAPU8[$prev_row_addr_13 + $idx_neg | 0];
    var $conv14 = $6 & 255;
    var $7 = HEAPU8[$row_addr_14 + $idx_neg | 0];
    var $8 = HEAPU8[$prev_row_addr_13];
    var $sub20 = ($8 & 255) - $conv14 | 0;
    var $sub21 = ($7 & 255) - $conv14 | 0;
    var $cond = ($sub20 | 0) < 0 ? -$sub20 | 0 : $sub20;
    var $cond31 = ($sub21 | 0) < 0 ? -$sub21 | 0 : $sub21;
    var $add32 = $sub20 + $sub21 | 0;
    var $cond41 = ($add32 | 0) < 0 ? -$add32 | 0 : $add32;
    var $cmp42 = ($cond31 | 0) < ($cond | 0);
    var $a12_0 = $cmp42 ? $8 : $7;
    var $pa_0 = $cmp42 ? $cond31 : $cond;
    var $a12_1 = ($cond41 | 0) < ($pa_0 | 0) ? $6 : $a12_0;
    var $add49 = $a12_1 + HEAP8[$row_addr_14] & 255;
    var $incdec_ptr51 = $row_addr_14 + 1 | 0;
    HEAP8[$row_addr_14] = $add49;
    if ($incdec_ptr51 >>> 0 < $add_ptr7 >>> 0) {
      var $prev_row_addr_13 = $prev_row_addr_13 + 1 | 0;
      var $row_addr_14 = $incdec_ptr51;
      __label__ = 7;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_read_filter_row_paeth_multibyte_pixel["X"] = 1;

function _png_read_finish_row($png_ptr) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $extra = __stackBase__;
    var $row_number = $png_ptr + 228 | 0;
    var $inc = HEAP32[$row_number >> 2] + 1 | 0;
    HEAP32[$row_number >> 2] = $inc;
    var $num_rows = $png_ptr + 212 | 0;
    if ($inc >>> 0 < HEAPU32[$num_rows >> 2] >>> 0) {
      __label__ = 33;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    if (HEAP8[$png_ptr + 288 | 0] << 24 >> 24 == 0) {
      __label__ = 8;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    HEAP32[$row_number >> 2] = 0;
    var $3 = HEAP32[$png_ptr + 236 >> 2];
    var $add = HEAP32[$png_ptr + 220 >> 2] + 1 | 0;
    _memset($3, 0, $add, 1);
    var $pass = $png_ptr + 289 | 0;
    var $width = $png_ptr + 204 | 0;
    var $iwidth = $png_ptr + 224 | 0;
    var $transformations = $png_ptr + 92 | 0;
    var $height = $png_ptr + 208 | 0;
    var $5 = HEAP8[$pass];
    __label__ = 4;
    break;
   case 4:
    var $5;
    var $inc4 = $5 + 1 & 255;
    HEAP8[$pass] = $inc4;
    var $conv = $inc4 & 255;
    if (($inc4 & 255) > 6) {
      __label__ = 8;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $arrayidx = STRING_TABLE._png_do_write_interlace_png_pass_inc + $conv | 0;
    var $conv11 = HEAPU8[$arrayidx] & 255;
    var $arrayidx15 = STRING_TABLE._png_do_write_interlace_png_pass_start + $conv | 0;
    var $sub17 = HEAP32[$width >> 2] - 1 + $conv11 - (HEAPU8[$arrayidx15] & 255) | 0;
    var $div = Math.floor(($sub17 >>> 0) / ($conv11 >>> 0));
    HEAP32[$iwidth >> 2] = $div;
    if ((HEAP32[$transformations >> 2] & 2 | 0) == 0) {
      __label__ = 6;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 6:
    var $arrayidx26 = STRING_TABLE._png_write_finish_row_png_pass_yinc + $conv | 0;
    var $conv27 = HEAPU8[$arrayidx26] & 255;
    var $arrayidx32 = STRING_TABLE._png_write_finish_row_png_pass_ystart + $conv | 0;
    var $sub34 = HEAP32[$height >> 2] - 1 + $conv27 - (HEAPU8[$arrayidx32] & 255) | 0;
    var $div39 = Math.floor(($sub34 >>> 0) / ($conv27 >>> 0));
    HEAP32[$num_rows >> 2] = $div39;
    if (($div39 | 0) == 0 | ($div | 0) == 0) {
      var $5 = $inc4;
      __label__ = 4;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    if (($inc4 & 255) < 7) {
      __label__ = 33;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    var $flags = $png_ptr + 88 | 0;
    if ((HEAP32[$flags >> 2] & 32 | 0) == 0) {
      __label__ = 10;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    var $idat_size128_pre_phi = $png_ptr + 264 | 0;
    __label__ = 29;
    break;
   case 10:
    var $zstream = $png_ptr + 96 | 0;
    HEAP32[$png_ptr + 108 >> 2] = $extra;
    var $avail_out = $png_ptr + 112 | 0;
    HEAP32[$avail_out >> 2] = 1;
    var $avail_in = $png_ptr + 100 | 0;
    var $msg = $png_ptr + 120 | 0;
    var $14 = $png_ptr;
    var $idat_size = $png_ptr + 264 | 0;
    var $zbuf_size = $png_ptr + 156 | 0;
    var $zbuf = $png_ptr + 152 | 0;
    var $next_in = $zstream | 0;
    var $chunk_name = $png_ptr + 232 | 0;
    __label__ = 11;
    break;
   case 11:
    if ((HEAP32[$avail_in >> 2] | 0) == 0) {
      __label__ = 12;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 12:
    var $16 = HEAP32[$idat_size >> 2];
    if (($16 | 0) == 0) {
      __label__ = 13;
      break;
    } else {
      var $19 = $16;
      __label__ = 16;
      break;
    }
   case 13:
    var $call = _png_crc_finish($png_ptr, 0);
    var $call63 = _png_read_chunk_header($png_ptr);
    HEAP32[$idat_size >> 2] = $call63;
    if ((HEAP32[$chunk_name >> 2] | 0) == 1229209940) {
      var $18 = $call63;
      __label__ = 15;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 14:
    _png_error($14, STRING_TABLE.__str138887 | 0);
    var $18 = HEAP32[$idat_size >> 2];
    __label__ = 15;
    break;
   case 15:
    var $18;
    if (($18 | 0) == 0) {
      __label__ = 13;
      break;
    } else {
      var $19 = $18;
      __label__ = 16;
      break;
    }
   case 16:
    var $19;
    var $20 = HEAPU32[$zbuf_size >> 2];
    HEAP32[$avail_in >> 2] = $20;
    var $21 = HEAPU32[$zbuf >> 2];
    HEAP32[$next_in >> 2] = $21;
    if ($20 >>> 0 > $19 >>> 0) {
      __label__ = 17;
      break;
    } else {
      var $22 = $20;
      __label__ = 18;
      break;
    }
   case 17:
    HEAP32[$avail_in >> 2] = $19;
    var $22 = $19;
    __label__ = 18;
    break;
   case 18:
    var $22;
    _png_crc_read($png_ptr, $21, $22);
    var $sub87 = HEAP32[$idat_size >> 2] - HEAP32[$avail_in >> 2] | 0;
    HEAP32[$idat_size >> 2] = $sub87;
    __label__ = 19;
    break;
   case 19:
    var $call90 = _inflate($zstream, 1);
    if (($call90 | 0) == 1) {
      __label__ = 20;
      break;
    } else if (($call90 | 0) == 0) {
      __label__ = 26;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 20:
    if ((HEAP32[$avail_out >> 2] | 0) == 0) {
      __label__ = 23;
      break;
    } else {
      __label__ = 21;
      break;
    }
   case 21:
    if ((HEAP32[$avail_in >> 2] | 0) == 0) {
      __label__ = 22;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 22:
    if ((HEAP32[$idat_size >> 2] | 0) == 0) {
      __label__ = 24;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 23:
    _png_warning($14, STRING_TABLE.__str139888 | 0);
    __label__ = 24;
    break;
   case 24:
    var $mode = $png_ptr + 84 | 0;
    var $or = HEAP32[$mode >> 2] | 8;
    HEAP32[$mode >> 2] = $or;
    __label__ = 28;
    break;
   case 25:
    var $29 = HEAP32[$msg >> 2];
    var $cond = ($29 | 0) == 0 ? STRING_TABLE.__str140889 | 0 : $29;
    _png_error($14, $cond);
    __label__ = 26;
    break;
   case 26:
    if ((HEAP32[$avail_out >> 2] | 0) == 0) {
      __label__ = 27;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 27:
    _png_warning($14, STRING_TABLE.__str139888 | 0);
    var $mode120 = $png_ptr + 84 | 0;
    var $or121 = HEAP32[$mode120 >> 2] | 8;
    HEAP32[$mode120 >> 2] = $or121;
    __label__ = 28;
    break;
   case 28:
    var $storemerge = HEAP32[$flags >> 2] | 32;
    HEAP32[$flags >> 2] = $storemerge;
    HEAP32[$avail_out >> 2] = 0;
    var $idat_size128_pre_phi = $idat_size;
    __label__ = 29;
    break;
   case 29:
    var $idat_size128_pre_phi;
    if ((HEAP32[$idat_size128_pre_phi >> 2] | 0) == 0) {
      __label__ = 30;
      break;
    } else {
      __label__ = 31;
      break;
    }
   case 30:
    if ((HEAP32[$png_ptr + 100 >> 2] | 0) == 0) {
      __label__ = 32;
      break;
    } else {
      __label__ = 31;
      break;
    }
   case 31:
    var $34 = $png_ptr;
    _png_warning($34, STRING_TABLE.__str141890 | 0);
    __label__ = 32;
    break;
   case 32:
    var $zstream136 = $png_ptr + 96 | 0;
    var $call137 = _inflateReset($zstream136);
    var $mode138 = $png_ptr + 84 | 0;
    var $or139 = HEAP32[$mode138 >> 2] | 8;
    HEAP32[$mode138 >> 2] = $or139;
    __label__ = 33;
    break;
   case 33:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_read_finish_row["X"] = 1;

function _png_read_start_row($png_ptr) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    HEAP32[$png_ptr + 100 >> 2] = 0;
    _png_init_read_transformations($png_ptr);
    var $interlaced = $png_ptr + 288 | 0;
    if (HEAP8[$interlaced] << 24 >> 24 == 0) {
      __label__ = 6;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $1 = HEAPU32[$png_ptr + 92 >> 2];
    var $2 = HEAPU32[$png_ptr + 208 >> 2];
    if (($1 & 2 | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    HEAP32[$png_ptr + 212 >> 2] = ($2 + 7 | 0) >>> 3;
    __label__ = 5;
    break;
   case 4:
    HEAP32[$png_ptr + 212 >> 2] = $2;
    __label__ = 5;
    break;
   case 5:
    var $3 = HEAPU32[$png_ptr + 204 >> 2];
    var $idxprom = HEAPU8[$png_ptr + 289 | 0] & 255;
    var $arrayidx = STRING_TABLE._png_do_write_interlace_png_pass_inc + $idxprom | 0;
    var $conv8 = HEAPU8[$arrayidx] & 255;
    var $arrayidx13 = STRING_TABLE._png_do_write_interlace_png_pass_start + $idxprom | 0;
    var $sub15 = $3 - 1 + $conv8 - (HEAPU8[$arrayidx13] & 255) | 0;
    var $div20 = Math.floor(($sub15 >>> 0) / ($conv8 >>> 0));
    HEAP32[$png_ptr + 224 >> 2] = $div20;
    var $10 = $1;
    var $9 = $3;
    __label__ = 7;
    break;
   case 6:
    var $7 = HEAP32[$png_ptr + 208 >> 2];
    HEAP32[$png_ptr + 212 >> 2] = $7;
    var $8 = HEAP32[$png_ptr + 204 >> 2];
    HEAP32[$png_ptr + 224 >> 2] = $8;
    var $10 = HEAP32[$png_ptr + 92 >> 2];
    var $9 = $8;
    __label__ = 7;
    break;
   case 7:
    var $9;
    var $10;
    var $conv27 = HEAPU8[$png_ptr + 294 | 0] & 255;
    var $transformations28 = $png_ptr + 92 | 0;
    if (($10 & 4 | 0) == 0) {
      var $max_pixel_depth_0 = $conv27;
      __label__ = 10;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    if ((HEAPU8[$png_ptr + 292 | 0] & 255) < 8) {
      __label__ = 9;
      break;
    } else {
      var $max_pixel_depth_0 = $conv27;
      __label__ = 10;
      break;
    }
   case 9:
    var $max_pixel_depth_0 = 8;
    __label__ = 10;
    break;
   case 10:
    var $max_pixel_depth_0;
    var $13 = HEAPU32[$transformations28 >> 2];
    var $tobool37 = ($13 & 4096 | 0) == 0;
    if ($tobool37) {
      var $max_pixel_depth_2 = $max_pixel_depth_0;
      __label__ = 16;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    var $14 = HEAP8[$png_ptr + 291 | 0];
    if ($14 << 24 >> 24 == 3) {
      __label__ = 12;
      break;
    } else if ($14 << 24 >> 24 == 0) {
      __label__ = 13;
      break;
    } else if ($14 << 24 >> 24 == 2) {
      __label__ = 14;
      break;
    } else {
      var $max_pixel_depth_2 = $max_pixel_depth_0;
      __label__ = 16;
      break;
    }
   case 12:
    var $_ = HEAP16[$png_ptr + 284 >> 1] << 16 >> 16 == 0 ? 24 : 32;
    var $max_pixel_depth_2 = $_;
    __label__ = 16;
    break;
   case 13:
    var $max_pixel_depth_1 = $max_pixel_depth_0 >>> 0 < 8 ? 8 : $max_pixel_depth_0;
    var $max_pixel_depth_2 = $max_pixel_depth_1 << (HEAP16[$png_ptr + 284 >> 1] << 16 >> 16 != 0 & 1);
    __label__ = 16;
    break;
   case 14:
    if (HEAP16[$png_ptr + 284 >> 1] << 16 >> 16 == 0) {
      var $max_pixel_depth_2 = $max_pixel_depth_0;
      __label__ = 16;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 15:
    var $div71 = Math.floor(($max_pixel_depth_0 << 2 >>> 0) / 3);
    var $max_pixel_depth_2 = $div71;
    __label__ = 16;
    break;
   case 16:
    var $max_pixel_depth_2;
    if (($13 & 512 | 0) == 0) {
      var $max_pixel_depth_3 = $max_pixel_depth_2;
      var $19 = $13;
      __label__ = 20;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 17:
    if ($tobool37) {
      __label__ = 19;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 18:
    var $max_pixel_depth_3 = $max_pixel_depth_2 << ((HEAPU8[$png_ptr + 292 | 0] & 255) < 16 & 1);
    var $19 = $13;
    __label__ = 20;
    break;
   case 19:
    var $and94 = $13 & -513;
    HEAP32[$transformations28 >> 2] = $and94;
    var $max_pixel_depth_3 = $max_pixel_depth_2;
    var $19 = $and94;
    __label__ = 20;
    break;
   case 20:
    var $19;
    var $max_pixel_depth_3;
    var $tobool99 = ($19 & 32768 | 0) == 0;
    if ($tobool99) {
      var $max_pixel_depth_4 = $max_pixel_depth_3;
      __label__ = 24;
      break;
    } else {
      __label__ = 21;
      break;
    }
   case 21:
    var $20 = HEAP8[$png_ptr + 291 | 0];
    if ($20 << 24 >> 24 == 0) {
      __label__ = 22;
      break;
    } else if ($20 << 24 >> 24 == 2 || $20 << 24 >> 24 == 3) {
      __label__ = 23;
      break;
    } else {
      var $max_pixel_depth_4 = $max_pixel_depth_3;
      __label__ = 24;
      break;
    }
   case 22:
    var $_2 = ($max_pixel_depth_3 | 0) < 9 ? 16 : 32;
    var $max_pixel_depth_4 = $_2;
    __label__ = 24;
    break;
   case 23:
    var $_3 = ($max_pixel_depth_3 | 0) < 33 ? 32 : 64;
    var $max_pixel_depth_4 = $_3;
    __label__ = 24;
    break;
   case 24:
    var $max_pixel_depth_4;
    if (($19 & 16384 | 0) == 0) {
      var $max_pixel_depth_5 = $max_pixel_depth_4;
      __label__ = 33;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 25:
    if (HEAP16[$png_ptr + 284 >> 1] << 16 >> 16 == 0) {
      __label__ = 27;
      break;
    } else {
      __label__ = 26;
      break;
    }
   case 26:
    if (($19 & 4096 | 0) == 0 ^ 1 | $tobool99 ^ 1) {
      __label__ = 29;
      break;
    } else {
      __label__ = 28;
      break;
    }
   case 27:
    if ($tobool99) {
      __label__ = 28;
      break;
    } else {
      __label__ = 29;
      break;
    }
   case 28:
    var $22 = HEAP8[$png_ptr + 291 | 0];
    if ($22 << 24 >> 24 == 4) {
      __label__ = 29;
      break;
    } else {
      __label__ = 30;
      break;
    }
   case 29:
    var $_4 = ($max_pixel_depth_4 | 0) < 17 ? 32 : 64;
    var $max_pixel_depth_5 = $_4;
    __label__ = 33;
    break;
   case 30:
    var $cmp161 = $22 << 24 >> 24 == 6;
    if (($max_pixel_depth_4 | 0) < 9) {
      __label__ = 31;
      break;
    } else {
      __label__ = 32;
      break;
    }
   case 31:
    var $_5 = $cmp161 ? 32 : 24;
    var $max_pixel_depth_5 = $_5;
    __label__ = 33;
    break;
   case 32:
    var $_6 = $cmp161 ? 64 : 48;
    var $max_pixel_depth_5 = $_6;
    __label__ = 33;
    break;
   case 33:
    var $max_pixel_depth_5;
    if (($19 & 1048576 | 0) == 0) {
      var $max_pixel_depth_6 = $max_pixel_depth_5;
      __label__ = 36;
      break;
    } else {
      __label__ = 34;
      break;
    }
   case 34:
    var $mul183 = (HEAPU8[$png_ptr + 81 | 0] & 255) * (HEAPU8[$png_ptr + 80 | 0] & 255) | 0;
    if (($mul183 | 0) > ($max_pixel_depth_5 | 0)) {
      __label__ = 35;
      break;
    } else {
      var $max_pixel_depth_6 = $max_pixel_depth_5;
      __label__ = 36;
      break;
    }
   case 35:
    var $max_pixel_depth_6 = $mul183;
    __label__ = 36;
    break;
   case 36:
    var $max_pixel_depth_6;
    HEAP8[$png_ptr + 298 | 0] = $max_pixel_depth_6 & 255;
    HEAP8[$png_ptr + 299 | 0] = 0;
    var $and192 = $9 + 7 & -8;
    if (($max_pixel_depth_6 | 0) > 7) {
      __label__ = 37;
      break;
    } else {
      __label__ = 38;
      break;
    }
   case 37:
    var $cond = $and192 * ($max_pixel_depth_6 >>> 3) | 0;
    __label__ = 39;
    break;
   case 38:
    var $cond = ($and192 * $max_pixel_depth_6 | 0) >>> 3;
    __label__ = 39;
    break;
   case 39:
    var $cond;
    var $add203 = ($max_pixel_depth_6 + 7 >> 3) + 49 + $cond | 0;
    var $old_big_row_buf_size = $png_ptr + 652 | 0;
    if ($add203 >>> 0 > HEAPU32[$old_big_row_buf_size >> 2] >>> 0) {
      __label__ = 40;
      break;
    } else {
      __label__ = 44;
      break;
    }
   case 40:
    var $big_row_buf = $png_ptr + 596 | 0;
    var $26 = HEAP32[$big_row_buf >> 2];
    var $27 = $png_ptr;
    _png_free($27, $26);
    var $big_prev_row = $png_ptr + 664 | 0;
    var $28 = HEAP32[$big_prev_row >> 2];
    _png_free($27, $28);
    if (HEAP8[$interlaced] << 24 >> 24 == 0) {
      __label__ = 42;
      break;
    } else {
      __label__ = 41;
      break;
    }
   case 41:
    var $call = _png_calloc($27, $add203);
    var $storemerge = $call;
    __label__ = 43;
    break;
   case 42:
    var $call214 = _png_malloc($27, $add203);
    var $storemerge = $call214;
    __label__ = 43;
    break;
   case 43:
    var $storemerge;
    HEAP32[$big_row_buf >> 2] = $storemerge;
    var $call218 = _png_malloc($27, $add203);
    HEAP32[$big_prev_row >> 2] = $call218;
    var $add_ptr = HEAP32[$big_row_buf >> 2] + 31 | 0;
    HEAP32[$png_ptr + 240 >> 2] = $add_ptr;
    HEAP32[$png_ptr + 236 >> 2] = $call218 + 31 | 0;
    HEAP32[$old_big_row_buf_size >> 2] = $add203;
    __label__ = 44;
    break;
   case 44:
    var $rowbytes = $png_ptr + 220 | 0;
    var $31 = HEAP32[$rowbytes >> 2];
    if (($31 | 0) == -1) {
      __label__ = 45;
      break;
    } else {
      var $33 = $31;
      __label__ = 46;
      break;
    }
   case 45:
    var $32 = $png_ptr;
    _png_error($32, STRING_TABLE.__str142891 | 0);
    var $33 = HEAP32[$rowbytes >> 2];
    __label__ = 46;
    break;
   case 46:
    var $33;
    var $34 = HEAP32[$png_ptr + 236 >> 2];
    _memset($34, 0, $33 + 1 | 0, 1);
    var $flags = $png_ptr + 88 | 0;
    var $or = HEAP32[$flags >> 2] | 64;
    HEAP32[$flags >> 2] = $or;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_read_start_row["X"] = 1;

function _png_set_bKGD($png_ptr, $info_ptr, $background) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0 | ($info_ptr | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $0 = $info_ptr + 90 | 0;
    var $1 = $background | 0;
    for (var $$src = $1, $$dest = $0, $$stop = $$src + 10; $$src < $$stop; $$src++, $$dest++) {
      HEAP8[$$dest] = HEAP8[$$src];
    }
    var $valid = $info_ptr + 8 | 0;
    var $or = HEAP32[$valid >> 2] | 32;
    HEAP32[$valid >> 2] = $or;
    __label__ = 3;
    break;
   case 3:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_set_cHRM_fixed($png_ptr, $info_ptr, $white_x, $white_y, $red_x, $red_y, $green_x, $green_y, $blue_x, $blue_y) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0 | ($info_ptr | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $call = _png_check_cHRM_fixed($png_ptr, $white_x, $white_y, $red_x, $red_y, $green_x, $green_y, $blue_x, $blue_y);
    if (($call | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    HEAP32[$info_ptr + 128 >> 2] = $white_x;
    HEAP32[$info_ptr + 132 >> 2] = $white_y;
    HEAP32[$info_ptr + 136 >> 2] = $red_x;
    HEAP32[$info_ptr + 140 >> 2] = $red_y;
    HEAP32[$info_ptr + 144 >> 2] = $green_x;
    HEAP32[$info_ptr + 148 >> 2] = $green_y;
    HEAP32[$info_ptr + 152 >> 2] = $blue_x;
    HEAP32[$info_ptr + 156 >> 2] = $blue_y;
    var $valid = $info_ptr + 8 | 0;
    var $or = HEAP32[$valid >> 2] | 4;
    HEAP32[$valid >> 2] = $or;
    __label__ = 4;
    break;
   case 4:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_set_gAMA_fixed($png_ptr, $info_ptr, $file_gamma) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0 | ($info_ptr | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    if (($file_gamma - 16 | 0) >>> 0 > 624999984) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $1 = $png_ptr;
    _png_warning($1, STRING_TABLE.__str10970 | 0);
    __label__ = 5;
    break;
   case 4:
    HEAP32[$info_ptr + 40 >> 2] = $file_gamma;
    var $valid = $info_ptr + 8 | 0;
    var $or = HEAP32[$valid >> 2] | 1;
    HEAP32[$valid >> 2] = $or;
    __label__ = 5;
    break;
   case 5:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_set_oFFs($png_ptr, $info_ptr, $offset_x, $offset_y, $unit_type) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0 | ($info_ptr | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    HEAP32[$info_ptr + 100 >> 2] = $offset_x;
    HEAP32[$info_ptr + 104 >> 2] = $offset_y;
    HEAP8[$info_ptr + 108 | 0] = $unit_type & 255;
    var $valid = $info_ptr + 8 | 0;
    var $or = HEAP32[$valid >> 2] | 256;
    HEAP32[$valid >> 2] = $or;
    __label__ = 3;
    break;
   case 3:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_set_pHYs($png_ptr, $info_ptr, $res_x, $res_y, $unit_type) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0 | ($info_ptr | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    HEAP32[$info_ptr + 112 >> 2] = $res_x;
    HEAP32[$info_ptr + 116 >> 2] = $res_y;
    HEAP8[$info_ptr + 120 | 0] = $unit_type & 255;
    var $valid = $info_ptr + 8 | 0;
    var $or = HEAP32[$valid >> 2] | 128;
    HEAP32[$valid >> 2] = $or;
    __label__ = 3;
    break;
   case 3:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_set_sRGB($png_ptr, $info_ptr, $srgb_intent) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0 | ($info_ptr | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    HEAP8[$info_ptr + 44 | 0] = $srgb_intent & 255;
    var $valid = $info_ptr + 8 | 0;
    var $or = HEAP32[$valid >> 2] | 2048;
    HEAP32[$valid >> 2] = $or;
    __label__ = 3;
    break;
   case 3:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_set_hIST($png_ptr, $info_ptr, $hist) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0 | ($info_ptr | 0) == 0) {
      __label__ = 9;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $num_palette = $info_ptr + 20 | 0;
    var $0 = HEAPU16[$num_palette >> 1];
    if ($0 << 16 >> 16 == 0 | ($0 & 65535) > 256) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $1 = $png_ptr;
    _png_warning($1, STRING_TABLE.__str12972 | 0);
    __label__ = 9;
    break;
   case 4:
    _png_free_data($png_ptr, $info_ptr, 8, 0);
    var $2 = $png_ptr;
    var $call = _png_malloc_warn($2, 512);
    var $3 = $call;
    var $hist11 = $png_ptr + 488 | 0;
    HEAP32[$hist11 >> 2] = $3;
    if (($call | 0) == 0) {
      __label__ = 6;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    if (HEAP16[$num_palette >> 1] << 16 >> 16 == 0) {
      var $9 = $3;
      __label__ = 8;
      break;
    } else {
      var $i_04 = 0;
      var $6 = $3;
      __label__ = 7;
      break;
    }
   case 6:
    var $5 = $png_ptr;
    _png_warning($5, STRING_TABLE.__str13973 | 0);
    __label__ = 9;
    break;
   case 7:
    var $6;
    var $i_04;
    var $7 = HEAP16[$hist + ($i_04 << 1) >> 1];
    HEAP16[$6 + ($i_04 << 1) >> 1] = $7;
    var $inc = $i_04 + 1 | 0;
    var $_pre1 = HEAP32[$hist11 >> 2];
    if (($inc | 0) < (HEAPU16[$num_palette >> 1] & 65535 | 0)) {
      var $i_04 = $inc;
      var $6 = $_pre1;
      __label__ = 7;
      break;
    } else {
      var $9 = $_pre1;
      __label__ = 8;
      break;
    }
   case 8:
    var $9;
    HEAP32[$info_ptr + 124 >> 2] = $9;
    var $valid = $info_ptr + 8 | 0;
    var $or = HEAP32[$valid >> 2] | 64;
    HEAP32[$valid >> 2] = $or;
    var $free_me = $info_ptr + 184 | 0;
    var $or25 = HEAP32[$free_me >> 2] | 8;
    HEAP32[$free_me >> 2] = $or25;
    __label__ = 9;
    break;
   case 9:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_set_hIST["X"] = 1;

function _png_set_IHDR($png_ptr, $info_ptr, $width, $height, $bit_depth, $color_type, $interlace_type, $compression_type, $filter_type) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0 | ($info_ptr | 0) == 0) {
      __label__ = 15;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    HEAP32[$info_ptr >> 2] = $width;
    HEAP32[$info_ptr + 4 >> 2] = $height;
    var $bit_depth4 = $info_ptr + 24 | 0;
    HEAP8[$bit_depth4] = $bit_depth & 255;
    var $color_type6 = $info_ptr + 25 | 0;
    HEAP8[$color_type6] = $color_type & 255;
    HEAP8[$info_ptr + 26 | 0] = $compression_type & 255;
    HEAP8[$info_ptr + 27 | 0] = $filter_type & 255;
    HEAP8[$info_ptr + 28 | 0] = $interlace_type & 255;
    var $conv16 = $bit_depth & 255;
    var $conv18 = $color_type & 255;
    var $conv20 = $interlace_type & 255;
    var $conv22 = $compression_type & 255;
    var $conv24 = $filter_type & 255;
    _png_check_IHDR($png_ptr, $width, $height, $conv16, $conv18, $conv20, $conv22, $conv24);
    var $0 = HEAP8[$color_type6];
    if ($0 << 24 >> 24 == 3) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    HEAP8[$info_ptr + 29 | 0] = 1;
    var $2 = 1;
    __label__ = 9;
    break;
   case 4:
    var $channels33 = $info_ptr + 29 | 0;
    if (($0 & 2) << 24 >> 24 == 0) {
      __label__ = 6;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    HEAP8[$channels33] = 3;
    var $1 = 3;
    __label__ = 7;
    break;
   case 6:
    HEAP8[$channels33] = 1;
    var $1 = 1;
    __label__ = 7;
    break;
   case 7:
    var $1;
    if (($0 & 4) << 24 >> 24 == 0) {
      var $2 = $1;
      __label__ = 9;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    var $inc = $1 + 1 & 255;
    HEAP8[$info_ptr + 29 | 0] = $inc;
    var $2 = $inc;
    __label__ = 9;
    break;
   case 9:
    var $2;
    var $mul = HEAP8[$bit_depth4] * $2 & 255;
    HEAP8[$info_ptr + 30 | 0] = $mul;
    if ($width >>> 0 > 536870798) {
      __label__ = 10;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 10:
    HEAP32[$info_ptr + 12 >> 2] = 0;
    __label__ = 15;
    break;
   case 11:
    var $conv55 = $mul & 255;
    if (($mul & 255) > 7) {
      __label__ = 12;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 12:
    var $cond = ($conv55 >>> 3) * $width | 0;
    __label__ = 14;
    break;
   case 13:
    var $cond = ($conv55 * $width + 7 | 0) >>> 3;
    __label__ = 14;
    break;
   case 14:
    var $cond;
    HEAP32[$info_ptr + 12 >> 2] = $cond;
    __label__ = 15;
    break;
   case 15:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_set_IHDR["X"] = 1;

function _png_set_pCAL($png_ptr, $info_ptr, $purpose, $X0, $X1, $type, $nparams, $units, $params) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0 | ($info_ptr | 0) == 0) {
      __label__ = 21;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $call = _strlen($purpose);
    var $add = $call + 1 | 0;
    if ($type >>> 0 > 3) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $1 = $png_ptr;
    _png_error($1, STRING_TABLE.__str14974 | 0);
    __label__ = 4;
    break;
   case 4:
    if (($nparams | 0) > 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 5:
    var $2 = $png_ptr;
    var $i_02 = 0;
    __label__ = 6;
    break;
   case 6:
    var $i_02;
    var $3 = HEAP32[$params + ($i_02 << 2) >> 2];
    var $call9 = _strlen($3);
    var $call10 = _png_check_fp_string($3, $call9);
    if (($call10 | 0) == 0) {
      __label__ = 7;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 7:
    _png_error($2, STRING_TABLE.__str15975 | 0);
    __label__ = 8;
    break;
   case 8:
    var $inc = $i_02 + 1 | 0;
    if (($inc | 0) == ($nparams | 0)) {
      __label__ = 9;
      break;
    } else {
      var $i_02 = $inc;
      __label__ = 6;
      break;
    }
   case 9:
    var $4 = $png_ptr;
    var $call13 = _png_malloc_warn($4, $add);
    HEAP32[$info_ptr + 160 >> 2] = $call13;
    if (($call13 | 0) == 0) {
      __label__ = 10;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 10:
    var $5 = $png_ptr;
    _png_warning($5, STRING_TABLE.__str16976 | 0);
    __label__ = 21;
    break;
   case 11:
    _memcpy($call13, $purpose, $add, 1);
    HEAP32[$info_ptr + 164 >> 2] = $X0;
    HEAP32[$info_ptr + 168 >> 2] = $X1;
    HEAP8[$info_ptr + 180 | 0] = $type & 255;
    HEAP8[$info_ptr + 181 | 0] = $nparams & 255;
    var $call20 = _strlen($units);
    var $add21 = $call20 + 1 | 0;
    var $call22 = _png_malloc_warn($4, $add21);
    HEAP32[$info_ptr + 172 >> 2] = $call22;
    if (($call22 | 0) == 0) {
      __label__ = 12;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 12:
    var $6 = $png_ptr;
    _png_warning($6, STRING_TABLE.__str17977 | 0);
    __label__ = 21;
    break;
   case 13:
    _memcpy($call22, $units, $add21, 1);
    var $mul = ($nparams << 2) + 4 | 0;
    var $call30 = _png_malloc_warn($4, $mul);
    var $pcal_params = $info_ptr + 176 | 0;
    HEAP32[$pcal_params >> 2] = $call30;
    if (($call30 | 0) == 0) {
      __label__ = 14;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 14:
    var $8 = $png_ptr;
    _png_warning($8, STRING_TABLE.__str18978 | 0);
    __label__ = 21;
    break;
   case 15:
    _memset($call30, 0, $mul, 1);
    var $i_1 = 0;
    __label__ = 16;
    break;
   case 16:
    var $i_1;
    if (($i_1 | 0) < ($nparams | 0)) {
      __label__ = 17;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 17:
    var $arrayidx43 = $params + ($i_1 << 2) | 0;
    var $9 = HEAP32[$arrayidx43 >> 2];
    var $call44 = _strlen($9);
    var $add45 = $call44 + 1 | 0;
    var $call46 = _png_malloc_warn($4, $add45);
    var $arrayidx48 = HEAP32[$pcal_params >> 2] + ($i_1 << 2) | 0;
    HEAP32[$arrayidx48 >> 2] = $call46;
    var $12 = HEAP32[HEAP32[$pcal_params >> 2] + ($i_1 << 2) >> 2];
    if (($12 | 0) == 0) {
      __label__ = 18;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 18:
    var $13 = $png_ptr;
    _png_warning($13, STRING_TABLE.__str19979 | 0);
    __label__ = 21;
    break;
   case 19:
    var $14 = HEAP32[$arrayidx43 >> 2];
    _memcpy($12, $14, $add45, 1);
    var $i_1 = $i_1 + 1 | 0;
    __label__ = 16;
    break;
   case 20:
    var $valid = $info_ptr + 8 | 0;
    var $or = HEAP32[$valid >> 2] | 1024;
    HEAP32[$valid >> 2] = $or;
    var $free_me = $info_ptr + 184 | 0;
    var $or61 = HEAP32[$free_me >> 2] | 128;
    HEAP32[$free_me >> 2] = $or61;
    __label__ = 21;
    break;
   case 21:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_set_pCAL["X"] = 1;

function _png_set_sCAL_s($png_ptr, $info_ptr, $unit, $swidth, $sheight) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0 | ($info_ptr | 0) == 0) {
      __label__ = 19;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    if (($unit - 1 | 0) >>> 0 > 1) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $1 = $png_ptr;
    _png_error($1, STRING_TABLE.__str20980 | 0);
    __label__ = 4;
    break;
   case 4:
    if (($swidth | 0) == 0) {
      var $lengthw_0 = 0;
      __label__ = 8;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $call = _strlen($swidth);
    if (($call | 0) == 0) {
      var $lengthw_0 = 0;
      __label__ = 8;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    if (HEAP8[$swidth] << 24 >> 24 == 45) {
      var $lengthw_0 = $call;
      __label__ = 8;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    var $call13 = _png_check_fp_string($swidth, $call);
    if (($call13 | 0) == 0) {
      var $lengthw_0 = $call;
      __label__ = 8;
      break;
    } else {
      var $lengthw_1 = $call;
      __label__ = 9;
      break;
    }
   case 8:
    var $lengthw_0;
    var $3 = $png_ptr;
    _png_error($3, STRING_TABLE.__str21981 | 0);
    var $lengthw_1 = $lengthw_0;
    __label__ = 9;
    break;
   case 9:
    var $lengthw_1;
    if (($sheight | 0) == 0) {
      var $lengthh_0 = 0;
      __label__ = 13;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 10:
    var $call19 = _strlen($sheight);
    if (($call19 | 0) == 0) {
      var $lengthh_0 = 0;
      __label__ = 13;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    if (HEAP8[$sheight] << 24 >> 24 == 45) {
      var $lengthh_0 = $call19;
      __label__ = 13;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 12:
    var $call28 = _png_check_fp_string($sheight, $call19);
    if (($call28 | 0) == 0) {
      var $lengthh_0 = $call19;
      __label__ = 13;
      break;
    } else {
      var $lengthh_1 = $call19;
      __label__ = 14;
      break;
    }
   case 13:
    var $lengthh_0;
    var $5 = $png_ptr;
    _png_error($5, STRING_TABLE.__str22982 | 0);
    var $lengthh_1 = $lengthh_0;
    __label__ = 14;
    break;
   case 14:
    var $lengthh_1;
    HEAP8[$info_ptr + 220 | 0] = $unit & 255;
    var $inc = $lengthw_1 + 1 | 0;
    var $6 = $png_ptr;
    var $call33 = _png_malloc_warn($6, $inc);
    var $scal_s_width = $info_ptr + 224 | 0;
    HEAP32[$scal_s_width >> 2] = $call33;
    if (($call33 | 0) == 0) {
      __label__ = 15;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 15:
    var $7 = $png_ptr;
    _png_warning($7, STRING_TABLE.__str23983 | 0);
    __label__ = 19;
    break;
   case 16:
    _memcpy($call33, $swidth, $inc, 1);
    var $inc40 = $lengthh_1 + 1 | 0;
    var $call41 = _png_malloc_warn($6, $inc40);
    HEAP32[$info_ptr + 228 >> 2] = $call41;
    if (($call41 | 0) == 0) {
      __label__ = 17;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 17:
    var $8 = HEAP32[$scal_s_width >> 2];
    _png_free($6, $8);
    HEAP32[$scal_s_width >> 2] = 0;
    var $9 = $png_ptr;
    _png_warning($9, STRING_TABLE.__str23983 | 0);
    __label__ = 19;
    break;
   case 18:
    _memcpy($call41, $sheight, $inc40, 1);
    var $valid = $info_ptr + 8 | 0;
    var $or = HEAP32[$valid >> 2] | 16384;
    HEAP32[$valid >> 2] = $or;
    var $free_me = $info_ptr + 184 | 0;
    var $or50 = HEAP32[$free_me >> 2] | 256;
    HEAP32[$free_me >> 2] = $or50;
    __label__ = 19;
    break;
   case 19:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_set_sCAL_s["X"] = 1;

function _png_set_sCAL($png_ptr, $info_ptr, $unit, $width, $height) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 40;
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $swidth = __stackBase__;
    var $sheight = __stackBase__ + 20;
    if ($width > 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $0 = $png_ptr;
    _png_warning($0, STRING_TABLE.__str24984 | 0);
    __label__ = 6;
    break;
   case 3:
    if ($height > 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $1 = $png_ptr;
    _png_warning($1, STRING_TABLE.__str25985 | 0);
    __label__ = 6;
    break;
   case 5:
    var $arraydecay = $swidth | 0;
    _png_ascii_from_fp($png_ptr, $arraydecay, $width);
    var $arraydecay4 = $sheight | 0;
    _png_ascii_from_fp($png_ptr, $arraydecay4, $height);
    _png_set_sCAL_s($png_ptr, $info_ptr, $unit, $arraydecay, $arraydecay4);
    __label__ = 6;
    break;
   case 6:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_set_PLTE($png_ptr, $info_ptr, $palette, $num_palette) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0 | ($info_ptr | 0) == 0) {
      __label__ = 7;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    if ($num_palette >>> 0 > 256) {
      __label__ = 3;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 3:
    var $2 = $png_ptr;
    if (HEAP8[$info_ptr + 25 | 0] << 24 >> 24 == 3) {
      __label__ = 4;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 4:
    _png_error($2, STRING_TABLE.__str26986 | 0);
    __label__ = 6;
    break;
   case 5:
    _png_warning($2, STRING_TABLE.__str26986 | 0);
    __label__ = 7;
    break;
   case 6:
    _png_free_data($png_ptr, $info_ptr, 4096, 0);
    var $3 = $png_ptr;
    var $call = _png_calloc($3, 768);
    var $4 = $call;
    HEAP32[$png_ptr + 272 >> 2] = $4;
    var $5 = $palette | 0;
    var $mul = $num_palette * 3 | 0;
    _memcpy($call, $5, $mul, 1);
    HEAP32[$info_ptr + 16 >> 2] = $4;
    var $conv15 = $num_palette & 65535;
    HEAP16[$png_ptr + 276 >> 1] = $conv15;
    HEAP16[$info_ptr + 20 >> 1] = $conv15;
    var $free_me = $info_ptr + 184 | 0;
    var $or = HEAP32[$free_me >> 2] | 4096;
    HEAP32[$free_me >> 2] = $or;
    var $valid = $info_ptr + 8 | 0;
    var $or18 = HEAP32[$valid >> 2] | 8;
    HEAP32[$valid >> 2] = $or18;
    __label__ = 7;
    break;
   case 7:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_set_sBIT($png_ptr, $info_ptr, $sig_bit) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0 | ($info_ptr | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $0 = $info_ptr + 68 | 0;
    var $1 = $sig_bit | 0;
    HEAP8[$0] = HEAP8[$1];
    HEAP8[$0 + 1] = HEAP8[$1 + 1];
    HEAP8[$0 + 2] = HEAP8[$1 + 2];
    HEAP8[$0 + 3] = HEAP8[$1 + 3];
    HEAP8[$0 + 4] = HEAP8[$1 + 4];
    var $valid = $info_ptr + 8 | 0;
    var $or = HEAP32[$valid >> 2] | 2;
    HEAP32[$valid >> 2] = $or;
    __label__ = 3;
    break;
   case 3:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_set_sRGB_gAMA_and_cHRM($png_ptr, $info_ptr, $srgb_intent) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0 | ($info_ptr | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    _png_set_sRGB($png_ptr, $info_ptr, $srgb_intent);
    _png_set_gAMA_fixed($png_ptr, $info_ptr, 45455);
    _png_set_cHRM_fixed($png_ptr, $info_ptr, 31270, 32900, 64e3, 33e3, 3e4, 6e4, 15e3, 6e3);
    __label__ = 3;
    break;
   case 3:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_set_iCCP($png_ptr, $info_ptr, $name, $compression_type, $profile, $proflen) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0 | ($info_ptr | 0) == 0 | ($name | 0) == 0 | ($profile | 0) == 0) {
      __label__ = 7;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $call = _strlen($name);
    var $add = $call + 1 | 0;
    var $0 = $png_ptr;
    var $call6 = _png_malloc_warn($0, $add);
    if (($call6 | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $1 = $png_ptr;
    _png_warning($1, STRING_TABLE.__str27987 | 0);
    __label__ = 7;
    break;
   case 4:
    _memcpy($call6, $name, $add, 1);
    var $call10 = _png_malloc_warn($0, $proflen);
    if (($call10 | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    _png_free($0, $call6);
    var $2 = $png_ptr;
    _png_warning($2, STRING_TABLE.__str28988 | 0);
    __label__ = 7;
    break;
   case 6:
    _memcpy($call10, $profile, $proflen, 1);
    _png_free_data($png_ptr, $info_ptr, 16, 0);
    HEAP32[$info_ptr + 204 >> 2] = $proflen;
    HEAP32[$info_ptr + 196 >> 2] = $call6;
    HEAP32[$info_ptr + 200 >> 2] = $call10;
    HEAP8[$info_ptr + 208 | 0] = $compression_type & 255;
    var $free_me = $info_ptr + 184 | 0;
    var $or = HEAP32[$free_me >> 2] | 16;
    HEAP32[$free_me >> 2] = $or;
    var $valid = $info_ptr + 8 | 0;
    var $or14 = HEAP32[$valid >> 2] | 4096;
    HEAP32[$valid >> 2] = $or14;
    __label__ = 7;
    break;
   case 7:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_set_text($png_ptr, $info_ptr, $text_ptr, $num_text) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $call = _png_set_text_2($png_ptr, $info_ptr, $text_ptr, $num_text);
    if (($call | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $0 = $png_ptr;
    _png_error($0, STRING_TABLE.__str29989 | 0);
    __label__ = 3;
    break;
   case 3:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_set_text_2($png_ptr, $info_ptr, $text_ptr, $num_text) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0 | ($info_ptr | 0) == 0 | ($num_text | 0) == 0) {
      var $retval_0 = 0;
      __label__ = 38;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $num_text4 = $info_ptr + 48 | 0;
    var $0 = HEAP32[$num_text4 >> 2];
    var $add = $0 + $num_text | 0;
    var $max_text = $info_ptr + 52 | 0;
    var $1 = HEAP32[$max_text >> 2];
    var $text = $info_ptr + 56 | 0;
    if (($add | 0) > ($1 | 0)) {
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $text43_pre_phi = $text;
    var $_pre_phi = $png_ptr;
    __label__ = 11;
    break;
   case 4:
    var $2 = HEAP32[$text >> 2];
    if (($2 | 0) == 0) {
      __label__ = 8;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $add13 = $add + 8 | 0;
    HEAP32[$max_text >> 2] = $add13;
    var $mul = $add13 * 28 | 0;
    var $3 = $png_ptr;
    var $call = _png_malloc_warn($3, $mul);
    var $4 = $call;
    HEAP32[$text >> 2] = $4;
    if (($call | 0) == 0) {
      __label__ = 6;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 6:
    HEAP32[$max_text >> 2] = $1;
    HEAP32[$text >> 2] = $2;
    var $retval_0 = 1;
    __label__ = 38;
    break;
   case 7:
    var $5 = $2;
    var $mul25 = $1 * 28 | 0;
    _memcpy($call, $5, $mul25, 1);
    _png_free($3, $5);
    var $text43_pre_phi = $text;
    var $_pre_phi = $3;
    __label__ = 11;
    break;
   case 8:
    var $add26 = $num_text + 8 | 0;
    HEAP32[$max_text >> 2] = $add26;
    HEAP32[$num_text4 >> 2] = 0;
    var $mul30 = $add26 * 28 | 0;
    var $6 = $png_ptr;
    var $call31 = _png_malloc_warn($6, $mul30);
    HEAP32[$text >> 2] = $call31;
    if (($call31 | 0) == 0) {
      __label__ = 9;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 9:
    HEAP32[$num_text4 >> 2] = $0;
    HEAP32[$max_text >> 2] = $1;
    var $retval_0 = 1;
    __label__ = 38;
    break;
   case 10:
    var $free_me = $info_ptr + 184 | 0;
    var $or = HEAP32[$free_me >> 2] | 16384;
    HEAP32[$free_me >> 2] = $or;
    var $text43_pre_phi = $text;
    var $_pre_phi = $6;
    __label__ = 11;
    break;
   case 11:
    var $_pre_phi;
    var $text43_pre_phi;
    var $9 = $png_ptr;
    var $i_0 = 0;
    __label__ = 12;
    break;
   case 12:
    var $i_0;
    if (($i_0 | 0) < ($num_text | 0)) {
      __label__ = 13;
      break;
    } else {
      var $retval_0 = 0;
      __label__ = 38;
      break;
    }
   case 13:
    var $10 = HEAPU32[$num_text4 >> 2];
    var $11 = HEAPU32[$text43_pre_phi >> 2];
    var $arrayidx = $11 + $10 * 28 | 0;
    var $key = $text_ptr + $i_0 * 28 + 4 | 0;
    var $12 = HEAPU32[$key >> 2];
    if (($12 | 0) == 0) {
      __label__ = 37;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 14:
    var $compression = $text_ptr + $i_0 * 28 | 0;
    var $13 = HEAPU32[$compression >> 2];
    if (($13 + 1 | 0) >>> 0 > 3) {
      __label__ = 15;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 15:
    _png_warning($9, STRING_TABLE.__str30990 | 0);
    __label__ = 37;
    break;
   case 16:
    var $call58 = _strlen($12);
    if (($13 | 0) < 1) {
      var $lang_key_len_0 = 0;
      var $lang_len_1 = 0;
      __label__ = 21;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 17:
    var $15 = HEAP32[$text_ptr + $i_0 * 28 + 20 >> 2];
    if (($15 | 0) == 0) {
      var $lang_len_0 = 0;
      __label__ = 19;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 18:
    var $call69 = _strlen($15);
    var $lang_len_0 = $call69;
    __label__ = 19;
    break;
   case 19:
    var $lang_len_0;
    var $16 = HEAP32[$text_ptr + $i_0 * 28 + 24 >> 2];
    if (($16 | 0) == 0) {
      var $lang_key_len_0 = 0;
      var $lang_len_1 = $lang_len_0;
      __label__ = 21;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 20:
    var $call77 = _strlen($16);
    var $lang_key_len_0 = $call77;
    var $lang_len_1 = $lang_len_0;
    __label__ = 21;
    break;
   case 21:
    var $lang_len_1;
    var $lang_key_len_0;
    var $text82 = $text_ptr + $i_0 * 28 + 8 | 0;
    var $17 = HEAP32[$text82 >> 2];
    if (($17 | 0) == 0) {
      __label__ = 23;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 22:
    if (HEAP8[$17] << 24 >> 24 == 0) {
      __label__ = 23;
      break;
    } else {
      __label__ = 26;
      break;
    }
   case 23:
    var $compression96 = $arrayidx | 0;
    if (($13 | 0) > 0) {
      __label__ = 24;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 24:
    HEAP32[$compression96 >> 2] = 1;
    var $text_length_0 = 0;
    __label__ = 27;
    break;
   case 25:
    HEAP32[$compression96 >> 2] = -1;
    var $text_length_0 = 0;
    __label__ = 27;
    break;
   case 26:
    var $call103 = _strlen($17);
    HEAP32[$arrayidx >> 2] = $13;
    var $text_length_0 = $call103;
    __label__ = 27;
    break;
   case 27:
    var $text_length_0;
    var $add111 = $text_length_0 + ($lang_key_len_0 + ($lang_len_1 + ($call58 + 4))) | 0;
    var $call112 = _png_malloc_warn($_pre_phi, $add111);
    var $key113 = $11 + $10 * 28 + 4 | 0;
    HEAP32[$key113 >> 2] = $call112;
    if (($call112 | 0) == 0) {
      var $retval_0 = 1;
      __label__ = 38;
      break;
    } else {
      __label__ = 28;
      break;
    }
   case 28:
    var $19 = HEAP32[$key >> 2];
    _memcpy($call112, $19, $call58, 1);
    HEAP8[HEAP32[$key113 >> 2] + $call58 | 0] = 0;
    if ((HEAP32[$compression >> 2] | 0) > 0) {
      __label__ = 29;
      break;
    } else {
      __label__ = 30;
      break;
    }
   case 29:
    var $add_ptr130 = HEAP32[$key113 >> 2] + ($call58 + 1) | 0;
    var $lang131 = $11 + $10 * 28 + 20 | 0;
    HEAP32[$lang131 >> 2] = $add_ptr130;
    var $23 = HEAP32[$text_ptr + $i_0 * 28 + 20 >> 2];
    _memcpy($add_ptr130, $23, $lang_len_1, 1);
    HEAP8[HEAP32[$lang131 >> 2] + $lang_len_1 | 0] = 0;
    var $add_ptr139 = HEAP32[$lang131 >> 2] + ($lang_len_1 + 1) | 0;
    var $lang_key140 = $11 + $10 * 28 + 24 | 0;
    HEAP32[$lang_key140 >> 2] = $add_ptr139;
    var $26 = HEAP32[$text_ptr + $i_0 * 28 + 24 >> 2];
    _memcpy($add_ptr139, $26, $lang_key_len_0, 1);
    HEAP8[HEAP32[$lang_key140 >> 2] + $lang_key_len_0 | 0] = 0;
    var $add_ptr148 = HEAP32[$lang_key140 >> 2] + ($lang_key_len_0 + 1) | 0;
    HEAP32[$11 + $10 * 28 + 8 >> 2] = $add_ptr148;
    var $30 = $add_ptr148;
    __label__ = 31;
    break;
   case 30:
    HEAP32[$11 + $10 * 28 + 20 >> 2] = 0;
    HEAP32[$11 + $10 * 28 + 24 >> 2] = 0;
    var $add_ptr155 = HEAP32[$key113 >> 2] + ($call58 + 1) | 0;
    HEAP32[$11 + $10 * 28 + 8 >> 2] = $add_ptr155;
    var $30 = $add_ptr155;
    __label__ = 31;
    break;
   case 31:
    var $30;
    if (($text_length_0 | 0) == 0) {
      var $32 = $30;
      __label__ = 33;
      break;
    } else {
      __label__ = 32;
      break;
    }
   case 32:
    var $text159 = $11 + $10 * 28 + 8 | 0;
    var $31 = HEAP32[$text82 >> 2];
    _memcpy($30, $31, $text_length_0, 1);
    var $32 = HEAP32[$text159 >> 2];
    __label__ = 33;
    break;
   case 33:
    var $32;
    HEAP8[$32 + $text_length_0 | 0] = 0;
    var $text_length169 = $11 + $10 * 28 + 12 | 0;
    if ((HEAP32[$arrayidx >> 2] | 0) > 0) {
      __label__ = 34;
      break;
    } else {
      __label__ = 35;
      break;
    }
   case 34:
    HEAP32[$text_length169 >> 2] = 0;
    HEAP32[$11 + $10 * 28 + 16 >> 2] = $text_length_0;
    __label__ = 36;
    break;
   case 35:
    HEAP32[$text_length169 >> 2] = $text_length_0;
    HEAP32[$11 + $10 * 28 + 16 >> 2] = 0;
    __label__ = 36;
    break;
   case 36:
    var $inc = HEAP32[$num_text4 >> 2] + 1 | 0;
    HEAP32[$num_text4 >> 2] = $inc;
    __label__ = 37;
    break;
   case 37:
    var $i_0 = $i_0 + 1 | 0;
    __label__ = 12;
    break;
   case 38:
    var $retval_0;
    return $retval_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_set_text_2["X"] = 1;

function _png_set_unknown_chunk_location($png_ptr, $info_ptr, $chunk, $location) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($info_ptr | 0) != 0 & ($png_ptr | 0) != 0 & ($chunk | 0) > -1) {
      __label__ = 2;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 2:
    if ((HEAP32[$info_ptr + 192 >> 2] | 0) > ($chunk | 0)) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    HEAP8[HEAP32[$info_ptr + 188 >> 2] + $chunk * 20 + 16 | 0] = $location & 255;
    __label__ = 4;
    break;
   case 4:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_permit_mng_features($png_ptr) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    HEAP32[$png_ptr + 576 >> 2] = 4;
    __label__ = 3;
    break;
   case 3:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_set_user_limits($png_ptr) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    HEAP32[$png_ptr + 616 >> 2] = 5e5;
    HEAP32[$png_ptr + 620 >> 2] = 5e5;
    __label__ = 3;
    break;
   case 3:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_set_chunk_cache_max($png_ptr) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    HEAP32[$png_ptr + 624 >> 2] = 500;
    __label__ = 3;
    break;
   case 3:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_set_chunk_malloc_max($png_ptr) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    HEAP32[$png_ptr + 628 >> 2] = 2e6;
    __label__ = 3;
    break;
   case 3:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_set_packing($png_ptr) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    if ((HEAPU8[$png_ptr + 292 | 0] & 255) < 8) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $transformations = $png_ptr + 92 | 0;
    var $or = HEAP32[$transformations >> 2] | 4;
    HEAP32[$transformations >> 2] = $or;
    HEAP8[$png_ptr + 293 | 0] = 8;
    __label__ = 4;
    break;
   case 4:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_set_interlace_handling($png_ptr) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0) {
      var $retval_0 = 1;
      __label__ = 4;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    if (HEAP8[$png_ptr + 288 | 0] << 24 >> 24 == 0) {
      var $retval_0 = 1;
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $transformations = $png_ptr + 92 | 0;
    var $or = HEAP32[$transformations >> 2] | 2;
    HEAP32[$transformations >> 2] = $or;
    var $retval_0 = 7;
    __label__ = 4;
    break;
   case 4:
    var $retval_0;
    return $retval_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_set_filler($png_ptr) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0) {
      __label__ = 6;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $transformations = $png_ptr + 92 | 0;
    var $or = HEAP32[$transformations >> 2] | 32768;
    HEAP32[$transformations >> 2] = $or;
    HEAP16[$png_ptr + 306 >> 1] = -1;
    var $flags = $png_ptr + 88 | 0;
    var $or5 = HEAP32[$flags >> 2] | 128;
    HEAP32[$flags >> 2] = $or5;
    var $2 = HEAP8[$png_ptr + 291 | 0];
    if ($2 << 24 >> 24 == 2) {
      __label__ = 3;
      break;
    } else if ($2 << 24 >> 24 == 0) {
      __label__ = 4;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 3:
    HEAP8[$png_ptr + 296 | 0] = 4;
    __label__ = 6;
    break;
   case 4:
    if ((HEAPU8[$png_ptr + 292 | 0] & 255) > 7) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    HEAP8[$png_ptr + 296 | 0] = 2;
    __label__ = 6;
    break;
   case 6:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_do_invert($row_info, $row) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $0 = HEAP8[$row_info + 8 | 0];
    if ($0 << 24 >> 24 == 0) {
      __label__ = 2;
      break;
    } else if ($0 << 24 >> 24 == 4) {
      __label__ = 5;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 2:
    var $1 = HEAP32[$row_info + 4 >> 2];
    if (($1 | 0) == 0) {
      __label__ = 11;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $lftr_limit = $row + $1 | 0;
    var $rp_07 = $row;
    __label__ = 4;
    break;
   case 4:
    var $rp_07;
    var $neg = HEAP8[$rp_07] ^ -1;
    HEAP8[$rp_07] = $neg;
    var $incdec_ptr = $rp_07 + 1 | 0;
    if (($incdec_ptr | 0) == ($lftr_limit | 0)) {
      __label__ = 11;
      break;
    } else {
      var $rp_07 = $incdec_ptr;
      __label__ = 4;
      break;
    }
   case 5:
    if (HEAP8[$row_info + 9 | 0] << 24 >> 24 == 8) {
      __label__ = 6;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 6:
    var $4 = HEAPU32[$row_info + 4 >> 2];
    if (($4 | 0) == 0) {
      __label__ = 11;
      break;
    } else {
      var $rp14_02 = $row;
      var $i15_03 = 0;
      __label__ = 7;
      break;
    }
   case 7:
    var $i15_03;
    var $rp14_02;
    var $neg23 = HEAP8[$rp14_02] ^ -1;
    HEAP8[$rp14_02] = $neg23;
    var $add = $i15_03 + 2 | 0;
    if ($add >>> 0 < $4 >>> 0) {
      var $rp14_02 = $rp14_02 + 2 | 0;
      var $i15_03 = $add;
      __label__ = 7;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 8:
    if (HEAP8[$row_info + 9 | 0] << 24 >> 24 == 16) {
      __label__ = 9;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 9:
    var $7 = HEAPU32[$row_info + 4 >> 2];
    if (($7 | 0) == 0) {
      __label__ = 11;
      break;
    } else {
      var $rp38_010 = $row;
      var $i39_011 = 0;
      __label__ = 10;
      break;
    }
   case 10:
    var $i39_011;
    var $rp38_010;
    var $neg47 = HEAP8[$rp38_010] ^ -1;
    HEAP8[$rp38_010] = $neg47;
    var $add_ptr49 = $rp38_010 + 1 | 0;
    var $neg51 = HEAP8[$add_ptr49] ^ -1;
    HEAP8[$add_ptr49] = $neg51;
    var $add56 = $i39_011 + 4 | 0;
    if ($add56 >>> 0 < $7 >>> 0) {
      var $rp38_010 = $rp38_010 + 4 | 0;
      var $i39_011 = $add56;
      __label__ = 10;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_do_invert["X"] = 1;

function _png_do_swap($row_info, $row) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (HEAP8[$row_info + 9 | 0] << 24 >> 24 == 16) {
      __label__ = 2;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 2:
    var $1 = HEAP32[$row_info >> 2];
    var $conv2 = HEAPU8[$row_info + 10 | 0] & 255;
    if (($conv2 * $1 | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $3 = $1 * $conv2 | 0;
    var $rp_02 = $row;
    var $i_03 = 0;
    __label__ = 4;
    break;
   case 4:
    var $i_03;
    var $rp_02;
    var $4 = HEAP8[$rp_02];
    var $add_ptr = $rp_02 + 1 | 0;
    var $5 = HEAP8[$add_ptr];
    HEAP8[$rp_02] = $5;
    HEAP8[$add_ptr] = $4;
    var $inc = $i_03 + 1 | 0;
    if (($inc | 0) == ($3 | 0)) {
      __label__ = 5;
      break;
    } else {
      var $rp_02 = $rp_02 + 2 | 0;
      var $i_03 = $inc;
      __label__ = 4;
      break;
    }
   case 5:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_do_packswap($row_info, $row) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $0 = HEAPU8[$row_info + 9 | 0];
    if (($0 & 255) < 8) {
      __label__ = 2;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 2:
    var $1 = HEAPU32[$row_info + 4 >> 2];
    var $add_ptr = $row + $1 | 0;
    if ($0 << 24 >> 24 == 2) {
      __label__ = 3;
      break;
    } else if ($0 << 24 >> 24 == 4) {
      __label__ = 4;
      break;
    } else if ($0 << 24 >> 24 == 1) {
      var $table_0 = STRING_TABLE._onebppswaptable | 0;
      __label__ = 5;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 3:
    var $table_0 = STRING_TABLE._twobppswaptable | 0;
    __label__ = 5;
    break;
   case 4:
    var $table_0 = STRING_TABLE._fourbppswaptable | 0;
    __label__ = 5;
    break;
   case 5:
    var $table_0;
    if (($1 | 0) > 0) {
      var $rp_02 = $row;
      __label__ = 6;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 6:
    var $rp_02;
    var $3 = HEAP8[$table_0 + (HEAPU8[$rp_02] & 255) | 0];
    HEAP8[$rp_02] = $3;
    var $incdec_ptr = $rp_02 + 1 | 0;
    if ($incdec_ptr >>> 0 < $add_ptr >>> 0) {
      var $rp_02 = $incdec_ptr;
      __label__ = 6;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_set_tIME($png_ptr, $info_ptr, $mod_time) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0 | ($info_ptr | 0) == 0) {
      __label__ = 10;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    if ((HEAP32[$png_ptr + 84 >> 2] & 512 | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 3:
    var $1 = HEAPU8[$mod_time + 2 | 0];
    if ($1 << 24 >> 24 == 0 | ($1 & 255) > 12) {
      __label__ = 8;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $2 = HEAPU8[$mod_time + 3 | 0];
    if ($2 << 24 >> 24 == 0 | ($2 & 255) > 31) {
      __label__ = 8;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    if ((HEAPU8[$mod_time + 4 | 0] & 255) > 23) {
      __label__ = 8;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    if ((HEAPU8[$mod_time + 5 | 0] & 255) > 59) {
      __label__ = 8;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    if ((HEAPU8[$mod_time + 6 | 0] & 255) > 60) {
      __label__ = 8;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 8:
    var $6 = $png_ptr;
    _png_warning($6, STRING_TABLE.__str31991 | 0);
    __label__ = 10;
    break;
   case 9:
    var $7 = $mod_time;
    var $8 = $info_ptr + 60 | 0;
    var $st$3$0 = $7 | 0;
    var $st$3$1 = $7 + 4 | 0;
    var $9$1 = HEAPU8[$st$3$1] | HEAPU8[$st$3$1 + 1] << 8 | HEAPU8[$st$3$1 + 2] << 16 | HEAPU8[$st$3$1 + 3] << 24 | 0;
    var $st$7$0 = $8 | 0;
    tempBigInt = HEAPU8[$st$3$0] | HEAPU8[$st$3$0 + 1] << 8 | HEAPU8[$st$3$0 + 2] << 16 | HEAPU8[$st$3$0 + 3] << 24 | 0;
    HEAP8[$st$7$0] = tempBigInt & 255;
    tempBigInt >>= 8;
    HEAP8[$st$7$0 + 1] = tempBigInt & 255;
    tempBigInt >>= 8;
    HEAP8[$st$7$0 + 2] = tempBigInt & 255;
    tempBigInt >>= 8;
    HEAP8[$st$7$0 + 3] = tempBigInt & 255;
    var $st$7$1 = $8 + 4 | 0;
    tempBigInt = $9$1;
    HEAP8[$st$7$1] = tempBigInt & 255;
    tempBigInt >>= 8;
    HEAP8[$st$7$1 + 1] = tempBigInt & 255;
    tempBigInt >>= 8;
    HEAP8[$st$7$1 + 2] = tempBigInt & 255;
    tempBigInt >>= 8;
    HEAP8[$st$7$1 + 3] = tempBigInt & 255;
    var $valid = $info_ptr + 8 | 0;
    var $or = HEAP32[$valid >> 2] | 512;
    HEAP32[$valid >> 2] = $or;
    __label__ = 10;
    break;
   case 10:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_set_tIME["X"] = 1;

function _png_set_tRNS($png_ptr, $info_ptr, $trans_alpha, $num_trans, $trans_color) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0 | ($info_ptr | 0) == 0) {
      __label__ = 15;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    if (($trans_alpha | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    _png_free_data($png_ptr, $info_ptr, 8192, 0);
    var $0 = $png_ptr;
    var $call = _png_malloc($0, 256);
    var $trans_alpha4 = $info_ptr + 76 | 0;
    HEAP32[$trans_alpha4 >> 2] = $call;
    HEAP32[$png_ptr + 396 >> 2] = $call;
    if (($num_trans - 1 | 0) >>> 0 < 256) {
      __label__ = 4;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 4:
    var $2 = HEAP32[$trans_alpha4 >> 2];
    _memcpy($2, $trans_alpha, $num_trans, 1);
    __label__ = 5;
    break;
   case 5:
    if (($trans_color | 0) == 0) {
      __label__ = 13;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    var $shl = 1 << (HEAPU8[$info_ptr + 24 | 0] & 255);
    var $4 = HEAP8[$info_ptr + 25 | 0];
    if ($4 << 24 >> 24 == 0) {
      __label__ = 7;
      break;
    } else if ($4 << 24 >> 24 == 2) {
      __label__ = 8;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 7:
    if ((HEAPU16[$trans_color + 8 >> 1] & 65535 | 0) > ($shl | 0)) {
      __label__ = 11;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 8:
    if ((HEAPU16[$trans_color + 2 >> 1] & 65535 | 0) > ($shl | 0)) {
      __label__ = 11;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    if ((HEAPU16[$trans_color + 4 >> 1] & 65535 | 0) > ($shl | 0)) {
      __label__ = 11;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 10:
    if ((HEAPU16[$trans_color + 6 >> 1] & 65535 | 0) > ($shl | 0)) {
      __label__ = 11;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 11:
    var $9 = $png_ptr;
    _png_warning($9, STRING_TABLE.__str32992 | 0);
    __label__ = 12;
    break;
   case 12:
    var $10 = $info_ptr + 80 | 0;
    var $11 = $trans_color | 0;
    for (var $$src = $11, $$dest = $10, $$stop = $$src + 10; $$src < $$stop; $$src++, $$dest++) {
      HEAP8[$$dest] = HEAP8[$$src];
    }
    var $conv461 = ($num_trans | 0) == 0 ? 1 : $num_trans & 65535;
    HEAP16[$info_ptr + 22 >> 1] = $conv461;
    __label__ = 14;
    break;
   case 13:
    HEAP16[$info_ptr + 22 >> 1] = $num_trans & 65535;
    if (($num_trans | 0) == 0) {
      __label__ = 15;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 14:
    var $valid = $info_ptr + 8 | 0;
    var $or = HEAP32[$valid >> 2] | 16;
    HEAP32[$valid >> 2] = $or;
    var $free_me = $info_ptr + 184 | 0;
    var $or51 = HEAP32[$free_me >> 2] | 8192;
    HEAP32[$free_me >> 2] = $or51;
    __label__ = 15;
    break;
   case 15:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_set_tRNS["X"] = 1;

function _png_set_sPLT($png_ptr, $info_ptr, $entries, $nentries) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0 | ($info_ptr | 0) == 0) {
      __label__ = 13;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $splt_palettes_num = $info_ptr + 216 | 0;
    var $mul = HEAP32[$splt_palettes_num >> 2] + $nentries << 4;
    var $1 = $png_ptr;
    var $call = _png_malloc_warn($1, $mul);
    var $2 = $call;
    if (($call | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $3 = $png_ptr;
    _png_warning($3, STRING_TABLE.__str33993 | 0);
    __label__ = 13;
    break;
   case 4:
    var $splt_palettes = $info_ptr + 212 | 0;
    var $5 = HEAP32[$splt_palettes >> 2];
    var $mul6 = HEAP32[$splt_palettes_num >> 2] << 4;
    _memcpy($call, $5, $mul6, 1);
    _png_free($1, $5);
    HEAP32[$splt_palettes >> 2] = 0;
    if (($nentries | 0) > 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 5:
    var $7 = $png_ptr;
    var $i_02 = 0;
    __label__ = 6;
    break;
   case 6:
    var $i_02;
    var $add_ptr_sum = HEAP32[$splt_palettes_num >> 2] + $i_02 | 0;
    var $name = $entries + ($i_02 << 4) | 0;
    var $9 = HEAP32[$name >> 2];
    var $call13 = _strlen($9);
    var $add14 = $call13 + 1 | 0;
    var $call15 = _png_malloc_warn($1, $add14);
    var $name16 = $2 + ($add_ptr_sum << 4) | 0;
    HEAP32[$name16 >> 2] = $call15;
    if (($call15 | 0) == 0) {
      __label__ = 7;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 7:
    _png_warning($7, STRING_TABLE.__str34994 | 0);
    __label__ = 11;
    break;
   case 8:
    var $10 = HEAP32[$name >> 2];
    _memcpy($call15, $10, $add14, 1);
    var $nentries23 = $entries + ($i_02 << 4) + 12 | 0;
    var $mul24 = HEAP32[$nentries23 >> 2] * 10 | 0;
    var $call25 = _png_malloc_warn($1, $mul24);
    var $12 = $call25;
    var $entries26 = $2 + ($add_ptr_sum << 4) + 8 | 0;
    HEAP32[$entries26 >> 2] = $12;
    if (($call25 | 0) == 0) {
      __label__ = 9;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 9:
    _png_warning($7, STRING_TABLE.__str34994 | 0);
    var $13 = HEAP32[$name16 >> 2];
    _png_free($1, $13);
    HEAP32[$name16 >> 2] = 0;
    __label__ = 11;
    break;
   case 10:
    var $15 = HEAP32[$entries + ($i_02 << 4) + 8 >> 2];
    var $16 = HEAP32[$nentries23 >> 2];
    var $mul36 = $16 * 10 | 0;
    _memcpy($call25, $15, $mul36, 1);
    var $nentries38 = $2 + ($add_ptr_sum << 4) + 12 | 0;
    HEAP32[$nentries38 >> 2] = $16;
    var $17 = HEAP8[$entries + ($i_02 << 4) + 4 | 0];
    HEAP8[$2 + ($add_ptr_sum << 4) + 4 | 0] = $17;
    __label__ = 11;
    break;
   case 11:
    var $inc = $i_02 + 1 | 0;
    if (($inc | 0) == ($nentries | 0)) {
      __label__ = 12;
      break;
    } else {
      var $i_02 = $inc;
      __label__ = 6;
      break;
    }
   case 12:
    HEAP32[$splt_palettes >> 2] = $2;
    var $add42 = HEAP32[$splt_palettes_num >> 2] + $nentries | 0;
    HEAP32[$splt_palettes_num >> 2] = $add42;
    var $valid = $info_ptr + 8 | 0;
    var $or = HEAP32[$valid >> 2] | 8192;
    HEAP32[$valid >> 2] = $or;
    var $free_me = $info_ptr + 184 | 0;
    var $or43 = HEAP32[$free_me >> 2] | 32;
    HEAP32[$free_me >> 2] = $or43;
    __label__ = 13;
    break;
   case 13:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_set_sPLT["X"] = 1;

function _png_set_unknown_chunks($png_ptr, $info_ptr, $unknowns, $num_unknowns) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0 | ($info_ptr | 0) == 0 | ($num_unknowns | 0) == 0) {
      __label__ = 13;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $unknown_chunks_num = $info_ptr + 192 | 0;
    var $mul = (HEAP32[$unknown_chunks_num >> 2] + $num_unknowns) * 20 | 0;
    var $1 = $png_ptr;
    var $call = _png_malloc_warn($1, $mul);
    var $2 = $call;
    if (($call | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $3 = $png_ptr;
    _png_warning($3, STRING_TABLE.__str35995 | 0);
    __label__ = 13;
    break;
   case 4:
    var $unknown_chunks = $info_ptr + 188 | 0;
    var $5 = HEAP32[$unknown_chunks >> 2] | 0;
    var $mul8 = HEAP32[$unknown_chunks_num >> 2] * 20 | 0;
    _memcpy($call, $5, $mul8, 1);
    _png_free($1, $5);
    HEAP32[$unknown_chunks >> 2] = 0;
    if (($num_unknowns | 0) > 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 5:
    var $mode = $png_ptr + 84 | 0;
    var $7 = $png_ptr;
    var $i_03 = 0;
    __label__ = 6;
    break;
   case 6:
    var $i_03;
    var $add_ptr_sum = HEAP32[$unknown_chunks_num >> 2] + $i_03 | 0;
    var $arraydecay = $2 + $add_ptr_sum * 20 | 0;
    var $arraydecay16 = $unknowns + $i_03 * 20 | 0;
    HEAP8[$arraydecay] = HEAP8[$arraydecay16];
    HEAP8[$arraydecay + 1] = HEAP8[$arraydecay16 + 1];
    HEAP8[$arraydecay + 2] = HEAP8[$arraydecay16 + 2];
    HEAP8[$arraydecay + 3] = HEAP8[$arraydecay16 + 3];
    HEAP8[$arraydecay + 4] = HEAP8[$arraydecay16 + 4];
    HEAP8[$2 + $add_ptr_sum * 20 + 4 | 0] = 0;
    var $size = $unknowns + $i_03 * 20 + 12 | 0;
    var $9 = HEAP32[$size >> 2];
    var $size18 = $2 + $add_ptr_sum * 20 + 12 | 0;
    HEAP32[$size18 >> 2] = $9;
    HEAP8[$2 + $add_ptr_sum * 20 + 16 | 0] = HEAP32[$mode >> 2] & 255;
    if (($9 | 0) == 0) {
      __label__ = 7;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 7:
    var $data = $2 + $add_ptr_sum * 20 + 8 | 0;
    HEAP32[$data >> 2] = 0;
    __label__ = 11;
    break;
   case 8:
    var $call24 = _png_malloc_warn($1, $9);
    var $data25 = $2 + $add_ptr_sum * 20 + 8 | 0;
    HEAP32[$data25 >> 2] = $call24;
    if (($call24 | 0) == 0) {
      __label__ = 9;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 9:
    _png_warning($7, STRING_TABLE.__str35995 | 0);
    HEAP32[$size18 >> 2] = 0;
    __label__ = 11;
    break;
   case 10:
    var $11 = HEAP32[$unknowns + $i_03 * 20 + 8 >> 2];
    var $12 = HEAP32[$size >> 2];
    _memcpy($call24, $11, $12, 1);
    __label__ = 11;
    break;
   case 11:
    var $inc = $i_03 + 1 | 0;
    if (($inc | 0) == ($num_unknowns | 0)) {
      __label__ = 12;
      break;
    } else {
      var $i_03 = $inc;
      __label__ = 6;
      break;
    }
   case 12:
    HEAP32[$unknown_chunks >> 2] = $2;
    var $add39 = HEAP32[$unknown_chunks_num >> 2] + $num_unknowns | 0;
    HEAP32[$unknown_chunks_num >> 2] = $add39;
    var $free_me = $info_ptr + 184 | 0;
    var $or = HEAP32[$free_me >> 2] | 512;
    HEAP32[$free_me >> 2] = $or;
    __label__ = 13;
    break;
   case 13:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_set_unknown_chunks["X"] = 1;

function _png_set_keep_unknown_chunks($png_ptr, $keep, $chunk_list, $num_chunks) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0) {
      __label__ = 13;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    if (($num_chunks | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 3:
    var $cmp3 = ($keep | 0) == 3;
    var $flags = $png_ptr + 88 | 0;
    var $1 = HEAPU32[$flags >> 2];
    var $storemerge = ($keep - 2 | 0) >>> 0 < 2 ? $1 | 32768 : $1 & -32769;
    HEAP32[$flags >> 2] = $storemerge;
    if ($cmp3) {
      __label__ = 4;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 4:
    HEAP32[$flags >> 2] = $storemerge | 65536;
    __label__ = 13;
    break;
   case 5:
    HEAP32[$flags >> 2] = $storemerge & -65537;
    __label__ = 13;
    break;
   case 6:
    if (($chunk_list | 0) == 0) {
      __label__ = 13;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    var $num_chunk_list = $png_ptr + 560 | 0;
    var $2 = HEAP32[$num_chunk_list >> 2];
    var $add = $2 + $num_chunks | 0;
    var $mul = $add * 5 | 0;
    var $3 = $png_ptr;
    var $call = _png_malloc($3, $mul);
    var $chunk_list20 = $png_ptr + 564 | 0;
    var $4 = HEAP32[$chunk_list20 >> 2];
    var $mul28_pre = $2 * 5 | 0;
    if (($4 | 0) == 0) {
      __label__ = 9;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    _memcpy($call, $4, $mul28_pre, 1);
    _png_free($3, $4);
    HEAP32[$chunk_list20 >> 2] = 0;
    __label__ = 9;
    break;
   case 9:
    var $add_ptr = $call + $mul28_pre | 0;
    var $mul29 = $num_chunks * 5 | 0;
    _memcpy($add_ptr, $chunk_list, $mul29, 1);
    if (($num_chunks | 0) > 0) {
      __label__ = 10;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 10:
    var $conv = $keep & 255;
    var $p_02 = $mul28_pre + ($call + 4) | 0;
    var $i_03 = 0;
    __label__ = 11;
    break;
   case 11:
    var $i_03;
    var $p_02;
    HEAP8[$p_02] = $conv;
    var $inc = $i_03 + 1 | 0;
    if (($inc | 0) == ($num_chunks | 0)) {
      __label__ = 12;
      break;
    } else {
      var $p_02 = $p_02 + 5 | 0;
      var $i_03 = $inc;
      __label__ = 11;
      break;
    }
   case 12:
    HEAP32[$num_chunk_list >> 2] = $add;
    HEAP32[$chunk_list20 >> 2] = $call;
    var $free_me = $png_ptr + 548 | 0;
    var $or38 = HEAP32[$free_me >> 2] | 1024;
    HEAP32[$free_me >> 2] = $or38;
    __label__ = 13;
    break;
   case 13:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_set_keep_unknown_chunks["X"] = 1;

function _png_set_compression_buffer_size($png_ptr, $size) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $zbuf = $png_ptr + 152 | 0;
    var $0 = HEAP32[$zbuf >> 2];
    var $1 = $png_ptr;
    _png_free($1, $0);
    HEAP32[$png_ptr + 156 >> 2] = $size;
    var $call = _png_malloc($1, $size);
    HEAP32[$zbuf >> 2] = $call;
    HEAP32[$png_ptr + 108 >> 2] = $call;
    HEAP32[$png_ptr + 112 >> 2] = 0;
    HEAP32[$png_ptr + 100 >> 2] = 0;
    __label__ = 3;
    break;
   case 3:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_set_shift($png_ptr, $true_bits) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $transformations = $png_ptr + 92 | 0;
    var $or = HEAP32[$transformations >> 2] | 8;
    HEAP32[$transformations >> 2] = $or;
    var $1 = $png_ptr + 389 | 0;
    var $2 = $true_bits | 0;
    HEAP8[$1] = HEAP8[$2];
    HEAP8[$1 + 1] = HEAP8[$2 + 1];
    HEAP8[$1 + 2] = HEAP8[$2 + 2];
    HEAP8[$1 + 3] = HEAP8[$2 + 3];
    HEAP8[$1 + 4] = HEAP8[$2 + 4];
    __label__ = 3;
    break;
   case 3:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_do_strip_channel($row_info, $row, $at_start) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $rowbytes = $row_info + 4 | 0;
    var $add_ptr = $row + HEAP32[$rowbytes >> 2] | 0;
    var $channels = $row_info + 10 | 0;
    var $1 = HEAP8[$channels];
    if ($1 << 24 >> 24 == 2) {
      __label__ = 2;
      break;
    } else if ($1 << 24 >> 24 == 4) {
      __label__ = 17;
      break;
    } else {
      __label__ = 33;
      break;
    }
   case 2:
    var $2 = HEAP8[$row_info + 9 | 0];
    if ($2 << 24 >> 24 == 8) {
      __label__ = 3;
      break;
    } else if ($2 << 24 >> 24 == 16) {
      __label__ = 9;
      break;
    } else {
      __label__ = 33;
      break;
    }
   case 3:
    if (($at_start | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $dp_0_ph = $row;
    var $sp_0_ph = $row + 1 | 0;
    __label__ = 6;
    break;
   case 5:
    var $dp_0_ph = $row + 1 | 0;
    var $sp_0_ph = $row + 2 | 0;
    __label__ = 6;
    break;
   case 6:
    var $sp_0_ph;
    var $dp_0_ph;
    if ($sp_0_ph >>> 0 < $add_ptr >>> 0) {
      var $sp_013 = $sp_0_ph;
      var $dp_014 = $dp_0_ph;
      __label__ = 7;
      break;
    } else {
      var $dp_0_lcssa = $dp_0_ph;
      __label__ = 8;
      break;
    }
   case 7:
    var $dp_014;
    var $sp_013;
    var $3 = HEAP8[$sp_013];
    var $incdec_ptr11 = $dp_014 + 1 | 0;
    HEAP8[$dp_014] = $3;
    var $add_ptr12 = $sp_013 + 2 | 0;
    if ($add_ptr12 >>> 0 < $add_ptr >>> 0) {
      var $sp_013 = $add_ptr12;
      var $dp_014 = $incdec_ptr11;
      __label__ = 7;
      break;
    } else {
      var $dp_0_lcssa = $incdec_ptr11;
      __label__ = 8;
      break;
    }
   case 8:
    var $dp_0_lcssa;
    HEAP8[$row_info + 11 | 0] = 8;
    var $dp_2 = $dp_0_lcssa;
    __label__ = 15;
    break;
   case 9:
    if (($at_start | 0) == 0) {
      __label__ = 11;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 10:
    var $dp_1_ph = $row;
    var $sp_1_ph = $row + 2 | 0;
    __label__ = 12;
    break;
   case 11:
    var $dp_1_ph = $row + 2 | 0;
    var $sp_1_ph = $row + 4 | 0;
    __label__ = 12;
    break;
   case 12:
    var $sp_1_ph;
    var $dp_1_ph;
    if ($sp_1_ph >>> 0 < $add_ptr >>> 0) {
      var $sp_19 = $sp_1_ph;
      var $dp_110 = $dp_1_ph;
      __label__ = 13;
      break;
    } else {
      var $dp_1_lcssa = $dp_1_ph;
      __label__ = 14;
      break;
    }
   case 13:
    var $dp_110;
    var $sp_19;
    var $4 = HEAP8[$sp_19];
    HEAP8[$dp_110] = $4;
    var $5 = HEAP8[$sp_19 + 1 | 0];
    var $incdec_ptr32 = $dp_110 + 2 | 0;
    HEAP8[$dp_110 + 1 | 0] = $5;
    var $add_ptr33 = $sp_19 + 4 | 0;
    if ($add_ptr33 >>> 0 < $add_ptr >>> 0) {
      var $sp_19 = $add_ptr33;
      var $dp_110 = $incdec_ptr32;
      __label__ = 13;
      break;
    } else {
      var $dp_1_lcssa = $incdec_ptr32;
      __label__ = 14;
      break;
    }
   case 14:
    var $dp_1_lcssa;
    HEAP8[$row_info + 11 | 0] = 16;
    var $dp_2 = $dp_1_lcssa;
    __label__ = 15;
    break;
   case 15:
    var $dp_2;
    HEAP8[$channels] = 1;
    var $color_type = $row_info + 8 | 0;
    if (HEAP8[$color_type] << 24 >> 24 == 4) {
      __label__ = 16;
      break;
    } else {
      var $dp_6 = $dp_2;
      __label__ = 32;
      break;
    }
   case 16:
    HEAP8[$color_type] = 0;
    var $dp_6 = $dp_2;
    __label__ = 32;
    break;
   case 17:
    var $7 = HEAP8[$row_info + 9 | 0];
    if ($7 << 24 >> 24 == 8) {
      __label__ = 18;
      break;
    } else if ($7 << 24 >> 24 == 16) {
      __label__ = 24;
      break;
    } else {
      __label__ = 33;
      break;
    }
   case 18:
    if (($at_start | 0) == 0) {
      __label__ = 20;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 19:
    var $dp_3_ph = $row;
    var $sp_2_ph = $row + 1 | 0;
    __label__ = 21;
    break;
   case 20:
    var $dp_3_ph = $row + 3 | 0;
    var $sp_2_ph = $row + 4 | 0;
    __label__ = 21;
    break;
   case 21:
    var $sp_2_ph;
    var $dp_3_ph;
    if ($sp_2_ph >>> 0 < $add_ptr >>> 0) {
      var $sp_25 = $sp_2_ph;
      var $dp_36 = $dp_3_ph;
      __label__ = 22;
      break;
    } else {
      var $dp_3_lcssa = $dp_3_ph;
      __label__ = 23;
      break;
    }
   case 22:
    var $dp_36;
    var $sp_25;
    var $8 = HEAP8[$sp_25];
    HEAP8[$dp_36] = $8;
    var $9 = HEAP8[$sp_25 + 1 | 0];
    HEAP8[$dp_36 + 1 | 0] = $9;
    var $10 = HEAP8[$sp_25 + 2 | 0];
    var $incdec_ptr72 = $dp_36 + 3 | 0;
    HEAP8[$dp_36 + 2 | 0] = $10;
    var $add_ptr73 = $sp_25 + 4 | 0;
    if ($add_ptr73 >>> 0 < $add_ptr >>> 0) {
      var $sp_25 = $add_ptr73;
      var $dp_36 = $incdec_ptr72;
      __label__ = 22;
      break;
    } else {
      var $dp_3_lcssa = $incdec_ptr72;
      __label__ = 23;
      break;
    }
   case 23:
    var $dp_3_lcssa;
    HEAP8[$row_info + 11 | 0] = 24;
    var $dp_5 = $dp_3_lcssa;
    __label__ = 30;
    break;
   case 24:
    if (($at_start | 0) == 0) {
      __label__ = 26;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 25:
    var $dp_4_ph = $row;
    var $sp_3_ph = $row + 2 | 0;
    __label__ = 27;
    break;
   case 26:
    var $dp_4_ph = $row + 6 | 0;
    var $sp_3_ph = $row + 8 | 0;
    __label__ = 27;
    break;
   case 27:
    var $sp_3_ph;
    var $dp_4_ph;
    if ($sp_3_ph >>> 0 < $add_ptr >>> 0) {
      var $sp_32 = $sp_3_ph;
      var $dp_43 = $dp_4_ph;
      __label__ = 28;
      break;
    } else {
      var $dp_4_lcssa = $dp_4_ph;
      __label__ = 29;
      break;
    }
   case 28:
    var $dp_43;
    var $sp_32;
    var $11 = HEAP8[$sp_32];
    HEAP8[$dp_43] = $11;
    var $12 = HEAP8[$sp_32 + 1 | 0];
    HEAP8[$dp_43 + 1 | 0] = $12;
    var $13 = HEAP8[$sp_32 + 2 | 0];
    HEAP8[$dp_43 + 2 | 0] = $13;
    var $14 = HEAP8[$sp_32 + 3 | 0];
    HEAP8[$dp_43 + 3 | 0] = $14;
    var $15 = HEAP8[$sp_32 + 4 | 0];
    HEAP8[$dp_43 + 4 | 0] = $15;
    var $16 = HEAP8[$sp_32 + 5 | 0];
    var $incdec_ptr103 = $dp_43 + 6 | 0;
    HEAP8[$dp_43 + 5 | 0] = $16;
    var $add_ptr104 = $sp_32 + 8 | 0;
    if ($add_ptr104 >>> 0 < $add_ptr >>> 0) {
      var $sp_32 = $add_ptr104;
      var $dp_43 = $incdec_ptr103;
      __label__ = 28;
      break;
    } else {
      var $dp_4_lcssa = $incdec_ptr103;
      __label__ = 29;
      break;
    }
   case 29:
    var $dp_4_lcssa;
    HEAP8[$row_info + 11 | 0] = 48;
    var $dp_5 = $dp_4_lcssa;
    __label__ = 30;
    break;
   case 30:
    var $dp_5;
    HEAP8[$channels] = 3;
    var $color_type111 = $row_info + 8 | 0;
    if (HEAP8[$color_type111] << 24 >> 24 == 6) {
      __label__ = 31;
      break;
    } else {
      var $dp_6 = $dp_5;
      __label__ = 32;
      break;
    }
   case 31:
    HEAP8[$color_type111] = 2;
    var $dp_6 = $dp_5;
    __label__ = 32;
    break;
   case 32:
    var $dp_6;
    HEAP32[$rowbytes >> 2] = $dp_6 - $row | 0;
    __label__ = 33;
    break;
   case 33:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_do_strip_channel["X"] = 1;

function _png_do_bgr($row_info, $row) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $0 = HEAP8[$row_info + 8 | 0];
    if (($0 & 2) << 24 >> 24 == 0) {
      __label__ = 13;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $1 = HEAP32[$row_info >> 2];
    var $2 = HEAP8[$row_info + 9 | 0];
    if ($2 << 24 >> 24 == 8) {
      __label__ = 3;
      break;
    } else if ($2 << 24 >> 24 == 16) {
      __label__ = 8;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 3:
    if ($0 << 24 >> 24 == 2) {
      __label__ = 4;
      break;
    } else if ($0 << 24 >> 24 == 6) {
      __label__ = 5;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 4:
    if (($1 | 0) == 0) {
      __label__ = 13;
      break;
    } else {
      var $i_014 = 0;
      var $rp_015 = $row;
      __label__ = 6;
      break;
    }
   case 5:
    if (($1 | 0) == 0) {
      __label__ = 13;
      break;
    } else {
      var $i19_010 = 0;
      var $rp18_011 = $row;
      __label__ = 7;
      break;
    }
   case 6:
    var $rp_015;
    var $i_014;
    var $3 = HEAP8[$rp_015];
    var $add_ptr = $rp_015 + 2 | 0;
    var $4 = HEAP8[$add_ptr];
    HEAP8[$rp_015] = $4;
    HEAP8[$add_ptr] = $3;
    var $inc = $i_014 + 1 | 0;
    if (($inc | 0) == ($1 | 0)) {
      __label__ = 13;
      break;
    } else {
      var $i_014 = $inc;
      var $rp_015 = $rp_015 + 3 | 0;
      __label__ = 6;
      break;
    }
   case 7:
    var $rp18_011;
    var $i19_010;
    var $5 = HEAP8[$rp18_011];
    var $add_ptr25 = $rp18_011 + 2 | 0;
    var $6 = HEAP8[$add_ptr25];
    HEAP8[$rp18_011] = $6;
    HEAP8[$add_ptr25] = $5;
    var $inc28 = $i19_010 + 1 | 0;
    if (($inc28 | 0) == ($1 | 0)) {
      __label__ = 13;
      break;
    } else {
      var $i19_010 = $inc28;
      var $rp18_011 = $rp18_011 + 4 | 0;
      __label__ = 7;
      break;
    }
   case 8:
    if ($0 << 24 >> 24 == 2) {
      __label__ = 9;
      break;
    } else if ($0 << 24 >> 24 == 6) {
      __label__ = 10;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 9:
    if (($1 | 0) == 0) {
      __label__ = 13;
      break;
    } else {
      var $rp43_06 = $row;
      var $i44_07 = 0;
      __label__ = 11;
      break;
    }
   case 10:
    if (($1 | 0) == 0) {
      __label__ = 13;
      break;
    } else {
      var $rp66_02 = $row;
      var $i67_03 = 0;
      __label__ = 12;
      break;
    }
   case 11:
    var $i44_07;
    var $rp43_06;
    var $7 = HEAP8[$rp43_06];
    var $add_ptr50 = $rp43_06 + 4 | 0;
    var $8 = HEAP8[$add_ptr50];
    HEAP8[$rp43_06] = $8;
    HEAP8[$add_ptr50] = $7;
    var $add_ptr52 = $rp43_06 + 1 | 0;
    var $9 = HEAP8[$add_ptr52];
    var $add_ptr53 = $rp43_06 + 5 | 0;
    var $10 = HEAP8[$add_ptr53];
    HEAP8[$add_ptr52] = $10;
    HEAP8[$add_ptr53] = $9;
    var $inc57 = $i44_07 + 1 | 0;
    if (($inc57 | 0) == ($1 | 0)) {
      __label__ = 13;
      break;
    } else {
      var $rp43_06 = $rp43_06 + 6 | 0;
      var $i44_07 = $inc57;
      __label__ = 11;
      break;
    }
   case 12:
    var $i67_03;
    var $rp66_02;
    var $11 = HEAP8[$rp66_02];
    var $add_ptr73 = $rp66_02 + 4 | 0;
    var $12 = HEAP8[$add_ptr73];
    HEAP8[$rp66_02] = $12;
    HEAP8[$add_ptr73] = $11;
    var $add_ptr75 = $rp66_02 + 1 | 0;
    var $13 = HEAP8[$add_ptr75];
    var $add_ptr76 = $rp66_02 + 5 | 0;
    var $14 = HEAP8[$add_ptr76];
    HEAP8[$add_ptr75] = $14;
    HEAP8[$add_ptr76] = $13;
    var $inc80 = $i67_03 + 1 | 0;
    if (($inc80 | 0) == ($1 | 0)) {
      __label__ = 13;
      break;
    } else {
      var $rp66_02 = $rp66_02 + 8 | 0;
      var $i67_03 = $inc80;
      __label__ = 12;
      break;
    }
   case 13:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_do_bgr["X"] = 1;

function _png_do_check_palette_indexes($png_ptr, $row_info) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $conv1 = HEAPU8[$row_info + 9 | 0] & 255;
    if ((HEAPU16[$png_ptr + 276 >> 1] & 65535 | 0) < (1 << $conv1 | 0)) {
      __label__ = 2;
      break;
    } else {
      __label__ = 28;
      break;
    }
   case 2:
    var $num_palette_max = $png_ptr + 280 | 0;
    var $2 = HEAPU32[$num_palette_max >> 2];
    if (($2 | 0) > -1) {
      __label__ = 3;
      break;
    } else {
      __label__ = 28;
      break;
    }
   case 3:
    var $and = (HEAPU8[$row_info + 11 | 0] & 255) * -HEAP32[$row_info >> 2] & 7;
    var $5 = HEAPU32[$png_ptr + 240 >> 2];
    var $6 = HEAPU32[$row_info + 4 >> 2];
    var $add_ptr = $5 + $6 | 0;
    if (($conv1 | 0) == 1) {
      __label__ = 4;
      break;
    } else if (($conv1 | 0) == 2) {
      __label__ = 5;
      break;
    } else if (($conv1 | 0) == 4) {
      __label__ = 6;
      break;
    } else if (($conv1 | 0) == 8) {
      __label__ = 7;
      break;
    } else {
      __label__ = 28;
      break;
    }
   case 4:
    if (($6 | 0) > 0) {
      var $rp_017 = $add_ptr;
      var $padding_018 = $and;
      __label__ = 8;
      break;
    } else {
      __label__ = 28;
      break;
    }
   case 5:
    if (($6 | 0) > 0) {
      var $rp_113 = $add_ptr;
      var $padding_114 = $and;
      var $8 = $2;
      __label__ = 11;
      break;
    } else {
      __label__ = 28;
      break;
    }
   case 6:
    if (($6 | 0) > 0) {
      var $rp_29 = $add_ptr;
      var $padding_210 = $and;
      var $17 = $2;
      __label__ = 20;
      break;
    } else {
      __label__ = 28;
      break;
    }
   case 7:
    if (($6 | 0) > 0) {
      var $rp_36 = $add_ptr;
      var $22 = $2;
      __label__ = 25;
      break;
    } else {
      __label__ = 28;
      break;
    }
   case 8:
    var $padding_018;
    var $rp_017;
    if (((HEAPU8[$rp_017] & 255) >>> ($padding_018 >>> 0) | 0) == 0) {
      __label__ = 10;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    HEAP32[$num_palette_max >> 2] = 1;
    __label__ = 10;
    break;
   case 10:
    var $incdec_ptr = $rp_017 - 1 | 0;
    if ($incdec_ptr >>> 0 > $5 >>> 0) {
      var $rp_017 = $incdec_ptr;
      var $padding_018 = 0;
      __label__ = 8;
      break;
    } else {
      __label__ = 28;
      break;
    }
   case 11:
    var $8;
    var $padding_114;
    var $rp_113;
    var $9 = HEAPU8[$rp_113];
    var $and24 = ($9 & 255) >>> ($padding_114 >>> 0) & 3;
    if (($and24 | 0) > ($8 | 0)) {
      __label__ = 12;
      break;
    } else {
      var $11 = $9;
      var $10 = $8;
      __label__ = 13;
      break;
    }
   case 12:
    HEAP32[$num_palette_max >> 2] = $and24;
    var $11 = HEAP8[$rp_113];
    var $10 = $and24;
    __label__ = 13;
    break;
   case 13:
    var $10;
    var $11;
    var $and34 = ($11 & 255) >>> ($padding_114 >>> 0) >>> 2 & 3;
    if (($and34 | 0) > ($10 | 0)) {
      __label__ = 14;
      break;
    } else {
      var $13 = $11;
      var $12 = $10;
      __label__ = 15;
      break;
    }
   case 14:
    HEAP32[$num_palette_max >> 2] = $and34;
    var $13 = HEAP8[$rp_113];
    var $12 = $and34;
    __label__ = 15;
    break;
   case 15:
    var $12;
    var $13;
    var $and44 = ($13 & 255) >>> ($padding_114 >>> 0) >>> 4 & 3;
    if (($and44 | 0) > ($12 | 0)) {
      __label__ = 16;
      break;
    } else {
      var $15 = $13;
      var $14 = $12;
      __label__ = 17;
      break;
    }
   case 16:
    HEAP32[$num_palette_max >> 2] = $and44;
    var $15 = HEAP8[$rp_113];
    var $14 = $and44;
    __label__ = 17;
    break;
   case 17:
    var $14;
    var $15;
    var $and54 = ($15 & 255) >>> ($padding_114 >>> 0) >>> 6 & 3;
    if (($and54 | 0) > ($14 | 0)) {
      __label__ = 18;
      break;
    } else {
      var $16 = $14;
      __label__ = 19;
      break;
    }
   case 18:
    HEAP32[$num_palette_max >> 2] = $and54;
    var $16 = $and54;
    __label__ = 19;
    break;
   case 19:
    var $16;
    var $incdec_ptr62 = $rp_113 - 1 | 0;
    if ($incdec_ptr62 >>> 0 > $5 >>> 0) {
      var $rp_113 = $incdec_ptr62;
      var $padding_114 = 0;
      var $8 = $16;
      __label__ = 11;
      break;
    } else {
      __label__ = 28;
      break;
    }
   case 20:
    var $17;
    var $padding_210;
    var $rp_29;
    var $18 = HEAPU8[$rp_29];
    var $and73 = ($18 & 255) >>> ($padding_210 >>> 0) & 15;
    if (($and73 | 0) > ($17 | 0)) {
      __label__ = 21;
      break;
    } else {
      var $20 = $18;
      var $19 = $17;
      __label__ = 22;
      break;
    }
   case 21:
    HEAP32[$num_palette_max >> 2] = $and73;
    var $20 = HEAP8[$rp_29];
    var $19 = $and73;
    __label__ = 22;
    break;
   case 22:
    var $19;
    var $20;
    var $and83 = ($20 & 255) >>> ($padding_210 >>> 0) >>> 4 & 15;
    if (($and83 | 0) > ($19 | 0)) {
      __label__ = 23;
      break;
    } else {
      var $21 = $19;
      __label__ = 24;
      break;
    }
   case 23:
    HEAP32[$num_palette_max >> 2] = $and83;
    var $21 = $and83;
    __label__ = 24;
    break;
   case 24:
    var $21;
    var $incdec_ptr91 = $rp_29 - 1 | 0;
    if ($incdec_ptr91 >>> 0 > $5 >>> 0) {
      var $rp_29 = $incdec_ptr91;
      var $padding_210 = 0;
      var $17 = $21;
      __label__ = 20;
      break;
    } else {
      __label__ = 28;
      break;
    }
   case 25:
    var $22;
    var $rp_36;
    var $conv99 = HEAPU8[$rp_36] & 255;
    if (($conv99 | 0) < ($22 | 0)) {
      var $24 = $22;
      __label__ = 27;
      break;
    } else {
      __label__ = 26;
      break;
    }
   case 26:
    HEAP32[$num_palette_max >> 2] = $conv99;
    var $24 = $conv99;
    __label__ = 27;
    break;
   case 27:
    var $24;
    var $incdec_ptr108 = $rp_36 - 1 | 0;
    if ($incdec_ptr108 >>> 0 > $5 >>> 0) {
      var $rp_36 = $incdec_ptr108;
      var $22 = $24;
      __label__ = 25;
      break;
    } else {
      __label__ = 28;
      break;
    }
   case 28:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_do_check_palette_indexes["X"] = 1;

function _png_write_data($png_ptr, $data, $length) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $0 = HEAP32[$png_ptr + 56 >> 2];
    if (($0 | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    FUNCTION_TABLE[$0]($png_ptr, $data, $length);
    __label__ = 4;
    break;
   case 3:
    var $1 = $png_ptr;
    _png_error($1, STRING_TABLE.__str1085 | 0);
    __label__ = 4;
    break;
   case 4:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_default_write_data($png_ptr, $data, $length) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $1 = HEAP32[$png_ptr + 64 >> 2];
    var $call = _fwrite($data, 1, $length, $1);
    if (($call | 0) == ($length | 0)) {
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $2 = $png_ptr;
    _png_error($2, STRING_TABLE.__str11086 | 0);
    __label__ = 4;
    break;
   case 4:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_flush($png_ptr) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $0 = HEAP32[$png_ptr + 336 >> 2];
    if (($0 | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    FUNCTION_TABLE[$0]($png_ptr);
    __label__ = 3;
    break;
   case 3:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_default_flush($png_ptr) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $1 = HEAP32[$png_ptr + 64 >> 2];
    var $call = _fflush($1);
    __label__ = 3;
    break;
   case 3:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_set_write_fn($png_ptr, $io_ptr) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    HEAP32[$png_ptr + 64 >> 2] = $io_ptr;
    HEAP32[$png_ptr + 56 >> 2] = 26;
    HEAP32[$png_ptr + 336 >> 2] = 28;
    var $read_data_fn = $png_ptr + 60 | 0;
    if ((HEAP32[$read_data_fn >> 2] | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    HEAP32[$read_data_fn >> 2] = 0;
    var $1 = $png_ptr;
    _png_warning($1, STRING_TABLE.__str21087 | 0);
    __label__ = 4;
    break;
   case 4:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_write_info_before_PLTE($png_ptr, $info_ptr) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0 | ($info_ptr | 0) == 0) {
      __label__ = 28;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $mode = $png_ptr + 84 | 0;
    if ((HEAP32[$mode >> 2] & 1024 | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 28;
      break;
    }
   case 3:
    var $1 = $png_ptr;
    _png_write_sig($1);
    if ((HEAP32[$mode >> 2] & 4096 | 0) == 0) {
      __label__ = 6;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $mng_features_permitted = $png_ptr + 576 | 0;
    if ((HEAP32[$mng_features_permitted >> 2] | 0) == 0) {
      __label__ = 6;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $4 = $png_ptr;
    _png_warning($4, STRING_TABLE.__str1090 | 0);
    HEAP32[$mng_features_permitted >> 2] = 0;
    __label__ = 6;
    break;
   case 6:
    var $5 = HEAP32[$info_ptr >> 2];
    var $6 = HEAP32[$info_ptr + 4 >> 2];
    var $conv = HEAPU8[$info_ptr + 24 | 0] & 255;
    var $color_type = $info_ptr + 25 | 0;
    var $conv10 = HEAPU8[$color_type] & 255;
    var $conv11 = HEAPU8[$info_ptr + 26 | 0] & 255;
    var $conv12 = HEAPU8[$info_ptr + 27 | 0] & 255;
    var $conv13 = HEAPU8[$info_ptr + 28 | 0] & 255;
    _png_write_IHDR($1, $5, $6, $conv, $conv10, $conv11, $conv12, $conv13);
    var $valid = $info_ptr + 8 | 0;
    var $12 = HEAPU32[$valid >> 2];
    if (($12 & 1 | 0) == 0) {
      var $14 = $12;
      __label__ = 8;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    var $13 = HEAP32[$info_ptr + 40 >> 2];
    _png_write_gAMA_fixed($1, $13);
    var $14 = HEAP32[$valid >> 2];
    __label__ = 8;
    break;
   case 8:
    var $14;
    if (($14 & 2048 | 0) == 0) {
      var $16 = $14;
      __label__ = 10;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    var $conv22 = HEAPU8[$info_ptr + 44 | 0] & 255;
    _png_write_sRGB($1, $conv22);
    var $16 = HEAP32[$valid >> 2];
    __label__ = 10;
    break;
   case 10:
    var $16;
    if (($16 & 4096 | 0) == 0) {
      var $20 = $16;
      __label__ = 12;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    var $17 = HEAP32[$info_ptr + 196 >> 2];
    var $18 = HEAP32[$info_ptr + 200 >> 2];
    var $19 = HEAP32[$info_ptr + 204 >> 2];
    _png_write_iCCP($1, $17, $18, $19);
    var $20 = HEAP32[$valid >> 2];
    __label__ = 12;
    break;
   case 12:
    var $20;
    if (($20 & 2 | 0) == 0) {
      var $23 = $20;
      __label__ = 14;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 13:
    var $conv34 = HEAPU8[$color_type] & 255;
    var $22 = $info_ptr + 68 | 0;
    _png_write_sBIT($1, $22, $conv34);
    var $23 = HEAP32[$valid >> 2];
    __label__ = 14;
    break;
   case 14:
    var $23;
    if (($23 & 4 | 0) == 0) {
      __label__ = 16;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 15:
    var $24 = HEAP32[$info_ptr + 128 >> 2];
    var $25 = HEAP32[$info_ptr + 132 >> 2];
    var $26 = HEAP32[$info_ptr + 136 >> 2];
    var $27 = HEAP32[$info_ptr + 140 >> 2];
    var $28 = HEAP32[$info_ptr + 144 >> 2];
    var $29 = HEAP32[$info_ptr + 148 >> 2];
    var $30 = HEAP32[$info_ptr + 152 >> 2];
    var $31 = HEAP32[$info_ptr + 156 >> 2];
    _png_write_cHRM_fixed($1, $24, $25, $26, $27, $28, $29, $30, $31);
    __label__ = 16;
    break;
   case 16:
    var $unknown_chunks_num = $info_ptr + 192 | 0;
    var $32 = HEAP32[$unknown_chunks_num >> 2];
    if (($32 | 0) == 0) {
      __label__ = 27;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 17:
    var $unknown_chunks = $info_ptr + 188 | 0;
    if (($32 | 0) > 0) {
      __label__ = 18;
      break;
    } else {
      __label__ = 27;
      break;
    }
   case 18:
    var $33 = HEAP32[$unknown_chunks >> 2];
    var $34 = $png_ptr;
    var $35 = $png_ptr;
    var $flags = $png_ptr + 88 | 0;
    var $up_08 = $33;
    var $37 = $33;
    var $36 = $32;
    __label__ = 19;
    break;
   case 19:
    var $36;
    var $37;
    var $up_08;
    var $arraydecay = $up_08 | 0;
    var $call = _png_handle_as_unknown($34, $arraydecay);
    if (($call | 0) == 1) {
      var $47 = $37;
      var $46 = $36;
      __label__ = 26;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 20:
    var $38 = HEAP8[$up_08 + 16 | 0];
    if ($38 << 24 >> 24 != 0 & ($38 & 14) << 24 >> 24 == 0) {
      __label__ = 21;
      break;
    } else {
      var $47 = $37;
      var $46 = $36;
      __label__ = 26;
      break;
    }
   case 21:
    if ((HEAP8[$up_08 + 3 | 0] & 32) << 24 >> 24 != 0 | ($call | 0) == 3) {
      __label__ = 23;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 22:
    if ((HEAP32[$flags >> 2] & 65536 | 0) == 0) {
      var $47 = $37;
      var $46 = $36;
      __label__ = 26;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 23:
    var $size = $up_08 + 12 | 0;
    var $43 = HEAP32[$size >> 2];
    if (($43 | 0) == 0) {
      __label__ = 24;
      break;
    } else {
      var $44 = $43;
      __label__ = 25;
      break;
    }
   case 24:
    _png_warning($35, STRING_TABLE.__str11091 | 0);
    var $44 = HEAP32[$size >> 2];
    __label__ = 25;
    break;
   case 25:
    var $44;
    var $45 = HEAP32[$up_08 + 8 >> 2];
    _png_write_chunk($1, $arraydecay, $45, $44);
    var $47 = HEAP32[$unknown_chunks >> 2];
    var $46 = HEAP32[$unknown_chunks_num >> 2];
    __label__ = 26;
    break;
   case 26:
    var $46;
    var $47;
    var $incdec_ptr = $up_08 + 20 | 0;
    if ($incdec_ptr >>> 0 < ($47 + $46 * 20 | 0) >>> 0) {
      var $up_08 = $incdec_ptr;
      var $37 = $47;
      var $36 = $46;
      __label__ = 19;
      break;
    } else {
      __label__ = 27;
      break;
    }
   case 27:
    var $or = HEAP32[$mode >> 2] | 1024;
    HEAP32[$mode >> 2] = $or;
    __label__ = 28;
    break;
   case 28:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_write_info_before_PLTE["X"] = 1;

function _png_write_info($png_ptr, $info_ptr) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0 | ($info_ptr | 0) == 0) {
      __label__ = 48;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    _png_write_info_before_PLTE($png_ptr, $info_ptr);
    var $valid = $info_ptr + 8 | 0;
    if ((HEAP32[$valid >> 2] & 8 | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $conv = HEAPU16[$info_ptr + 20 >> 1] & 65535;
    var $3 = $png_ptr;
    var $4 = HEAP32[$info_ptr + 16 >> 2];
    _png_write_PLTE($3, $4, $conv);
    __label__ = 6;
    break;
   case 4:
    if (HEAP8[$info_ptr + 25 | 0] << 24 >> 24 == 3) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    var $6 = $png_ptr;
    _png_error($6, STRING_TABLE.__str21092 | 0);
    __label__ = 6;
    break;
   case 6:
    var $7 = HEAPU32[$valid >> 2];
    if (($7 & 16 | 0) == 0) {
      var $19 = $7;
      __label__ = 13;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    var $color_type31_pre = $info_ptr + 25 | 0;
    if ((HEAP32[$png_ptr + 92 >> 2] & 524288 | 0) == 0) {
      var $color_type31_pre_phi = $color_type31_pre;
      __label__ = 12;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    if (HEAP8[$color_type31_pre] << 24 >> 24 == 3) {
      __label__ = 9;
      break;
    } else {
      var $color_type31_pre_phi = $color_type31_pre;
      __label__ = 12;
      break;
    }
   case 9:
    var $num_trans = $info_ptr + 22 | 0;
    if (HEAP16[$num_trans >> 1] << 16 >> 16 == 0) {
      var $color_type31_pre_phi = $color_type31_pre;
      __label__ = 12;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 10:
    var $trans_alpha = $info_ptr + 76 | 0;
    var $j_08 = 0;
    __label__ = 11;
    break;
   case 11:
    var $j_08;
    var $arrayidx = HEAP32[$trans_alpha >> 2] + $j_08 | 0;
    var $sub = HEAP8[$arrayidx] ^ -1;
    HEAP8[$arrayidx] = $sub;
    var $inc = $j_08 + 1 | 0;
    if (($inc | 0) < (HEAPU16[$num_trans >> 1] & 65535 | 0)) {
      var $j_08 = $inc;
      __label__ = 11;
      break;
    } else {
      var $color_type31_pre_phi = $color_type31_pre;
      __label__ = 12;
      break;
    }
   case 12:
    var $color_type31_pre_phi;
    var $14 = HEAP32[$info_ptr + 76 >> 2];
    var $conv30 = HEAPU16[$info_ptr + 22 >> 1] & 65535;
    var $conv32 = HEAPU8[$color_type31_pre_phi] & 255;
    var $17 = $png_ptr;
    var $18 = $info_ptr + 80 | 0;
    _png_write_tRNS($17, $14, $18, $conv30, $conv32);
    var $19 = HEAP32[$valid >> 2];
    __label__ = 13;
    break;
   case 13:
    var $19;
    if (($19 & 32 | 0) == 0) {
      var $23 = $19;
      __label__ = 15;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 14:
    var $conv39 = HEAPU8[$info_ptr + 25 | 0] & 255;
    var $21 = $png_ptr;
    var $22 = $info_ptr + 90 | 0;
    _png_write_bKGD($21, $22, $conv39);
    var $23 = HEAP32[$valid >> 2];
    __label__ = 15;
    break;
   case 15:
    var $23;
    if (($23 & 64 | 0) == 0) {
      var $27 = $23;
      __label__ = 17;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 16:
    var $24 = HEAP32[$info_ptr + 124 >> 2];
    var $conv46 = HEAPU16[$info_ptr + 20 >> 1] & 65535;
    var $26 = $png_ptr;
    _png_write_hIST($26, $24, $conv46);
    var $27 = HEAP32[$valid >> 2];
    __label__ = 17;
    break;
   case 17:
    var $27;
    if (($27 & 256 | 0) == 0) {
      var $32 = $27;
      __label__ = 19;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 18:
    var $28 = HEAP32[$info_ptr + 100 >> 2];
    var $29 = HEAP32[$info_ptr + 104 >> 2];
    var $conv52 = HEAPU8[$info_ptr + 108 | 0] & 255;
    var $31 = $png_ptr;
    _png_write_oFFs($31, $28, $29, $conv52);
    var $32 = HEAP32[$valid >> 2];
    __label__ = 19;
    break;
   case 19:
    var $32;
    if (($32 & 1024 | 0) == 0) {
      var $41 = $32;
      __label__ = 21;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 20:
    var $33 = HEAP32[$info_ptr + 160 >> 2];
    var $34 = HEAP32[$info_ptr + 164 >> 2];
    var $35 = HEAP32[$info_ptr + 168 >> 2];
    var $conv58 = HEAPU8[$info_ptr + 180 | 0] & 255;
    var $conv59 = HEAPU8[$info_ptr + 181 | 0] & 255;
    var $38 = HEAP32[$info_ptr + 172 >> 2];
    var $39 = HEAP32[$info_ptr + 176 >> 2];
    var $40 = $png_ptr;
    _png_write_pCAL($40, $33, $34, $35, $conv58, $conv59, $38, $39);
    var $41 = HEAP32[$valid >> 2];
    __label__ = 21;
    break;
   case 21:
    var $41;
    if (($41 & 16384 | 0) == 0) {
      var $46 = $41;
      __label__ = 23;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 22:
    var $conv65 = HEAPU8[$info_ptr + 220 | 0] & 255;
    var $43 = HEAP32[$info_ptr + 224 >> 2];
    var $44 = HEAP32[$info_ptr + 228 >> 2];
    var $45 = $png_ptr;
    _png_write_sCAL_s($45, $conv65, $43, $44);
    var $46 = HEAP32[$valid >> 2];
    __label__ = 23;
    break;
   case 23:
    var $46;
    if (($46 & 128 | 0) == 0) {
      var $51 = $46;
      __label__ = 25;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 24:
    var $47 = HEAP32[$info_ptr + 112 >> 2];
    var $48 = HEAP32[$info_ptr + 116 >> 2];
    var $conv71 = HEAPU8[$info_ptr + 120 | 0] & 255;
    var $50 = $png_ptr;
    _png_write_pHYs($50, $47, $48, $conv71);
    var $51 = HEAP32[$valid >> 2];
    __label__ = 25;
    break;
   case 25:
    var $51;
    if (($51 & 512 | 0) == 0) {
      var $55 = $51;
      __label__ = 27;
      break;
    } else {
      __label__ = 26;
      break;
    }
   case 26:
    var $52 = $png_ptr;
    var $53 = $info_ptr + 60 | 0;
    _png_write_tIME($52, $53);
    var $mode = $png_ptr + 84 | 0;
    var $or = HEAP32[$mode >> 2] | 512;
    HEAP32[$mode >> 2] = $or;
    var $55 = HEAP32[$valid >> 2];
    __label__ = 27;
    break;
   case 27:
    var $55;
    if (($55 & 8192 | 0) == 0) {
      __label__ = 31;
      break;
    } else {
      __label__ = 28;
      break;
    }
   case 28:
    var $splt_palettes_num = $info_ptr + 216 | 0;
    if ((HEAP32[$splt_palettes_num >> 2] | 0) > 0) {
      __label__ = 29;
      break;
    } else {
      __label__ = 31;
      break;
    }
   case 29:
    var $splt_palettes = $info_ptr + 212 | 0;
    var $57 = $png_ptr;
    var $i_010 = 0;
    __label__ = 30;
    break;
   case 30:
    var $i_010;
    var $59 = HEAP32[$splt_palettes >> 2] + ($i_010 << 4) | 0;
    _png_write_sPLT($57, $59);
    var $inc87 = $i_010 + 1 | 0;
    if (($inc87 | 0) < (HEAP32[$splt_palettes_num >> 2] | 0)) {
      var $i_010 = $inc87;
      __label__ = 30;
      break;
    } else {
      __label__ = 31;
      break;
    }
   case 31:
    var $num_text = $info_ptr + 48 | 0;
    if ((HEAP32[$num_text >> 2] | 0) > 0) {
      __label__ = 32;
      break;
    } else {
      __label__ = 39;
      break;
    }
   case 32:
    var $text = $info_ptr + 56 | 0;
    var $62 = $png_ptr;
    var $i_116 = 0;
    __label__ = 33;
    break;
   case 33:
    var $i_116;
    var $63 = HEAP32[$text >> 2];
    var $64 = HEAP32[$63 + $i_116 * 28 >> 2];
    if (($64 | 0) > 0) {
      __label__ = 34;
      break;
    } else {
      __label__ = 35;
      break;
    }
   case 34:
    var $65 = HEAP32[$63 + $i_116 * 28 + 4 >> 2];
    var $66 = HEAP32[$63 + $i_116 * 28 + 20 >> 2];
    var $67 = HEAP32[$63 + $i_116 * 28 + 24 >> 2];
    var $68 = HEAP32[$63 + $i_116 * 28 + 8 >> 2];
    _png_write_iTXt($62, $64, $65, $66, $67, $68);
    var $compression112 = HEAP32[$text >> 2] + $i_116 * 28 | 0;
    HEAP32[$compression112 >> 2] = -3;
    __label__ = 38;
    break;
   case 35:
    if (($64 | 0) == 0) {
      __label__ = 36;
      break;
    } else if (($64 | 0) == -1) {
      __label__ = 37;
      break;
    } else {
      __label__ = 38;
      break;
    }
   case 36:
    var $70 = HEAP32[$63 + $i_116 * 28 + 4 >> 2];
    var $71 = HEAP32[$63 + $i_116 * 28 + 8 >> 2];
    _png_write_zTXt($62, $70, $71, 0);
    var $compression131 = HEAP32[$text >> 2] + $i_116 * 28 | 0;
    HEAP32[$compression131 >> 2] = -2;
    __label__ = 38;
    break;
   case 37:
    var $73 = HEAP32[$63 + $i_116 * 28 + 4 >> 2];
    var $74 = HEAP32[$63 + $i_116 * 28 + 8 >> 2];
    _png_write_tEXt($62, $73, $74);
    var $compression147 = HEAP32[$text >> 2] + $i_116 * 28 | 0;
    HEAP32[$compression147 >> 2] = -3;
    __label__ = 38;
    break;
   case 38:
    var $inc152 = $i_116 + 1 | 0;
    if (($inc152 | 0) < (HEAP32[$num_text >> 2] | 0)) {
      var $i_116 = $inc152;
      __label__ = 33;
      break;
    } else {
      __label__ = 39;
      break;
    }
   case 39:
    var $unknown_chunks_num = $info_ptr + 192 | 0;
    var $77 = HEAP32[$unknown_chunks_num >> 2];
    if (($77 | 0) == 0) {
      __label__ = 48;
      break;
    } else {
      __label__ = 40;
      break;
    }
   case 40:
    var $unknown_chunks = $info_ptr + 188 | 0;
    if (($77 | 0) > 0) {
      __label__ = 41;
      break;
    } else {
      __label__ = 48;
      break;
    }
   case 41:
    var $78 = HEAP32[$unknown_chunks >> 2];
    var $79 = $png_ptr;
    var $80 = $png_ptr;
    var $flags = $png_ptr + 88 | 0;
    var $up_013 = $78;
    var $82 = $78;
    var $81 = $77;
    __label__ = 42;
    break;
   case 42:
    var $81;
    var $82;
    var $up_013;
    var $arraydecay = $up_013 | 0;
    var $call = _png_handle_as_unknown($79, $arraydecay);
    if (($call | 0) == 1) {
      var $91 = $82;
      var $90 = $81;
      __label__ = 47;
      break;
    } else {
      __label__ = 43;
      break;
    }
   case 43:
    var $83 = HEAP8[$up_013 + 16 | 0];
    if ($83 << 24 >> 24 != 0 & ($83 & 14) << 24 >> 24 == 2) {
      __label__ = 44;
      break;
    } else {
      var $91 = $82;
      var $90 = $81;
      __label__ = 47;
      break;
    }
   case 44:
    if ((HEAP8[$up_013 + 3 | 0] & 32) << 24 >> 24 != 0 | ($call | 0) == 3) {
      __label__ = 46;
      break;
    } else {
      __label__ = 45;
      break;
    }
   case 45:
    if ((HEAP32[$flags >> 2] & 65536 | 0) == 0) {
      var $91 = $82;
      var $90 = $81;
      __label__ = 47;
      break;
    } else {
      __label__ = 46;
      break;
    }
   case 46:
    var $88 = HEAP32[$up_013 + 8 >> 2];
    var $89 = HEAP32[$up_013 + 12 >> 2];
    _png_write_chunk($80, $arraydecay, $88, $89);
    var $91 = HEAP32[$unknown_chunks >> 2];
    var $90 = HEAP32[$unknown_chunks_num >> 2];
    __label__ = 47;
    break;
   case 47:
    var $90;
    var $91;
    var $incdec_ptr = $up_013 + 20 | 0;
    if ($incdec_ptr >>> 0 < ($91 + $90 * 20 | 0) >>> 0) {
      var $up_013 = $incdec_ptr;
      var $82 = $91;
      var $81 = $90;
      __label__ = 42;
      break;
    } else {
      __label__ = 48;
      break;
    }
   case 48:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_write_info["X"] = 1;

function _png_write_end($png_ptr, $info_ptr) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0) {
      __label__ = 29;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $mode = $png_ptr + 84 | 0;
    if ((HEAP32[$mode >> 2] & 4 | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $1 = $png_ptr;
    _png_error($1, STRING_TABLE.__str31093 | 0);
    __label__ = 4;
    break;
   case 4:
    if ((HEAP32[$png_ptr + 280 >> 2] | 0) > (HEAPU16[$png_ptr + 276 >> 1] & 65535 | 0)) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    var $4 = $png_ptr;
    _png_benign_error($4, STRING_TABLE.__str41094 | 0);
    __label__ = 6;
    break;
   case 6:
    if (($info_ptr | 0) == 0) {
      __label__ = 28;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    if ((HEAP32[$info_ptr + 8 >> 2] & 512 | 0) == 0) {
      __label__ = 10;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    if ((HEAP32[$mode >> 2] & 512 | 0) == 0) {
      __label__ = 9;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 9:
    var $7 = $png_ptr;
    var $8 = $info_ptr + 60 | 0;
    _png_write_tIME($7, $8);
    __label__ = 10;
    break;
   case 10:
    var $num_text = $info_ptr + 48 | 0;
    if ((HEAP32[$num_text >> 2] | 0) > 0) {
      __label__ = 11;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 11:
    var $text = $info_ptr + 56 | 0;
    var $10 = $png_ptr;
    var $i_06 = 0;
    __label__ = 12;
    break;
   case 12:
    var $i_06;
    var $11 = HEAPU32[$text >> 2];
    var $12 = HEAP32[$11 + $i_06 * 28 >> 2];
    if (($12 | 0) > 0) {
      __label__ = 13;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 13:
    var $13 = HEAP32[$11 + $i_06 * 28 + 4 >> 2];
    var $14 = HEAP32[$11 + $i_06 * 28 + 20 >> 2];
    var $15 = HEAP32[$11 + $i_06 * 28 + 24 >> 2];
    var $16 = HEAP32[$11 + $i_06 * 28 + 8 >> 2];
    _png_write_iTXt($10, $12, $13, $14, $15, $16);
    var $compression36 = HEAP32[$text >> 2] + $i_06 * 28 | 0;
    HEAP32[$compression36 >> 2] = -3;
    __label__ = 18;
    break;
   case 14:
    if (($12 | 0) > -1) {
      __label__ = 15;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 15:
    var $18 = HEAP32[$11 + $i_06 * 28 + 4 >> 2];
    var $19 = HEAP32[$11 + $i_06 * 28 + 8 >> 2];
    _png_write_zTXt($10, $18, $19, $12);
    var $compression54 = HEAP32[$text >> 2] + $i_06 * 28 | 0;
    HEAP32[$compression54 >> 2] = -2;
    __label__ = 18;
    break;
   case 16:
    if (($12 | 0) == -1) {
      __label__ = 17;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 17:
    var $21 = HEAP32[$11 + $i_06 * 28 + 4 >> 2];
    var $22 = HEAP32[$11 + $i_06 * 28 + 8 >> 2];
    _png_write_tEXt($10, $21, $22);
    var $compression70 = HEAP32[$text >> 2] + $i_06 * 28 | 0;
    HEAP32[$compression70 >> 2] = -3;
    __label__ = 18;
    break;
   case 18:
    var $inc = $i_06 + 1 | 0;
    if (($inc | 0) < (HEAP32[$num_text >> 2] | 0)) {
      var $i_06 = $inc;
      __label__ = 12;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 19:
    var $unknown_chunks_num = $info_ptr + 192 | 0;
    var $25 = HEAP32[$unknown_chunks_num >> 2];
    if (($25 | 0) == 0) {
      __label__ = 28;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 20:
    var $unknown_chunks = $info_ptr + 188 | 0;
    if (($25 | 0) > 0) {
      __label__ = 21;
      break;
    } else {
      __label__ = 28;
      break;
    }
   case 21:
    var $26 = HEAP32[$unknown_chunks >> 2];
    var $27 = $png_ptr;
    var $28 = $png_ptr;
    var $flags = $png_ptr + 88 | 0;
    var $up_04 = $26;
    var $30 = $26;
    var $29 = $25;
    __label__ = 22;
    break;
   case 22:
    var $29;
    var $30;
    var $up_04;
    var $arraydecay = $up_04 | 0;
    var $call = _png_handle_as_unknown($27, $arraydecay);
    if (($call | 0) == 1) {
      var $37 = $30;
      var $36 = $29;
      __label__ = 27;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 23:
    var $31 = HEAP8[$up_04 + 16 | 0];
    if ($31 << 24 >> 24 == 0 | ($31 & 8) << 24 >> 24 == 0) {
      var $37 = $30;
      var $36 = $29;
      __label__ = 27;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 24:
    if ((HEAP8[$up_04 + 3 | 0] & 32) << 24 >> 24 != 0 | ($call | 0) == 3) {
      __label__ = 26;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 25:
    if ((HEAP32[$flags >> 2] & 65536 | 0) == 0) {
      var $37 = $30;
      var $36 = $29;
      __label__ = 27;
      break;
    } else {
      __label__ = 26;
      break;
    }
   case 26:
    var $34 = HEAP32[$up_04 + 8 >> 2];
    var $35 = HEAP32[$up_04 + 12 >> 2];
    _png_write_chunk($28, $arraydecay, $34, $35);
    var $37 = HEAP32[$unknown_chunks >> 2];
    var $36 = HEAP32[$unknown_chunks_num >> 2];
    __label__ = 27;
    break;
   case 27:
    var $36;
    var $37;
    var $incdec_ptr = $up_04 + 20 | 0;
    if ($incdec_ptr >>> 0 < ($37 + $36 * 20 | 0) >>> 0) {
      var $up_04 = $incdec_ptr;
      var $30 = $37;
      var $29 = $36;
      __label__ = 22;
      break;
    } else {
      __label__ = 28;
      break;
    }
   case 28:
    var $or = HEAP32[$mode >> 2] | 8;
    HEAP32[$mode >> 2] = $or;
    var $39 = $png_ptr;
    _png_write_IEND($39);
    __label__ = 29;
    break;
   case 29:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_write_end["X"] = 1;

function _png_create_write_struct_2() {
  var __label__;
  __label__ = 1;
  var setjmpTable = {
    "2": (function(value) {
      __label__ = 9;
      $call2 = value;
    }),
    dummy: 0
  };
  while (1) try {
    switch (__label__) {
     case 1:
      var $png_cleanup_needed;
      var $png_ptr;
      $png_cleanup_needed = 0;
      var $call = _png_create_struct_2(1, 2, 0);
      $png_ptr = $call;
      if (($png_ptr | 0) == 0) {
        var $retval_0 = 0;
        __label__ = 8;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 2:
      HEAP32[$png_ptr + 616 >> 2] = 2147483647;
      HEAP32[$png_ptr + 620 >> 2] = 2147483647;
      var $call1 = _png_set_longjmp_fn($png_ptr);
      var $call2 = (HEAP32[$call1 >> 2] = __label__, 0);
      __label__ = 9;
      break;
     case 9:
      _png_set_mem_fn($png_ptr, 2, 4);
      _png_set_error_fn($png_ptr);
      HEAP32[$png_ptr + 156 >> 2] = 8192;
      if (($png_cleanup_needed | 0) == 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 3:
      var $15 = HEAP32[$png_ptr + 156 >> 2];
      var $call12 = _png_malloc_warn($png_ptr, $15);
      HEAP32[$png_ptr + 152 >> 2] = $call12;
      if ((HEAP32[$png_ptr + 152 >> 2] | 0) == 0) {
        __label__ = 4;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 4:
      $png_cleanup_needed = 1;
      __label__ = 5;
      break;
     case 5:
      var $21 = $png_ptr;
      if (($png_cleanup_needed | 0) == 0) {
        __label__ = 7;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 6:
      var $23 = HEAP32[$png_ptr + 152 >> 2];
      _png_free($21, $23);
      HEAP32[$png_ptr + 152 >> 2] = 0;
      _png_destroy_struct_2($png_ptr, 4, 0);
      var $retval_0 = 0;
      __label__ = 8;
      break;
     case 7:
      _png_set_write_fn($21, 0);
      _png_reset_filter_heuristics($png_ptr);
      var $retval_0 = $png_ptr;
      __label__ = 8;
      break;
     case 8:
      var $retval_0;
      return $retval_0;
     default:
      assert(0, "bad label: " + __label__);
    }
  } catch (e) {
    if (!e.longjmp) throw e;
    setjmpTable[e.label](e.value);
  }
}

_png_create_write_struct_2["X"] = 1;

function _png_reset_filter_heuristics($png_ptr) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    HEAP8[$png_ptr + 493 | 0] = 0;
    HEAP8[$png_ptr + 492 | 0] = 1;
    var $prev_filters = $png_ptr + 496 | 0;
    var $0 = HEAP32[$prev_filters >> 2];
    if (($0 | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    HEAP32[$prev_filters >> 2] = 0;
    var $1 = $png_ptr;
    _png_free($1, $0);
    __label__ = 3;
    break;
   case 3:
    var $filter_weights = $png_ptr + 500 | 0;
    var $2 = HEAP32[$filter_weights >> 2];
    if (($2 | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    HEAP32[$filter_weights >> 2] = 0;
    var $3 = $2;
    var $4 = $png_ptr;
    _png_free($4, $3);
    __label__ = 5;
    break;
   case 5:
    var $inv_filter_weights = $png_ptr + 504 | 0;
    var $5 = HEAP32[$inv_filter_weights >> 2];
    if (($5 | 0) == 0) {
      __label__ = 7;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    HEAP32[$inv_filter_weights >> 2] = 0;
    var $6 = $5;
    var $7 = $png_ptr;
    _png_free($7, $6);
    __label__ = 7;
    break;
   case 7:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_set_compression_level($png_ptr, $level) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $flags = $png_ptr + 88 | 0;
    var $or = HEAP32[$flags >> 2] | 2;
    HEAP32[$flags >> 2] = $or;
    HEAP32[$png_ptr + 164 >> 2] = $level;
    __label__ = 3;
    break;
   case 3:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_set_compression_mem_level($png_ptr, $mem_level) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $flags = $png_ptr + 88 | 0;
    var $or = HEAP32[$flags >> 2] | 4;
    HEAP32[$flags >> 2] = $or;
    HEAP32[$png_ptr + 176 >> 2] = $mem_level;
    __label__ = 3;
    break;
   case 3:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_set_compression_strategy($png_ptr, $strategy) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $flags = $png_ptr + 88 | 0;
    var $or = HEAP32[$flags >> 2] | 1;
    HEAP32[$flags >> 2] = $or;
    HEAP32[$png_ptr + 180 >> 2] = $strategy;
    __label__ = 3;
    break;
   case 3:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_write_row($png_ptr, $row) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 12;
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $row_info = __stackBase__;
    if (($png_ptr | 0) == 0) {
      __label__ = 47;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $row_number = $png_ptr + 228 | 0;
    if ((HEAP32[$row_number >> 2] | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 3:
    if (HEAP8[$png_ptr + 289 | 0] << 24 >> 24 == 0) {
      __label__ = 4;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 4:
    if ((HEAP32[$png_ptr + 84 >> 2] & 1024 | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    var $3 = $png_ptr;
    _png_error($3, STRING_TABLE.__str51095 | 0);
    __label__ = 6;
    break;
   case 6:
    var $4 = $png_ptr;
    _png_write_start_row($4);
    __label__ = 7;
    break;
   case 7:
    var $interlaced = $png_ptr + 288 | 0;
    if (HEAP8[$interlaced] << 24 >> 24 == 0) {
      __label__ = 27;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    if ((HEAP32[$png_ptr + 92 >> 2] & 2 | 0) == 0) {
      __label__ = 27;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    var $conv15 = HEAPU8[$png_ptr + 289 | 0] & 255;
    if (($conv15 | 0) == 0) {
      __label__ = 10;
      break;
    } else if (($conv15 | 0) == 1) {
      __label__ = 12;
      break;
    } else if (($conv15 | 0) == 2) {
      __label__ = 15;
      break;
    } else if (($conv15 | 0) == 3) {
      __label__ = 17;
      break;
    } else if (($conv15 | 0) == 4) {
      __label__ = 20;
      break;
    } else if (($conv15 | 0) == 5) {
      __label__ = 22;
      break;
    } else if (($conv15 | 0) == 6) {
      __label__ = 25;
      break;
    } else {
      __label__ = 27;
      break;
    }
   case 10:
    if ((HEAP32[$row_number >> 2] & 7 | 0) == 0) {
      __label__ = 27;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    var $9 = $png_ptr;
    _png_write_finish_row($9);
    __label__ = 47;
    break;
   case 12:
    if ((HEAP32[$row_number >> 2] & 7 | 0) == 0) {
      __label__ = 13;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 13:
    if (HEAPU32[$png_ptr + 204 >> 2] >>> 0 < 5) {
      __label__ = 14;
      break;
    } else {
      __label__ = 27;
      break;
    }
   case 14:
    var $12 = $png_ptr;
    _png_write_finish_row($12);
    __label__ = 47;
    break;
   case 15:
    if ((HEAP32[$row_number >> 2] & 7 | 0) == 4) {
      __label__ = 27;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 16:
    var $14 = $png_ptr;
    _png_write_finish_row($14);
    __label__ = 47;
    break;
   case 17:
    if ((HEAP32[$row_number >> 2] & 3 | 0) == 0) {
      __label__ = 18;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 18:
    if (HEAPU32[$png_ptr + 204 >> 2] >>> 0 < 3) {
      __label__ = 19;
      break;
    } else {
      __label__ = 27;
      break;
    }
   case 19:
    var $17 = $png_ptr;
    _png_write_finish_row($17);
    __label__ = 47;
    break;
   case 20:
    if ((HEAP32[$row_number >> 2] & 3 | 0) == 2) {
      __label__ = 27;
      break;
    } else {
      __label__ = 21;
      break;
    }
   case 21:
    var $19 = $png_ptr;
    _png_write_finish_row($19);
    __label__ = 47;
    break;
   case 22:
    if ((HEAP32[$row_number >> 2] & 1 | 0) == 0) {
      __label__ = 23;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 23:
    if (HEAPU32[$png_ptr + 204 >> 2] >>> 0 < 2) {
      __label__ = 24;
      break;
    } else {
      __label__ = 27;
      break;
    }
   case 24:
    var $22 = $png_ptr;
    _png_write_finish_row($22);
    __label__ = 47;
    break;
   case 25:
    if ((HEAP32[$row_number >> 2] & 1 | 0) == 0) {
      __label__ = 26;
      break;
    } else {
      __label__ = 27;
      break;
    }
   case 26:
    var $24 = $png_ptr;
    _png_write_finish_row($24);
    __label__ = 47;
    break;
   case 27:
    var $25 = HEAP8[$png_ptr + 291 | 0];
    var $color_type70 = $row_info + 8 | 0;
    HEAP8[$color_type70] = $25;
    var $26 = HEAPU32[$png_ptr + 216 >> 2];
    var $width71 = $row_info | 0;
    HEAP32[$width71 >> 2] = $26;
    var $27 = HEAP8[$png_ptr + 296 | 0];
    HEAP8[$row_info + 10 | 0] = $27;
    var $28 = HEAP8[$png_ptr + 293 | 0];
    HEAP8[$row_info + 9 | 0] = $28;
    var $mul = $27 * $28 & 255;
    var $pixel_depth = $row_info + 11 | 0;
    HEAP8[$pixel_depth] = $mul;
    var $conv78 = $mul & 255;
    if (($mul & 255) > 7) {
      __label__ = 28;
      break;
    } else {
      __label__ = 29;
      break;
    }
   case 28:
    var $cond = ($conv78 >>> 3) * $26 | 0;
    __label__ = 30;
    break;
   case 29:
    var $cond = ($conv78 * $26 + 7 | 0) >>> 3;
    __label__ = 30;
    break;
   case 30:
    var $cond;
    HEAP32[$row_info + 4 >> 2] = $cond;
    var $row_buf = $png_ptr + 240 | 0;
    var $add_ptr = HEAP32[$row_buf >> 2] + 1 | 0;
    _memcpy($add_ptr, $row, $cond, 1);
    if (HEAP8[$interlaced] << 24 >> 24 == 0) {
      __label__ = 35;
      break;
    } else {
      __label__ = 31;
      break;
    }
   case 31:
    var $31 = HEAPU8[$png_ptr + 289 | 0];
    var $conv96 = $31 & 255;
    if (($31 & 255) < 6) {
      __label__ = 32;
      break;
    } else {
      __label__ = 35;
      break;
    }
   case 32:
    if ((HEAP32[$png_ptr + 92 >> 2] & 2 | 0) == 0) {
      __label__ = 35;
      break;
    } else {
      __label__ = 33;
      break;
    }
   case 33:
    var $add_ptr105 = HEAP32[$row_buf >> 2] + 1 | 0;
    _png_do_write_interlace($row_info, $add_ptr105, $conv96);
    if ((HEAP32[$width71 >> 2] | 0) == 0) {
      __label__ = 34;
      break;
    } else {
      __label__ = 35;
      break;
    }
   case 34:
    var $35 = $png_ptr;
    _png_write_finish_row($35);
    __label__ = 47;
    break;
   case 35:
    if ((HEAP32[$png_ptr + 92 >> 2] | 0) == 0) {
      __label__ = 37;
      break;
    } else {
      __label__ = 36;
      break;
    }
   case 36:
    var $37 = $png_ptr;
    var $38 = $row_info;
    _png_do_write_transformations($37, $38);
    __label__ = 37;
    break;
   case 37:
    var $39 = HEAP8[$pixel_depth];
    if ($39 << 24 >> 24 == HEAP8[$png_ptr + 294 | 0] << 24 >> 24) {
      __label__ = 38;
      break;
    } else {
      __label__ = 39;
      break;
    }
   case 38:
    if ($39 << 24 >> 24 == HEAP8[$png_ptr + 299 | 0] << 24 >> 24) {
      __label__ = 40;
      break;
    } else {
      __label__ = 39;
      break;
    }
   case 39:
    var $42 = $png_ptr;
    _png_error($42, STRING_TABLE.__str61096 | 0);
    __label__ = 40;
    break;
   case 40:
    if ((HEAP32[$png_ptr + 576 >> 2] & 4 | 0) == 0) {
      __label__ = 43;
      break;
    } else {
      __label__ = 41;
      break;
    }
   case 41:
    if (HEAP8[$png_ptr + 580 | 0] << 24 >> 24 == 64) {
      __label__ = 42;
      break;
    } else {
      __label__ = 43;
      break;
    }
   case 42:
    var $add_ptr139 = HEAP32[$row_buf >> 2] + 1 | 0;
    var $46 = $row_info;
    _png_do_write_intrapixel($46, $add_ptr139);
    __label__ = 43;
    break;
   case 43:
    if (HEAP8[$color_type70] << 24 >> 24 == 3) {
      __label__ = 44;
      break;
    } else {
      __label__ = 45;
      break;
    }
   case 44:
    var $48 = $png_ptr;
    var $49 = $row_info;
    _png_do_check_palette_indexes($48, $49);
    __label__ = 45;
    break;
   case 45:
    var $50 = $png_ptr;
    _png_write_find_filter($50, $row_info);
    var $51 = HEAPU32[$png_ptr + 416 >> 2];
    if (($51 | 0) == 0) {
      __label__ = 47;
      break;
    } else {
      __label__ = 46;
      break;
    }
   case 46:
    var $52 = HEAP32[$row_number >> 2];
    var $conv153 = HEAPU8[$png_ptr + 289 | 0] & 255;
    FUNCTION_TABLE[$51]($png_ptr, $52, $conv153);
    __label__ = 47;
    break;
   case 47:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_write_row["X"] = 1;

function _png_write_flush($png_ptr) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0) {
      __label__ = 13;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    if (HEAPU32[$png_ptr + 228 >> 2] >>> 0 < HEAPU32[$png_ptr + 212 >> 2] >>> 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 3:
    var $2 = $png_ptr + 96 | 0;
    var $avail_out = $png_ptr + 112 | 0;
    var $zbuf = $png_ptr + 152 | 0;
    var $zbuf_size = $png_ptr + 156 | 0;
    var $3 = $png_ptr;
    var $msg = $png_ptr + 120 | 0;
    var $4 = $png_ptr;
    __label__ = 4;
    break;
   case 4:
    var $call = _deflate($2, 2);
    if (($call | 0) == 0) {
      __label__ = 8;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $5 = HEAP32[$msg >> 2];
    if (($5 | 0) == 0) {
      __label__ = 7;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    _png_error($4, $5);
    __label__ = 8;
    break;
   case 7:
    _png_error($4, STRING_TABLE.__str401173 | 0);
    __label__ = 8;
    break;
   case 8:
    var $6 = HEAP32[$avail_out >> 2];
    if (($6 | 0) == 0) {
      __label__ = 9;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 9:
    var $7 = HEAP32[$zbuf >> 2];
    var $8 = HEAP32[$zbuf_size >> 2];
    _png_write_IDAT($3, $7, $8);
    __label__ = 4;
    break;
   case 10:
    var $9 = HEAP32[$zbuf_size >> 2];
    if (($9 | 0) == ($6 | 0)) {
      __label__ = 12;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    var $10 = HEAP32[$zbuf >> 2];
    var $sub = $9 - $6 | 0;
    _png_write_IDAT($3, $10, $sub);
    __label__ = 12;
    break;
   case 12:
    HEAP32[$png_ptr + 344 >> 2] = 0;
    var $11 = $png_ptr;
    _png_flush($11);
    __label__ = 13;
    break;
   case 13:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_destroy_write_struct($png_ptr_ptr, $info_ptr_ptr) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr_ptr | 0) == 0) {
      var $mem_ptr_0 = 0;
      var $free_fn_0 = 0;
      var $png_ptr_02 = 0;
      var $cmp13 = 0;
      __label__ = 4;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $0 = HEAP32[$png_ptr_ptr >> 2];
    if (($0 | 0) == 0) {
      var $mem_ptr_0 = 0;
      var $free_fn_0 = 0;
      var $png_ptr_02 = 0;
      var $cmp13 = 0;
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $mem_ptr_0 = HEAP32[$0 + 584 >> 2];
    var $free_fn_0 = HEAP32[$0 + 592 >> 2];
    var $png_ptr_02 = $0;
    var $cmp13 = 1;
    __label__ = 4;
    break;
   case 4:
    var $cmp13;
    var $png_ptr_02;
    var $free_fn_0;
    var $mem_ptr_0;
    if (($info_ptr_ptr | 0) == 0) {
      __label__ = 10;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $3 = HEAP32[$info_ptr_ptr >> 2];
    if (($3 | 0) == 0) {
      __label__ = 10;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    if ($cmp13) {
      __label__ = 7;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 7:
    var $5 = $3;
    _png_free_data($png_ptr_02, $5, 32767, -1);
    var $num_chunk_list = $png_ptr_02 + 560 | 0;
    if ((HEAP32[$num_chunk_list >> 2] | 0) == 0) {
      __label__ = 9;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    var $7 = HEAP32[$png_ptr_02 + 564 >> 2];
    _png_free($png_ptr_02, $7);
    HEAP32[$num_chunk_list >> 2] = 0;
    __label__ = 9;
    break;
   case 9:
    var $9 = $3;
    _png_destroy_struct_2($9, $free_fn_0, $mem_ptr_0);
    HEAP32[$info_ptr_ptr >> 2] = 0;
    __label__ = 10;
    break;
   case 10:
    if ($cmp13) {
      __label__ = 11;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 11:
    _png_write_destroy($png_ptr_02);
    _png_destroy_struct_2($png_ptr_02, $free_fn_0, $mem_ptr_0);
    HEAP32[$png_ptr_ptr >> 2] = 0;
    __label__ = 12;
    break;
   case 12:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_write_destroy($png_ptr) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if ((HEAP32[$png_ptr + 160 >> 2] | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $1 = $png_ptr + 96 | 0;
    var $call = _deflateEnd($1);
    __label__ = 3;
    break;
   case 3:
    var $2 = HEAP32[$png_ptr + 152 >> 2];
    var $3 = $png_ptr;
    _png_free($3, $2);
    var $4 = HEAP32[$png_ptr + 240 >> 2];
    _png_free($3, $4);
    var $5 = HEAP32[$png_ptr + 236 >> 2];
    _png_free($3, $5);
    var $6 = HEAP32[$png_ptr + 244 >> 2];
    _png_free($3, $6);
    var $7 = HEAP32[$png_ptr + 248 >> 2];
    _png_free($3, $7);
    var $8 = HEAP32[$png_ptr + 252 >> 2];
    _png_free($3, $8);
    var $9 = HEAP32[$png_ptr + 256 >> 2];
    _png_free($3, $9);
    _png_reset_filter_heuristics($png_ptr);
    var $11 = HEAP32[$png_ptr + 508 >> 2];
    _png_free($3, $11);
    var $13 = HEAP32[$png_ptr + 512 >> 2];
    _png_free($3, $13);
    var $14 = $png_ptr;
    var $st$32$0 = $14 | 0;
    var $srcval1$0 = HEAPU8[$st$32$0] | HEAPU8[$st$32$0 + 1] << 8 | HEAPU8[$st$32$0 + 2] << 16 | HEAPU8[$st$32$0 + 3] << 24 | 0;
    var $st$32$1 = $14 + 4 | 0;
    var $srcval1$1 = HEAPU8[$st$32$1] | HEAPU8[$st$32$1 + 1] << 8 | HEAPU8[$st$32$1 + 2] << 16 | HEAPU8[$st$32$1 + 3] << 24 | 0;
    var $st$32$2 = $14 + 8 | 0;
    var $srcval1$2 = HEAPU8[$st$32$2] | HEAPU8[$st$32$2 + 1] << 8 | HEAPU8[$st$32$2 + 2] << 16 | HEAPU8[$st$32$2 + 3] << 24 | 0;
    var $st$32$3 = $14 + 12 | 0;
    var $srcval1$3 = HEAPU8[$st$32$3] | HEAPU8[$st$32$3 + 1] << 8 | HEAPU8[$st$32$3 + 2] << 16 | HEAPU8[$st$32$3 + 3] << 24 | 0;
    var $st$32$4 = $14 + 16 | 0;
    var $srcval1$4 = HEAPU8[$st$32$4] | HEAPU8[$st$32$4 + 1] << 8 | HEAPU8[$st$32$4 + 2] << 16 | HEAPU8[$st$32$4 + 3] << 24 | 0;
    var $st$32$5 = $14 + 20 | 0;
    var $srcval1$5 = HEAPU8[$st$32$5] | HEAPU8[$st$32$5 + 1] << 8 | HEAPU8[$st$32$5 + 2] << 16 | HEAPU8[$st$32$5 + 3] << 24 | 0;
    var $st$32$6 = $14 + 24 | 0;
    var $srcval1$6 = HEAPU8[$st$32$6] | HEAPU8[$st$32$6 + 1] << 8 | HEAPU8[$st$32$6 + 2] << 16 | HEAPU8[$st$32$6 + 3] << 24 | 0;
    var $st$32$7 = $14 + 28 | 0;
    var $srcval1$7 = HEAPU8[$st$32$7] | HEAPU8[$st$32$7 + 1] << 8 | HEAPU8[$st$32$7 + 2] << 16 | HEAPU8[$st$32$7 + 3] << 24 | 0;
    var $st$32$8 = $14 + 32 | 0;
    var $srcval1$8 = HEAPU8[$st$32$8] | HEAPU8[$st$32$8 + 1] << 8 | HEAPU8[$st$32$8 + 2] << 16 | HEAPU8[$st$32$8 + 3] << 24 | 0;
    var $st$32$9 = $14 + 36 | 0;
    var $srcval1$9 = HEAPU8[$st$32$9] | HEAPU8[$st$32$9 + 1] << 8 | HEAPU8[$st$32$9 + 2] << 16 | HEAPU8[$st$32$9 + 3] << 24 | 0;
    var $error_fn2 = $png_ptr + 44 | 0;
    var $15 = HEAP32[$error_fn2 >> 2];
    var $warning_fn3 = $png_ptr + 48 | 0;
    var $16 = HEAP32[$warning_fn3 >> 2];
    var $error_ptr4 = $png_ptr + 52 | 0;
    var $17 = HEAP32[$error_ptr4 >> 2];
    var $free_fn5 = $png_ptr + 592 | 0;
    var $18 = HEAP32[$free_fn5 >> 2];
    var $19 = $png_ptr;
    _memset($19, 0, 684, 1);
    HEAP32[$error_fn2 >> 2] = $15;
    HEAP32[$warning_fn3 >> 2] = $16;
    HEAP32[$error_ptr4 >> 2] = $17;
    HEAP32[$free_fn5 >> 2] = $18;
    var $st$66$0 = $14 | 0;
    tempBigInt = $srcval1$0;
    HEAP8[$st$66$0] = tempBigInt & 255;
    tempBigInt >>= 8;
    HEAP8[$st$66$0 + 1] = tempBigInt & 255;
    tempBigInt >>= 8;
    HEAP8[$st$66$0 + 2] = tempBigInt & 255;
    tempBigInt >>= 8;
    HEAP8[$st$66$0 + 3] = tempBigInt & 255;
    var $st$66$1 = $14 + 4 | 0;
    tempBigInt = $srcval1$1;
    HEAP8[$st$66$1] = tempBigInt & 255;
    tempBigInt >>= 8;
    HEAP8[$st$66$1 + 1] = tempBigInt & 255;
    tempBigInt >>= 8;
    HEAP8[$st$66$1 + 2] = tempBigInt & 255;
    tempBigInt >>= 8;
    HEAP8[$st$66$1 + 3] = tempBigInt & 255;
    var $st$66$2 = $14 + 8 | 0;
    tempBigInt = $srcval1$2;
    HEAP8[$st$66$2] = tempBigInt & 255;
    tempBigInt >>= 8;
    HEAP8[$st$66$2 + 1] = tempBigInt & 255;
    tempBigInt >>= 8;
    HEAP8[$st$66$2 + 2] = tempBigInt & 255;
    tempBigInt >>= 8;
    HEAP8[$st$66$2 + 3] = tempBigInt & 255;
    var $st$66$3 = $14 + 12 | 0;
    tempBigInt = $srcval1$3;
    HEAP8[$st$66$3] = tempBigInt & 255;
    tempBigInt >>= 8;
    HEAP8[$st$66$3 + 1] = tempBigInt & 255;
    tempBigInt >>= 8;
    HEAP8[$st$66$3 + 2] = tempBigInt & 255;
    tempBigInt >>= 8;
    HEAP8[$st$66$3 + 3] = tempBigInt & 255;
    var $st$66$4 = $14 + 16 | 0;
    tempBigInt = $srcval1$4;
    HEAP8[$st$66$4] = tempBigInt & 255;
    tempBigInt >>= 8;
    HEAP8[$st$66$4 + 1] = tempBigInt & 255;
    tempBigInt >>= 8;
    HEAP8[$st$66$4 + 2] = tempBigInt & 255;
    tempBigInt >>= 8;
    HEAP8[$st$66$4 + 3] = tempBigInt & 255;
    var $st$66$5 = $14 + 20 | 0;
    tempBigInt = $srcval1$5;
    HEAP8[$st$66$5] = tempBigInt & 255;
    tempBigInt >>= 8;
    HEAP8[$st$66$5 + 1] = tempBigInt & 255;
    tempBigInt >>= 8;
    HEAP8[$st$66$5 + 2] = tempBigInt & 255;
    tempBigInt >>= 8;
    HEAP8[$st$66$5 + 3] = tempBigInt & 255;
    var $st$66$6 = $14 + 24 | 0;
    tempBigInt = $srcval1$6;
    HEAP8[$st$66$6] = tempBigInt & 255;
    tempBigInt >>= 8;
    HEAP8[$st$66$6 + 1] = tempBigInt & 255;
    tempBigInt >>= 8;
    HEAP8[$st$66$6 + 2] = tempBigInt & 255;
    tempBigInt >>= 8;
    HEAP8[$st$66$6 + 3] = tempBigInt & 255;
    var $st$66$7 = $14 + 28 | 0;
    tempBigInt = $srcval1$7;
    HEAP8[$st$66$7] = tempBigInt & 255;
    tempBigInt >>= 8;
    HEAP8[$st$66$7 + 1] = tempBigInt & 255;
    tempBigInt >>= 8;
    HEAP8[$st$66$7 + 2] = tempBigInt & 255;
    tempBigInt >>= 8;
    HEAP8[$st$66$7 + 3] = tempBigInt & 255;
    var $st$66$8 = $14 + 32 | 0;
    tempBigInt = $srcval1$8;
    HEAP8[$st$66$8] = tempBigInt & 255;
    tempBigInt >>= 8;
    HEAP8[$st$66$8 + 1] = tempBigInt & 255;
    tempBigInt >>= 8;
    HEAP8[$st$66$8 + 2] = tempBigInt & 255;
    tempBigInt >>= 8;
    HEAP8[$st$66$8 + 3] = tempBigInt & 255;
    var $st$66$9 = $14 + 36 | 0;
    tempBigInt = $srcval1$9;
    HEAP8[$st$66$9] = tempBigInt & 255;
    tempBigInt >>= 8;
    HEAP8[$st$66$9 + 1] = tempBigInt & 255;
    tempBigInt >>= 8;
    HEAP8[$st$66$9 + 2] = tempBigInt & 255;
    tempBigInt >>= 8;
    HEAP8[$st$66$9 + 3] = tempBigInt & 255;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_write_destroy["X"] = 1;

function _png_set_filter($png_ptr, $filters) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0) {
      __label__ = 31;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $and6 = $filters & 255;
    if (($and6 | 0) == 5 || ($and6 | 0) == 6 || ($and6 | 0) == 7) {
      __label__ = 3;
      break;
    } else if (($and6 | 0) == 0) {
      __label__ = 4;
      break;
    } else if (($and6 | 0) == 1) {
      __label__ = 5;
      break;
    } else if (($and6 | 0) == 2) {
      __label__ = 6;
      break;
    } else if (($and6 | 0) == 3) {
      __label__ = 7;
      break;
    } else if (($and6 | 0) == 4) {
      __label__ = 8;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 3:
    var $0 = $png_ptr;
    _png_warning($0, STRING_TABLE.__str81098 | 0);
    __label__ = 4;
    break;
   case 4:
    HEAP8[$png_ptr + 290 | 0] = 8;
    var $1 = 8;
    __label__ = 10;
    break;
   case 5:
    HEAP8[$png_ptr + 290 | 0] = 16;
    var $1 = 16;
    __label__ = 10;
    break;
   case 6:
    HEAP8[$png_ptr + 290 | 0] = 32;
    var $1 = 32;
    __label__ = 10;
    break;
   case 7:
    HEAP8[$png_ptr + 290 | 0] = 64;
    var $1 = 64;
    __label__ = 10;
    break;
   case 8:
    HEAP8[$png_ptr + 290 | 0] = -128;
    var $1 = -128;
    __label__ = 10;
    break;
   case 9:
    var $conv = $filters & 255;
    HEAP8[$png_ptr + 290 | 0] = $conv;
    var $1 = $conv;
    __label__ = 10;
    break;
   case 10:
    var $1;
    if ((HEAP32[$png_ptr + 240 >> 2] | 0) == 0) {
      __label__ = 31;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    var $do_filter20 = $png_ptr + 290 | 0;
    if (($1 & 16) << 24 >> 24 == 0) {
      var $6 = $1;
      __label__ = 14;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 12:
    var $sub_row = $png_ptr + 244 | 0;
    if ((HEAP32[$sub_row >> 2] | 0) == 0) {
      __label__ = 13;
      break;
    } else {
      var $6 = $1;
      __label__ = 14;
      break;
    }
   case 13:
    var $add = HEAP32[$png_ptr + 220 >> 2] + 1 | 0;
    var $5 = $png_ptr;
    var $call = _png_malloc($5, $add);
    HEAP32[$sub_row >> 2] = $call;
    HEAP8[$call] = 1;
    var $6 = HEAP8[$do_filter20];
    __label__ = 14;
    break;
   case 14:
    var $6;
    if (($6 & 32) << 24 >> 24 == 0) {
      var $13 = $6;
      __label__ = 19;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 15:
    var $up_row = $png_ptr + 248 | 0;
    if ((HEAP32[$up_row >> 2] | 0) == 0) {
      __label__ = 16;
      break;
    } else {
      var $13 = $6;
      __label__ = 19;
      break;
    }
   case 16:
    if ((HEAP32[$png_ptr + 236 >> 2] | 0) == 0) {
      __label__ = 17;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 17:
    var $9 = $png_ptr;
    _png_warning($9, STRING_TABLE.__str91099 | 0);
    var $and44 = HEAP8[$do_filter20] & -33;
    HEAP8[$do_filter20] = $and44;
    var $13 = $and44;
    __label__ = 19;
    break;
   case 18:
    var $add48 = HEAP32[$png_ptr + 220 >> 2] + 1 | 0;
    var $12 = $png_ptr;
    var $call49 = _png_malloc($12, $add48);
    HEAP32[$up_row >> 2] = $call49;
    HEAP8[$call49] = 2;
    var $13 = HEAP8[$do_filter20];
    __label__ = 19;
    break;
   case 19:
    var $13;
    if (($13 & 64) << 24 >> 24 == 0) {
      var $20 = $13;
      __label__ = 24;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 20:
    var $avg_row = $png_ptr + 252 | 0;
    if ((HEAP32[$avg_row >> 2] | 0) == 0) {
      __label__ = 21;
      break;
    } else {
      var $20 = $13;
      __label__ = 24;
      break;
    }
   case 21:
    if ((HEAP32[$png_ptr + 236 >> 2] | 0) == 0) {
      __label__ = 22;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 22:
    var $16 = $png_ptr;
    _png_warning($16, STRING_TABLE.__str101100 | 0);
    var $and69 = HEAP8[$do_filter20] & -65;
    HEAP8[$do_filter20] = $and69;
    var $20 = $and69;
    __label__ = 24;
    break;
   case 23:
    var $add74 = HEAP32[$png_ptr + 220 >> 2] + 1 | 0;
    var $19 = $png_ptr;
    var $call75 = _png_malloc($19, $add74);
    HEAP32[$avg_row >> 2] = $call75;
    HEAP8[$call75] = 3;
    var $20 = HEAP8[$do_filter20];
    __label__ = 24;
    break;
   case 24:
    var $20;
    if ($20 << 24 >> 24 < 0) {
      __label__ = 25;
      break;
    } else {
      var $27 = $20;
      __label__ = 29;
      break;
    }
   case 25:
    var $paeth_row = $png_ptr + 256 | 0;
    if ((HEAP32[$paeth_row >> 2] | 0) == 0) {
      __label__ = 26;
      break;
    } else {
      var $27 = $20;
      __label__ = 29;
      break;
    }
   case 26:
    if ((HEAP32[$png_ptr + 236 >> 2] | 0) == 0) {
      __label__ = 27;
      break;
    } else {
      __label__ = 28;
      break;
    }
   case 27:
    var $23 = $png_ptr;
    _png_warning($23, STRING_TABLE.__str111101 | 0);
    var $and95 = HEAP8[$do_filter20] & 127;
    HEAP8[$do_filter20] = $and95;
    var $27 = $and95;
    __label__ = 29;
    break;
   case 28:
    var $add99 = HEAP32[$png_ptr + 220 >> 2] + 1 | 0;
    var $26 = $png_ptr;
    var $call100 = _png_malloc($26, $add99);
    HEAP32[$paeth_row >> 2] = $call100;
    HEAP8[$call100] = 4;
    var $27 = HEAP8[$do_filter20];
    __label__ = 29;
    break;
   case 29:
    var $27;
    if ($27 << 24 >> 24 == 0) {
      __label__ = 30;
      break;
    } else {
      __label__ = 31;
      break;
    }
   case 30:
    HEAP8[$do_filter20] = 8;
    __label__ = 31;
    break;
   case 31:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_set_filter["X"] = 1;

function _png_set_compression_window_bits($png_ptr, $window_bits) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0) {
      __label__ = 9;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    if (($window_bits | 0) > 15) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $0 = $png_ptr;
    _png_warning($0, STRING_TABLE.__str131103 | 0);
    var $window_bits_addr_0 = $window_bits;
    __label__ = 8;
    break;
   case 4:
    if (($window_bits | 0) < 8) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    var $1 = $png_ptr;
    _png_warning($1, STRING_TABLE.__str141104 | 0);
    var $window_bits_addr_0 = $window_bits;
    __label__ = 8;
    break;
   case 6:
    if (($window_bits | 0) == 8) {
      __label__ = 7;
      break;
    } else {
      var $window_bits_addr_0 = $window_bits;
      __label__ = 8;
      break;
    }
   case 7:
    var $2 = $png_ptr;
    _png_warning($2, STRING_TABLE.__str151105 | 0);
    var $window_bits_addr_0 = 9;
    __label__ = 8;
    break;
   case 8:
    var $window_bits_addr_0;
    var $flags = $png_ptr + 88 | 0;
    var $or = HEAP32[$flags >> 2] | 8;
    HEAP32[$flags >> 2] = $or;
    HEAP32[$png_ptr + 172 >> 2] = $window_bits_addr_0;
    __label__ = 9;
    break;
   case 9:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_do_write_transformations($png_ptr, $row_info) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0) {
      __label__ = 23;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $transformations = $png_ptr + 92 | 0;
    var $0 = HEAP32[$transformations >> 2];
    if (($0 & 1048576 | 0) == 0) {
      var $3 = $0;
      __label__ = 5;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $1 = HEAP32[$png_ptr + 72 >> 2];
    if (($1 | 0) == 0) {
      var $3 = $0;
      __label__ = 5;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $add_ptr = HEAP32[$png_ptr + 240 >> 2] + 1 | 0;
    FUNCTION_TABLE[$1]($png_ptr, $row_info, $add_ptr);
    var $3 = HEAP32[$transformations >> 2];
    __label__ = 5;
    break;
   case 5:
    var $3;
    if (($3 & 32768 | 0) == 0) {
      var $7 = $3;
      __label__ = 7;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    var $add_ptr12 = HEAP32[$png_ptr + 240 >> 2] + 1 | 0;
    var $6 = HEAPU32[$png_ptr + 88 >> 2] >>> 7 & 1 ^ 1;
    _png_do_strip_channel($row_info, $add_ptr12, $6);
    var $7 = HEAP32[$transformations >> 2];
    __label__ = 7;
    break;
   case 7:
    var $7;
    if (($7 & 65536 | 0) == 0) {
      var $9 = $7;
      __label__ = 9;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    var $add_ptr21 = HEAP32[$png_ptr + 240 >> 2] + 1 | 0;
    _png_do_packswap($row_info, $add_ptr21);
    var $9 = HEAP32[$transformations >> 2];
    __label__ = 9;
    break;
   case 9:
    var $9;
    if (($9 & 4 | 0) == 0) {
      var $12 = $9;
      __label__ = 11;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 10:
    var $add_ptr28 = HEAP32[$png_ptr + 240 >> 2] + 1 | 0;
    var $conv = HEAPU8[$png_ptr + 292 | 0] & 255;
    _png_do_pack($row_info, $add_ptr28, $conv);
    var $12 = HEAP32[$transformations >> 2];
    __label__ = 11;
    break;
   case 11:
    var $12;
    if (($12 & 16 | 0) == 0) {
      var $14 = $12;
      __label__ = 13;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 12:
    var $add_ptr35 = HEAP32[$png_ptr + 240 >> 2] + 1 | 0;
    _png_do_swap($row_info, $add_ptr35);
    var $14 = HEAP32[$transformations >> 2];
    __label__ = 13;
    break;
   case 13:
    var $14;
    if (($14 & 8 | 0) == 0) {
      var $16 = $14;
      __label__ = 15;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 14:
    var $add_ptr42 = HEAP32[$png_ptr + 240 >> 2] + 1 | 0;
    var $shift = $png_ptr + 389 | 0;
    _png_do_shift($row_info, $add_ptr42, $shift);
    var $16 = HEAP32[$transformations >> 2];
    __label__ = 15;
    break;
   case 15:
    var $16;
    if (($16 & 131072 | 0) == 0) {
      var $18 = $16;
      __label__ = 17;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 16:
    var $add_ptr49 = HEAP32[$png_ptr + 240 >> 2] + 1 | 0;
    _png_do_write_swap_alpha($row_info, $add_ptr49);
    var $18 = HEAP32[$transformations >> 2];
    __label__ = 17;
    break;
   case 17:
    var $18;
    if (($18 & 524288 | 0) == 0) {
      var $20 = $18;
      __label__ = 19;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 18:
    var $add_ptr56 = HEAP32[$png_ptr + 240 >> 2] + 1 | 0;
    _png_do_write_invert_alpha($row_info, $add_ptr56);
    var $20 = HEAP32[$transformations >> 2];
    __label__ = 19;
    break;
   case 19:
    var $20;
    if (($20 & 1 | 0) == 0) {
      var $22 = $20;
      __label__ = 21;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 20:
    var $add_ptr63 = HEAP32[$png_ptr + 240 >> 2] + 1 | 0;
    _png_do_bgr($row_info, $add_ptr63);
    var $22 = HEAP32[$transformations >> 2];
    __label__ = 21;
    break;
   case 21:
    var $22;
    if (($22 & 32 | 0) == 0) {
      __label__ = 23;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 22:
    var $add_ptr70 = HEAP32[$png_ptr + 240 >> 2] + 1 | 0;
    _png_do_invert($row_info, $add_ptr70);
    __label__ = 23;
    break;
   case 23:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_do_write_transformations["X"] = 1;

function _png_do_pack($row_info, $row, $bit_depth) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $bit_depth1 = $row_info + 9 | 0;
    if (HEAP8[$bit_depth1] << 24 >> 24 == 8) {
      __label__ = 2;
      break;
    } else {
      __label__ = 33;
      break;
    }
   case 2:
    var $channels = $row_info + 10 | 0;
    if (HEAP8[$channels] << 24 >> 24 == 1) {
      __label__ = 3;
      break;
    } else {
      __label__ = 33;
      break;
    }
   case 3:
    if (($bit_depth | 0) == 1) {
      __label__ = 5;
      break;
    } else if (($bit_depth | 0) == 2) {
      __label__ = 13;
      break;
    } else if (($bit_depth | 0) == 4) {
      __label__ = 21;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $width99_pre_phi = $row_info | 0;
    __label__ = 29;
    break;
   case 5:
    var $width = $row_info | 0;
    var $2 = HEAP32[$width >> 2];
    if (($2 | 0) == 0) {
      var $width99_pre_phi = $width;
      __label__ = 29;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    var $lftr_limit29 = $row + $2 | 0;
    var $v_020 = 0;
    var $mask_021 = 128;
    var $dp_022 = $row;
    var $sp_023 = $row;
    __label__ = 7;
    break;
   case 7:
    var $sp_023;
    var $dp_022;
    var $mask_021;
    var $v_020;
    var $or = HEAP8[$sp_023] << 24 >> 24 == 0 ? 0 : $mask_021;
    var $v_0_or = $or | $v_020;
    var $incdec_ptr = $sp_023 + 1 | 0;
    if (($mask_021 | 0) > 1) {
      __label__ = 8;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 8:
    var $dp_1 = $dp_022;
    var $mask_1 = $mask_021 >> 1;
    var $v_2 = $v_0_or;
    __label__ = 10;
    break;
   case 9:
    var $conv15 = $v_0_or & 255;
    HEAP8[$dp_022] = $conv15;
    var $dp_1 = $dp_022 + 1 | 0;
    var $mask_1 = 128;
    var $v_2 = 0;
    __label__ = 10;
    break;
   case 10:
    var $v_2;
    var $mask_1;
    var $dp_1;
    if (($incdec_ptr | 0) == ($lftr_limit29 | 0)) {
      __label__ = 11;
      break;
    } else {
      var $v_020 = $v_2;
      var $mask_021 = $mask_1;
      var $dp_022 = $dp_1;
      var $sp_023 = $incdec_ptr;
      __label__ = 7;
      break;
    }
   case 11:
    if (($mask_1 | 0) == 128) {
      var $width99_pre_phi = $width;
      __label__ = 29;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 12:
    HEAP8[$dp_1] = $v_2 & 255;
    var $width99_pre_phi = $width;
    __label__ = 29;
    break;
   case 13:
    var $width29 = $row_info | 0;
    var $4 = HEAP32[$width29 >> 2];
    if (($4 | 0) == 0) {
      var $width99_pre_phi = $width29;
      __label__ = 29;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 14:
    var $lftr_limit27 = $row + $4 | 0;
    var $v26_011 = 0;
    var $shift_012 = 6;
    var $dp25_013 = $row;
    var $sp24_014 = $row;
    __label__ = 15;
    break;
   case 15:
    var $sp24_014;
    var $dp25_013;
    var $shift_012;
    var $v26_011;
    var $or37 = (HEAP8[$sp24_014] & 3 & 255) << $shift_012 | $v26_011;
    if (($shift_012 | 0) == 0) {
      __label__ = 16;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 16:
    var $conv41 = $or37 & 255;
    HEAP8[$dp25_013] = $conv41;
    var $dp25_1 = $dp25_013 + 1 | 0;
    var $shift_1 = 6;
    var $v26_1 = 0;
    __label__ = 18;
    break;
   case 17:
    var $dp25_1 = $dp25_013;
    var $shift_1 = $shift_012 - 2 | 0;
    var $v26_1 = $or37;
    __label__ = 18;
    break;
   case 18:
    var $v26_1;
    var $shift_1;
    var $dp25_1;
    var $incdec_ptr45 = $sp24_014 + 1 | 0;
    if (($incdec_ptr45 | 0) == ($lftr_limit27 | 0)) {
      __label__ = 19;
      break;
    } else {
      var $v26_011 = $v26_1;
      var $shift_012 = $shift_1;
      var $dp25_013 = $dp25_1;
      var $sp24_014 = $incdec_ptr45;
      __label__ = 15;
      break;
    }
   case 19:
    if (($shift_1 | 0) == 6) {
      var $width99_pre_phi = $width29;
      __label__ = 29;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 20:
    HEAP8[$dp25_1] = $v26_1 & 255;
    var $width99_pre_phi = $width29;
    __label__ = 29;
    break;
   case 21:
    var $width61 = $row_info | 0;
    var $6 = HEAP32[$width61 >> 2];
    if (($6 | 0) == 0) {
      var $width99_pre_phi = $width61;
      __label__ = 29;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 22:
    var $lftr_limit = $row + $6 | 0;
    var $sp55_02 = $row;
    var $dp56_03 = $row;
    var $shift57_04 = 4;
    var $v58_05 = 0;
    __label__ = 23;
    break;
   case 23:
    var $v58_05;
    var $shift57_04;
    var $dp56_03;
    var $sp55_02;
    var $or72 = (HEAP8[$sp55_02] & 15 & 255) << $shift57_04 | $v58_05;
    if (($shift57_04 | 0) == 0) {
      __label__ = 24;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 24:
    var $conv76 = $or72 & 255;
    HEAP8[$dp56_03] = $conv76;
    var $v58_1 = 0;
    var $shift57_1 = 4;
    var $dp56_1 = $dp56_03 + 1 | 0;
    __label__ = 26;
    break;
   case 25:
    var $v58_1 = $or72;
    var $shift57_1 = $shift57_04 - 4 | 0;
    var $dp56_1 = $dp56_03;
    __label__ = 26;
    break;
   case 26:
    var $dp56_1;
    var $shift57_1;
    var $v58_1;
    var $incdec_ptr81 = $sp55_02 + 1 | 0;
    if (($incdec_ptr81 | 0) == ($lftr_limit | 0)) {
      __label__ = 27;
      break;
    } else {
      var $sp55_02 = $incdec_ptr81;
      var $dp56_03 = $dp56_1;
      var $shift57_04 = $shift57_1;
      var $v58_05 = $v58_1;
      __label__ = 23;
      break;
    }
   case 27:
    if (($shift57_1 | 0) == 4) {
      var $width99_pre_phi = $width61;
      __label__ = 29;
      break;
    } else {
      __label__ = 28;
      break;
    }
   case 28:
    HEAP8[$dp56_1] = $v58_1 & 255;
    var $width99_pre_phi = $width61;
    __label__ = 29;
    break;
   case 29:
    var $width99_pre_phi;
    HEAP8[$bit_depth1] = $bit_depth & 255;
    var $mul = (HEAPU8[$channels] & 255) * $bit_depth | 0;
    HEAP8[$row_info + 11 | 0] = $mul & 255;
    var $conv96 = $mul & 255;
    var $9 = HEAP32[$width99_pre_phi >> 2];
    if ($conv96 >>> 0 > 7) {
      __label__ = 30;
      break;
    } else {
      __label__ = 31;
      break;
    }
   case 30:
    var $cond = ($conv96 >>> 3) * $9 | 0;
    __label__ = 32;
    break;
   case 31:
    var $cond = ($conv96 * $9 + 7 | 0) >>> 3;
    __label__ = 32;
    break;
   case 32:
    var $cond;
    HEAP32[$row_info + 4 >> 2] = $cond;
    __label__ = 33;
    break;
   case 33:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_do_pack["X"] = 1;

function _png_do_shift($row_info, $row, $bit_depth) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 32;
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $shift_start = __stackBase__;
    var $shift_dec = __stackBase__ + 16;
    var $0 = HEAPU8[$row_info + 8 | 0];
    if ($0 << 24 >> 24 == 3) {
      __label__ = 38;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $1 = HEAPU8[$row_info + 9 | 0];
    var $conv6 = $1 & 255;
    if (($0 & 2) << 24 >> 24 == 0) {
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $conv7 = HEAPU8[$bit_depth | 0] & 255;
    HEAP32[$shift_start >> 2] = $conv6 - $conv7 | 0;
    HEAP32[$shift_dec >> 2] = $conv7;
    var $conv13 = HEAPU8[$bit_depth + 1 | 0] & 255;
    HEAP32[$shift_start + 4 >> 2] = $conv6 - $conv13 | 0;
    HEAP32[$shift_dec + 4 >> 2] = $conv13;
    var $conv22 = HEAPU8[$bit_depth + 2 | 0] & 255;
    HEAP32[$shift_start + 8 >> 2] = $conv6 - $conv22 | 0;
    HEAP32[$shift_dec + 8 >> 2] = $conv22;
    var $channels_0 = 3;
    __label__ = 5;
    break;
   case 4:
    var $conv31 = HEAPU8[$bit_depth + 3 | 0] & 255;
    HEAP32[$shift_start >> 2] = $conv6 - $conv31 | 0;
    HEAP32[$shift_dec >> 2] = $conv31;
    var $channels_0 = 1;
    __label__ = 5;
    break;
   case 5:
    var $channels_0;
    if (($0 & 4) << 24 >> 24 == 0) {
      var $channels_1 = $channels_0;
      __label__ = 7;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    var $conv45 = HEAPU8[$bit_depth + 4 | 0] & 255;
    HEAP32[$shift_start + ($channels_0 << 2) >> 2] = $conv6 - $conv45 | 0;
    HEAP32[$shift_dec + ($channels_0 << 2) >> 2] = $conv45;
    var $channels_1 = $channels_0 + 1 | 0;
    __label__ = 7;
    break;
   case 7:
    var $channels_1;
    if (($1 & 255) < 8) {
      __label__ = 8;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 8:
    var $7 = HEAP32[$row_info + 4 >> 2];
    var $8 = HEAPU8[$bit_depth + 3 | 0];
    if ($8 << 24 >> 24 == 1 & $1 << 24 >> 24 == 2) {
      var $mask_0 = 85;
      __label__ = 11;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    if ($1 << 24 >> 24 == 4 & $8 << 24 >> 24 == 3) {
      var $mask_0 = 17;
      __label__ = 11;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 10:
    var $mask_0 = 255;
    __label__ = 11;
    break;
   case 11:
    var $mask_0;
    if (($7 | 0) == 0) {
      __label__ = 38;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 12:
    var $arrayidx84 = $shift_start | 0;
    var $arrayidx86 = $shift_dec | 0;
    var $lftr_limit28 = $row + $7 | 0;
    var $bp_025 = $row;
    __label__ = 13;
    break;
   case 13:
    var $bp_025;
    var $9 = HEAPU8[$bp_025];
    HEAP8[$bp_025] = 0;
    var $10 = HEAPU32[$arrayidx84 >> 2];
    if (($10 | 0) > (-HEAP32[$arrayidx86 >> 2] | 0)) {
      __label__ = 14;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 14:
    var $conv94 = $9 & 255;
    var $j_021 = $10;
    var $12 = 0;
    __label__ = 15;
    break;
   case 15:
    var $12;
    var $j_021;
    if (($j_021 | 0) > 0) {
      __label__ = 16;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 16:
    var $storemerge2_in = $12 & 255 | $conv94 << $j_021;
    __label__ = 18;
    break;
   case 17:
    var $storemerge2_in = $12 & 255 | $conv94 >>> ((-$j_021 | 0) >>> 0) & $mask_0;
    __label__ = 18;
    break;
   case 18:
    var $storemerge2_in;
    var $storemerge2 = $storemerge2_in & 255;
    HEAP8[$bp_025] = $storemerge2;
    var $13 = HEAP32[$arrayidx86 >> 2];
    var $sub112 = $j_021 - $13 | 0;
    if (($sub112 | 0) > (-$13 | 0)) {
      var $j_021 = $sub112;
      var $12 = $storemerge2;
      __label__ = 15;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 19:
    var $incdec_ptr = $bp_025 + 1 | 0;
    if (($incdec_ptr | 0) == ($lftr_limit28 | 0)) {
      __label__ = 38;
      break;
    } else {
      var $bp_025 = $incdec_ptr;
      __label__ = 13;
      break;
    }
   case 20:
    var $14 = HEAP32[$row_info >> 2];
    var $cmp12515 = ($14 * $channels_1 | 0) == 0;
    if ($1 << 24 >> 24 == 8) {
      __label__ = 21;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 21:
    if ($cmp12515) {
      __label__ = 38;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 22:
    var $lftr_limit = $row + $channels_1 * $14 | 0;
    var $i123_016 = 0;
    var $bp122_017 = $row;
    __label__ = 25;
    break;
   case 23:
    if ($cmp12515) {
      __label__ = 38;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 24:
    var $16 = $channels_1 * $14 | 0;
    var $bp169_09 = $row;
    var $i170_010 = 0;
    __label__ = 32;
    break;
   case 25:
    var $bp122_017;
    var $i123_016;
    var $rem = ($i123_016 >>> 0) % ($channels_1 >>> 0);
    var $17 = HEAPU8[$bp122_017];
    HEAP8[$bp122_017] = 0;
    var $18 = HEAPU32[$shift_start + ($rem << 2) >> 2];
    var $arrayidx133 = $shift_dec + ($rem << 2) | 0;
    if (($18 | 0) > (-HEAP32[$arrayidx133 >> 2] | 0)) {
      __label__ = 26;
      break;
    } else {
      __label__ = 31;
      break;
    }
   case 26:
    var $conv141 = $17 & 255;
    var $j129_013 = $18;
    var $20 = 0;
    __label__ = 27;
    break;
   case 27:
    var $20;
    var $j129_013;
    if (($j129_013 | 0) > 0) {
      __label__ = 28;
      break;
    } else {
      __label__ = 29;
      break;
    }
   case 28:
    var $storemerge_in = $20 & 255 | $conv141 << $j129_013;
    __label__ = 30;
    break;
   case 29:
    var $storemerge_in = $20 & 255 | $conv141 >>> ((-$j129_013 | 0) >>> 0);
    __label__ = 30;
    break;
   case 30:
    var $storemerge_in;
    var $storemerge = $storemerge_in & 255;
    HEAP8[$bp122_017] = $storemerge;
    var $21 = HEAP32[$arrayidx133 >> 2];
    var $sub162 = $j129_013 - $21 | 0;
    if (($sub162 | 0) > (-$21 | 0)) {
      var $j129_013 = $sub162;
      var $20 = $storemerge;
      __label__ = 27;
      break;
    } else {
      __label__ = 31;
      break;
    }
   case 31:
    var $incdec_ptr166 = $bp122_017 + 1 | 0;
    if (($incdec_ptr166 | 0) == ($lftr_limit | 0)) {
      __label__ = 38;
      break;
    } else {
      var $i123_016 = $i123_016 + 1 | 0;
      var $bp122_017 = $incdec_ptr166;
      __label__ = 25;
      break;
    }
   case 32:
    var $i170_010;
    var $bp169_09;
    var $rem179 = ($i170_010 >>> 0) % ($channels_1 >>> 0);
    var $add_ptr = $bp169_09 + 1 | 0;
    var $add = (HEAPU8[$bp169_09] & 255) << 8 | HEAPU8[$add_ptr] & 255;
    var $24 = HEAP32[$shift_start + ($rem179 << 2) >> 2];
    var $25 = HEAPU32[$shift_dec + ($rem179 << 2) >> 2];
    var $sub1904 = -$25 | 0;
    if (($24 | 0) > ($sub1904 | 0)) {
      var $value_06 = 0;
      var $j181_07 = $24;
      __label__ = 33;
      break;
    } else {
      var $value_0_lcssa = 0;
      __label__ = 37;
      break;
    }
   case 33:
    var $j181_07;
    var $value_06;
    if (($j181_07 | 0) > 0) {
      __label__ = 34;
      break;
    } else {
      __label__ = 35;
      break;
    }
   case 34:
    var $value_1_in = $add << $j181_07 & 65535 | $value_06 & 65535;
    __label__ = 36;
    break;
   case 35:
    var $value_1_in = $add >>> ((-$j181_07 | 0) >>> 0) | $value_06 & 65535;
    __label__ = 36;
    break;
   case 36:
    var $value_1_in;
    var $value_1 = $value_1_in & 65535;
    var $sub218 = $j181_07 - $25 | 0;
    if (($sub218 | 0) > ($sub1904 | 0)) {
      var $value_06 = $value_1;
      var $j181_07 = $sub218;
      __label__ = 33;
      break;
    } else {
      var $value_0_lcssa = $value_1;
      __label__ = 37;
      break;
    }
   case 37:
    var $value_0_lcssa;
    HEAP8[$bp169_09] = ($value_0_lcssa & 65535) >>> 8 & 255;
    HEAP8[$add_ptr] = $value_0_lcssa & 255;
    var $inc229 = $i170_010 + 1 | 0;
    if (($inc229 | 0) == ($16 | 0)) {
      __label__ = 38;
      break;
    } else {
      var $bp169_09 = $bp169_09 + 2 | 0;
      var $i170_010 = $inc229;
      __label__ = 32;
      break;
    }
   case 38:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_do_shift["X"] = 1;

function _png_do_write_swap_alpha($row_info, $row) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $0 = HEAP8[$row_info + 8 | 0];
    if ($0 << 24 >> 24 == 6) {
      __label__ = 2;
      break;
    } else if ($0 << 24 >> 24 == 4) {
      __label__ = 7;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 2:
    var $2 = HEAP32[$row_info >> 2];
    var $cmp616 = ($2 | 0) == 0;
    if (HEAP8[$row_info + 9 | 0] << 24 >> 24 == 8) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    if ($cmp616) {
      __label__ = 12;
      break;
    } else {
      var $i_017 = 0;
      var $sp_019 = $row;
      __label__ = 5;
      break;
    }
   case 4:
    if ($cmp616) {
      __label__ = 12;
      break;
    } else {
      var $i17_012 = 0;
      var $sp15_014 = $row;
      __label__ = 6;
      break;
    }
   case 5:
    var $sp_019;
    var $i_017;
    var $incdec_ptr = $sp_019 + 1 | 0;
    var $3 = HEAP8[$sp_019];
    var $incdec_ptr8 = $sp_019 + 2 | 0;
    var $4 = HEAP8[$incdec_ptr];
    HEAP8[$sp_019] = $4;
    var $incdec_ptr10 = $sp_019 + 3 | 0;
    var $5 = HEAP8[$incdec_ptr8];
    HEAP8[$incdec_ptr] = $5;
    var $6 = HEAP8[$incdec_ptr10];
    HEAP8[$incdec_ptr8] = $6;
    HEAP8[$incdec_ptr10] = $3;
    var $inc = $i_017 + 1 | 0;
    if (($inc | 0) == ($2 | 0)) {
      __label__ = 12;
      break;
    } else {
      var $i_017 = $inc;
      var $sp_019 = $sp_019 + 4 | 0;
      __label__ = 5;
      break;
    }
   case 6:
    var $sp15_014;
    var $i17_012;
    var $incdec_ptr25 = $sp15_014 + 1 | 0;
    var $7 = HEAP8[$sp15_014];
    var $incdec_ptr26 = $sp15_014 + 2 | 0;
    var $8 = HEAP8[$incdec_ptr25];
    var $incdec_ptr28 = $sp15_014 + 3 | 0;
    var $9 = HEAP8[$incdec_ptr26];
    HEAP8[$sp15_014] = $9;
    var $incdec_ptr30 = $sp15_014 + 4 | 0;
    var $10 = HEAP8[$incdec_ptr28];
    HEAP8[$incdec_ptr25] = $10;
    var $incdec_ptr32 = $sp15_014 + 5 | 0;
    var $11 = HEAP8[$incdec_ptr30];
    HEAP8[$incdec_ptr26] = $11;
    var $incdec_ptr34 = $sp15_014 + 6 | 0;
    var $12 = HEAP8[$incdec_ptr32];
    HEAP8[$incdec_ptr28] = $12;
    var $incdec_ptr36 = $sp15_014 + 7 | 0;
    var $13 = HEAP8[$incdec_ptr34];
    HEAP8[$incdec_ptr30] = $13;
    var $14 = HEAP8[$incdec_ptr36];
    HEAP8[$incdec_ptr32] = $14;
    HEAP8[$incdec_ptr34] = $7;
    HEAP8[$incdec_ptr36] = $8;
    var $inc45 = $i17_012 + 1 | 0;
    if (($inc45 | 0) == ($2 | 0)) {
      __label__ = 12;
      break;
    } else {
      var $i17_012 = $inc45;
      var $sp15_014 = $sp15_014 + 8 | 0;
      __label__ = 6;
      break;
    }
   case 7:
    var $16 = HEAP32[$row_info >> 2];
    var $cmp646 = ($16 | 0) == 0;
    if (HEAP8[$row_info + 9 | 0] << 24 >> 24 == 8) {
      __label__ = 8;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 8:
    if ($cmp646) {
      __label__ = 12;
      break;
    } else {
      var $dp59_08 = $row;
      var $i60_09 = 0;
      __label__ = 10;
      break;
    }
   case 9:
    if ($cmp646) {
      __label__ = 12;
      break;
    } else {
      var $dp77_03 = $row;
      var $i78_04 = 0;
      __label__ = 11;
      break;
    }
   case 10:
    var $i60_09;
    var $dp59_08;
    var $incdec_ptr68 = $dp59_08 + 1 | 0;
    var $17 = HEAP8[$dp59_08];
    var $18 = HEAP8[$incdec_ptr68];
    HEAP8[$dp59_08] = $18;
    HEAP8[$incdec_ptr68] = $17;
    var $inc73 = $i60_09 + 1 | 0;
    if (($inc73 | 0) == ($16 | 0)) {
      __label__ = 12;
      break;
    } else {
      var $dp59_08 = $dp59_08 + 2 | 0;
      var $i60_09 = $inc73;
      __label__ = 10;
      break;
    }
   case 11:
    var $i78_04;
    var $dp77_03;
    var $incdec_ptr86 = $dp77_03 + 1 | 0;
    var $19 = HEAP8[$dp77_03];
    var $incdec_ptr88 = $dp77_03 + 2 | 0;
    var $20 = HEAP8[$incdec_ptr86];
    var $incdec_ptr90 = $dp77_03 + 3 | 0;
    var $21 = HEAP8[$incdec_ptr88];
    HEAP8[$dp77_03] = $21;
    var $22 = HEAP8[$incdec_ptr90];
    HEAP8[$incdec_ptr86] = $22;
    HEAP8[$incdec_ptr88] = $19;
    HEAP8[$incdec_ptr90] = $20;
    var $inc99 = $i78_04 + 1 | 0;
    if (($inc99 | 0) == ($16 | 0)) {
      __label__ = 12;
      break;
    } else {
      var $dp77_03 = $dp77_03 + 4 | 0;
      var $i78_04 = $inc99;
      __label__ = 11;
      break;
    }
   case 12:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_do_write_swap_alpha["X"] = 1;

function _png_do_write_invert_alpha($row_info, $row) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $0 = HEAP8[$row_info + 8 | 0];
    if ($0 << 24 >> 24 == 6) {
      __label__ = 2;
      break;
    } else if ($0 << 24 >> 24 == 4) {
      __label__ = 7;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 2:
    var $2 = HEAP32[$row_info >> 2];
    var $cmp614 = ($2 | 0) == 0;
    if (HEAP8[$row_info + 9 | 0] << 24 >> 24 == 8) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    if ($cmp614) {
      __label__ = 12;
      break;
    } else {
      var $i_015 = 0;
      var $sp_016 = $row;
      __label__ = 5;
      break;
    }
   case 4:
    if ($cmp614) {
      __label__ = 12;
      break;
    } else {
      var $i13_011 = 0;
      var $sp11_012 = $row;
      __label__ = 6;
      break;
    }
   case 5:
    var $sp_016;
    var $i_015;
    var $add_ptr = $sp_016 + 3 | 0;
    var $sub = HEAP8[$add_ptr] ^ -1;
    HEAP8[$add_ptr] = $sub;
    var $inc = $i_015 + 1 | 0;
    if (($inc | 0) == ($2 | 0)) {
      __label__ = 12;
      break;
    } else {
      var $i_015 = $inc;
      var $sp_016 = $sp_016 + 4 | 0;
      __label__ = 5;
      break;
    }
   case 6:
    var $sp11_012;
    var $i13_011;
    var $add_ptr20 = $sp11_012 + 6 | 0;
    var $incdec_ptr21 = $sp11_012 + 7 | 0;
    var $sub23 = HEAP8[$add_ptr20] ^ -1;
    HEAP8[$add_ptr20] = $sub23;
    var $sub28 = HEAP8[$incdec_ptr21] ^ -1;
    HEAP8[$incdec_ptr21] = $sub28;
    var $inc32 = $i13_011 + 1 | 0;
    if (($inc32 | 0) == ($2 | 0)) {
      __label__ = 12;
      break;
    } else {
      var $i13_011 = $inc32;
      var $sp11_012 = $sp11_012 + 8 | 0;
      __label__ = 6;
      break;
    }
   case 7:
    var $7 = HEAP32[$row_info >> 2];
    var $cmp515 = ($7 | 0) == 0;
    if (HEAP8[$row_info + 9 | 0] << 24 >> 24 == 8) {
      __label__ = 8;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 8:
    if ($cmp515) {
      __label__ = 12;
      break;
    } else {
      var $sp45_07 = $row;
      var $i47_08 = 0;
      __label__ = 10;
      break;
    }
   case 9:
    if ($cmp515) {
      __label__ = 12;
      break;
    } else {
      var $sp65_02 = $row;
      var $i67_03 = 0;
      __label__ = 11;
      break;
    }
   case 10:
    var $i47_08;
    var $sp45_07;
    var $incdec_ptr54 = $sp45_07 + 1 | 0;
    var $sub58 = HEAP8[$incdec_ptr54] ^ -1;
    HEAP8[$incdec_ptr54] = $sub58;
    var $inc62 = $i47_08 + 1 | 0;
    if (($inc62 | 0) == ($7 | 0)) {
      __label__ = 12;
      break;
    } else {
      var $sp45_07 = $sp45_07 + 2 | 0;
      var $i47_08 = $inc62;
      __label__ = 10;
      break;
    }
   case 11:
    var $i67_03;
    var $sp65_02;
    var $add_ptr74 = $sp65_02 + 2 | 0;
    var $incdec_ptr75 = $sp65_02 + 3 | 0;
    var $sub77 = HEAP8[$add_ptr74] ^ -1;
    HEAP8[$add_ptr74] = $sub77;
    var $sub82 = HEAP8[$incdec_ptr75] ^ -1;
    HEAP8[$incdec_ptr75] = $sub82;
    var $inc86 = $i67_03 + 1 | 0;
    if (($inc86 | 0) == ($7 | 0)) {
      __label__ = 12;
      break;
    } else {
      var $sp65_02 = $sp65_02 + 4 | 0;
      var $i67_03 = $inc86;
      __label__ = 11;
      break;
    }
   case 12:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_do_write_invert_alpha["X"] = 1;

function _png_do_write_intrapixel($row_info, $row) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $0 = HEAP8[$row_info + 8 | 0];
    if (($0 & 2) << 24 >> 24 == 0) {
      __label__ = 11;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $1 = HEAPU32[$row_info >> 2];
    var $2 = HEAP8[$row_info + 9 | 0];
    if ($2 << 24 >> 24 == 8) {
      __label__ = 3;
      break;
    } else if ($2 << 24 >> 24 == 16) {
      __label__ = 7;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 3:
    if ($0 << 24 >> 24 == 6) {
      __label__ = 4;
      break;
    } else if ($0 << 24 >> 24 == 2) {
      var $bytes_per_pixel_0 = 3;
      __label__ = 5;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 4:
    var $bytes_per_pixel_0 = 4;
    __label__ = 5;
    break;
   case 5:
    var $bytes_per_pixel_0;
    if (($1 | 0) == 0) {
      __label__ = 11;
      break;
    } else {
      var $rp_06 = $row;
      var $i_07 = 0;
      __label__ = 6;
      break;
    }
   case 6:
    var $i_07;
    var $rp_06;
    var $4 = HEAP8[$rp_06 + 1 | 0];
    var $sub = HEAP8[$rp_06] - $4 & 255;
    HEAP8[$rp_06] = $sub;
    var $add_ptr22 = $rp_06 + 2 | 0;
    var $sub26 = HEAP8[$add_ptr22] - $4 & 255;
    HEAP8[$add_ptr22] = $sub26;
    var $inc = $i_07 + 1 | 0;
    if (($inc | 0) == ($1 | 0)) {
      __label__ = 11;
      break;
    } else {
      var $rp_06 = $rp_06 + $bytes_per_pixel_0 | 0;
      var $i_07 = $inc;
      __label__ = 6;
      break;
    }
   case 7:
    if ($0 << 24 >> 24 == 6) {
      __label__ = 8;
      break;
    } else if ($0 << 24 >> 24 == 2) {
      var $bytes_per_pixel_1 = 6;
      __label__ = 9;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 8:
    var $bytes_per_pixel_1 = 8;
    __label__ = 9;
    break;
   case 9:
    var $bytes_per_pixel_1;
    if (($1 | 0) == 0) {
      __label__ = 11;
      break;
    } else {
      var $rp37_02 = $row;
      var $i38_03 = 0;
      __label__ = 10;
      break;
    }
   case 10:
    var $i38_03;
    var $rp37_02;
    var $add_ptr58 = $rp37_02 + 1 | 0;
    var $or65 = (HEAPU8[$rp37_02 + 2 | 0] & 255) << 8 | HEAPU8[$rp37_02 + 3 | 0] & 255;
    var $add_ptr66 = $rp37_02 + 4 | 0;
    var $add_ptr69 = $rp37_02 + 5 | 0;
    var $sub72 = ((HEAPU8[$rp37_02] & 255) << 8 | HEAPU8[$add_ptr58] & 255) - $or65 | 0;
    var $sub74 = ((HEAPU8[$add_ptr66] & 255) << 8 | HEAPU8[$add_ptr69] & 255) - $or65 | 0;
    HEAP8[$rp37_02] = $sub72 >>> 8 & 255;
    HEAP8[$add_ptr58] = $sub72 & 255;
    HEAP8[$add_ptr66] = $sub74 >>> 8 & 255;
    HEAP8[$add_ptr69] = $sub74 & 255;
    var $inc89 = $i38_03 + 1 | 0;
    if (($inc89 | 0) == ($1 | 0)) {
      __label__ = 11;
      break;
    } else {
      var $rp37_02 = $rp37_02 + $bytes_per_pixel_1 | 0;
      var $i38_03 = $inc89;
      __label__ = 10;
      break;
    }
   case 11:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_do_write_intrapixel["X"] = 1;

function _png_save_uint_32($buf, $i) {
  HEAP8[$buf] = $i >>> 24 & 255;
  HEAP8[$buf + 1 | 0] = $i >>> 16 & 255;
  HEAP8[$buf + 2 | 0] = $i >>> 8 & 255;
  HEAP8[$buf + 3 | 0] = $i & 255;
  return;
}

function _png_save_int_32($buf, $i) {
  HEAP8[$buf] = $i >>> 24 & 255;
  HEAP8[$buf + 1 | 0] = $i >>> 16 & 255;
  HEAP8[$buf + 2 | 0] = $i >>> 8 & 255;
  HEAP8[$buf + 3 | 0] = $i & 255;
  return;
}

function _png_save_uint_16($buf, $i) {
  HEAP8[$buf] = $i >>> 8 & 255;
  HEAP8[$buf + 1 | 0] = $i & 255;
  return;
}

function _png_write_sig($png_ptr) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 8;
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $png_signature = __stackBase__;
    var $tmpcast = $png_signature;
    HEAP32[$png_signature >> 2] = 1196314761;
    HEAP32[$png_signature + 4 >> 2] = 169478669;
    HEAP32[$png_ptr + 660 >> 2] = 18;
    var $sig_bytes = $png_ptr + 297 | 0;
    var $idxprom = HEAPU8[$sig_bytes] & 255;
    var $arrayidx = $tmpcast + $idxprom | 0;
    var $sub = 8 - $idxprom | 0;
    var $1 = $png_ptr;
    _png_write_data($1, $arrayidx, $sub);
    if ((HEAPU8[$sig_bytes] & 255) < 3) {
      __label__ = 2;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 2:
    var $mode = $png_ptr + 84 | 0;
    var $or = HEAP32[$mode >> 2] | 4096;
    HEAP32[$mode >> 2] = $or;
    __label__ = 3;
    break;
   case 3:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_write_chunk_header($png_ptr, $chunk_name, $length) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 8;
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $buf = __stackBase__;
    if (($png_ptr | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $io_state = $png_ptr + 660 | 0;
    HEAP32[$io_state >> 2] = 34;
    var $arraydecay = $buf | 0;
    _png_save_uint_32($arraydecay, $length);
    var $add_ptr = $buf + 4 | 0;
    _png_save_uint_32($add_ptr, $chunk_name);
    var $0 = $png_ptr;
    _png_write_data($0, $arraydecay, 8);
    HEAP32[$png_ptr + 232 >> 2] = $chunk_name;
    _png_reset_crc($0);
    _png_calculate_crc($0, $add_ptr, 4);
    HEAP32[$io_state >> 2] = 66;
    __label__ = 3;
    break;
   case 3:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_write_chunk_data($png_ptr, $data, $length) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0 | ($data | 0) == 0 | ($length | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $0 = $png_ptr;
    _png_write_data($0, $data, $length);
    _png_calculate_crc($0, $data, $length);
    __label__ = 3;
    break;
   case 3:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_write_chunk_end($png_ptr) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $buf = __stackBase__;
    if (($png_ptr | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    HEAP32[$png_ptr + 660 >> 2] = 130;
    var $arraydecay = $buf | 0;
    var $0 = HEAP32[$png_ptr + 268 >> 2];
    _png_save_uint_32($arraydecay, $0);
    var $1 = $png_ptr;
    _png_write_data($1, $arraydecay, 4);
    __label__ = 3;
    break;
   case 3:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_write_chunk($png_ptr, $chunk_string, $data, $length) {
  var $or14 = (HEAPU8[$chunk_string + 1 | 0] & 255) << 16 | (HEAPU8[$chunk_string] & 255) << 24 | HEAPU8[$chunk_string + 3 | 0] & 255 | (HEAPU8[$chunk_string + 2 | 0] & 255) << 8;
  _png_write_complete_chunk($png_ptr, $or14, $data, $length);
  return;
}

function _png_write_complete_chunk($png_ptr, $chunk_name, $data, $length) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($png_ptr | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    _png_write_chunk_header($png_ptr, $chunk_name, $length);
    _png_write_chunk_data($png_ptr, $data, $length);
    _png_write_chunk_end($png_ptr);
    __label__ = 3;
    break;
   case 3:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_write_IHDR($png_ptr, $width, $height, $bit_depth, $color_type, $compression_type, $filter_type, $interlace_type) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 16;
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $buf = __stackBase__;
    if (($color_type | 0) == 0) {
      __label__ = 2;
      break;
    } else if (($color_type | 0) == 2) {
      __label__ = 5;
      break;
    } else if (($color_type | 0) == 3) {
      __label__ = 8;
      break;
    } else if (($color_type | 0) == 4) {
      __label__ = 11;
      break;
    } else if (($color_type | 0) == 6) {
      __label__ = 14;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 2:
    if (($bit_depth | 0) == 1 || ($bit_depth | 0) == 2 || ($bit_depth | 0) == 4 || ($bit_depth | 0) == 8 || ($bit_depth | 0) == 16) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    HEAP8[$png_ptr + 295 | 0] = 1;
    __label__ = 18;
    break;
   case 4:
    var $0 = $png_ptr;
    _png_error($0, STRING_TABLE.__str1133 | 0);
    __label__ = 18;
    break;
   case 5:
    if (($bit_depth | 0) == 16 || ($bit_depth | 0) == 8) {
      __label__ = 7;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    var $1 = $png_ptr;
    _png_error($1, STRING_TABLE.__str11134 | 0);
    __label__ = 7;
    break;
   case 7:
    HEAP8[$png_ptr + 295 | 0] = 3;
    __label__ = 18;
    break;
   case 8:
    if (($bit_depth | 0) == 1 || ($bit_depth | 0) == 2 || ($bit_depth | 0) == 4 || ($bit_depth | 0) == 8) {
      __label__ = 9;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 9:
    HEAP8[$png_ptr + 295 | 0] = 1;
    __label__ = 18;
    break;
   case 10:
    var $2 = $png_ptr;
    _png_error($2, STRING_TABLE.__str21135 | 0);
    __label__ = 18;
    break;
   case 11:
    if (($bit_depth | 0) == 16 || ($bit_depth | 0) == 8) {
      __label__ = 13;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 12:
    var $3 = $png_ptr;
    _png_error($3, STRING_TABLE.__str31136 | 0);
    __label__ = 13;
    break;
   case 13:
    HEAP8[$png_ptr + 295 | 0] = 2;
    __label__ = 18;
    break;
   case 14:
    if (($bit_depth | 0) == 16 || ($bit_depth | 0) == 8) {
      __label__ = 16;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 15:
    var $4 = $png_ptr;
    _png_error($4, STRING_TABLE.__str41137 | 0);
    __label__ = 16;
    break;
   case 16:
    HEAP8[$png_ptr + 295 | 0] = 4;
    __label__ = 18;
    break;
   case 17:
    var $5 = $png_ptr;
    _png_error($5, STRING_TABLE.__str51138 | 0);
    __label__ = 18;
    break;
   case 18:
    if (($compression_type | 0) == 0) {
      __label__ = 20;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 19:
    var $6 = $png_ptr;
    _png_warning($6, STRING_TABLE.__str61139 | 0);
    __label__ = 20;
    break;
   case 20:
    if ((HEAP32[$png_ptr + 576 >> 2] & 4 | 0) == 0) {
      __label__ = 24;
      break;
    } else {
      __label__ = 21;
      break;
    }
   case 21:
    if ((HEAP32[$png_ptr + 84 >> 2] & 4096 | 0) == 0) {
      __label__ = 22;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 22:
    if (($color_type | 0) == 6 || ($color_type | 0) == 2) {
      __label__ = 23;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 23:
    if (($filter_type | 0) == 64 || ($filter_type | 0) == 0) {
      var $filter_type_addr_0 = $filter_type;
      __label__ = 26;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 24:
    if (($filter_type | 0) == 0) {
      var $filter_type_addr_0 = 0;
      __label__ = 26;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 25:
    var $9 = $png_ptr;
    _png_warning($9, STRING_TABLE.__str71140 | 0);
    var $filter_type_addr_0 = 0;
    __label__ = 26;
    break;
   case 26:
    var $filter_type_addr_0;
    if ($interlace_type >>> 0 > 1) {
      __label__ = 28;
      break;
    } else {
      __label__ = 27;
      break;
    }
   case 27:
    var $interlace_type_addr_0 = $interlace_type & 255;
    __label__ = 29;
    break;
   case 28:
    var $11 = $png_ptr;
    _png_warning($11, STRING_TABLE.__str81141 | 0);
    var $interlace_type_addr_0 = 1;
    __label__ = 29;
    break;
   case 29:
    var $interlace_type_addr_0;
    var $conv = $bit_depth & 255;
    var $bit_depth46 = $png_ptr + 292 | 0;
    HEAP8[$bit_depth46] = $conv;
    var $conv47 = $color_type & 255;
    var $color_type48 = $png_ptr + 291 | 0;
    HEAP8[$color_type48] = $conv47;
    HEAP8[$png_ptr + 288 | 0] = $interlace_type_addr_0;
    var $conv50 = $filter_type_addr_0 & 255;
    HEAP8[$png_ptr + 580 | 0] = $conv50;
    HEAP8[$png_ptr + 612 | 0] = 0;
    HEAP32[$png_ptr + 204 >> 2] = $width;
    HEAP32[$png_ptr + 208 >> 2] = $height;
    var $12 = HEAPU8[$png_ptr + 295 | 0];
    var $mul = ($12 & 255) * $bit_depth | 0;
    HEAP8[$png_ptr + 294 | 0] = $mul & 255;
    var $conv60 = $mul & 255;
    if ($conv60 >>> 0 > 7) {
      __label__ = 30;
      break;
    } else {
      __label__ = 31;
      break;
    }
   case 30:
    var $cond = ($conv60 >>> 3) * $width | 0;
    __label__ = 32;
    break;
   case 31:
    var $cond = ($conv60 * $width + 7 | 0) >>> 3;
    __label__ = 32;
    break;
   case 32:
    var $cond;
    HEAP32[$png_ptr + 220 >> 2] = $cond;
    HEAP32[$png_ptr + 216 >> 2] = $width;
    HEAP8[$png_ptr + 293 | 0] = $conv;
    HEAP8[$png_ptr + 296 | 0] = $12;
    var $arraydecay = $buf | 0;
    _png_save_uint_32($arraydecay, $width);
    var $add_ptr = $buf + 4 | 0;
    _png_save_uint_32($add_ptr, $height);
    HEAP8[$buf + 8 | 0] = $conv;
    HEAP8[$buf + 9 | 0] = $conv47;
    HEAP8[$buf + 10 | 0] = 0;
    HEAP8[$buf + 11 | 0] = $conv50;
    HEAP8[$buf + 12 | 0] = $interlace_type_addr_0;
    _png_write_complete_chunk($png_ptr, 1229472850, $arraydecay, 13);
    HEAP32[$png_ptr + 128 >> 2] = 10;
    HEAP32[$png_ptr + 132 >> 2] = 12;
    HEAP32[$png_ptr + 136 >> 2] = $png_ptr;
    var $do_filter = $png_ptr + 290 | 0;
    var $14 = HEAPU8[$do_filter];
    if ($14 << 24 >> 24 == 0) {
      __label__ = 33;
      break;
    } else {
      var $17 = $14;
      __label__ = 37;
      break;
    }
   case 33:
    if (HEAP8[$color_type48] << 24 >> 24 == 3) {
      __label__ = 35;
      break;
    } else {
      __label__ = 34;
      break;
    }
   case 34:
    if ((HEAPU8[$bit_depth46] & 255) < 8) {
      __label__ = 35;
      break;
    } else {
      __label__ = 36;
      break;
    }
   case 35:
    HEAP8[$do_filter] = 8;
    var $17 = 8;
    __label__ = 37;
    break;
   case 36:
    HEAP8[$do_filter] = -8;
    var $17 = -8;
    __label__ = 37;
    break;
   case 37:
    var $17;
    var $18 = HEAPU32[$png_ptr + 88 >> 2];
    if (($18 & 1 | 0) == 0) {
      __label__ = 38;
      break;
    } else {
      __label__ = 41;
      break;
    }
   case 38:
    var $zlib_strategy = $png_ptr + 180 | 0;
    if ($17 << 24 >> 24 == 8) {
      __label__ = 40;
      break;
    } else {
      __label__ = 39;
      break;
    }
   case 39:
    HEAP32[$zlib_strategy >> 2] = 1;
    __label__ = 41;
    break;
   case 40:
    HEAP32[$zlib_strategy >> 2] = 0;
    __label__ = 41;
    break;
   case 41:
    if (($18 & 2 | 0) == 0) {
      __label__ = 42;
      break;
    } else {
      __label__ = 43;
      break;
    }
   case 42:
    HEAP32[$png_ptr + 164 >> 2] = -1;
    __label__ = 43;
    break;
   case 43:
    if (($18 & 4 | 0) == 0) {
      __label__ = 44;
      break;
    } else {
      __label__ = 45;
      break;
    }
   case 44:
    HEAP32[$png_ptr + 176 >> 2] = 8;
    __label__ = 45;
    break;
   case 45:
    if (($18 & 8 | 0) == 0) {
      __label__ = 46;
      break;
    } else {
      __label__ = 47;
      break;
    }
   case 46:
    HEAP32[$png_ptr + 172 >> 2] = 15;
    __label__ = 47;
    break;
   case 47:
    if (($18 & 16 | 0) == 0) {
      __label__ = 48;
      break;
    } else {
      __label__ = 49;
      break;
    }
   case 48:
    HEAP32[$png_ptr + 168 >> 2] = 8;
    __label__ = 49;
    break;
   case 49:
    if (($18 & 16777216 | 0) == 0) {
      __label__ = 50;
      break;
    } else {
      __label__ = 51;
      break;
    }
   case 50:
    HEAP32[$png_ptr + 200 >> 2] = 0;
    __label__ = 51;
    break;
   case 51:
    if (($18 & 33554432 | 0) == 0) {
      __label__ = 52;
      break;
    } else {
      __label__ = 53;
      break;
    }
   case 52:
    var $19 = HEAP32[$png_ptr + 164 >> 2];
    HEAP32[$png_ptr + 184 >> 2] = $19;
    __label__ = 53;
    break;
   case 53:
    if (($18 & 67108864 | 0) == 0) {
      __label__ = 54;
      break;
    } else {
      __label__ = 55;
      break;
    }
   case 54:
    var $20 = HEAP32[$png_ptr + 176 >> 2];
    HEAP32[$png_ptr + 196 >> 2] = $20;
    __label__ = 55;
    break;
   case 55:
    if (($18 & 134217728 | 0) == 0) {
      __label__ = 56;
      break;
    } else {
      __label__ = 57;
      break;
    }
   case 56:
    var $21 = HEAP32[$png_ptr + 172 >> 2];
    HEAP32[$png_ptr + 192 >> 2] = $21;
    __label__ = 57;
    break;
   case 57:
    if (($18 & 268435456 | 0) == 0) {
      __label__ = 58;
      break;
    } else {
      __label__ = 59;
      break;
    }
   case 58:
    var $22 = HEAP32[$png_ptr + 168 >> 2];
    HEAP32[$png_ptr + 188 >> 2] = $22;
    __label__ = 59;
    break;
   case 59:
    HEAP32[$png_ptr + 160 >> 2] = 0;
    HEAP32[$png_ptr + 84 >> 2] = 1;
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_write_IHDR["X"] = 1;

function _png_write_PLTE($png_ptr, $palette, $num_pal) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $buf = __stackBase__;
    if ((HEAP32[$png_ptr + 576 >> 2] & 1 | 0) == 0) {
      __label__ = 2;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 2:
    if (($num_pal | 0) == 0 | $num_pal >>> 0 > 256) {
      __label__ = 4;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 3:
    if ($num_pal >>> 0 > 256) {
      __label__ = 4;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 4:
    var $2 = $png_ptr;
    if (HEAP8[$png_ptr + 291 | 0] << 24 >> 24 == 3) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    _png_error($2, STRING_TABLE.__str91142 | 0);
    __label__ = 7;
    break;
   case 6:
    _png_warning($2, STRING_TABLE.__str91142 | 0);
    __label__ = 13;
    break;
   case 7:
    if ((HEAP8[$png_ptr + 291 | 0] & 2) << 24 >> 24 == 0) {
      __label__ = 8;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 8:
    var $4 = $png_ptr;
    _png_warning($4, STRING_TABLE.__str101143 | 0);
    __label__ = 13;
    break;
   case 9:
    HEAP16[$png_ptr + 276 >> 1] = $num_pal & 65535;
    var $mul = $num_pal * 3 | 0;
    _png_write_chunk_header($png_ptr, 1347179589, $mul);
    if (($num_pal | 0) == 0) {
      __label__ = 12;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 10:
    var $arrayidx = $buf | 0;
    var $arrayidx15 = $buf + 1 | 0;
    var $arrayidx16 = $buf + 2 | 0;
    var $i_02 = 0;
    var $pal_ptr_03 = $palette;
    __label__ = 11;
    break;
   case 11:
    var $pal_ptr_03;
    var $i_02;
    var $5 = HEAP8[$pal_ptr_03 | 0];
    HEAP8[$arrayidx] = $5;
    var $6 = HEAP8[$pal_ptr_03 + 1 | 0];
    HEAP8[$arrayidx15] = $6;
    var $7 = HEAP8[$pal_ptr_03 + 2 | 0];
    HEAP8[$arrayidx16] = $7;
    _png_write_chunk_data($png_ptr, $arrayidx, 3);
    var $inc = $i_02 + 1 | 0;
    if (($inc | 0) == ($num_pal | 0)) {
      __label__ = 12;
      break;
    } else {
      var $i_02 = $inc;
      var $pal_ptr_03 = $pal_ptr_03 + 3 | 0;
      __label__ = 11;
      break;
    }
   case 12:
    _png_write_chunk_end($png_ptr);
    var $mode = $png_ptr + 84 | 0;
    var $or = HEAP32[$mode >> 2] | 2;
    HEAP32[$mode >> 2] = $or;
    __label__ = 13;
    break;
   case 13:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_write_PLTE["X"] = 1;

function _png_write_IDAT($png_ptr, $data, $length) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $mode = $png_ptr + 84 | 0;
    if ((HEAP32[$mode >> 2] & 4 | 0) == 0) {
      __label__ = 2;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 2:
    if (HEAP8[$png_ptr + 612 | 0] << 24 >> 24 == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 3:
    var $conv2 = HEAPU8[$data] & 255;
    if (($conv2 & 15 | 0) == 8 & ($conv2 & 240) >>> 0 < 113) {
      __label__ = 4;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 4:
    if ($length >>> 0 > 1) {
      __label__ = 5;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 5:
    var $3 = HEAPU32[$png_ptr + 208 >> 2];
    if ($3 >>> 0 < 16384) {
      __label__ = 6;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 6:
    var $4 = HEAPU32[$png_ptr + 204 >> 2];
    if ($4 >>> 0 < 16384) {
      __label__ = 7;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 7:
    var $6 = HEAPU8[$png_ptr + 292 | 0];
    var $mul25 = (((HEAPU8[$png_ptr + 295 | 0] & 255) * $4 * ($6 & 255) + 15 | 0) >>> 3) * $3 | 0;
    if (HEAP8[$png_ptr + 288 | 0] << 24 >> 24 == 0) {
      var $uncompressed_idat_size_0 = $mul25;
      __label__ = 9;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    var $cond = ($6 & 255) < 8 ? 12 : 6;
    var $uncompressed_idat_size_0 = $mul25 + $cond * (($3 + 7 | 0) >>> 3) | 0;
    __label__ = 9;
    break;
   case 9:
    var $uncompressed_idat_size_0;
    var $shr36 = $conv2 >>> 4;
    var $shl = 1 << $shr36 + 7;
    if ($uncompressed_idat_size_0 >>> 0 <= $shl >>> 0 & $shl >>> 0 > 255) {
      var $z_cinfo_05 = $shr36;
      var $half_z_window_size_06 = $shl;
      __label__ = 10;
      break;
    } else {
      var $z_cinfo_0_lcssa = $shr36;
      __label__ = 11;
      break;
    }
   case 10:
    var $half_z_window_size_06;
    var $z_cinfo_05;
    var $dec = $z_cinfo_05 - 1 | 0;
    var $shr42 = $half_z_window_size_06 >>> 1;
    if ($uncompressed_idat_size_0 >>> 0 <= $shr42 >>> 0 & $half_z_window_size_06 >>> 0 > 511) {
      var $z_cinfo_05 = $dec;
      var $half_z_window_size_06 = $shr42;
      __label__ = 10;
      break;
    } else {
      var $z_cinfo_0_lcssa = $dec;
      __label__ = 11;
      break;
    }
   case 11:
    var $z_cinfo_0_lcssa;
    var $or = $z_cinfo_0_lcssa << 4 | 8;
    if (($conv2 | 0) == ($or | 0)) {
      __label__ = 14;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 12:
    HEAP8[$data] = $or & 255;
    var $arrayidx52 = $data + 1 | 0;
    var $and54 = HEAPU8[$arrayidx52] & 255 & 224;
    HEAP8[$arrayidx52] = ($and54 | 31 - (($and54 | $or << 8) >>> 0) % 31) & 255;
    __label__ = 14;
    break;
   case 13:
    var $9 = $png_ptr;
    _png_error($9, STRING_TABLE.__str111144 | 0);
    __label__ = 14;
    break;
   case 14:
    _png_write_complete_chunk($png_ptr, 1229209940, $data, $length);
    var $or65 = HEAP32[$mode >> 2] | 4;
    HEAP32[$mode >> 2] = $or65;
    var $11 = HEAP32[$png_ptr + 152 >> 2];
    HEAP32[$png_ptr + 108 >> 2] = $11;
    var $12 = HEAP32[$png_ptr + 156 >> 2];
    HEAP32[$png_ptr + 112 >> 2] = $12;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_write_IDAT["X"] = 1;

function _png_write_IEND($png_ptr) {
  _png_write_complete_chunk($png_ptr, 1229278788, 0, 0);
  var $mode = $png_ptr + 84 | 0;
  var $or = HEAP32[$mode >> 2] | 16;
  HEAP32[$mode >> 2] = $or;
  return;
}

function _png_write_gAMA_fixed($png_ptr, $file_gamma) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var $arraydecay = __stackBase__ | 0;
  _png_save_uint_32($arraydecay, $file_gamma);
  _png_write_complete_chunk($png_ptr, 1732332865, $arraydecay, 4);
  STACKTOP = __stackBase__;
  return;
}

function _png_write_sRGB($png_ptr, $srgb_intent) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $buf = __stackBase__;
    if (($srgb_intent | 0) > 3) {
      __label__ = 2;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 2:
    var $0 = $png_ptr;
    _png_warning($0, STRING_TABLE.__str121145 | 0);
    __label__ = 3;
    break;
   case 3:
    var $arrayidx = $buf | 0;
    HEAP8[$arrayidx] = $srgb_intent & 255;
    _png_write_complete_chunk($png_ptr, 1934772034, $arrayidx, 1);
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_write_iCCP($png_ptr, $name, $profile, $profile_len) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 24;
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $new_name = __stackBase__;
    var $comp = __stackBase__ + 4;
    HEAP32[$comp + 8 >> 2] = 0;
    HEAP32[$comp + 12 >> 2] = 0;
    HEAP32[$comp + 16 >> 2] = 0;
    HEAP32[$comp >> 2] = 0;
    HEAP32[$comp + 4 >> 2] = 0;
    var $call = _png_check_keyword($png_ptr, $name, $new_name);
    if (($call | 0) == 0) {
      __label__ = 14;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $profile_len_addr_0 = ($profile | 0) == 0 ? 0 : $profile_len;
    if (($profile_len_addr_0 | 0) > 3) {
      __label__ = 3;
      break;
    } else {
      var $embedded_profile_len_02 = 0;
      __label__ = 5;
      break;
    }
   case 3:
    var $or17 = (HEAPU8[$profile + 1 | 0] & 255) << 16 | (HEAPU8[$profile] & 255) << 24 | HEAPU8[$profile + 3 | 0] & 255 | (HEAPU8[$profile + 2 | 0] & 255) << 8;
    if (($or17 | 0) < 0) {
      __label__ = 4;
      break;
    } else {
      var $embedded_profile_len_02 = $or17;
      __label__ = 5;
      break;
    }
   case 4:
    var $4 = $png_ptr;
    _png_warning($4, STRING_TABLE.__str141147 | 0);
    var $5 = HEAP32[$new_name >> 2];
    var $6 = $png_ptr;
    _png_free($6, $5);
    __label__ = 14;
    break;
   case 5:
    var $embedded_profile_len_02;
    if (($profile_len_addr_0 | 0) < ($embedded_profile_len_02 | 0)) {
      __label__ = 6;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 6:
    var $7 = $png_ptr;
    _png_warning($7, STRING_TABLE.__str151148 | 0);
    var $8 = HEAP32[$new_name >> 2];
    var $9 = $png_ptr;
    _png_free($9, $8);
    __label__ = 14;
    break;
   case 7:
    if (($profile_len_addr_0 | 0) > ($embedded_profile_len_02 | 0)) {
      __label__ = 8;
      break;
    } else {
      var $profile_len_addr_1 = $profile_len_addr_0;
      __label__ = 9;
      break;
    }
   case 8:
    var $10 = $png_ptr;
    _png_warning($10, STRING_TABLE.__str161149 | 0);
    var $profile_len_addr_1 = $embedded_profile_len_02;
    __label__ = 9;
    break;
   case 9:
    var $profile_len_addr_1;
    if (($profile_len_addr_1 | 0) == 0) {
      var $profile_len_addr_2 = 0;
      __label__ = 11;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 10:
    var $call32 = _png_text_compress($png_ptr, $profile, $profile_len_addr_1, 0, $comp);
    var $profile_len_addr_2 = $call32;
    __label__ = 11;
    break;
   case 11:
    var $profile_len_addr_2;
    var $add = $call + 2 | 0;
    var $add34 = $add + $profile_len_addr_2 | 0;
    _png_write_chunk_header($png_ptr, 1766015824, $add34);
    var $11 = HEAP32[$new_name >> 2];
    HEAP8[$call + ($11 + 1) | 0] = 0;
    _png_write_chunk_data($png_ptr, $11, $add);
    if (($profile_len_addr_2 | 0) == 0) {
      __label__ = 13;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 12:
    _png_write_compressed_data_out($png_ptr, $comp, $profile_len_addr_2);
    __label__ = 13;
    break;
   case 13:
    _png_write_chunk_end($png_ptr);
    var $12 = $png_ptr;
    _png_free($12, $11);
    __label__ = 14;
    break;
   case 14:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_write_iCCP["X"] = 1;

function _png_check_keyword($png_ptr, $key, $new_key) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 256;
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $p = __stackBase__;
    HEAP32[$new_key >> 2] = 0;
    if (($key | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $call = _strlen($key);
    if (($call | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $0 = $png_ptr;
    _png_warning($0, STRING_TABLE.__str261159 | 0);
    var $retval_0 = 0;
    __label__ = 30;
    break;
   case 4:
    var $add = $call + 2 | 0;
    var $1 = $png_ptr;
    var $call2 = _png_malloc_warn($1, $add);
    HEAP32[$new_key >> 2] = $call2;
    if (($call2 | 0) == 0) {
      __label__ = 7;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $2 = HEAP8[$key];
    if ($2 << 24 >> 24 == 0) {
      var $dp_0_lcssa = $call2;
      __label__ = 11;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    var $arraydecay = $p | 0;
    var $3 = $png_ptr;
    var $ikp_012 = $key;
    var $dp_013 = $call2;
    var $5 = $2;
    __label__ = 8;
    break;
   case 7:
    var $4 = $png_ptr;
    _png_warning($4, STRING_TABLE.__str271160 | 0);
    var $retval_0 = 0;
    __label__ = 30;
    break;
   case 8:
    var $5;
    var $dp_013;
    var $ikp_012;
    if (($5 & 255) < 32 | ($5 - 127 & 255 & 255) < 34) {
      __label__ = 9;
      break;
    } else {
      var $storemerge = $5;
      __label__ = 10;
      break;
    }
   case 9:
    _png_warning_parameter_unsigned($arraydecay, 1, 4, $5 & 255);
    _png_formatted_warning($3, $arraydecay, STRING_TABLE.__str281161 | 0);
    var $storemerge = 32;
    __label__ = 10;
    break;
   case 10:
    var $storemerge;
    HEAP8[$dp_013] = $storemerge;
    var $incdec_ptr = $ikp_012 + 1 | 0;
    var $incdec_ptr22 = $dp_013 + 1 | 0;
    var $7 = HEAPU8[$incdec_ptr];
    if ($7 << 24 >> 24 == 0) {
      var $dp_0_lcssa = $incdec_ptr22;
      __label__ = 11;
      break;
    } else {
      var $ikp_012 = $incdec_ptr;
      var $dp_013 = $incdec_ptr22;
      var $5 = $7;
      __label__ = 8;
      break;
    }
   case 11:
    var $dp_0_lcssa;
    HEAP8[$dp_0_lcssa] = 0;
    var $add_ptr23 = HEAP32[$new_key >> 2] + ($call - 1) | 0;
    if (HEAP8[$add_ptr23] << 24 >> 24 == 32) {
      __label__ = 12;
      break;
    } else {
      var $key_len_1 = $call;
      __label__ = 14;
      break;
    }
   case 12:
    var $10 = $png_ptr;
    _png_warning($10, STRING_TABLE.__str291162 | 0);
    if (HEAP8[$add_ptr23] << 24 >> 24 == 32) {
      var $kp_08 = $add_ptr23;
      var $key_len_09 = $call;
      __label__ = 13;
      break;
    } else {
      var $key_len_1 = $call;
      __label__ = 14;
      break;
    }
   case 13:
    var $key_len_09;
    var $kp_08;
    var $incdec_ptr31 = $kp_08 - 1 | 0;
    HEAP8[$kp_08] = 0;
    var $dec = $key_len_09 - 1 | 0;
    if (HEAP8[$incdec_ptr31] << 24 >> 24 == 32) {
      var $kp_08 = $incdec_ptr31;
      var $key_len_09 = $dec;
      __label__ = 13;
      break;
    } else {
      var $key_len_1 = $dec;
      __label__ = 14;
      break;
    }
   case 14:
    var $key_len_1;
    var $13 = HEAP32[$new_key >> 2];
    var $14 = HEAP8[$13];
    if ($14 << 24 >> 24 == 32) {
      __label__ = 15;
      break;
    } else {
      var $key_len_3 = $key_len_1;
      var $kp_2 = $13;
      var $18 = $14;
      __label__ = 17;
      break;
    }
   case 15:
    var $15 = $png_ptr;
    _png_warning($15, STRING_TABLE.__str301163 | 0);
    var $16 = HEAP8[$13];
    if ($16 << 24 >> 24 == 32) {
      var $kp_14 = $13;
      var $key_len_25 = $key_len_1;
      __label__ = 16;
      break;
    } else {
      var $key_len_3 = $key_len_1;
      var $kp_2 = $13;
      var $18 = $16;
      __label__ = 17;
      break;
    }
   case 16:
    var $key_len_25;
    var $kp_14;
    var $incdec_ptr42 = $kp_14 + 1 | 0;
    var $dec43 = $key_len_25 - 1 | 0;
    var $17 = HEAP8[$incdec_ptr42];
    if ($17 << 24 >> 24 == 32) {
      var $kp_14 = $incdec_ptr42;
      var $key_len_25 = $dec43;
      __label__ = 16;
      break;
    } else {
      var $key_len_3 = $dec43;
      var $kp_2 = $incdec_ptr42;
      var $18 = $17;
      __label__ = 17;
      break;
    }
   case 17:
    var $18;
    var $kp_2;
    var $key_len_3;
    var $kwarn_0 = 0;
    var $kflag_0 = 0;
    var $dp_1 = HEAP32[$new_key >> 2];
    var $key_len_4 = $key_len_3;
    var $kp_3 = $kp_2;
    var $_pr = $18;
    __label__ = 18;
    break;
   case 18:
    var $_pr;
    var $kp_3;
    var $key_len_4;
    var $dp_1;
    var $kflag_0;
    var $kwarn_0;
    if ($_pr << 24 >> 24 == 32) {
      __label__ = 19;
      break;
    } else if ($_pr << 24 >> 24 == 0) {
      __label__ = 24;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 19:
    if (($kflag_0 | 0) == 0) {
      __label__ = 20;
      break;
    } else {
      __label__ = 21;
      break;
    }
   case 20:
    HEAP8[$dp_1] = 32;
    var $kwarn_1 = $kwarn_0;
    var $kflag_1 = 1;
    var $dp_2 = $dp_1 + 1 | 0;
    var $key_len_5 = $key_len_4;
    __label__ = 23;
    break;
   case 21:
    var $kwarn_1 = 1;
    var $kflag_1 = $kflag_0;
    var $dp_2 = $dp_1;
    var $key_len_5 = $key_len_4 - 1 | 0;
    __label__ = 23;
    break;
   case 22:
    HEAP8[$dp_1] = $_pr;
    var $kwarn_1 = $kwarn_0;
    var $kflag_1 = 0;
    var $dp_2 = $dp_1 + 1 | 0;
    var $key_len_5 = $key_len_4;
    __label__ = 23;
    break;
   case 23:
    var $key_len_5;
    var $dp_2;
    var $kflag_1;
    var $kwarn_1;
    var $incdec_ptr70 = $kp_3 + 1 | 0;
    var $_pre = HEAP8[$incdec_ptr70];
    var $kwarn_0 = $kwarn_1;
    var $kflag_0 = $kflag_1;
    var $dp_1 = $dp_2;
    var $key_len_4 = $key_len_5;
    var $kp_3 = $incdec_ptr70;
    var $_pr = $_pre;
    __label__ = 18;
    break;
   case 24:
    HEAP8[$dp_1] = 0;
    if (($kwarn_0 | 0) == 0) {
      __label__ = 26;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 25:
    var $20 = $png_ptr;
    _png_warning($20, STRING_TABLE.__str311164 | 0);
    __label__ = 26;
    break;
   case 26:
    if (($key_len_4 | 0) == 0) {
      __label__ = 27;
      break;
    } else {
      __label__ = 28;
      break;
    }
   case 27:
    var $21 = HEAP32[$new_key >> 2];
    _png_free($1, $21);
    var $22 = $png_ptr;
    _png_warning($22, STRING_TABLE.__str321165 | 0);
    var $retval_0 = 0;
    __label__ = 30;
    break;
   case 28:
    if ($key_len_4 >>> 0 > 79) {
      __label__ = 29;
      break;
    } else {
      var $retval_0 = $key_len_4;
      __label__ = 30;
      break;
    }
   case 29:
    var $23 = $png_ptr;
    _png_warning($23, STRING_TABLE.__str331166 | 0);
    HEAP8[HEAP32[$new_key >> 2] + 79 | 0] = 0;
    var $retval_0 = 79;
    __label__ = 30;
    break;
   case 30:
    var $retval_0;
    STACKTOP = __stackBase__;
    return $retval_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_check_keyword["X"] = 1;

function _png_text_compress($png_ptr, $text, $text_len, $compression, $comp) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 256;
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $p = __stackBase__;
    var $num_output_ptr = $comp + 8 | 0;
    HEAP32[$num_output_ptr >> 2] = 0;
    var $max_output_ptr = $comp + 12 | 0;
    HEAP32[$max_output_ptr >> 2] = 0;
    var $output_ptr = $comp + 16 | 0;
    HEAP32[$output_ptr >> 2] = 0;
    var $input = $comp | 0;
    HEAP32[$input >> 2] = 0;
    HEAP32[$comp + 4 >> 2] = $text_len;
    if (($compression | 0) == -1) {
      __label__ = 2;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 2:
    HEAP32[$input >> 2] = $text;
    var $retval_0 = $text_len;
    __label__ = 29;
    break;
   case 3:
    if (($compression | 0) > 2) {
      __label__ = 5;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $_pre_phi = $png_ptr;
    __label__ = 6;
    break;
   case 5:
    var $arraydecay = $p | 0;
    _png_warning_parameter_signed($arraydecay, 1, 1, $compression);
    var $0 = $png_ptr;
    _png_formatted_warning($0, $arraydecay, STRING_TABLE.__str611194 | 0);
    var $_pre_phi = $0;
    __label__ = 6;
    break;
   case 6:
    var $_pre_phi;
    _png_zlib_claim($png_ptr, 2);
    var $zstream = $png_ptr + 96 | 0;
    var $avail_in = $png_ptr + 100 | 0;
    HEAP32[$avail_in >> 2] = $text_len;
    HEAP32[$zstream >> 2] = $text;
    var $zbuf_size = $png_ptr + 156 | 0;
    var $1 = HEAP32[$zbuf_size >> 2];
    var $avail_out = $png_ptr + 112 | 0;
    HEAP32[$avail_out >> 2] = $1;
    var $zbuf = $png_ptr + 152 | 0;
    var $2 = HEAP32[$zbuf >> 2];
    var $next_out = $png_ptr + 108 | 0;
    HEAP32[$next_out >> 2] = $2;
    var $3 = $zstream;
    var $4 = $png_ptr;
    var $msg = $png_ptr + 120 | 0;
    __label__ = 7;
    break;
   case 7:
    var $call = _deflate($3, 0);
    if (($call | 0) == 0) {
      __label__ = 11;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    var $5 = HEAP32[$msg >> 2];
    if (($5 | 0) == 0) {
      __label__ = 10;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    _png_error($_pre_phi, $5);
    __label__ = 11;
    break;
   case 10:
    _png_error($_pre_phi, STRING_TABLE.__str401173 | 0);
    __label__ = 11;
    break;
   case 11:
    if ((HEAP32[$avail_out >> 2] | 0) == 0) {
      __label__ = 12;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 12:
    var $7 = HEAP32[$num_output_ptr >> 2];
    var $8 = HEAP32[$max_output_ptr >> 2];
    if (($7 | 0) < ($8 | 0)) {
      __label__ = 15;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 13:
    var $add = $7 + 4 | 0;
    HEAP32[$max_output_ptr >> 2] = $add;
    var $9 = HEAP32[$output_ptr >> 2];
    var $cmp30 = ($9 | 0) == 0;
    var $mul40 = $add << 2;
    var $call41 = _png_malloc($4, $mul40);
    var $10 = $call41;
    HEAP32[$output_ptr >> 2] = $10;
    if ($cmp30) {
      __label__ = 15;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 14:
    var $11 = $9;
    var $mul37 = $8 << 2;
    _memcpy($call41, $11, $mul37, 1);
    _png_free($4, $11);
    __label__ = 15;
    break;
   case 15:
    var $12 = HEAP32[$zbuf_size >> 2];
    var $call46 = _png_malloc($4, $12);
    var $arrayidx = HEAP32[$output_ptr >> 2] + (HEAP32[$num_output_ptr >> 2] << 2) | 0;
    HEAP32[$arrayidx >> 2] = $call46;
    var $17 = HEAP32[HEAP32[$output_ptr >> 2] + (HEAP32[$num_output_ptr >> 2] << 2) >> 2];
    var $18 = HEAP32[$zbuf >> 2];
    var $19 = HEAP32[$zbuf_size >> 2];
    _memcpy($17, $18, $19, 1);
    var $inc = HEAP32[$num_output_ptr >> 2] + 1 | 0;
    HEAP32[$num_output_ptr >> 2] = $inc;
    var $21 = HEAP32[$zbuf_size >> 2];
    HEAP32[$avail_out >> 2] = $21;
    var $22 = HEAP32[$zbuf >> 2];
    HEAP32[$next_out >> 2] = $22;
    __label__ = 16;
    break;
   case 16:
    if ((HEAP32[$avail_in >> 2] | 0) == 0) {
      __label__ = 17;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 17:
    var $call67 = _deflate($3, 4);
    if (($call67 | 0) == 0) {
      __label__ = 18;
      break;
    } else if (($call67 | 0) == 1) {
      __label__ = 27;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 18:
    if ((HEAP32[$avail_out >> 2] | 0) == 0) {
      __label__ = 19;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 19:
    var $25 = HEAP32[$num_output_ptr >> 2];
    var $26 = HEAP32[$max_output_ptr >> 2];
    if (($25 | 0) < ($26 | 0)) {
      __label__ = 22;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 20:
    var $add81 = $25 + 4 | 0;
    HEAP32[$max_output_ptr >> 2] = $add81;
    var $27 = HEAP32[$output_ptr >> 2];
    var $cmp84 = ($27 | 0) == 0;
    var $mul96 = $add81 << 2;
    var $call97 = _png_malloc($4, $mul96);
    var $28 = $call97;
    HEAP32[$output_ptr >> 2] = $28;
    if ($cmp84) {
      __label__ = 22;
      break;
    } else {
      __label__ = 21;
      break;
    }
   case 21:
    var $29 = $27;
    var $mul93 = $26 << 2;
    _memcpy($call97, $29, $mul93, 1);
    _png_free($4, $29);
    __label__ = 22;
    break;
   case 22:
    var $30 = HEAP32[$zbuf_size >> 2];
    var $call102 = _png_malloc($4, $30);
    var $arrayidx105 = HEAP32[$output_ptr >> 2] + (HEAP32[$num_output_ptr >> 2] << 2) | 0;
    HEAP32[$arrayidx105 >> 2] = $call102;
    var $35 = HEAP32[HEAP32[$output_ptr >> 2] + (HEAP32[$num_output_ptr >> 2] << 2) >> 2];
    var $36 = HEAP32[$zbuf >> 2];
    var $37 = HEAP32[$zbuf_size >> 2];
    _memcpy($35, $36, $37, 1);
    var $inc112 = HEAP32[$num_output_ptr >> 2] + 1 | 0;
    HEAP32[$num_output_ptr >> 2] = $inc112;
    var $39 = HEAP32[$zbuf_size >> 2];
    HEAP32[$avail_out >> 2] = $39;
    var $40 = HEAP32[$zbuf >> 2];
    HEAP32[$next_out >> 2] = $40;
    __label__ = 26;
    break;
   case 23:
    var $41 = HEAP32[$msg >> 2];
    if (($41 | 0) == 0) {
      __label__ = 25;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 24:
    _png_error($_pre_phi, $41);
    __label__ = 26;
    break;
   case 25:
    _png_error($_pre_phi, STRING_TABLE.__str401173 | 0);
    __label__ = 26;
    break;
   case 26:
    if (($call67 | 0) == 1) {
      __label__ = 27;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 27:
    var $42 = HEAPU32[$zbuf_size >> 2];
    var $mul138 = HEAP32[$num_output_ptr >> 2] * $42 | 0;
    var $44 = HEAPU32[$avail_out >> 2];
    if ($44 >>> 0 < $42 >>> 0) {
      __label__ = 28;
      break;
    } else {
      var $retval_0 = $mul138;
      __label__ = 29;
      break;
    }
   case 28:
    var $retval_0 = $mul138 + $42 - $44 | 0;
    __label__ = 29;
    break;
   case 29:
    var $retval_0;
    STACKTOP = __stackBase__;
    return $retval_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_text_compress["X"] = 1;

function _png_write_compressed_data_out($png_ptr, $comp, $data_len) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $0 = HEAP32[$comp >> 2];
    if (($0 | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    _png_write_chunk_data($png_ptr, $0, $data_len);
    __label__ = 25;
    break;
   case 3:
    if ($data_len >>> 0 > 1) {
      __label__ = 4;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 4:
    var $1 = HEAPU32[$comp + 4 >> 2];
    if ($1 >>> 0 < 16384) {
      __label__ = 5;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 5:
    if (HEAPU32[$png_ptr + 156 >> 2] >>> 0 > 1) {
      __label__ = 6;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 6:
    var $tobool6 = (HEAP32[$comp + 8 >> 2] | 0) == 0;
    if ($tobool6) {
      __label__ = 8;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    var $z_cmf_0_in_in_in = HEAP32[$comp + 16 >> 2];
    __label__ = 9;
    break;
   case 8:
    var $z_cmf_0_in_in_in = $png_ptr + 152 | 0;
    __label__ = 9;
    break;
   case 9:
    var $z_cmf_0_in_in_in;
    var $z_cmf_0 = HEAPU8[HEAP32[$z_cmf_0_in_in_in >> 2]] & 255;
    if (($z_cmf_0 & 15 | 0) == 8 & ($z_cmf_0 & 240) >>> 0 < 113) {
      __label__ = 10;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 10:
    var $shr = $z_cmf_0 >>> 4;
    var $shl = 1 << $shr + 7;
    if ($1 >>> 0 <= $shl >>> 0 & $shl >>> 0 > 255) {
      var $z_cinfo_07 = $shr;
      var $half_z_window_size_08 = $shl;
      __label__ = 11;
      break;
    } else {
      var $z_cinfo_0_lcssa = $shr;
      __label__ = 12;
      break;
    }
   case 11:
    var $half_z_window_size_08;
    var $z_cinfo_07;
    var $dec = $z_cinfo_07 - 1 | 0;
    var $shr24 = $half_z_window_size_08 >>> 1;
    if ($1 >>> 0 <= $shr24 >>> 0 & $half_z_window_size_08 >>> 0 > 511) {
      var $z_cinfo_07 = $dec;
      var $half_z_window_size_08 = $shr24;
      __label__ = 11;
      break;
    } else {
      var $z_cinfo_0_lcssa = $dec;
      __label__ = 12;
      break;
    }
   case 12:
    var $z_cinfo_0_lcssa;
    var $or = $z_cinfo_0_lcssa << 4 | 8;
    if ($tobool6) {
      __label__ = 15;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 13:
    var $output_ptr30 = $comp + 16 | 0;
    var $6 = HEAPU32[HEAP32[$output_ptr30 >> 2] >> 2];
    if ((HEAPU8[$6] & 255 | 0) == ($or | 0)) {
      __label__ = 17;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 14:
    HEAP8[$6] = $or & 255;
    var $arrayidx43 = HEAP32[HEAP32[$output_ptr30 >> 2] >> 2] + 1 | 0;
    var $and45 = HEAPU8[$arrayidx43] & 255 & 224;
    HEAP8[$arrayidx43] = ($and45 | 31 - (($and45 | $or << 8) >>> 0) % 31) & 255;
    __label__ = 17;
    break;
   case 15:
    var $zbuf58 = $png_ptr + 152 | 0;
    HEAP8[HEAP32[$zbuf58 >> 2]] = $or & 255;
    var $arrayidx61 = HEAP32[$zbuf58 >> 2] + 1 | 0;
    var $and63 = HEAPU8[$arrayidx61] & 255 & 224;
    HEAP8[$arrayidx61] = ($and63 | 31 - (($and63 | $or << 8) >>> 0) % 31) & 255;
    __label__ = 17;
    break;
   case 16:
    var $14 = $png_ptr;
    _png_error($14, STRING_TABLE.__str601193 | 0);
    __label__ = 17;
    break;
   case 17:
    var $num_output_ptr76 = $comp + 8 | 0;
    if ((HEAP32[$num_output_ptr76 >> 2] | 0) > 0) {
      __label__ = 18;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 18:
    var $output_ptr79 = $comp + 16 | 0;
    var $zbuf_size81 = $png_ptr + 156 | 0;
    var $16 = $png_ptr;
    var $i_03 = 0;
    __label__ = 19;
    break;
   case 19:
    var $i_03;
    var $18 = HEAP32[HEAP32[$output_ptr79 >> 2] + ($i_03 << 2) >> 2];
    var $19 = HEAP32[$zbuf_size81 >> 2];
    _png_write_chunk_data($png_ptr, $18, $19);
    var $21 = HEAP32[HEAP32[$output_ptr79 >> 2] + ($i_03 << 2) >> 2];
    _png_free($16, $21);
    var $inc = $i_03 + 1 | 0;
    if (($inc | 0) < (HEAP32[$num_output_ptr76 >> 2] | 0)) {
      var $i_03 = $inc;
      __label__ = 19;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 20:
    if ((HEAP32[$comp + 12 >> 2] | 0) == 0) {
      __label__ = 22;
      break;
    } else {
      __label__ = 21;
      break;
    }
   case 21:
    var $25 = HEAP32[$comp + 16 >> 2];
    var $26 = $png_ptr;
    _png_free($26, $25);
    __label__ = 22;
    break;
   case 22:
    var $27 = HEAPU32[$png_ptr + 112 >> 2];
    var $28 = HEAPU32[$png_ptr + 156 >> 2];
    if ($27 >>> 0 < $28 >>> 0) {
      __label__ = 23;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 23:
    var $29 = HEAP32[$png_ptr + 152 >> 2];
    var $sub97 = $28 - $27 | 0;
    _png_write_chunk_data($png_ptr, $29, $sub97);
    __label__ = 24;
    break;
   case 24:
    _png_zlib_release($png_ptr);
    __label__ = 25;
    break;
   case 25:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_write_compressed_data_out["X"] = 1;

function _png_write_sPLT($png_ptr, $spalette) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 16;
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $new_name = __stackBase__;
    var $entrybuf = __stackBase__ + 4;
    var $depth = $spalette + 4 | 0;
    var $cond = HEAP8[$depth] << 24 >> 24 == 8 ? 6 : 10;
    var $nentries = $spalette + 12 | 0;
    var $1 = HEAP32[$nentries >> 2];
    var $2 = HEAP32[$spalette >> 2];
    var $call = _png_check_keyword($png_ptr, $2, $new_name);
    if (($call | 0) == 0) {
      __label__ = 9;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $add4 = $cond * $1 + 2 + $call | 0;
    _png_write_chunk_header($png_ptr, 1934642260, $add4);
    var $3 = HEAPU32[$new_name >> 2];
    var $add5 = $call + 1 | 0;
    _png_write_chunk_data($png_ptr, $3, $add5);
    _png_write_chunk_data($png_ptr, $depth, 1);
    var $entries = $spalette + 8 | 0;
    if ((HEAP32[$nentries >> 2] | 0) > 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 3:
    var $arrayidx = $entrybuf | 0;
    var $arrayidx18 = $entrybuf + 1 | 0;
    var $arrayidx20 = $entrybuf + 2 | 0;
    var $arrayidx22 = $entrybuf + 3 | 0;
    var $add_ptr23 = $entrybuf + 4 | 0;
    var $add_ptr38 = $entrybuf + 6 | 0;
    var $add_ptr42 = $entrybuf + 8 | 0;
    var $ep_03 = HEAP32[$entries >> 2];
    __label__ = 4;
    break;
   case 4:
    var $ep_03;
    var $7 = HEAPU16[$ep_03 >> 1];
    if (HEAP8[$depth] << 24 >> 24 == 8) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    HEAP8[$arrayidx] = $7 & 255;
    HEAP8[$arrayidx18] = HEAP16[$ep_03 + 2 >> 1] & 255;
    HEAP8[$arrayidx20] = HEAP16[$ep_03 + 4 >> 1] & 255;
    HEAP8[$arrayidx22] = HEAP16[$ep_03 + 6 >> 1] & 255;
    var $conv24 = HEAPU16[$ep_03 + 8 >> 1] & 65535;
    _png_save_uint_16($add_ptr23, $conv24);
    __label__ = 7;
    break;
   case 6:
    var $conv28 = $7 & 65535;
    _png_save_uint_16($arrayidx, $conv28);
    var $conv32 = HEAPU16[$ep_03 + 2 >> 1] & 65535;
    _png_save_uint_16($arrayidx20, $conv32);
    var $conv36 = HEAPU16[$ep_03 + 4 >> 1] & 65535;
    _png_save_uint_16($add_ptr23, $conv36);
    var $conv40 = HEAPU16[$ep_03 + 6 >> 1] & 65535;
    _png_save_uint_16($add_ptr38, $conv40);
    var $conv44 = HEAPU16[$ep_03 + 8 >> 1] & 65535;
    _png_save_uint_16($add_ptr42, $conv44);
    __label__ = 7;
    break;
   case 7:
    _png_write_chunk_data($png_ptr, $arrayidx, $cond);
    var $incdec_ptr = $ep_03 + 10 | 0;
    if ($incdec_ptr >>> 0 < (HEAP32[$entries >> 2] + HEAP32[$nentries >> 2] * 10 | 0) >>> 0) {
      var $ep_03 = $incdec_ptr;
      __label__ = 4;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    _png_write_chunk_end($png_ptr);
    var $18 = $png_ptr;
    _png_free($18, $3);
    __label__ = 9;
    break;
   case 9:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_write_sPLT["X"] = 1;

function _png_write_sBIT($png_ptr, $sbit, $color_type) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $buf = __stackBase__;
    if (($color_type & 2 | 0) == 0) {
      __label__ = 9;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    if (($color_type | 0) == 3) {
      var $cond = 8;
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $cond = HEAPU8[$png_ptr + 293 | 0] & 255;
    __label__ = 4;
    break;
   case 4:
    var $cond;
    var $1 = HEAPU8[$sbit | 0];
    if ($1 << 24 >> 24 == 0 | ($1 & 255) >>> 0 > $cond >>> 0) {
      __label__ = 7;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $2 = HEAPU8[$sbit + 1 | 0];
    if ($2 << 24 >> 24 == 0 | ($2 & 255) >>> 0 > $cond >>> 0) {
      __label__ = 7;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    var $3 = HEAPU8[$sbit + 2 | 0];
    if ($3 << 24 >> 24 == 0 | ($3 & 255) >>> 0 > $cond >>> 0) {
      __label__ = 7;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 7:
    var $4 = $png_ptr;
    _png_warning($4, STRING_TABLE.__str171150 | 0);
    __label__ = 19;
    break;
   case 8:
    HEAP8[$buf | 0] = $1;
    HEAP8[$buf + 1 | 0] = $2;
    HEAP8[$buf + 2 | 0] = $3;
    var $size_0 = 3;
    __label__ = 13;
    break;
   case 9:
    var $5 = HEAPU8[$sbit + 3 | 0];
    if ($5 << 24 >> 24 == 0) {
      __label__ = 11;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 10:
    if (($5 & 255) > (HEAPU8[$png_ptr + 293 | 0] & 255)) {
      __label__ = 11;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 11:
    var $7 = $png_ptr;
    _png_warning($7, STRING_TABLE.__str171150 | 0);
    __label__ = 19;
    break;
   case 12:
    HEAP8[$buf | 0] = $5;
    var $size_0 = 1;
    __label__ = 13;
    break;
   case 13:
    var $size_0;
    if (($color_type & 4 | 0) == 0) {
      var $size_1 = $size_0;
      __label__ = 18;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 14:
    var $8 = HEAPU8[$sbit + 4 | 0];
    if ($8 << 24 >> 24 == 0) {
      __label__ = 16;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 15:
    if (($8 & 255) > (HEAPU8[$png_ptr + 293 | 0] & 255)) {
      __label__ = 16;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 16:
    var $10 = $png_ptr;
    _png_warning($10, STRING_TABLE.__str171150 | 0);
    __label__ = 19;
    break;
   case 17:
    HEAP8[$buf + $size_0 | 0] = $8;
    var $size_1 = $size_0 + 1 | 0;
    __label__ = 18;
    break;
   case 18:
    var $size_1;
    var $arraydecay = $buf | 0;
    _png_write_complete_chunk($png_ptr, 1933723988, $arraydecay, $size_1);
    __label__ = 19;
    break;
   case 19:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_write_sBIT["X"] = 1;

function _png_write_cHRM_fixed($png_ptr, $white_x, $white_y, $red_x, $red_y, $green_x, $green_y, $blue_x, $blue_y) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 32;
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $buf = __stackBase__;
    var $0 = $png_ptr;
    var $call = _png_check_cHRM_fixed($0, $white_x, $white_y, $red_x, $red_y, $green_x, $green_y, $blue_x, $blue_y);
    if (($call | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $arraydecay = $buf | 0;
    _png_save_uint_32($arraydecay, $white_x);
    var $add_ptr = $buf + 4 | 0;
    _png_save_uint_32($add_ptr, $white_y);
    var $add_ptr3 = $buf + 8 | 0;
    _png_save_uint_32($add_ptr3, $red_x);
    var $add_ptr5 = $buf + 12 | 0;
    _png_save_uint_32($add_ptr5, $red_y);
    var $add_ptr7 = $buf + 16 | 0;
    _png_save_uint_32($add_ptr7, $green_x);
    var $add_ptr9 = $buf + 20 | 0;
    _png_save_uint_32($add_ptr9, $green_y);
    var $add_ptr11 = $buf + 24 | 0;
    _png_save_uint_32($add_ptr11, $blue_x);
    var $add_ptr13 = $buf + 28 | 0;
    _png_save_uint_32($add_ptr13, $blue_y);
    _png_write_complete_chunk($png_ptr, 1665684045, $arraydecay, 32);
    __label__ = 3;
    break;
   case 3:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_write_tRNS($png_ptr, $trans_alpha, $tran, $num_trans, $color_type) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 8;
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $buf = __stackBase__;
    if (($color_type | 0) == 3) {
      __label__ = 2;
      break;
    } else if (($color_type | 0) == 0) {
      __label__ = 6;
      break;
    } else if (($color_type | 0) == 2) {
      __label__ = 9;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 2:
    if (($num_trans | 0) < 1) {
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    if ((HEAPU16[$png_ptr + 276 >> 1] & 65535 | 0) < ($num_trans | 0)) {
      __label__ = 4;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 4:
    var $1 = $png_ptr;
    _png_warning($1, STRING_TABLE.__str181151 | 0);
    __label__ = 14;
    break;
   case 5:
    _png_write_complete_chunk($png_ptr, 1951551059, $trans_alpha, $num_trans);
    __label__ = 14;
    break;
   case 6:
    var $conv8 = HEAPU16[$tran + 8 >> 1] & 65535;
    if (($conv8 | 0) < (1 << (HEAPU8[$png_ptr + 292 | 0] & 255) | 0)) {
      __label__ = 8;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    var $4 = $png_ptr;
    _png_warning($4, STRING_TABLE.__str191152 | 0);
    __label__ = 14;
    break;
   case 8:
    var $arraydecay = $buf | 0;
    _png_save_uint_16($arraydecay, $conv8);
    _png_write_complete_chunk($png_ptr, 1951551059, $arraydecay, 2);
    __label__ = 14;
    break;
   case 9:
    var $arraydecay21 = $buf | 0;
    var $conv22 = HEAPU16[$tran + 2 >> 1] & 65535;
    _png_save_uint_16($arraydecay21, $conv22);
    var $add_ptr = $buf + 2 | 0;
    var $conv24 = HEAPU16[$tran + 4 >> 1] & 65535;
    _png_save_uint_16($add_ptr, $conv24);
    var $add_ptr26 = $buf + 4 | 0;
    var $conv27 = HEAPU16[$tran + 6 >> 1] & 65535;
    _png_save_uint_16($add_ptr26, $conv27);
    if (HEAP8[$png_ptr + 292 | 0] << 24 >> 24 == 8) {
      __label__ = 10;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 10:
    if ((HEAP8[$add_ptr] | HEAP8[$arraydecay21] | HEAP8[$add_ptr26]) << 24 >> 24 == 0) {
      __label__ = 12;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    var $12 = $png_ptr;
    _png_warning($12, STRING_TABLE.__str201153 | 0);
    __label__ = 14;
    break;
   case 12:
    _png_write_complete_chunk($png_ptr, 1951551059, $arraydecay21, 6);
    __label__ = 14;
    break;
   case 13:
    var $13 = $png_ptr;
    _png_warning($13, STRING_TABLE.__str211154 | 0);
    __label__ = 14;
    break;
   case 14:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_write_tRNS["X"] = 1;

function _png_write_bKGD($png_ptr, $back, $color_type) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 8;
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $buf = __stackBase__;
    if (($color_type | 0) == 3) {
      __label__ = 2;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 2:
    var $0 = HEAPU16[$png_ptr + 276 >> 1];
    if ($0 << 16 >> 16 == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 3:
    if ((HEAP32[$png_ptr + 576 >> 2] & 1 | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $4 = HEAP8[$back | 0];
    __label__ = 7;
    break;
   case 5:
    var $2 = HEAPU8[$back | 0];
    if (($2 & 255) >>> 0 < ($0 & 65535) >>> 0) {
      var $4 = $2;
      __label__ = 7;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    var $3 = $png_ptr;
    _png_warning($3, STRING_TABLE.__str221155 | 0);
    __label__ = 16;
    break;
   case 7:
    var $4;
    var $arrayidx = $buf | 0;
    HEAP8[$arrayidx] = $4;
    _png_write_complete_chunk($png_ptr, 1649100612, $arrayidx, 1);
    __label__ = 16;
    break;
   case 8:
    if (($color_type & 2 | 0) == 0) {
      __label__ = 13;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    var $arraydecay12 = $buf | 0;
    var $conv13 = HEAPU16[$back + 2 >> 1] & 65535;
    _png_save_uint_16($arraydecay12, $conv13);
    var $add_ptr = $buf + 2 | 0;
    var $conv15 = HEAPU16[$back + 4 >> 1] & 65535;
    _png_save_uint_16($add_ptr, $conv15);
    var $add_ptr17 = $buf + 4 | 0;
    var $conv18 = HEAPU16[$back + 6 >> 1] & 65535;
    _png_save_uint_16($add_ptr17, $conv18);
    if (HEAP8[$png_ptr + 292 | 0] << 24 >> 24 == 8) {
      __label__ = 10;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 10:
    if ((HEAP8[$add_ptr] | HEAP8[$arraydecay12] | HEAP8[$add_ptr17]) << 24 >> 24 == 0) {
      __label__ = 12;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    var $12 = $png_ptr;
    _png_warning($12, STRING_TABLE.__str231156 | 0);
    __label__ = 16;
    break;
   case 12:
    _png_write_complete_chunk($png_ptr, 1649100612, $arraydecay12, 6);
    __label__ = 16;
    break;
   case 13:
    var $conv35 = HEAPU16[$back + 8 >> 1] & 65535;
    if (($conv35 | 0) < (1 << (HEAPU8[$png_ptr + 292 | 0] & 255) | 0)) {
      __label__ = 15;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 14:
    var $15 = $png_ptr;
    _png_warning($15, STRING_TABLE.__str241157 | 0);
    __label__ = 16;
    break;
   case 15:
    var $arraydecay42 = $buf | 0;
    _png_save_uint_16($arraydecay42, $conv35);
    _png_write_complete_chunk($png_ptr, 1649100612, $arraydecay42, 2);
    __label__ = 16;
    break;
   case 16:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_write_bKGD["X"] = 1;

function _png_write_hIST($png_ptr, $hist, $num_hist) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $buf = __stackBase__;
    if ((HEAPU16[$png_ptr + 276 >> 1] & 65535 | 0) < ($num_hist | 0)) {
      __label__ = 2;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 2:
    var $1 = $png_ptr;
    _png_warning($1, STRING_TABLE.__str251158 | 0);
    __label__ = 7;
    break;
   case 3:
    var $mul = $num_hist << 1;
    _png_write_chunk_header($png_ptr, 1749635924, $mul);
    if (($num_hist | 0) > 0) {
      __label__ = 4;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 4:
    var $arraydecay = $buf | 0;
    var $i_02 = 0;
    __label__ = 5;
    break;
   case 5:
    var $i_02;
    var $conv4 = HEAPU16[$hist + ($i_02 << 1) >> 1] & 65535;
    _png_save_uint_16($arraydecay, $conv4);
    _png_write_chunk_data($png_ptr, $arraydecay, 2);
    var $inc = $i_02 + 1 | 0;
    if (($inc | 0) == ($num_hist | 0)) {
      __label__ = 6;
      break;
    } else {
      var $i_02 = $inc;
      __label__ = 5;
      break;
    }
   case 6:
    _png_write_chunk_end($png_ptr);
    __label__ = 7;
    break;
   case 7:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_write_tEXt($png_ptr, $key, $text) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $new_key = __stackBase__;
    var $call = _png_check_keyword($png_ptr, $key, $new_key);
    if (($call | 0) == 0) {
      __label__ = 8;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    if (($text | 0) == 0) {
      var $text_len_addr_0 = 0;
      __label__ = 5;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    if (HEAP8[$text] << 24 >> 24 == 0) {
      var $text_len_addr_0 = 0;
      __label__ = 5;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $call5 = _strlen($text);
    var $text_len_addr_0 = $call5;
    __label__ = 5;
    break;
   case 5:
    var $text_len_addr_0;
    var $add = $call + 1 | 0;
    var $add7 = $add + $text_len_addr_0 | 0;
    _png_write_chunk_header($png_ptr, 1950701684, $add7);
    var $1 = HEAP32[$new_key >> 2];
    _png_write_chunk_data($png_ptr, $1, $add);
    if (($text_len_addr_0 | 0) == 0) {
      __label__ = 7;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    _png_write_chunk_data($png_ptr, $text, $text_len_addr_0);
    __label__ = 7;
    break;
   case 7:
    _png_write_chunk_end($png_ptr);
    var $2 = $png_ptr;
    _png_free($2, $1);
    __label__ = 8;
    break;
   case 8:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_write_zTXt($png_ptr, $key, $text, $compression) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 28;
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $buf = __stackBase__;
    var $new_key = __stackBase__ + 4;
    var $comp = __stackBase__ + 8;
    HEAP32[$comp + 8 >> 2] = 0;
    HEAP32[$comp + 12 >> 2] = 0;
    HEAP32[$comp + 16 >> 2] = 0;
    HEAP32[$comp >> 2] = 0;
    HEAP32[$comp + 4 >> 2] = 0;
    var $call = _png_check_keyword($png_ptr, $key, $new_key);
    if (($call | 0) == 0) {
      __label__ = 2;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 2:
    var $0 = HEAP32[$new_key >> 2];
    var $1 = $png_ptr;
    _png_free($1, $0);
    __label__ = 7;
    break;
   case 3:
    if (($text | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    if (HEAP8[$text] << 24 >> 24 == 0 | ($compression | 0) == -1) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    var $3 = HEAP32[$new_key >> 2];
    _png_write_tEXt($png_ptr, $3, $text);
    var $4 = $png_ptr;
    _png_free($4, $3);
    __label__ = 7;
    break;
   case 6:
    var $call9 = _strlen($text);
    var $call10 = _png_text_compress($png_ptr, $text, $call9, $compression, $comp);
    var $add11 = $call10 + ($call + 2) | 0;
    _png_write_chunk_header($png_ptr, 2052348020, $add11);
    var $5 = HEAP32[$new_key >> 2];
    var $add12 = $call + 1 | 0;
    _png_write_chunk_data($png_ptr, $5, $add12);
    var $6 = $png_ptr;
    _png_free($6, $5);
    HEAP8[$buf] = $compression & 255;
    _png_write_chunk_data($png_ptr, $buf, 1);
    _png_write_compressed_data_out($png_ptr, $comp, $call10);
    _png_write_chunk_end($png_ptr);
    __label__ = 7;
    break;
   case 7:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_write_iTXt($png_ptr, $compression, $key, $lang, $lang_key, $text) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 32;
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $new_lang = __stackBase__;
    var $new_key = __stackBase__ + 4;
    var $cbuf = __stackBase__ + 8;
    var $comp = __stackBase__ + 12;
    HEAP32[$new_key >> 2] = 0;
    HEAP32[$comp + 8 >> 2] = 0;
    HEAP32[$comp + 12 >> 2] = 0;
    HEAP32[$comp + 16 >> 2] = 0;
    HEAP32[$comp >> 2] = 0;
    var $call = _png_check_keyword($png_ptr, $key, $new_key);
    if (($call | 0) == 0) {
      __label__ = 11;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $call1 = _png_check_keyword($png_ptr, $lang, $new_lang);
    if (($call1 | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      var $lang_len_0 = $call1;
      __label__ = 4;
      break;
    }
   case 3:
    var $0 = $png_ptr;
    _png_warning($0, STRING_TABLE.__str341167 | 0);
    HEAP32[$new_lang >> 2] = 0;
    var $lang_len_0 = 0;
    __label__ = 4;
    break;
   case 4:
    var $lang_len_0;
    if (($lang_key | 0) == 0) {
      var $lang_key_len_0 = 0;
      __label__ = 6;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $call7 = _strlen($lang_key);
    var $lang_key_len_0 = $call7;
    __label__ = 6;
    break;
   case 6:
    var $lang_key_len_0;
    if (($text | 0) == 0) {
      var $text_len_0 = 0;
      __label__ = 8;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    var $call12 = _strlen($text);
    var $text_len_0 = $call12;
    __label__ = 8;
    break;
   case 8:
    var $text_len_0;
    var $sub = $compression - 2 | 0;
    var $call14 = _png_text_compress($png_ptr, $text, $text_len_0, $sub, $comp);
    var $add17 = $call14 + ($lang_key_len_0 + ($lang_len_0 + ($call + 5))) | 0;
    _png_write_chunk_header($png_ptr, 1767135348, $add17);
    var $1 = HEAP32[$new_key >> 2];
    var $add18 = $call + 1 | 0;
    _png_write_chunk_data($png_ptr, $1, $add18);
    var $arrayidx = $cbuf | 0;
    if (($compression | 0) == -1 || ($compression | 0) == 1) {
      var $storemerge = 0;
      __label__ = 10;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    var $storemerge = 1;
    __label__ = 10;
    break;
   case 10:
    var $storemerge;
    HEAP8[$arrayidx] = $storemerge;
    HEAP8[$cbuf + 1 | 0] = 0;
    _png_write_chunk_data($png_ptr, $arrayidx, 2);
    HEAP8[$arrayidx] = 0;
    var $2 = HEAP32[$new_lang >> 2];
    var $cond = ($2 | 0) != 0 ? $2 : $arrayidx;
    _png_write_chunk_data($png_ptr, $cond, $lang_len_0 + 1 | 0);
    var $cond34 = ($lang_key | 0) != 0 ? $lang_key : $arrayidx;
    _png_write_chunk_data($png_ptr, $cond34, $lang_key_len_0 + 1 | 0);
    _png_write_compressed_data_out($png_ptr, $comp, $call14);
    _png_write_chunk_end($png_ptr);
    var $3 = $png_ptr;
    _png_free($3, $1);
    _png_free($3, $2);
    __label__ = 11;
    break;
   case 11:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_write_iTXt["X"] = 1;

function _png_write_oFFs($png_ptr, $x_offset, $y_offset, $unit_type) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 12;
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $buf = __stackBase__;
    if (($unit_type | 0) > 1) {
      __label__ = 2;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 2:
    var $0 = $png_ptr;
    _png_warning($0, STRING_TABLE.__str351168 | 0);
    __label__ = 3;
    break;
   case 3:
    var $arraydecay = $buf | 0;
    _png_save_int_32($arraydecay, $x_offset);
    var $add_ptr = $buf + 4 | 0;
    _png_save_int_32($add_ptr, $y_offset);
    HEAP8[$buf + 8 | 0] = $unit_type & 255;
    _png_write_complete_chunk($png_ptr, 1866876531, $arraydecay, 9);
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_write_pCAL($png_ptr, $purpose, $X0, $X1, $type, $nparams, $units, $params) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 16;
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $buf = __stackBase__;
    var $new_purpose = __stackBase__ + 12;
    if (($type | 0) > 3) {
      __label__ = 2;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 2:
    var $0 = $png_ptr;
    _png_warning($0, STRING_TABLE.__str361169 | 0);
    __label__ = 3;
    break;
   case 3:
    var $call = _png_check_keyword($png_ptr, $purpose, $new_purpose);
    var $add = $call + 1 | 0;
    var $call1 = _strlen($units);
    var $add3 = $call1 + (($nparams | 0) != 0 & 1) | 0;
    var $add5 = $add3 + ($call + 11) | 0;
    var $mul = $nparams << 2;
    var $1 = $png_ptr;
    var $call6 = _png_malloc($1, $mul);
    var $2 = $call6;
    var $cmp73 = ($nparams | 0) > 0;
    if ($cmp73) {
      __label__ = 4;
      break;
    } else {
      var $total_len_0_lcssa = $add5;
      __label__ = 6;
      break;
    }
   case 4:
    var $sub = $nparams - 1 | 0;
    var $total_len_04 = $add5;
    var $i_05 = 0;
    __label__ = 5;
    break;
   case 5:
    var $i_05;
    var $total_len_04;
    var $3 = HEAP32[$params + ($i_05 << 2) >> 2];
    var $call8 = _strlen($3);
    var $add11 = $call8 + (($i_05 | 0) != ($sub | 0) & 1) | 0;
    HEAP32[$2 + ($i_05 << 2) >> 2] = $add11;
    var $add14 = $add11 + $total_len_04 | 0;
    var $inc = $i_05 + 1 | 0;
    if (($inc | 0) == ($nparams | 0)) {
      var $total_len_0_lcssa = $add14;
      __label__ = 6;
      break;
    } else {
      var $total_len_04 = $add14;
      var $i_05 = $inc;
      __label__ = 5;
      break;
    }
   case 6:
    var $total_len_0_lcssa;
    _png_write_chunk_header($png_ptr, 1883455820, $total_len_0_lcssa);
    var $4 = HEAPU32[$new_purpose >> 2];
    _png_write_chunk_data($png_ptr, $4, $add);
    var $arraydecay = $buf | 0;
    _png_save_int_32($arraydecay, $X0);
    var $add_ptr = $buf + 4 | 0;
    _png_save_int_32($add_ptr, $X1);
    HEAP8[$buf + 8 | 0] = $type & 255;
    HEAP8[$buf + 9 | 0] = $nparams & 255;
    _png_write_chunk_data($png_ptr, $arraydecay, 10);
    _png_write_chunk_data($png_ptr, $units, $add3);
    _png_free($1, $4);
    if ($cmp73) {
      var $i_12 = 0;
      __label__ = 7;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 7:
    var $i_12;
    var $5 = HEAP32[$params + ($i_12 << 2) >> 2];
    var $6 = HEAP32[$2 + ($i_12 << 2) >> 2];
    _png_write_chunk_data($png_ptr, $5, $6);
    var $inc27 = $i_12 + 1 | 0;
    if (($inc27 | 0) == ($nparams | 0)) {
      __label__ = 8;
      break;
    } else {
      var $i_12 = $inc27;
      __label__ = 7;
      break;
    }
   case 8:
    _png_free($1, $call6);
    _png_write_chunk_end($png_ptr);
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_write_pCAL["X"] = 1;

function _png_write_sCAL_s($png_ptr, $unit, $width, $height) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 64;
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $buf = __stackBase__;
    var $call = _strlen($width);
    var $call1 = _strlen($height);
    var $add = $call + 2 | 0;
    var $add2 = $add + $call1 | 0;
    if ($add2 >>> 0 > 64) {
      __label__ = 2;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 2:
    var $0 = $png_ptr;
    _png_warning($0, STRING_TABLE.__str371170 | 0);
    __label__ = 4;
    break;
   case 3:
    var $arrayidx = $buf | 0;
    HEAP8[$arrayidx] = $unit & 255;
    var $add_ptr = $buf + 1 | 0;
    var $add3 = $call + 1 | 0;
    _memcpy($add_ptr, $width, $add3, 1);
    var $add_ptr6 = $buf + $add | 0;
    _memcpy($add_ptr6, $height, $call1, 1);
    _png_write_complete_chunk($png_ptr, 1933787468, $arrayidx, $add2);
    __label__ = 4;
    break;
   case 4:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_write_pHYs($png_ptr, $x_pixels_per_unit, $y_pixels_per_unit, $unit_type) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 12;
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $buf = __stackBase__;
    if (($unit_type | 0) > 1) {
      __label__ = 2;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 2:
    var $0 = $png_ptr;
    _png_warning($0, STRING_TABLE.__str381171 | 0);
    __label__ = 3;
    break;
   case 3:
    var $arraydecay = $buf | 0;
    _png_save_uint_32($arraydecay, $x_pixels_per_unit);
    var $add_ptr = $buf + 4 | 0;
    _png_save_uint_32($add_ptr, $y_pixels_per_unit);
    HEAP8[$buf + 8 | 0] = $unit_type & 255;
    _png_write_complete_chunk($png_ptr, 1883789683, $arraydecay, 9);
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_write_tIME($png_ptr, $mod_time) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 8;
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $buf = __stackBase__;
    var $month = $mod_time + 2 | 0;
    var $0 = HEAPU8[$month];
    if (($0 & 255) > 12 | $0 << 24 >> 24 == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $day = $mod_time + 3 | 0;
    var $1 = HEAPU8[$day];
    if (($1 & 255) > 31 | $1 << 24 >> 24 == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $hour = $mod_time + 4 | 0;
    if ((HEAPU8[$hour] & 255) > 23) {
      __label__ = 5;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $second = $mod_time + 6 | 0;
    if ((HEAPU8[$second] & 255) > 60) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    var $4 = $png_ptr;
    _png_warning($4, STRING_TABLE.__str391172 | 0);
    __label__ = 7;
    break;
   case 6:
    var $arraydecay = $buf | 0;
    var $conv23 = HEAPU16[$mod_time >> 1] & 65535;
    _png_save_uint_16($arraydecay, $conv23);
    var $6 = HEAP8[$month];
    HEAP8[$buf + 2 | 0] = $6;
    var $7 = HEAP8[$day];
    HEAP8[$buf + 3 | 0] = $7;
    var $8 = HEAP8[$hour];
    HEAP8[$buf + 4 | 0] = $8;
    var $9 = HEAP8[$mod_time + 5 | 0];
    HEAP8[$buf + 5 | 0] = $9;
    var $10 = HEAP8[$second];
    HEAP8[$buf + 6 | 0] = $10;
    _png_write_complete_chunk($png_ptr, 1950960965, $arraydecay, 7);
    __label__ = 7;
    break;
   case 7:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_write_start_row($png_ptr) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $mul = (HEAPU8[$png_ptr + 293 | 0] & 255) * (HEAPU8[$png_ptr + 296 | 0] & 255) | 0;
    var $width = $png_ptr + 204 | 0;
    var $2 = HEAPU32[$width >> 2];
    if ($mul >>> 0 > 7) {
      __label__ = 2;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 2:
    var $cond = ($mul >>> 3) * $2 | 0;
    __label__ = 4;
    break;
   case 3:
    var $cond = ($mul * $2 + 7 | 0) >>> 3;
    __label__ = 4;
    break;
   case 4:
    var $cond;
    var $add7 = $cond + 1 | 0;
    var $3 = HEAP8[$png_ptr + 294 | 0];
    HEAP8[$png_ptr + 299 | 0] = $3;
    HEAP8[$png_ptr + 298 | 0] = $mul & 255;
    var $4 = $png_ptr;
    var $call = _png_malloc($4, $add7);
    HEAP32[$png_ptr + 240 >> 2] = $call;
    HEAP8[$call] = 0;
    var $do_filter = $png_ptr + 290 | 0;
    var $5 = HEAP8[$do_filter];
    if (($5 & 16) << 24 >> 24 == 0) {
      var $7 = $5;
      __label__ = 6;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $add11 = HEAP32[$png_ptr + 220 >> 2] + 1 | 0;
    var $call12 = _png_malloc($4, $add11);
    HEAP32[$png_ptr + 244 >> 2] = $call12;
    HEAP8[$call12] = 1;
    var $7 = HEAP8[$do_filter];
    __label__ = 6;
    break;
   case 6:
    var $7;
    if (($7 & 255) > 31) {
      __label__ = 7;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 7:
    var $call20 = _png_calloc($4, $add7);
    HEAP32[$png_ptr + 236 >> 2] = $call20;
    var $8 = HEAPU8[$do_filter];
    if (($8 & 32) << 24 >> 24 == 0) {
      var $10 = $8;
      __label__ = 9;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    var $add27 = HEAP32[$png_ptr + 220 >> 2] + 1 | 0;
    var $call28 = _png_malloc($4, $add27);
    HEAP32[$png_ptr + 248 >> 2] = $call28;
    HEAP8[$call28] = 2;
    var $10 = HEAP8[$do_filter];
    __label__ = 9;
    break;
   case 9:
    var $10;
    if (($10 & 64) << 24 >> 24 == 0) {
      var $12 = $10;
      __label__ = 11;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 10:
    var $add38 = HEAP32[$png_ptr + 220 >> 2] + 1 | 0;
    var $call39 = _png_malloc($4, $add38);
    HEAP32[$png_ptr + 252 >> 2] = $call39;
    HEAP8[$call39] = 3;
    var $12 = HEAP8[$do_filter];
    __label__ = 11;
    break;
   case 11:
    var $12;
    if ($12 << 24 >> 24 < 0) {
      __label__ = 12;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 12:
    var $add49 = HEAP32[$png_ptr + 220 >> 2] + 1 | 0;
    var $call50 = _png_malloc($4, $add49);
    HEAP32[$png_ptr + 256 >> 2] = $call50;
    HEAP8[$call50] = 4;
    __label__ = 13;
    break;
   case 13:
    if (HEAP8[$png_ptr + 288 | 0] << 24 >> 24 == 0) {
      __label__ = 17;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 14:
    var $16 = HEAPU32[$png_ptr + 208 >> 2];
    if ((HEAP32[$png_ptr + 92 >> 2] & 2 | 0) == 0) {
      __label__ = 15;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 15:
    HEAP32[$png_ptr + 212 >> 2] = ($16 + 7 | 0) >>> 3;
    var $div72 = (HEAP32[$width >> 2] + 7 | 0) >>> 3;
    HEAP32[$png_ptr + 216 >> 2] = $div72;
    __label__ = 18;
    break;
   case 16:
    HEAP32[$png_ptr + 212 >> 2] = $16;
    var $18 = HEAP32[$width >> 2];
    HEAP32[$png_ptr + 216 >> 2] = $18;
    __label__ = 18;
    break;
   case 17:
    var $19 = HEAP32[$png_ptr + 208 >> 2];
    HEAP32[$png_ptr + 212 >> 2] = $19;
    var $20 = HEAP32[$width >> 2];
    HEAP32[$png_ptr + 216 >> 2] = $20;
    __label__ = 18;
    break;
   case 18:
    _png_zlib_claim($png_ptr, 1);
    var $21 = HEAP32[$png_ptr + 156 >> 2];
    HEAP32[$png_ptr + 112 >> 2] = $21;
    var $22 = HEAP32[$png_ptr + 152 >> 2];
    HEAP32[$png_ptr + 108 >> 2] = $22;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_write_start_row["X"] = 1;

function _png_zlib_claim($png_ptr, $state) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 64;
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $msg = __stackBase__;
    var $zlib_state = $png_ptr + 160 | 0;
    var $0 = HEAP32[$zlib_state >> 2];
    if (($0 & 4 | 0) == 0) {
      __label__ = 2;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 2:
    if (($0 | 0) == ($state | 0)) {
      var $16 = $0;
      __label__ = 17;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    if (($0 | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $1 = $png_ptr + 96 | 0;
    var $call = _deflateEnd($1);
    HEAP32[$zlib_state >> 2] = 0;
    if (($call | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      var $ret_15 = $call;
      var $who_16 = STRING_TABLE.__str491182 | 0;
      __label__ = 11;
      break;
    }
   case 5:
    if (($state | 0) == 2) {
      __label__ = 6;
      break;
    } else if (($state | 0) == 1) {
      __label__ = 7;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 6:
    var $2 = HEAP32[$png_ptr + 184 >> 2];
    var $3 = HEAP32[$png_ptr + 188 >> 2];
    var $4 = HEAP32[$png_ptr + 192 >> 2];
    var $5 = HEAP32[$png_ptr + 196 >> 2];
    var $6 = HEAP32[$png_ptr + 200 >> 2];
    var $7 = $png_ptr + 96 | 0;
    var $call10 = _deflateInit2_($7, $2, $3, $4, $5, $6);
    var $who_1 = STRING_TABLE.__str511184 | 0;
    var $ret_1 = $call10;
    __label__ = 9;
    break;
   case 7:
    var $8 = HEAP32[$png_ptr + 164 >> 2];
    var $9 = HEAP32[$png_ptr + 168 >> 2];
    var $10 = HEAP32[$png_ptr + 172 >> 2];
    var $11 = HEAP32[$png_ptr + 176 >> 2];
    var $12 = HEAP32[$png_ptr + 180 >> 2];
    var $13 = $png_ptr + 96 | 0;
    var $call13 = _deflateInit2_($13, $8, $9, $10, $11, $12);
    var $who_1 = STRING_TABLE.__str521185 | 0;
    var $ret_1 = $call13;
    __label__ = 9;
    break;
   case 8:
    var $14 = $png_ptr;
    _png_error($14, STRING_TABLE.__str531186 | 0);
    __label__ = 10;
    break;
   case 9:
    var $ret_1;
    var $who_1;
    if (($ret_1 | 0) == 0) {
      __label__ = 10;
      break;
    } else {
      var $ret_15 = $ret_1;
      var $who_16 = $who_1;
      __label__ = 11;
      break;
    }
   case 10:
    HEAP32[$zlib_state >> 2] = $state;
    var $16 = $state;
    __label__ = 17;
    break;
   case 11:
    var $who_16;
    var $ret_15;
    var $arraydecay = $msg | 0;
    var $call18 = _png_safecat($arraydecay, 64, 0, STRING_TABLE.__str541187 | 0);
    var $call20 = _png_safecat($arraydecay, 64, $call18, $who_16);
    if (($ret_15 | 0) == -6) {
      __label__ = 12;
      break;
    } else if (($ret_15 | 0) == -2) {
      __label__ = 13;
      break;
    } else if (($ret_15 | 0) == -4) {
      __label__ = 14;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 12:
    var $call23 = _png_safecat($arraydecay, 64, $call20, STRING_TABLE.__str551188 | 0);
    __label__ = 16;
    break;
   case 13:
    var $call26 = _png_safecat($arraydecay, 64, $call20, STRING_TABLE.__str561189 | 0);
    __label__ = 16;
    break;
   case 14:
    var $call29 = _png_safecat($arraydecay, 64, $call20, STRING_TABLE.__str571190 | 0);
    __label__ = 16;
    break;
   case 15:
    var $call32 = _png_safecat($arraydecay, 64, $call20, STRING_TABLE.__str581191 | 0);
    __label__ = 16;
    break;
   case 16:
    var $15 = $png_ptr;
    _png_error($15, $arraydecay);
    var $16 = HEAP32[$zlib_state >> 2];
    __label__ = 17;
    break;
   case 17:
    var $16;
    HEAP32[$zlib_state >> 2] = $16 | 4;
    __label__ = 19;
    break;
   case 18:
    var $17 = $png_ptr;
    _png_error($17, STRING_TABLE.__str591192 | 0);
    __label__ = 19;
    break;
   case 19:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_zlib_claim["X"] = 1;

function _png_write_finish_row($png_ptr) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $row_number = $png_ptr + 228 | 0;
    var $inc = HEAP32[$row_number >> 2] + 1 | 0;
    HEAP32[$row_number >> 2] = $inc;
    var $num_rows = $png_ptr + 212 | 0;
    if ($inc >>> 0 < HEAPU32[$num_rows >> 2] >>> 0) {
      __label__ = 24;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    if (HEAP8[$png_ptr + 288 | 0] << 24 >> 24 == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $3 = $png_ptr + 96 | 0;
    var $msg = $png_ptr + 120 | 0;
    var $4 = $png_ptr;
    var $avail_out = $png_ptr + 112 | 0;
    var $zbuf = $png_ptr + 152 | 0;
    var $zbuf_size = $png_ptr + 156 | 0;
    var $next_out = $png_ptr + 108 | 0;
    __label__ = 14;
    break;
   case 4:
    HEAP32[$row_number >> 2] = 0;
    if ((HEAP32[$png_ptr + 92 >> 2] & 2 | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 5:
    var $width = $png_ptr + 204 | 0;
    var $pass7 = $png_ptr + 289 | 0;
    var $usr_width = $png_ptr + 216 | 0;
    var $height = $png_ptr + 208 | 0;
    var $6 = HEAP8[$pass7];
    __label__ = 6;
    break;
   case 6:
    var $6;
    var $inc8 = $6 + 1 & 255;
    HEAP8[$pass7] = $inc8;
    var $conv = $inc8 & 255;
    if (($inc8 & 255) > 6) {
      __label__ = 3;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    var $arrayidx = STRING_TABLE._png_do_write_interlace_png_pass_inc + $conv | 0;
    var $conv15 = HEAPU8[$arrayidx] & 255;
    var $arrayidx18 = STRING_TABLE._png_do_write_interlace_png_pass_start + $conv | 0;
    var $sub20 = HEAP32[$width >> 2] - 1 + $conv15 - (HEAPU8[$arrayidx18] & 255) | 0;
    var $div = Math.floor(($sub20 >>> 0) / ($conv15 >>> 0));
    HEAP32[$usr_width >> 2] = $div;
    var $arrayidx27 = STRING_TABLE._png_write_finish_row_png_pass_yinc + $conv | 0;
    var $conv28 = HEAPU8[$arrayidx27] & 255;
    var $arrayidx33 = STRING_TABLE._png_write_finish_row_png_pass_ystart + $conv | 0;
    var $sub35 = HEAP32[$height >> 2] - 1 + $conv28 - (HEAPU8[$arrayidx33] & 255) | 0;
    var $div40 = Math.floor(($sub35 >>> 0) / ($conv28 >>> 0));
    HEAP32[$num_rows >> 2] = $div40;
    if (($div | 0) == 0 | ($div40 | 0) == 0) {
      var $6 = $inc8;
      __label__ = 6;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 8:
    var $pass = $png_ptr + 289 | 0;
    var $inc6 = HEAP8[$pass] + 1 & 255;
    HEAP8[$pass] = $inc6;
    if (($inc6 & 255) < 7) {
      __label__ = 9;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 9:
    var $14 = HEAPU32[$png_ptr + 236 >> 2];
    if (($14 | 0) == 0) {
      __label__ = 24;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 10:
    var $mul = (HEAPU8[$png_ptr + 293 | 0] & 255) * (HEAPU8[$png_ptr + 296 | 0] & 255) | 0;
    var $17 = HEAPU32[$png_ptr + 204 >> 2];
    if ($mul >>> 0 > 7) {
      __label__ = 11;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 11:
    var $cond = ($mul >>> 3) * $17 | 0;
    __label__ = 13;
    break;
   case 12:
    var $cond = ($mul * $17 + 7 | 0) >>> 3;
    __label__ = 13;
    break;
   case 13:
    var $cond;
    _memset($14, 0, $cond + 1 | 0, 1);
    __label__ = 24;
    break;
   case 14:
    var $call = _deflate($3, 4);
    if (($call | 0) == 0) {
      __label__ = 15;
      break;
    } else if (($call | 0) == 1) {
      __label__ = 21;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 15:
    if ((HEAP32[$avail_out >> 2] | 0) == 0) {
      __label__ = 16;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 16:
    var $19 = HEAP32[$zbuf >> 2];
    var $20 = HEAP32[$zbuf_size >> 2];
    _png_write_IDAT($png_ptr, $19, $20);
    var $21 = HEAP32[$zbuf >> 2];
    HEAP32[$next_out >> 2] = $21;
    var $22 = HEAP32[$zbuf_size >> 2];
    HEAP32[$avail_out >> 2] = $22;
    __label__ = 14;
    break;
   case 17:
    var $23 = HEAP32[$msg >> 2];
    if (($23 | 0) == 0) {
      __label__ = 19;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 18:
    _png_error($4, $23);
    __label__ = 20;
    break;
   case 19:
    _png_error($4, STRING_TABLE.__str401173 | 0);
    __label__ = 20;
    break;
   case 20:
    if (($call | 0) == 1) {
      __label__ = 21;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 21:
    var $24 = HEAPU32[$avail_out >> 2];
    var $25 = HEAPU32[$zbuf_size >> 2];
    if ($24 >>> 0 < $25 >>> 0) {
      __label__ = 22;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 22:
    var $26 = HEAP32[$zbuf >> 2];
    var $sub128 = $25 - $24 | 0;
    _png_write_IDAT($png_ptr, $26, $sub128);
    __label__ = 23;
    break;
   case 23:
    _png_zlib_release($png_ptr);
    HEAP32[$png_ptr + 140 >> 2] = 0;
    __label__ = 24;
    break;
   case 24:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_write_finish_row["X"] = 1;

function _png_zlib_release($png_ptr) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 256;
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $p = __stackBase__;
    var $zlib_state = $png_ptr + 160 | 0;
    if ((HEAP32[$zlib_state >> 2] & 4 | 0) == 0) {
      __label__ = 7;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $1 = $png_ptr + 96 | 0;
    var $call = _deflateReset($1);
    var $and2 = HEAP32[$zlib_state >> 2] & -5;
    HEAP32[$zlib_state >> 2] = $and2;
    if (($call | 0) == -2) {
      __label__ = 3;
      break;
    } else if (($call | 0) == -4) {
      __label__ = 4;
      break;
    } else if (($call | 0) == -6) {
      var $err_0 = STRING_TABLE.__str411174 | 0;
      __label__ = 6;
      break;
    } else if (($call | 0) == 0) {
      __label__ = 8;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 3:
    var $err_0 = STRING_TABLE.__str421175 | 0;
    __label__ = 6;
    break;
   case 4:
    var $err_0 = STRING_TABLE.__str431176 | 0;
    __label__ = 6;
    break;
   case 5:
    var $err_0 = STRING_TABLE.__str441177 | 0;
    __label__ = 6;
    break;
   case 6:
    var $err_0;
    var $arraydecay = $p | 0;
    _png_warning_parameter_signed($arraydecay, 1, 1, $call);
    _png_warning_parameter($arraydecay, 2, $err_0);
    var $3 = HEAP32[$png_ptr + 120 >> 2];
    var $_ = ($3 | 0) == 0 ? STRING_TABLE.__str451178 | 0 : $3;
    _png_warning_parameter($arraydecay, 3, $_);
    var $4 = $png_ptr;
    _png_formatted_warning($4, $arraydecay, STRING_TABLE.__str461179 | 0);
    __label__ = 8;
    break;
   case 7:
    var $5 = $png_ptr;
    _png_warning($5, STRING_TABLE.__str471180 | 0);
    __label__ = 8;
    break;
   case 8:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _png_do_write_interlace($row_info, $row, $pass) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($pass | 0) < 6) {
      __label__ = 2;
      break;
    } else {
      __label__ = 36;
      break;
    }
   case 2:
    var $pixel_depth = $row_info + 11 | 0;
    var $conv = HEAPU8[$pixel_depth] & 255;
    if (($conv | 0) == 1) {
      __label__ = 3;
      break;
    } else if (($conv | 0) == 2) {
      __label__ = 11;
      break;
    } else if (($conv | 0) == 4) {
      __label__ = 19;
      break;
    } else {
      __label__ = 27;
      break;
    }
   case 3:
    var $1 = HEAPU32[$row_info >> 2];
    var $arrayidx = STRING_TABLE._png_do_write_interlace_png_pass_start + $pass | 0;
    var $2 = HEAPU8[$arrayidx];
    var $conv1 = $2 & 255;
    if ($conv1 >>> 0 < $1 >>> 0) {
      __label__ = 4;
      break;
    } else {
      var $16 = $2;
      __label__ = 32;
      break;
    }
   case 4:
    var $arrayidx11 = STRING_TABLE._png_do_write_interlace_png_pass_inc + $pass | 0;
    var $conv12 = HEAPU8[$arrayidx11] & 255;
    var $i_018 = $conv1;
    var $d_019 = 0;
    var $shift_020 = 7;
    var $dp_021 = $row;
    __label__ = 5;
    break;
   case 5:
    var $dp_021;
    var $shift_020;
    var $d_019;
    var $i_018;
    var $or = ((HEAPU8[$row + ($i_018 >>> 3) | 0] & 255) >>> (($i_018 & 7 ^ 7) >>> 0) & 1) << $shift_020 | $d_019;
    if (($shift_020 | 0) == 0) {
      __label__ = 6;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 6:
    HEAP8[$dp_021] = $or & 255;
    var $dp_1 = $dp_021 + 1 | 0;
    var $shift_1 = 7;
    var $d_1 = 0;
    __label__ = 8;
    break;
   case 7:
    var $dp_1 = $dp_021;
    var $shift_1 = $shift_020 - 1 | 0;
    var $d_1 = $or;
    __label__ = 8;
    break;
   case 8:
    var $d_1;
    var $shift_1;
    var $dp_1;
    var $add = $conv12 + $i_018 | 0;
    if ($add >>> 0 < $1 >>> 0) {
      var $i_018 = $add;
      var $d_019 = $d_1;
      var $shift_020 = $shift_1;
      var $dp_021 = $dp_1;
      __label__ = 5;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    if (($shift_1 | 0) == 7) {
      var $16 = $2;
      __label__ = 32;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 10:
    HEAP8[$dp_1] = $d_1 & 255;
    var $16 = $2;
    __label__ = 32;
    break;
   case 11:
    var $5 = HEAPU32[$row_info >> 2];
    var $arrayidx27 = STRING_TABLE._png_do_write_interlace_png_pass_start + $pass | 0;
    var $6 = HEAPU8[$arrayidx27];
    var $conv28 = $6 & 255;
    if ($conv28 >>> 0 < $5 >>> 0) {
      __label__ = 12;
      break;
    } else {
      var $16 = $6;
      __label__ = 32;
      break;
    }
   case 12:
    var $arrayidx52 = STRING_TABLE._png_do_write_interlace_png_pass_inc + $pass | 0;
    var $conv53 = HEAPU8[$arrayidx52] & 255;
    var $d22_010 = 0;
    var $shift21_011 = 6;
    var $dp20_012 = $row;
    var $i24_013 = $conv28;
    __label__ = 13;
    break;
   case 13:
    var $i24_013;
    var $dp20_012;
    var $shift21_011;
    var $d22_010;
    var $or42 = ((HEAPU8[$row + ($i24_013 >>> 2) | 0] & 255) >>> (($i24_013 << 1 & 6 ^ 6) >>> 0) & 3) << $shift21_011 | $d22_010;
    if (($shift21_011 | 0) == 0) {
      __label__ = 14;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 14:
    HEAP8[$dp20_012] = $or42 & 255;
    var $dp20_1 = $dp20_012 + 1 | 0;
    var $shift21_1 = 6;
    var $d22_1 = 0;
    __label__ = 16;
    break;
   case 15:
    var $dp20_1 = $dp20_012;
    var $shift21_1 = $shift21_011 - 2 | 0;
    var $d22_1 = $or42;
    __label__ = 16;
    break;
   case 16:
    var $d22_1;
    var $shift21_1;
    var $dp20_1;
    var $add54 = $conv53 + $i24_013 | 0;
    if ($add54 >>> 0 < $5 >>> 0) {
      var $d22_010 = $d22_1;
      var $shift21_011 = $shift21_1;
      var $dp20_012 = $dp20_1;
      var $i24_013 = $add54;
      __label__ = 13;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 17:
    if (($shift21_1 | 0) == 6) {
      var $16 = $6;
      __label__ = 32;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 18:
    HEAP8[$dp20_1] = $d22_1 & 255;
    var $16 = $6;
    __label__ = 32;
    break;
   case 19:
    var $9 = HEAPU32[$row_info >> 2];
    var $arrayidx70 = STRING_TABLE._png_do_write_interlace_png_pass_start + $pass | 0;
    var $10 = HEAPU8[$arrayidx70];
    var $conv71 = $10 & 255;
    if ($conv71 >>> 0 < $9 >>> 0) {
      __label__ = 20;
      break;
    } else {
      var $16 = $10;
      __label__ = 32;
      break;
    }
   case 20:
    var $arrayidx95 = STRING_TABLE._png_do_write_interlace_png_pass_inc + $pass | 0;
    var $conv96 = HEAPU8[$arrayidx95] & 255;
    var $dp63_03 = $row;
    var $shift64_04 = 4;
    var $d65_05 = 0;
    var $i67_06 = $conv71;
    __label__ = 21;
    break;
   case 21:
    var $i67_06;
    var $d65_05;
    var $shift64_04;
    var $dp63_03;
    var $or85 = ((HEAPU8[$row + ($i67_06 >>> 1) | 0] & 255) >>> (($i67_06 << 2 & 4 ^ 4) >>> 0) & 15) << $shift64_04 | $d65_05;
    if (($shift64_04 | 0) == 0) {
      __label__ = 22;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 22:
    HEAP8[$dp63_03] = $or85 & 255;
    var $d65_1 = 0;
    var $shift64_1 = 4;
    var $dp63_1 = $dp63_03 + 1 | 0;
    __label__ = 24;
    break;
   case 23:
    var $d65_1 = $or85;
    var $shift64_1 = $shift64_04 - 4 | 0;
    var $dp63_1 = $dp63_03;
    __label__ = 24;
    break;
   case 24:
    var $dp63_1;
    var $shift64_1;
    var $d65_1;
    var $add97 = $conv96 + $i67_06 | 0;
    if ($add97 >>> 0 < $9 >>> 0) {
      var $dp63_03 = $dp63_1;
      var $shift64_04 = $shift64_1;
      var $d65_05 = $d65_1;
      var $i67_06 = $add97;
      __label__ = 21;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 25:
    if (($shift64_1 | 0) == 4) {
      var $16 = $10;
      __label__ = 32;
      break;
    } else {
      __label__ = 26;
      break;
    }
   case 26:
    HEAP8[$dp63_1] = $d65_1 & 255;
    var $16 = $10;
    __label__ = 32;
    break;
   case 27:
    var $13 = HEAPU32[$row_info >> 2];
    var $shr1111 = $conv >>> 3;
    var $arrayidx112 = STRING_TABLE._png_do_write_interlace_png_pass_start + $pass | 0;
    var $14 = HEAPU8[$arrayidx112];
    var $conv113 = $14 & 255;
    if ($conv113 >>> 0 < $13 >>> 0) {
      __label__ = 28;
      break;
    } else {
      var $16 = $14;
      __label__ = 32;
      break;
    }
   case 28:
    var $arrayidx125 = STRING_TABLE._png_do_write_interlace_png_pass_inc + $pass | 0;
    var $conv126 = HEAPU8[$arrayidx125] & 255;
    var $dp105_026 = $row;
    var $i106_027 = $conv113;
    __label__ = 29;
    break;
   case 29:
    var $i106_027;
    var $dp105_026;
    var $add_ptr118 = $row + $i106_027 * $shr1111 | 0;
    if (($dp105_026 | 0) == ($add_ptr118 | 0)) {
      __label__ = 31;
      break;
    } else {
      __label__ = 30;
      break;
    }
   case 30:
    _memcpy($dp105_026, $add_ptr118, $shr1111, 1);
    __label__ = 31;
    break;
   case 31:
    var $add127 = $conv126 + $i106_027 | 0;
    if ($add127 >>> 0 < $13 >>> 0) {
      var $dp105_026 = $dp105_026 + $shr1111 | 0;
      var $i106_027 = $add127;
      __label__ = 29;
      break;
    } else {
      var $16 = $14;
      __label__ = 32;
      break;
    }
   case 32:
    var $16;
    var $width129 = $row_info | 0;
    var $arrayidx130 = STRING_TABLE._png_do_write_interlace_png_pass_inc + $pass | 0;
    var $conv131 = HEAPU8[$arrayidx130] & 255;
    var $sub136 = HEAP32[$width129 >> 2] - 1 + $conv131 - ($16 & 255) | 0;
    var $div = Math.floor(($sub136 >>> 0) / ($conv131 >>> 0));
    HEAP32[$width129 >> 2] = $div;
    var $19 = HEAPU8[$pixel_depth];
    var $conv141 = $19 & 255;
    if (($19 & 255) > 7) {
      __label__ = 33;
      break;
    } else {
      __label__ = 34;
      break;
    }
   case 33:
    var $cond = ($conv141 >>> 3) * $div | 0;
    __label__ = 35;
    break;
   case 34:
    var $cond = ($conv141 * $div + 7 | 0) >>> 3;
    __label__ = 35;
    break;
   case 35:
    var $cond;
    HEAP32[$row_info + 4 >> 2] = $cond;
    __label__ = 36;
    break;
   case 36:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_do_write_interlace["X"] = 1;

function _png_write_find_filter($png_ptr, $row_info) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $0 = HEAPU8[$png_ptr + 290 | 0];
    var $rowbytes = $row_info + 4 | 0;
    var $1 = HEAPU32[$rowbytes >> 2];
    var $num_prev_filters = $png_ptr + 493 | 0;
    var $2 = HEAPU8[$num_prev_filters];
    var $conv = $2 & 255;
    var $shr1 = ((HEAPU8[$row_info + 11 | 0] & 255) + 7 | 0) >>> 3;
    var $4 = HEAPU32[$png_ptr + 236 >> 2];
    var $5 = HEAPU32[$png_ptr + 240 >> 2];
    var $conv4 = $0 & 255;
    if (($conv4 & 8 | 0) == 0 | $0 << 24 >> 24 == 8) {
      var $mins_0 = 2147483647;
      __label__ = 13;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    if (($1 | 0) == 0) {
      var $sum_0_lcssa = 0;
      __label__ = 5;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $lftr_limit = $5 + $1 | 0;
    var $sum_026 = 0;
    var $_pn172 = $5;
    __label__ = 4;
    break;
   case 4:
    var $_pn172;
    var $sum_026;
    var $rp_027 = $_pn172 + 1 | 0;
    var $6 = HEAPU8[$rp_027];
    var $conv9 = $6 & 255;
    var $cond = $6 << 24 >> 24 > -1 ? $conv9 : 256 - $conv9 | 0;
    var $add12 = $cond + $sum_026 | 0;
    if (($rp_027 | 0) == ($lftr_limit | 0)) {
      var $sum_0_lcssa = $add12;
      __label__ = 5;
      break;
    } else {
      var $sum_026 = $add12;
      var $_pn172 = $rp_027;
      __label__ = 4;
      break;
    }
   case 5:
    var $sum_0_lcssa;
    if (HEAP8[$png_ptr + 492 | 0] << 24 >> 24 == 2) {
      __label__ = 6;
      break;
    } else {
      var $mins_0 = $sum_0_lcssa;
      __label__ = 13;
      break;
    }
   case 6:
    var $and17 = $sum_0_lcssa & 65535;
    var $and19 = $sum_0_lcssa >>> 10 & 4194240;
    if ($2 << 24 >> 24 == 0) {
      var $sumlo_0_lcssa = $and17;
      var $sumhi_0_lcssa = $and19;
      __label__ = 11;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    var $8 = HEAP32[$png_ptr + 496 >> 2];
    var $filter_weights = $png_ptr + 500 | 0;
    var $j_019 = 0;
    var $sumlo_020 = $and17;
    var $sumhi_021 = $and19;
    __label__ = 8;
    break;
   case 8:
    var $sumhi_021;
    var $sumlo_020;
    var $j_019;
    if (HEAP8[$8 + $j_019 | 0] << 24 >> 24 == 0) {
      __label__ = 9;
      break;
    } else {
      var $sumhi_1 = $sumhi_021;
      var $sumlo_1 = $sumlo_020;
      __label__ = 10;
      break;
    }
   case 9:
    var $conv29 = HEAPU16[HEAP32[$filter_weights >> 2] + ($j_019 << 1) >> 1] & 65535;
    var $sumhi_1 = ($conv29 * $sumhi_021 | 0) >>> 8;
    var $sumlo_1 = ($conv29 * $sumlo_020 | 0) >>> 8;
    __label__ = 10;
    break;
   case 10:
    var $sumlo_1;
    var $sumhi_1;
    var $inc37 = $j_019 + 1 | 0;
    if (($inc37 | 0) < ($conv | 0)) {
      var $j_019 = $inc37;
      var $sumlo_020 = $sumlo_1;
      var $sumhi_021 = $sumhi_1;
      __label__ = 8;
      break;
    } else {
      var $sumlo_0_lcssa = $sumlo_1;
      var $sumhi_0_lcssa = $sumhi_1;
      __label__ = 11;
      break;
    }
   case 11:
    var $sumhi_0_lcssa;
    var $sumlo_0_lcssa;
    var $conv40 = HEAPU16[HEAP32[$png_ptr + 508 >> 2] >> 1] & 65535;
    var $mul46 = $conv40 * $sumhi_0_lcssa | 0;
    if ($mul46 >>> 0 > 33553927) {
      var $mins_0 = 2147483647;
      __label__ = 13;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 12:
    var $mins_0 = ($mul46 << 7 & -1024) + (($conv40 * $sumlo_0_lcssa | 0) >>> 3) | 0;
    __label__ = 13;
    break;
   case 13:
    var $mins_0;
    if ($0 << 24 >> 24 == 16) {
      __label__ = 14;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 14:
    var $add_ptr61 = $5 + 1 | 0;
    var $sub_row = $png_ptr + 244 | 0;
    var $15 = HEAP32[$sub_row >> 2];
    var $dp_0162 = $15 + 1 | 0;
    if (($shr1 | 0) == 0) {
      var $i60_0_lcssa = 0;
      var $rp59_0_lcssa = $add_ptr61;
      var $dp_0_lcssa = $dp_0162;
      __label__ = 17;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 15:
    var $16 = $shr1 + 1 | 0;
    var $scevgep203 = $15 + $16 | 0;
    var $i60_0164 = 0;
    var $rp59_0165 = $add_ptr61;
    var $dp_0166 = $dp_0162;
    __label__ = 19;
    break;
   case 16:
    var $i60_0_lcssa = $shr1;
    var $rp59_0_lcssa = $5 + $16 | 0;
    var $dp_0_lcssa = $scevgep203;
    __label__ = 17;
    break;
   case 17:
    var $dp_0_lcssa;
    var $rp59_0_lcssa;
    var $i60_0_lcssa;
    if ($i60_0_lcssa >>> 0 < $1 >>> 0) {
      __label__ = 18;
      break;
    } else {
      __label__ = 21;
      break;
    }
   case 18:
    var $lftr_limit200 = $rp59_0_lcssa + ($1 - $i60_0_lcssa) | 0;
    var $dp_1159 = $dp_0_lcssa;
    var $lp_0160 = $add_ptr61;
    var $rp59_1161 = $rp59_0_lcssa;
    __label__ = 20;
    break;
   case 19:
    var $dp_0166;
    var $rp59_0165;
    var $i60_0164;
    var $18 = HEAP8[$rp59_0165];
    HEAP8[$dp_0166] = $18;
    var $inc68 = $i60_0164 + 1 | 0;
    if ($inc68 >>> 0 < $shr1 >>> 0) {
      var $i60_0164 = $inc68;
      var $rp59_0165 = $rp59_0165 + 1 | 0;
      var $dp_0166 = $dp_0166 + 1 | 0;
      __label__ = 19;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 20:
    var $rp59_1161;
    var $lp_0160;
    var $dp_1159;
    var $sub79 = HEAP8[$rp59_1161] - HEAP8[$lp_0160] & 255;
    HEAP8[$dp_1159] = $sub79;
    var $incdec_ptr84 = $rp59_1161 + 1 | 0;
    if (($incdec_ptr84 | 0) == ($lftr_limit200 | 0)) {
      __label__ = 21;
      break;
    } else {
      var $dp_1159 = $dp_1159 + 1 | 0;
      var $lp_0160 = $lp_0160 + 1 | 0;
      var $rp59_1161 = $incdec_ptr84;
      __label__ = 20;
      break;
    }
   case 21:
    var $best_row_0 = HEAP32[$sub_row >> 2];
    var $mins_1 = $mins_0;
    __label__ = 48;
    break;
   case 22:
    if (($conv4 & 16 | 0) == 0) {
      var $best_row_0 = $5;
      var $mins_1 = $mins_0;
      __label__ = 48;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 23:
    var $heuristic_method100 = $png_ptr + 492 | 0;
    if (HEAP8[$heuristic_method100] << 24 >> 24 == 2) {
      __label__ = 24;
      break;
    } else {
      var $lmins_0 = $mins_0;
      __label__ = 31;
      break;
    }
   case 24:
    var $and106 = $mins_0 & 65535;
    var $and108 = $mins_0 >>> 10 & 4194240;
    if ($2 << 24 >> 24 == 0) {
      var $lmlo_0_lcssa = $and106;
      var $lmhi_0_lcssa = $and108;
      __label__ = 29;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 25:
    var $23 = HEAP32[$png_ptr + 496 >> 2];
    var $inv_filter_weights = $png_ptr + 504 | 0;
    var $lmlo_046 = $and106;
    var $lmhi_047 = $and108;
    var $j105_048 = 0;
    __label__ = 26;
    break;
   case 26:
    var $j105_048;
    var $lmhi_047;
    var $lmlo_046;
    if (HEAP8[$23 + $j105_048 | 0] << 24 >> 24 == 1) {
      __label__ = 27;
      break;
    } else {
      var $lmhi_1 = $lmhi_047;
      var $lmlo_1 = $lmlo_046;
      __label__ = 28;
      break;
    }
   case 27:
    var $conv120 = HEAPU16[HEAP32[$inv_filter_weights >> 2] + ($j105_048 << 1) >> 1] & 65535;
    var $lmhi_1 = ($conv120 * $lmhi_047 | 0) >>> 8;
    var $lmlo_1 = ($conv120 * $lmlo_046 | 0) >>> 8;
    __label__ = 28;
    break;
   case 28:
    var $lmlo_1;
    var $lmhi_1;
    var $inc130 = $j105_048 + 1 | 0;
    if (($inc130 | 0) < ($conv | 0)) {
      var $lmlo_046 = $lmlo_1;
      var $lmhi_047 = $lmhi_1;
      var $j105_048 = $inc130;
      __label__ = 26;
      break;
    } else {
      var $lmlo_0_lcssa = $lmlo_1;
      var $lmhi_0_lcssa = $lmhi_1;
      __label__ = 29;
      break;
    }
   case 29:
    var $lmhi_0_lcssa;
    var $lmlo_0_lcssa;
    var $conv133 = HEAPU16[HEAP32[$png_ptr + 512 >> 2] + 2 >> 1] & 65535;
    var $mul139 = $conv133 * $lmhi_0_lcssa | 0;
    if ($mul139 >>> 0 > 33553927) {
      var $lmins_0 = 2147483647;
      __label__ = 31;
      break;
    } else {
      __label__ = 30;
      break;
    }
   case 30:
    var $lmins_0 = ($mul139 << 7 & -1024) + (($conv133 * $lmlo_0_lcssa | 0) >>> 3) | 0;
    __label__ = 31;
    break;
   case 31:
    var $lmins_0;
    var $add_ptr149 = $5 + 1 | 0;
    var $sub_row150 = $png_ptr + 244 | 0;
    var $30 = HEAP32[$sub_row150 >> 2];
    var $dp95_035 = $30 + 1 | 0;
    if (($shr1 | 0) == 0) {
      var $rp94_1 = $add_ptr149;
      var $dp95_1 = $dp95_035;
      var $lp96_0 = $add_ptr149;
      var $sum97_1 = 0;
      var $i98_1 = 0;
      __label__ = 35;
      break;
    } else {
      __label__ = 32;
      break;
    }
   case 32:
    var $31 = $shr1 + 1 | 0;
    var $scevgep = $30 + $31 | 0;
    var $i98_037 = 0;
    var $sum97_038 = 0;
    var $rp94_039 = $add_ptr149;
    var $dp95_040 = $dp95_035;
    __label__ = 34;
    break;
   case 33:
    var $rp94_1 = $5 + $31 | 0;
    var $dp95_1 = $scevgep;
    var $lp96_0 = $add_ptr149;
    var $sum97_1 = $add164;
    var $i98_1 = $shr1;
    __label__ = 35;
    break;
   case 34:
    var $dp95_040;
    var $rp94_039;
    var $sum97_038;
    var $i98_037;
    var $32 = HEAPU8[$rp94_039];
    HEAP8[$dp95_040] = $32;
    var $conv156 = $32 & 255;
    var $cond163 = $32 << 24 >> 24 > -1 ? $conv156 : 256 - $conv156 | 0;
    var $add164 = $cond163 + $sum97_038 | 0;
    var $inc166 = $i98_037 + 1 | 0;
    if ($inc166 >>> 0 < $shr1 >>> 0) {
      var $i98_037 = $inc166;
      var $sum97_038 = $add164;
      var $rp94_039 = $rp94_039 + 1 | 0;
      var $dp95_040 = $dp95_040 + 1 | 0;
      __label__ = 34;
      break;
    } else {
      __label__ = 33;
      break;
    }
   case 35:
    var $i98_1;
    var $sum97_1;
    var $lp96_0;
    var $dp95_1;
    var $rp94_1;
    if ($i98_1 >>> 0 < $1 >>> 0) {
      __label__ = 36;
      break;
    } else {
      var $sum97_2 = $sum97_1;
      __label__ = 38;
      break;
    }
   case 36:
    var $sub177 = (HEAPU8[$rp94_1] & 255) - (HEAPU8[$lp96_0] & 255) | 0;
    HEAP8[$dp95_1] = $sub177 & 255;
    var $conv180 = $sub177 & 255;
    var $cond187 = $conv180 >>> 0 < 128 ? $conv180 : 256 - $conv180 | 0;
    var $add188 = $cond187 + $sum97_1 | 0;
    if ($add188 >>> 0 > $lmins_0 >>> 0) {
      var $sum97_2 = $add188;
      __label__ = 38;
      break;
    } else {
      __label__ = 37;
      break;
    }
   case 37:
    var $rp94_1 = $rp94_1 + 1 | 0;
    var $dp95_1 = $dp95_1 + 1 | 0;
    var $lp96_0 = $lp96_0 + 1 | 0;
    var $sum97_1 = $add188;
    var $i98_1 = $i98_1 + 1 | 0;
    __label__ = 35;
    break;
   case 38:
    var $sum97_2;
    if (HEAP8[$heuristic_method100] << 24 >> 24 == 2) {
      __label__ = 39;
      break;
    } else {
      var $sum97_3 = $sum97_2;
      __label__ = 46;
      break;
    }
   case 39:
    var $and207 = $sum97_2 & 65535;
    var $and209 = $sum97_2 >>> 10 & 4194240;
    if ($2 << 24 >> 24 == 0) {
      var $sumlo206_0_lcssa = $and207;
      var $sumhi205_0_lcssa = $and209;
      __label__ = 44;
      break;
    } else {
      __label__ = 40;
      break;
    }
   case 40:
    var $36 = HEAP32[$png_ptr + 496 >> 2];
    var $inv_filter_weights220 = $png_ptr + 504 | 0;
    var $sumlo206_030 = $and207;
    var $sumhi205_031 = $and209;
    var $j204_032 = 0;
    __label__ = 41;
    break;
   case 41:
    var $j204_032;
    var $sumhi205_031;
    var $sumlo206_030;
    if (HEAP8[$36 + $j204_032 | 0] << 24 >> 24 == 1) {
      __label__ = 42;
      break;
    } else {
      var $sumhi205_1 = $sumhi205_031;
      var $sumlo206_1 = $sumlo206_030;
      __label__ = 43;
      break;
    }
   case 42:
    var $conv222 = HEAPU16[HEAP32[$inv_filter_weights220 >> 2] + ($j204_032 << 1) >> 1] & 65535;
    var $sumhi205_1 = ($conv222 * $sumhi205_031 | 0) >>> 8;
    var $sumlo206_1 = ($conv222 * $sumlo206_030 | 0) >>> 8;
    __label__ = 43;
    break;
   case 43:
    var $sumlo206_1;
    var $sumhi205_1;
    var $inc232 = $j204_032 + 1 | 0;
    if (($inc232 | 0) < ($conv | 0)) {
      var $sumlo206_030 = $sumlo206_1;
      var $sumhi205_031 = $sumhi205_1;
      var $j204_032 = $inc232;
      __label__ = 41;
      break;
    } else {
      var $sumlo206_0_lcssa = $sumlo206_1;
      var $sumhi205_0_lcssa = $sumhi205_1;
      __label__ = 44;
      break;
    }
   case 44:
    var $sumhi205_0_lcssa;
    var $sumlo206_0_lcssa;
    var $conv236 = HEAPU16[HEAP32[$png_ptr + 512 >> 2] + 2 >> 1] & 65535;
    var $mul242 = $conv236 * $sumhi205_0_lcssa | 0;
    if ($mul242 >>> 0 > 33553927) {
      var $sum97_3 = 2147483647;
      __label__ = 46;
      break;
    } else {
      __label__ = 45;
      break;
    }
   case 45:
    var $sum97_3 = ($mul242 << 7 & -1024) + (($conv236 * $sumlo206_0_lcssa | 0) >>> 3) | 0;
    __label__ = 46;
    break;
   case 46:
    var $sum97_3;
    if ($sum97_3 >>> 0 < $mins_0 >>> 0) {
      __label__ = 47;
      break;
    } else {
      var $best_row_0 = $5;
      var $mins_1 = $mins_0;
      __label__ = 48;
      break;
    }
   case 47:
    var $best_row_0 = HEAP32[$sub_row150 >> 2];
    var $mins_1 = $sum97_3;
    __label__ = 48;
    break;
   case 48:
    var $mins_1;
    var $best_row_0;
    if ($0 << 24 >> 24 == 32) {
      __label__ = 49;
      break;
    } else {
      __label__ = 53;
      break;
    }
   case 49:
    var $up_row = $png_ptr + 248 | 0;
    if (($1 | 0) == 0) {
      __label__ = 52;
      break;
    } else {
      __label__ = 50;
      break;
    }
   case 50:
    var $lftr_limit198 = $4 + $1 | 0;
    var $_pn171 = $5;
    var $_pn170 = HEAP32[$up_row >> 2];
    var $_pn = $4;
    __label__ = 51;
    break;
   case 51:
    var $_pn;
    var $_pn170;
    var $_pn171;
    var $rp263_0154 = $_pn171 + 1 | 0;
    var $dp264_0155 = $_pn170 + 1 | 0;
    var $pp_0156 = $_pn + 1 | 0;
    var $sub275 = HEAP8[$rp263_0154] - HEAP8[$pp_0156] & 255;
    HEAP8[$dp264_0155] = $sub275;
    if (($pp_0156 | 0) == ($lftr_limit198 | 0)) {
      __label__ = 52;
      break;
    } else {
      var $_pn171 = $rp263_0154;
      var $_pn170 = $dp264_0155;
      var $_pn = $pp_0156;
      __label__ = 51;
      break;
    }
   case 52:
    var $best_row_1 = HEAP32[$up_row >> 2];
    var $mins_2 = $mins_1;
    __label__ = 76;
    break;
   case 53:
    if (($conv4 & 32 | 0) == 0) {
      var $best_row_1 = $best_row_0;
      var $mins_2 = $mins_1;
      __label__ = 76;
      break;
    } else {
      __label__ = 54;
      break;
    }
   case 54:
    var $heuristic_method297 = $png_ptr + 492 | 0;
    if (HEAP8[$heuristic_method297] << 24 >> 24 == 2) {
      __label__ = 55;
      break;
    } else {
      var $lmins294_0 = $mins_1;
      __label__ = 62;
      break;
    }
   case 55:
    var $and305 = $mins_1 & 65535;
    var $and307 = $mins_1 >>> 10 & 4194240;
    if ($2 << 24 >> 24 == 0) {
      var $lmlo304_0_lcssa = $and305;
      var $lmhi303_0_lcssa = $and307;
      __label__ = 60;
      break;
    } else {
      __label__ = 56;
      break;
    }
   case 56:
    var $49 = HEAP32[$png_ptr + 496 >> 2];
    var $inv_filter_weights318 = $png_ptr + 504 | 0;
    var $lmlo304_058 = $and305;
    var $lmhi303_059 = $and307;
    var $j302_060 = 0;
    __label__ = 57;
    break;
   case 57:
    var $j302_060;
    var $lmhi303_059;
    var $lmlo304_058;
    if (HEAP8[$49 + $j302_060 | 0] << 24 >> 24 == 2) {
      __label__ = 58;
      break;
    } else {
      var $lmhi303_1 = $lmhi303_059;
      var $lmlo304_1 = $lmlo304_058;
      __label__ = 59;
      break;
    }
   case 58:
    var $conv320 = HEAPU16[HEAP32[$inv_filter_weights318 >> 2] + ($j302_060 << 1) >> 1] & 65535;
    var $lmhi303_1 = ($conv320 * $lmhi303_059 | 0) >>> 8;
    var $lmlo304_1 = ($conv320 * $lmlo304_058 | 0) >>> 8;
    __label__ = 59;
    break;
   case 59:
    var $lmlo304_1;
    var $lmhi303_1;
    var $inc330 = $j302_060 + 1 | 0;
    if (($inc330 | 0) < ($conv | 0)) {
      var $lmlo304_058 = $lmlo304_1;
      var $lmhi303_059 = $lmhi303_1;
      var $j302_060 = $inc330;
      __label__ = 57;
      break;
    } else {
      var $lmlo304_0_lcssa = $lmlo304_1;
      var $lmhi303_0_lcssa = $lmhi303_1;
      __label__ = 60;
      break;
    }
   case 60:
    var $lmhi303_0_lcssa;
    var $lmlo304_0_lcssa;
    var $conv334 = HEAPU16[HEAP32[$png_ptr + 512 >> 2] + 4 >> 1] & 65535;
    var $mul340 = $conv334 * $lmhi303_0_lcssa | 0;
    if ($mul340 >>> 0 > 33553927) {
      var $lmins294_0 = 2147483647;
      __label__ = 62;
      break;
    } else {
      __label__ = 61;
      break;
    }
   case 61:
    var $lmins294_0 = ($mul340 << 7 & -1024) + (($conv334 * $lmlo304_0_lcssa | 0) >>> 3) | 0;
    __label__ = 62;
    break;
   case 62:
    var $lmins294_0;
    var $up_row351 = $png_ptr + 248 | 0;
    var $_pn9 = $5;
    var $_pn8 = HEAP32[$up_row351 >> 2];
    var $_pn7 = $4;
    var $sum293_0 = 0;
    var $i295_0 = 0;
    __label__ = 63;
    break;
   case 63:
    var $i295_0;
    var $sum293_0;
    var $_pn7;
    var $_pn8;
    var $_pn9;
    var $rp290_0 = $_pn9 + 1 | 0;
    var $dp291_0 = $_pn8 + 1 | 0;
    var $pp292_0 = $_pn7 + 1 | 0;
    if ($i295_0 >>> 0 < $1 >>> 0) {
      __label__ = 64;
      break;
    } else {
      var $sum293_1 = $sum293_0;
      __label__ = 66;
      break;
    }
   case 64:
    var $sub362 = (HEAPU8[$rp290_0] & 255) - (HEAPU8[$pp292_0] & 255) | 0;
    HEAP8[$dp291_0] = $sub362 & 255;
    var $conv366 = $sub362 & 255;
    var $cond373 = $conv366 >>> 0 < 128 ? $conv366 : 256 - $conv366 | 0;
    var $add374 = $cond373 + $sum293_0 | 0;
    if ($add374 >>> 0 > $lmins294_0 >>> 0) {
      var $sum293_1 = $add374;
      __label__ = 66;
      break;
    } else {
      __label__ = 65;
      break;
    }
   case 65:
    var $_pn9 = $rp290_0;
    var $_pn8 = $dp291_0;
    var $_pn7 = $pp292_0;
    var $sum293_0 = $add374;
    var $i295_0 = $i295_0 + 1 | 0;
    __label__ = 63;
    break;
   case 66:
    var $sum293_1;
    if (HEAP8[$heuristic_method297] << 24 >> 24 == 2) {
      __label__ = 67;
      break;
    } else {
      var $sum293_2 = $sum293_1;
      __label__ = 74;
      break;
    }
   case 67:
    var $and390 = $sum293_1 & 65535;
    var $and392 = $sum293_1 >>> 10 & 4194240;
    if ($2 << 24 >> 24 == 0) {
      var $sumlo389_0_lcssa = $and390;
      var $sumhi388_0_lcssa = $and392;
      __label__ = 72;
      break;
    } else {
      __label__ = 68;
      break;
    }
   case 68:
    var $60 = HEAP32[$png_ptr + 496 >> 2];
    var $filter_weights403 = $png_ptr + 500 | 0;
    var $sumlo389_052 = $and390;
    var $sumhi388_053 = $and392;
    var $j387_054 = 0;
    __label__ = 69;
    break;
   case 69:
    var $j387_054;
    var $sumhi388_053;
    var $sumlo389_052;
    if (HEAP8[$60 + $j387_054 | 0] << 24 >> 24 == 2) {
      __label__ = 70;
      break;
    } else {
      var $sumhi388_1 = $sumhi388_053;
      var $sumlo389_1 = $sumlo389_052;
      __label__ = 71;
      break;
    }
   case 70:
    var $conv405 = HEAPU16[HEAP32[$filter_weights403 >> 2] + ($j387_054 << 1) >> 1] & 65535;
    var $sumhi388_1 = ($conv405 * $sumhi388_053 | 0) >>> 8;
    var $sumlo389_1 = ($conv405 * $sumlo389_052 | 0) >>> 8;
    __label__ = 71;
    break;
   case 71:
    var $sumlo389_1;
    var $sumhi388_1;
    var $inc415 = $j387_054 + 1 | 0;
    if (($inc415 | 0) < ($conv | 0)) {
      var $sumlo389_052 = $sumlo389_1;
      var $sumhi388_053 = $sumhi388_1;
      var $j387_054 = $inc415;
      __label__ = 69;
      break;
    } else {
      var $sumlo389_0_lcssa = $sumlo389_1;
      var $sumhi388_0_lcssa = $sumhi388_1;
      __label__ = 72;
      break;
    }
   case 72:
    var $sumhi388_0_lcssa;
    var $sumlo389_0_lcssa;
    var $conv419 = HEAPU16[HEAP32[$png_ptr + 508 >> 2] + 4 >> 1] & 65535;
    var $mul425 = $conv419 * $sumhi388_0_lcssa | 0;
    if ($mul425 >>> 0 > 33553927) {
      var $sum293_2 = 2147483647;
      __label__ = 74;
      break;
    } else {
      __label__ = 73;
      break;
    }
   case 73:
    var $sum293_2 = ($mul425 << 7 & -1024) + (($conv419 * $sumlo389_0_lcssa | 0) >>> 3) | 0;
    __label__ = 74;
    break;
   case 74:
    var $sum293_2;
    if ($sum293_2 >>> 0 < $mins_1 >>> 0) {
      __label__ = 75;
      break;
    } else {
      var $best_row_1 = $best_row_0;
      var $mins_2 = $mins_1;
      __label__ = 76;
      break;
    }
   case 75:
    var $best_row_1 = HEAP32[$up_row351 >> 2];
    var $mins_2 = $sum293_2;
    __label__ = 76;
    break;
   case 76:
    var $mins_2;
    var $best_row_1;
    if ($0 << 24 >> 24 == 64) {
      __label__ = 77;
      break;
    } else {
      __label__ = 85;
      break;
    }
   case 77:
    var $add_ptr451 = $5 + 1 | 0;
    var $avg_row = $png_ptr + 252 | 0;
    var $68 = HEAP32[$avg_row >> 2];
    var $dp447_0138 = $68 + 1 | 0;
    var $pp448_0139 = $4 + 1 | 0;
    if (($shr1 | 0) == 0) {
      var $i450_0_lcssa = 0;
      var $rp446_0_lcssa = $add_ptr451;
      var $dp447_0_lcssa = $dp447_0138;
      var $pp448_0_lcssa = $pp448_0139;
      __label__ = 80;
      break;
    } else {
      __label__ = 78;
      break;
    }
   case 78:
    var $69 = $shr1 + 1 | 0;
    var $scevgep196 = $68 + $69 | 0;
    var $i450_0141 = 0;
    var $rp446_0142 = $add_ptr451;
    var $dp447_0143 = $dp447_0138;
    var $pp448_0144 = $pp448_0139;
    __label__ = 82;
    break;
   case 79:
    var $i450_0_lcssa = $shr1;
    var $rp446_0_lcssa = $5 + $69 | 0;
    var $dp447_0_lcssa = $scevgep196;
    var $pp448_0_lcssa = $4 + $69 | 0;
    __label__ = 80;
    break;
   case 80:
    var $pp448_0_lcssa;
    var $dp447_0_lcssa;
    var $rp446_0_lcssa;
    var $i450_0_lcssa;
    if ($i450_0_lcssa >>> 0 < $1 >>> 0) {
      __label__ = 81;
      break;
    } else {
      __label__ = 84;
      break;
    }
   case 81:
    var $lftr_limit191 = $rp446_0_lcssa + ($1 - $i450_0_lcssa) | 0;
    var $lp449_0134 = $add_ptr451;
    var $pp448_1135 = $pp448_0_lcssa;
    var $dp447_1136 = $dp447_0_lcssa;
    var $rp446_1137 = $rp446_0_lcssa;
    __label__ = 83;
    break;
   case 82:
    var $pp448_0144;
    var $dp447_0143;
    var $rp446_0142;
    var $i450_0141;
    var $sub462 = HEAP8[$rp446_0142] - ((HEAPU8[$pp448_0144] & 255) >>> 1) & 255;
    HEAP8[$dp447_0143] = $sub462;
    var $inc467 = $i450_0141 + 1 | 0;
    if ($inc467 >>> 0 < $shr1 >>> 0) {
      var $i450_0141 = $inc467;
      var $rp446_0142 = $rp446_0142 + 1 | 0;
      var $dp447_0143 = $dp447_0143 + 1 | 0;
      var $pp448_0144 = $pp448_0144 + 1 | 0;
      __label__ = 82;
      break;
    } else {
      __label__ = 79;
      break;
    }
   case 83:
    var $rp446_1137;
    var $dp447_1136;
    var $pp448_1135;
    var $lp449_0134;
    var $incdec_ptr474 = $rp446_1137 + 1 | 0;
    HEAP8[$dp447_1136] = (HEAPU8[$rp446_1137] & 255) - (((HEAPU8[$lp449_0134] & 255) + (HEAPU8[$pp448_1135] & 255) | 0) >>> 1) & 255;
    if (($incdec_ptr474 | 0) == ($lftr_limit191 | 0)) {
      __label__ = 84;
      break;
    } else {
      var $lp449_0134 = $lp449_0134 + 1 | 0;
      var $pp448_1135 = $pp448_1135 + 1 | 0;
      var $dp447_1136 = $dp447_1136 + 1 | 0;
      var $rp446_1137 = $incdec_ptr474;
      __label__ = 83;
      break;
    }
   case 84:
    var $best_row_2 = HEAP32[$avg_row >> 2];
    var $mins_3 = $mins_2;
    __label__ = 111;
    break;
   case 85:
    if (($conv4 & 64 | 0) == 0) {
      var $best_row_2 = $best_row_1;
      var $mins_3 = $mins_2;
      __label__ = 111;
      break;
    } else {
      __label__ = 86;
      break;
    }
   case 86:
    var $heuristic_method503 = $png_ptr + 492 | 0;
    if (HEAP8[$heuristic_method503] << 24 >> 24 == 2) {
      __label__ = 87;
      break;
    } else {
      var $lmins500_0 = $mins_2;
      __label__ = 94;
      break;
    }
   case 87:
    var $and511 = $mins_2 & 65535;
    var $and513 = $mins_2 >>> 10 & 4194240;
    if ($2 << 24 >> 24 == 0) {
      var $lmlo510_0_lcssa = $and511;
      var $lmhi509_0_lcssa = $and513;
      __label__ = 92;
      break;
    } else {
      __label__ = 88;
      break;
    }
   case 88:
    var $78 = HEAP32[$png_ptr + 496 >> 2];
    var $inv_filter_weights524 = $png_ptr + 504 | 0;
    var $lmlo510_083 = $and511;
    var $lmhi509_084 = $and513;
    var $j508_085 = 0;
    __label__ = 89;
    break;
   case 89:
    var $j508_085;
    var $lmhi509_084;
    var $lmlo510_083;
    if (HEAP8[$78 + $j508_085 | 0] << 24 >> 24 == 3) {
      __label__ = 90;
      break;
    } else {
      var $lmhi509_1 = $lmhi509_084;
      var $lmlo510_1 = $lmlo510_083;
      __label__ = 91;
      break;
    }
   case 90:
    var $conv526 = HEAPU16[HEAP32[$inv_filter_weights524 >> 2] + ($j508_085 << 1) >> 1] & 65535;
    var $lmhi509_1 = ($conv526 * $lmhi509_084 | 0) >>> 8;
    var $lmlo510_1 = ($conv526 * $lmlo510_083 | 0) >>> 8;
    __label__ = 91;
    break;
   case 91:
    var $lmlo510_1;
    var $lmhi509_1;
    var $inc536 = $j508_085 + 1 | 0;
    if (($inc536 | 0) < ($conv | 0)) {
      var $lmlo510_083 = $lmlo510_1;
      var $lmhi509_084 = $lmhi509_1;
      var $j508_085 = $inc536;
      __label__ = 89;
      break;
    } else {
      var $lmlo510_0_lcssa = $lmlo510_1;
      var $lmhi509_0_lcssa = $lmhi509_1;
      __label__ = 92;
      break;
    }
   case 92:
    var $lmhi509_0_lcssa;
    var $lmlo510_0_lcssa;
    var $conv540 = HEAPU16[HEAP32[$png_ptr + 512 >> 2] + 6 >> 1] & 65535;
    var $mul546 = $conv540 * $lmhi509_0_lcssa | 0;
    if ($mul546 >>> 0 > 33553927) {
      var $lmins500_0 = 2147483647;
      __label__ = 94;
      break;
    } else {
      __label__ = 93;
      break;
    }
   case 93:
    var $lmins500_0 = ($mul546 << 7 & -1024) + (($conv540 * $lmlo510_0_lcssa | 0) >>> 3) | 0;
    __label__ = 94;
    break;
   case 94:
    var $lmins500_0;
    var $add_ptr556 = $5 + 1 | 0;
    var $avg_row557 = $png_ptr + 252 | 0;
    var $85 = HEAP32[$avg_row557 >> 2];
    var $dp496_069 = $85 + 1 | 0;
    var $pp497_070 = $4 + 1 | 0;
    if (($shr1 | 0) == 0) {
      var $rp495_1 = $add_ptr556;
      var $dp496_1 = $dp496_069;
      var $pp497_1 = $pp497_070;
      var $lp498_0 = $add_ptr556;
      var $sum499_1 = 0;
      var $i501_1 = 0;
      __label__ = 98;
      break;
    } else {
      __label__ = 95;
      break;
    }
   case 95:
    var $86 = $shr1 + 1 | 0;
    var $scevgep179 = $85 + $86 | 0;
    var $i501_072 = 0;
    var $sum499_073 = 0;
    var $rp495_074 = $add_ptr556;
    var $dp496_075 = $dp496_069;
    var $pp497_076 = $pp497_070;
    __label__ = 97;
    break;
   case 96:
    var $rp495_1 = $5 + $86 | 0;
    var $dp496_1 = $scevgep179;
    var $pp497_1 = $4 + $86 | 0;
    var $lp498_0 = $add_ptr556;
    var $sum499_1 = $add581;
    var $i501_1 = $shr1;
    __label__ = 98;
    break;
   case 97:
    var $pp497_076;
    var $dp496_075;
    var $rp495_074;
    var $sum499_073;
    var $i501_072;
    var $sub569 = (HEAPU8[$rp495_074] & 255) - ((HEAPU8[$pp497_076] & 255) >>> 1) | 0;
    HEAP8[$dp496_075] = $sub569 & 255;
    var $conv573 = $sub569 & 255;
    var $cond580 = $conv573 >>> 0 < 128 ? $conv573 : 256 - $conv573 | 0;
    var $add581 = $cond580 + $sum499_073 | 0;
    var $inc583 = $i501_072 + 1 | 0;
    if ($inc583 >>> 0 < $shr1 >>> 0) {
      var $i501_072 = $inc583;
      var $sum499_073 = $add581;
      var $rp495_074 = $rp495_074 + 1 | 0;
      var $dp496_075 = $dp496_075 + 1 | 0;
      var $pp497_076 = $pp497_076 + 1 | 0;
      __label__ = 97;
      break;
    } else {
      __label__ = 96;
      break;
    }
   case 98:
    var $i501_1;
    var $sum499_1;
    var $lp498_0;
    var $pp497_1;
    var $dp496_1;
    var $rp495_1;
    if ($i501_1 >>> 0 < $1 >>> 0) {
      __label__ = 99;
      break;
    } else {
      var $sum499_2 = $sum499_1;
      __label__ = 101;
      break;
    }
   case 99:
    var $sub598 = (HEAPU8[$rp495_1] & 255) - (((HEAPU8[$lp498_0] & 255) + (HEAPU8[$pp497_1] & 255) | 0) >>> 1) | 0;
    HEAP8[$dp496_1] = $sub598 & 255;
    var $conv602 = $sub598 & 255;
    var $cond609 = $conv602 >>> 0 < 128 ? $conv602 : 256 - $conv602 | 0;
    var $add610 = $cond609 + $sum499_1 | 0;
    if ($add610 >>> 0 > $lmins500_0 >>> 0) {
      var $sum499_2 = $add610;
      __label__ = 101;
      break;
    } else {
      __label__ = 100;
      break;
    }
   case 100:
    var $rp495_1 = $rp495_1 + 1 | 0;
    var $dp496_1 = $dp496_1 + 1 | 0;
    var $pp497_1 = $pp497_1 + 1 | 0;
    var $lp498_0 = $lp498_0 + 1 | 0;
    var $sum499_1 = $add610;
    var $i501_1 = $i501_1 + 1 | 0;
    __label__ = 98;
    break;
   case 101:
    var $sum499_2;
    if (HEAP8[$heuristic_method503] << 24 >> 24 == 2) {
      __label__ = 102;
      break;
    } else {
      var $sum499_3 = $sum499_2;
      __label__ = 109;
      break;
    }
   case 102:
    var $and626 = $sum499_2 & 65535;
    var $and628 = $sum499_2 >>> 10 & 4194240;
    if ($2 << 24 >> 24 == 0) {
      var $sumlo625_0_lcssa = $and626;
      var $sumhi624_0_lcssa = $and628;
      __label__ = 107;
      break;
    } else {
      __label__ = 103;
      break;
    }
   case 103:
    var $93 = HEAP32[$png_ptr + 496 >> 2];
    var $filter_weights639 = $png_ptr + 500 | 0;
    var $sumlo625_064 = $and626;
    var $sumhi624_065 = $and628;
    var $j623_066 = 0;
    __label__ = 104;
    break;
   case 104:
    var $j623_066;
    var $sumhi624_065;
    var $sumlo625_064;
    if (HEAP8[$93 + $j623_066 | 0] << 24 >> 24 == 0) {
      __label__ = 105;
      break;
    } else {
      var $sumhi624_1 = $sumhi624_065;
      var $sumlo625_1 = $sumlo625_064;
      __label__ = 106;
      break;
    }
   case 105:
    var $conv641 = HEAPU16[HEAP32[$filter_weights639 >> 2] + ($j623_066 << 1) >> 1] & 65535;
    var $sumhi624_1 = ($conv641 * $sumhi624_065 | 0) >>> 8;
    var $sumlo625_1 = ($conv641 * $sumlo625_064 | 0) >>> 8;
    __label__ = 106;
    break;
   case 106:
    var $sumlo625_1;
    var $sumhi624_1;
    var $inc651 = $j623_066 + 1 | 0;
    if (($inc651 | 0) < ($conv | 0)) {
      var $sumlo625_064 = $sumlo625_1;
      var $sumhi624_065 = $sumhi624_1;
      var $j623_066 = $inc651;
      __label__ = 104;
      break;
    } else {
      var $sumlo625_0_lcssa = $sumlo625_1;
      var $sumhi624_0_lcssa = $sumhi624_1;
      __label__ = 107;
      break;
    }
   case 107:
    var $sumhi624_0_lcssa;
    var $sumlo625_0_lcssa;
    var $conv655 = HEAPU16[HEAP32[$png_ptr + 508 >> 2] + 6 >> 1] & 65535;
    var $mul661 = $conv655 * $sumhi624_0_lcssa | 0;
    if ($mul661 >>> 0 > 33553927) {
      var $sum499_3 = 2147483647;
      __label__ = 109;
      break;
    } else {
      __label__ = 108;
      break;
    }
   case 108:
    var $sum499_3 = ($mul661 << 7 & -1024) + (($conv655 * $sumlo625_0_lcssa | 0) >>> 3) | 0;
    __label__ = 109;
    break;
   case 109:
    var $sum499_3;
    if ($sum499_3 >>> 0 < $mins_2 >>> 0) {
      __label__ = 110;
      break;
    } else {
      var $best_row_2 = $best_row_1;
      var $mins_3 = $mins_2;
      __label__ = 111;
      break;
    }
   case 110:
    var $best_row_2 = HEAP32[$avg_row557 >> 2];
    var $mins_3 = $sum499_3;
    __label__ = 111;
    break;
   case 111:
    var $mins_3;
    var $best_row_2;
    if ($0 << 24 >> 24 == -128) {
      __label__ = 112;
      break;
    } else {
      __label__ = 122;
      break;
    }
   case 112:
    var $add_ptr687 = $5 + 1 | 0;
    var $paeth_row = $png_ptr + 256 | 0;
    var $101 = HEAP32[$paeth_row >> 2];
    var $add_ptr689 = $4 + 1 | 0;
    var $dp683_0122 = $101 + 1 | 0;
    if (($shr1 | 0) == 0) {
      var $i686_0_lcssa = 0;
      var $pp684_0_lcssa = $add_ptr689;
      var $rp682_0_lcssa = $add_ptr687;
      var $dp683_0_lcssa = $dp683_0122;
      __label__ = 115;
      break;
    } else {
      __label__ = 113;
      break;
    }
   case 113:
    var $102 = $shr1 + 1 | 0;
    var $scevgep189 = $4 + $102 | 0;
    var $i686_0124 = 0;
    var $pp684_0125 = $add_ptr689;
    var $rp682_0126 = $add_ptr687;
    var $dp683_0127 = $dp683_0122;
    __label__ = 117;
    break;
   case 114:
    var $i686_0_lcssa = $shr1;
    var $pp684_0_lcssa = $scevgep189;
    var $rp682_0_lcssa = $5 + $102 | 0;
    var $dp683_0_lcssa = $101 + $102 | 0;
    __label__ = 115;
    break;
   case 115:
    var $dp683_0_lcssa;
    var $rp682_0_lcssa;
    var $pp684_0_lcssa;
    var $i686_0_lcssa;
    if ($i686_0_lcssa >>> 0 < $1 >>> 0) {
      __label__ = 116;
      break;
    } else {
      __label__ = 121;
      break;
    }
   case 116:
    var $lftr_limit185 = $rp682_0_lcssa + ($1 - $i686_0_lcssa) | 0;
    var $lp685_0117 = $add_ptr687;
    var $cp_0118 = $add_ptr689;
    var $pp684_1119 = $pp684_0_lcssa;
    var $dp683_1120 = $dp683_0_lcssa;
    var $rp682_1121 = $rp682_0_lcssa;
    __label__ = 118;
    break;
   case 117:
    var $dp683_0127;
    var $rp682_0126;
    var $pp684_0125;
    var $i686_0124;
    var $sub698 = HEAP8[$rp682_0126] - HEAP8[$pp684_0125] & 255;
    HEAP8[$dp683_0127] = $sub698;
    var $inc703 = $i686_0124 + 1 | 0;
    if ($inc703 >>> 0 < $shr1 >>> 0) {
      var $i686_0124 = $inc703;
      var $pp684_0125 = $pp684_0125 + 1 | 0;
      var $rp682_0126 = $rp682_0126 + 1 | 0;
      var $dp683_0127 = $dp683_0127 + 1 | 0;
      __label__ = 117;
      break;
    } else {
      __label__ = 114;
      break;
    }
   case 118:
    var $rp682_1121;
    var $dp683_1120;
    var $pp684_1119;
    var $cp_0118;
    var $lp685_0117;
    var $incdec_ptr711 = $pp684_1119 + 1 | 0;
    var $106 = HEAPU8[$pp684_1119];
    var $incdec_ptr713 = $cp_0118 + 1 | 0;
    var $107 = HEAPU8[$cp_0118];
    var $conv714 = $107 & 255;
    var $incdec_ptr715 = $lp685_0117 + 1 | 0;
    var $108 = HEAPU8[$lp685_0117];
    var $sub717 = ($106 & 255) - $conv714 | 0;
    var $sub718 = ($108 & 255) - $conv714 | 0;
    var $cond725 = ($sub717 | 0) < 0 ? -$sub717 | 0 : $sub717;
    var $cond732 = ($sub718 | 0) < 0 ? -$sub718 | 0 : $sub718;
    var $add733 = $sub718 + $sub717 | 0;
    var $cond742 = ($add733 | 0) < 0 ? -$add733 | 0 : $add733;
    if (($cond725 | 0) > ($cond732 | 0) | ($cond725 | 0) > ($cond742 | 0)) {
      __label__ = 119;
      break;
    } else {
      var $cond757 = $108;
      __label__ = 120;
      break;
    }
   case 119:
    var $cond755 = ($cond732 | 0) <= ($cond742 | 0) ? $106 : $107;
    var $cond757 = $cond755;
    __label__ = 120;
    break;
   case 120:
    var $cond757;
    var $incdec_ptr758 = $rp682_1121 + 1 | 0;
    var $sub760 = HEAP8[$rp682_1121] - $cond757 & 255;
    HEAP8[$dp683_1120] = $sub760;
    if (($incdec_ptr758 | 0) == ($lftr_limit185 | 0)) {
      __label__ = 121;
      break;
    } else {
      var $lp685_0117 = $incdec_ptr715;
      var $cp_0118 = $incdec_ptr713;
      var $pp684_1119 = $incdec_ptr711;
      var $dp683_1120 = $dp683_1120 + 1 | 0;
      var $rp682_1121 = $incdec_ptr758;
      __label__ = 118;
      break;
    }
   case 121:
    var $best_row_3 = HEAP32[$paeth_row >> 2];
    __label__ = 150;
    break;
   case 122:
    if (($conv4 & 128 | 0) == 0) {
      var $best_row_3 = $best_row_2;
      __label__ = 150;
      break;
    } else {
      __label__ = 123;
      break;
    }
   case 123:
    var $heuristic_method782 = $png_ptr + 492 | 0;
    if (HEAP8[$heuristic_method782] << 24 >> 24 == 2) {
      __label__ = 124;
      break;
    } else {
      var $lmins779_0 = $mins_3;
      __label__ = 131;
      break;
    }
   case 124:
    var $and790 = $mins_3 & 65535;
    var $and792 = $mins_3 >>> 10 & 4194240;
    if ($2 << 24 >> 24 == 0) {
      var $lmhi788_0_lcssa = $and792;
      var $lmlo789_0_lcssa = $and790;
      __label__ = 129;
      break;
    } else {
      __label__ = 125;
      break;
    }
   case 125:
    var $112 = HEAP32[$png_ptr + 496 >> 2];
    var $inv_filter_weights803 = $png_ptr + 504 | 0;
    var $j787_0107 = 0;
    var $lmhi788_0108 = $and792;
    var $lmlo789_0109 = $and790;
    __label__ = 126;
    break;
   case 126:
    var $lmlo789_0109;
    var $lmhi788_0108;
    var $j787_0107;
    if (HEAP8[$112 + $j787_0107 | 0] << 24 >> 24 == 4) {
      __label__ = 127;
      break;
    } else {
      var $lmlo789_1 = $lmlo789_0109;
      var $lmhi788_1 = $lmhi788_0108;
      __label__ = 128;
      break;
    }
   case 127:
    var $conv805 = HEAPU16[HEAP32[$inv_filter_weights803 >> 2] + ($j787_0107 << 1) >> 1] & 65535;
    var $lmlo789_1 = ($conv805 * $lmlo789_0109 | 0) >>> 8;
    var $lmhi788_1 = ($conv805 * $lmhi788_0108 | 0) >>> 8;
    __label__ = 128;
    break;
   case 128:
    var $lmhi788_1;
    var $lmlo789_1;
    var $inc815 = $j787_0107 + 1 | 0;
    if (($inc815 | 0) < ($conv | 0)) {
      var $j787_0107 = $inc815;
      var $lmhi788_0108 = $lmhi788_1;
      var $lmlo789_0109 = $lmlo789_1;
      __label__ = 126;
      break;
    } else {
      var $lmhi788_0_lcssa = $lmhi788_1;
      var $lmlo789_0_lcssa = $lmlo789_1;
      __label__ = 129;
      break;
    }
   case 129:
    var $lmlo789_0_lcssa;
    var $lmhi788_0_lcssa;
    var $conv819 = HEAPU16[HEAP32[$png_ptr + 512 >> 2] + 8 >> 1] & 65535;
    var $mul825 = $conv819 * $lmhi788_0_lcssa | 0;
    if ($mul825 >>> 0 > 33553927) {
      var $lmins779_0 = 2147483647;
      __label__ = 131;
      break;
    } else {
      __label__ = 130;
      break;
    }
   case 130:
    var $lmins779_0 = ($mul825 << 7 & -1024) + (($conv819 * $lmlo789_0_lcssa | 0) >>> 3) | 0;
    __label__ = 131;
    break;
   case 131:
    var $lmins779_0;
    var $add_ptr835 = $5 + 1 | 0;
    var $paeth_row836 = $png_ptr + 256 | 0;
    var $119 = HEAPU32[$paeth_row836 >> 2];
    var $add_ptr838 = $4 + 1 | 0;
    var $dp774_094 = $119 + 1 | 0;
    if (($shr1 | 0) == 0) {
      var $i780_1 = 0;
      var $sum778_1 = 0;
      var $lp777_0 = $add_ptr835;
      var $cp776_0 = $add_ptr838;
      var $rp773_1 = $add_ptr835;
      var $dp774_1 = $dp774_094;
      var $pp775_1 = $add_ptr838;
      __label__ = 135;
      break;
    } else {
      __label__ = 132;
      break;
    }
   case 132:
    var $120 = $shr1 + 1 | 0;
    var $scevgep183 = $4 + $120 | 0;
    var $pp775_096 = $add_ptr838;
    var $rp773_097 = $add_ptr835;
    var $sum778_098 = 0;
    var $i780_099 = 0;
    var $dp774_0100 = $dp774_094;
    __label__ = 134;
    break;
   case 133:
    var $i780_1 = $shr1;
    var $sum778_1 = $add859;
    var $lp777_0 = $add_ptr835;
    var $cp776_0 = $add_ptr838;
    var $rp773_1 = $5 + $120 | 0;
    var $dp774_1 = $119 + $120 | 0;
    var $pp775_1 = $scevgep183;
    __label__ = 135;
    break;
   case 134:
    var $dp774_0100;
    var $i780_099;
    var $sum778_098;
    var $rp773_097;
    var $pp775_096;
    var $sub847 = (HEAPU8[$rp773_097] & 255) - (HEAPU8[$pp775_096] & 255) | 0;
    HEAP8[$dp774_0100] = $sub847 & 255;
    var $conv851 = $sub847 & 255;
    var $cond858 = $conv851 >>> 0 < 128 ? $conv851 : 256 - $conv851 | 0;
    var $add859 = $cond858 + $sum778_098 | 0;
    var $inc861 = $i780_099 + 1 | 0;
    if ($inc861 >>> 0 < $shr1 >>> 0) {
      var $pp775_096 = $pp775_096 + 1 | 0;
      var $rp773_097 = $rp773_097 + 1 | 0;
      var $sum778_098 = $add859;
      var $i780_099 = $inc861;
      var $dp774_0100 = $dp774_0100 + 1 | 0;
      __label__ = 134;
      break;
    } else {
      __label__ = 133;
      break;
    }
   case 135:
    var $pp775_1;
    var $dp774_1;
    var $rp773_1;
    var $cp776_0;
    var $lp777_0;
    var $sum778_1;
    var $i780_1;
    if ($i780_1 >>> 0 < $1 >>> 0) {
      __label__ = 136;
      break;
    } else {
      var $sum778_2 = $sum778_1;
      __label__ = 140;
      break;
    }
   case 136:
    var $incdec_ptr876 = $pp775_1 + 1 | 0;
    var $conv877 = HEAPU8[$pp775_1] & 255;
    var $incdec_ptr878 = $cp776_0 + 1 | 0;
    var $conv879 = HEAPU8[$cp776_0] & 255;
    var $incdec_ptr880 = $lp777_0 + 1 | 0;
    var $conv881 = HEAPU8[$lp777_0] & 255;
    var $sub882 = $conv877 - $conv879 | 0;
    var $sub883 = $conv881 - $conv879 | 0;
    var $cond890 = ($sub882 | 0) < 0 ? -$sub882 | 0 : $sub882;
    var $cond897 = ($sub883 | 0) < 0 ? -$sub883 | 0 : $sub883;
    var $add898 = $sub883 + $sub882 | 0;
    var $cond907 = ($add898 | 0) < 0 ? -$add898 | 0 : $add898;
    if (($cond890 | 0) > ($cond897 | 0) | ($cond890 | 0) > ($cond907 | 0)) {
      __label__ = 137;
      break;
    } else {
      var $cond922 = $conv881;
      __label__ = 138;
      break;
    }
   case 137:
    var $cond920 = ($cond897 | 0) <= ($cond907 | 0) ? $conv877 : $conv879;
    var $cond922 = $cond920;
    __label__ = 138;
    break;
   case 138:
    var $cond922;
    var $sub925 = (HEAPU8[$rp773_1] & 255) - $cond922 | 0;
    HEAP8[$dp774_1] = $sub925 & 255;
    var $conv929 = $sub925 & 255;
    var $cond936 = $conv929 >>> 0 < 128 ? $conv929 : 256 - $conv929 | 0;
    var $add937 = $cond936 + $sum778_1 | 0;
    if ($add937 >>> 0 > $lmins779_0 >>> 0) {
      var $sum778_2 = $add937;
      __label__ = 140;
      break;
    } else {
      __label__ = 139;
      break;
    }
   case 139:
    var $i780_1 = $i780_1 + 1 | 0;
    var $sum778_1 = $add937;
    var $lp777_0 = $incdec_ptr880;
    var $cp776_0 = $incdec_ptr878;
    var $rp773_1 = $rp773_1 + 1 | 0;
    var $dp774_1 = $dp774_1 + 1 | 0;
    var $pp775_1 = $incdec_ptr876;
    __label__ = 135;
    break;
   case 140:
    var $sum778_2;
    if (HEAP8[$heuristic_method782] << 24 >> 24 == 2) {
      __label__ = 141;
      break;
    } else {
      var $sum778_3 = $sum778_2;
      __label__ = 148;
      break;
    }
   case 141:
    var $and953 = $sum778_2 & 65535;
    var $and955 = $sum778_2 >>> 10 & 4194240;
    if ($2 << 24 >> 24 == 0) {
      var $sumhi951_0_lcssa = $and955;
      var $sumlo952_0_lcssa = $and953;
      __label__ = 146;
      break;
    } else {
      __label__ = 142;
      break;
    }
   case 142:
    var $128 = HEAP32[$png_ptr + 496 >> 2];
    var $filter_weights966 = $png_ptr + 500 | 0;
    var $j950_089 = 0;
    var $sumhi951_090 = $and955;
    var $sumlo952_091 = $and953;
    __label__ = 143;
    break;
   case 143:
    var $sumlo952_091;
    var $sumhi951_090;
    var $j950_089;
    if (HEAP8[$128 + $j950_089 | 0] << 24 >> 24 == 4) {
      __label__ = 144;
      break;
    } else {
      var $sumlo952_1 = $sumlo952_091;
      var $sumhi951_1 = $sumhi951_090;
      __label__ = 145;
      break;
    }
   case 144:
    var $conv968 = HEAPU16[HEAP32[$filter_weights966 >> 2] + ($j950_089 << 1) >> 1] & 65535;
    var $sumlo952_1 = ($conv968 * $sumlo952_091 | 0) >>> 8;
    var $sumhi951_1 = ($conv968 * $sumhi951_090 | 0) >>> 8;
    __label__ = 145;
    break;
   case 145:
    var $sumhi951_1;
    var $sumlo952_1;
    var $inc978 = $j950_089 + 1 | 0;
    if (($inc978 | 0) < ($conv | 0)) {
      var $j950_089 = $inc978;
      var $sumhi951_090 = $sumhi951_1;
      var $sumlo952_091 = $sumlo952_1;
      __label__ = 143;
      break;
    } else {
      var $sumhi951_0_lcssa = $sumhi951_1;
      var $sumlo952_0_lcssa = $sumlo952_1;
      __label__ = 146;
      break;
    }
   case 146:
    var $sumlo952_0_lcssa;
    var $sumhi951_0_lcssa;
    var $conv982 = HEAPU16[HEAP32[$png_ptr + 508 >> 2] + 8 >> 1] & 65535;
    var $mul988 = $conv982 * $sumhi951_0_lcssa | 0;
    if ($mul988 >>> 0 > 33553927) {
      var $sum778_3 = 2147483647;
      __label__ = 148;
      break;
    } else {
      __label__ = 147;
      break;
    }
   case 147:
    var $sum778_3 = ($mul988 << 7 & -1024) + (($conv982 * $sumlo952_0_lcssa | 0) >>> 3) | 0;
    __label__ = 148;
    break;
   case 148:
    var $sum778_3;
    if ($sum778_3 >>> 0 < $mins_3 >>> 0) {
      __label__ = 149;
      break;
    } else {
      var $best_row_3 = $best_row_2;
      __label__ = 150;
      break;
    }
   case 149:
    var $best_row_3 = HEAP32[$paeth_row836 >> 2];
    __label__ = 150;
    break;
   case 150:
    var $best_row_3;
    var $add1006 = HEAP32[$rowbytes >> 2] + 1 | 0;
    _png_write_filtered_row($png_ptr, $best_row_3, $add1006);
    if (HEAP8[$num_prev_filters] << 24 >> 24 == 0) {
      __label__ = 156;
      break;
    } else {
      __label__ = 151;
      break;
    }
   case 151:
    var $prev_filters1018 = $png_ptr + 496 | 0;
    if (($2 & 255) > 1) {
      __label__ = 152;
      break;
    } else {
      var $j1012_0_lcssa = 1;
      var $prev_filters1026_pre_phi = $prev_filters1018;
      __label__ = 155;
      break;
    }
   case 152:
    var $138 = $conv >>> 0 > 2;
    var $j1012_0113 = 1;
    __label__ = 153;
    break;
   case 153:
    var $j1012_0113;
    var $139 = HEAP32[$prev_filters1018 >> 2];
    var $140 = HEAP8[$139 + ($j1012_0113 - 1) | 0];
    HEAP8[$139 + $j1012_0113 | 0] = $140;
    var $inc1023 = $j1012_0113 + 1 | 0;
    if (($inc1023 | 0) < ($conv | 0)) {
      var $j1012_0113 = $inc1023;
      __label__ = 153;
      break;
    } else {
      __label__ = 154;
      break;
    }
   case 154:
    var $smax = $138 ? $conv : 2;
    var $j1012_0_lcssa = $smax;
    var $prev_filters1026_pre_phi = $prev_filters1018;
    __label__ = 155;
    break;
   case 155:
    var $prev_filters1026_pre_phi;
    var $j1012_0_lcssa;
    var $141 = HEAP8[$best_row_3];
    HEAP8[HEAP32[$prev_filters1026_pre_phi >> 2] + $j1012_0_lcssa | 0] = $141;
    __label__ = 156;
    break;
   case 156:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_write_find_filter["X"] = 1;

function _adler32($adler, $buf, $len) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $shr = $adler >>> 16;
    var $and1 = $adler & 65535;
    if (($len | 0) == 1) {
      __label__ = 2;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 2:
    var $add = (HEAPU8[$buf] & 255) + $and1 | 0;
    var $sub_add = $add >>> 0 > 65520 ? $add - 65521 | 0 : $add;
    var $add5 = $sub_add + $shr | 0;
    var $sum2_0 = $add5 >>> 0 > 65520 ? $add5 + 15 | 0 : $add5;
    var $retval_0 = $sum2_0 << 16 | $sub_add;
    __label__ = 19;
    break;
   case 3:
    if (($buf | 0) == 0) {
      var $retval_0 = 1;
      __label__ = 19;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    if ($len >>> 0 < 16) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    if (($len | 0) == 0) {
      var $sum2_1_lcssa = $shr;
      var $adler_addr_1_lcssa = $and1;
      __label__ = 8;
      break;
    } else {
      var $sum2_126 = $shr;
      var $len_addr_027 = $len;
      var $buf_addr_028 = $buf;
      var $adler_addr_129 = $and1;
      __label__ = 7;
      break;
    }
   case 6:
    if ($len >>> 0 > 5551) {
      var $sum2_217 = $shr;
      var $len_addr_118 = $len;
      var $buf_addr_119 = $buf;
      var $adler_addr_320 = $and1;
      __label__ = 9;
      break;
    } else {
      var $sum2_48 = $shr;
      var $len_addr_29 = $len;
      var $buf_addr_310 = $buf;
      var $adler_addr_511 = $and1;
      __label__ = 15;
      break;
    }
   case 7:
    var $adler_addr_129;
    var $buf_addr_028;
    var $len_addr_027;
    var $sum2_126;
    var $dec = $len_addr_027 - 1 | 0;
    var $add20 = (HEAPU8[$buf_addr_028] & 255) + $adler_addr_129 | 0;
    var $add21 = $add20 + $sum2_126 | 0;
    if (($dec | 0) == 0) {
      var $sum2_1_lcssa = $add21;
      var $adler_addr_1_lcssa = $add20;
      __label__ = 8;
      break;
    } else {
      var $sum2_126 = $add21;
      var $len_addr_027 = $dec;
      var $buf_addr_028 = $buf_addr_028 + 1 | 0;
      var $adler_addr_129 = $add20;
      __label__ = 7;
      break;
    }
   case 8:
    var $adler_addr_1_lcssa;
    var $sum2_1_lcssa;
    var $sub25_adler_addr_1 = $adler_addr_1_lcssa >>> 0 > 65520 ? $adler_addr_1_lcssa - 65521 | 0 : $adler_addr_1_lcssa;
    var $retval_0 = ($sum2_1_lcssa >>> 0) % 65521 << 16 | $sub25_adler_addr_1;
    __label__ = 19;
    break;
   case 9:
    var $adler_addr_320;
    var $buf_addr_119;
    var $len_addr_118;
    var $sum2_217;
    var $sub34 = $len_addr_118 - 5552 | 0;
    var $adler_addr_4 = $adler_addr_320;
    var $buf_addr_2 = $buf_addr_119;
    var $sum2_3 = $sum2_217;
    var $n_0 = 347;
    __label__ = 10;
    break;
   case 10:
    var $n_0;
    var $sum2_3;
    var $buf_addr_2;
    var $adler_addr_4;
    var $add37 = (HEAPU8[$buf_addr_2] & 255) + $adler_addr_4 | 0;
    var $add41 = $add37 + (HEAPU8[$buf_addr_2 + 1 | 0] & 255) | 0;
    var $add45 = $add41 + (HEAPU8[$buf_addr_2 + 2 | 0] & 255) | 0;
    var $add49 = $add45 + (HEAPU8[$buf_addr_2 + 3 | 0] & 255) | 0;
    var $add53 = $add49 + (HEAPU8[$buf_addr_2 + 4 | 0] & 255) | 0;
    var $add57 = $add53 + (HEAPU8[$buf_addr_2 + 5 | 0] & 255) | 0;
    var $add61 = $add57 + (HEAPU8[$buf_addr_2 + 6 | 0] & 255) | 0;
    var $add65 = $add61 + (HEAPU8[$buf_addr_2 + 7 | 0] & 255) | 0;
    var $add69 = $add65 + (HEAPU8[$buf_addr_2 + 8 | 0] & 255) | 0;
    var $add73 = $add69 + (HEAPU8[$buf_addr_2 + 9 | 0] & 255) | 0;
    var $add77 = $add73 + (HEAPU8[$buf_addr_2 + 10 | 0] & 255) | 0;
    var $add81 = $add77 + (HEAPU8[$buf_addr_2 + 11 | 0] & 255) | 0;
    var $add85 = $add81 + (HEAPU8[$buf_addr_2 + 12 | 0] & 255) | 0;
    var $add89 = $add85 + (HEAPU8[$buf_addr_2 + 13 | 0] & 255) | 0;
    var $add93 = $add89 + (HEAPU8[$buf_addr_2 + 14 | 0] & 255) | 0;
    var $add97 = $add93 + (HEAPU8[$buf_addr_2 + 15 | 0] & 255) | 0;
    var $add98 = $add37 + $sum2_3 + $add41 + $add45 + $add49 + $add53 + $add57 + $add61 + $add65 + $add69 + $add73 + $add77 + $add81 + $add85 + $add89 + $add93 + $add97 | 0;
    var $dec99 = $n_0 - 1 | 0;
    if (($dec99 | 0) == 0) {
      __label__ = 11;
      break;
    } else {
      var $adler_addr_4 = $add97;
      var $buf_addr_2 = $buf_addr_2 + 16 | 0;
      var $sum2_3 = $add98;
      var $n_0 = $dec99;
      __label__ = 10;
      break;
    }
   case 11:
    var $scevgep = $buf_addr_119 + 5552 | 0;
    var $rem101 = ($add97 >>> 0) % 65521;
    var $rem102 = ($add98 >>> 0) % 65521;
    if ($sub34 >>> 0 > 5551) {
      var $sum2_217 = $rem102;
      var $len_addr_118 = $sub34;
      var $buf_addr_119 = $scevgep;
      var $adler_addr_320 = $rem101;
      __label__ = 9;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 12:
    if (($sub34 | 0) == 0) {
      var $adler_addr_7 = $rem101;
      var $sum2_6 = $rem102;
      __label__ = 18;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 13:
    if ($sub34 >>> 0 > 15) {
      var $sum2_48 = $rem102;
      var $len_addr_29 = $sub34;
      var $buf_addr_310 = $scevgep;
      var $adler_addr_511 = $rem101;
      __label__ = 15;
      break;
    } else {
      var $sum2_52 = $rem102;
      var $len_addr_33 = $sub34;
      var $buf_addr_44 = $scevgep;
      var $adler_addr_65 = $rem101;
      __label__ = 16;
      break;
    }
   case 14:
    if (($sub110 | 0) == 0) {
      var $sum2_5_lcssa = $add174;
      var $adler_addr_6_lcssa = $add173;
      __label__ = 17;
      break;
    } else {
      var $sum2_52 = $add174;
      var $len_addr_33 = $sub110;
      var $buf_addr_44 = $add_ptr175;
      var $adler_addr_65 = $add173;
      __label__ = 16;
      break;
    }
   case 15:
    var $adler_addr_511;
    var $buf_addr_310;
    var $len_addr_29;
    var $sum2_48;
    var $sub110 = $len_addr_29 - 16 | 0;
    var $add113 = (HEAPU8[$buf_addr_310] & 255) + $adler_addr_511 | 0;
    var $add117 = $add113 + (HEAPU8[$buf_addr_310 + 1 | 0] & 255) | 0;
    var $add121 = $add117 + (HEAPU8[$buf_addr_310 + 2 | 0] & 255) | 0;
    var $add125 = $add121 + (HEAPU8[$buf_addr_310 + 3 | 0] & 255) | 0;
    var $add129 = $add125 + (HEAPU8[$buf_addr_310 + 4 | 0] & 255) | 0;
    var $add133 = $add129 + (HEAPU8[$buf_addr_310 + 5 | 0] & 255) | 0;
    var $add137 = $add133 + (HEAPU8[$buf_addr_310 + 6 | 0] & 255) | 0;
    var $add141 = $add137 + (HEAPU8[$buf_addr_310 + 7 | 0] & 255) | 0;
    var $add145 = $add141 + (HEAPU8[$buf_addr_310 + 8 | 0] & 255) | 0;
    var $add149 = $add145 + (HEAPU8[$buf_addr_310 + 9 | 0] & 255) | 0;
    var $add153 = $add149 + (HEAPU8[$buf_addr_310 + 10 | 0] & 255) | 0;
    var $add157 = $add153 + (HEAPU8[$buf_addr_310 + 11 | 0] & 255) | 0;
    var $add161 = $add157 + (HEAPU8[$buf_addr_310 + 12 | 0] & 255) | 0;
    var $add165 = $add161 + (HEAPU8[$buf_addr_310 + 13 | 0] & 255) | 0;
    var $add169 = $add165 + (HEAPU8[$buf_addr_310 + 14 | 0] & 255) | 0;
    var $add173 = $add169 + (HEAPU8[$buf_addr_310 + 15 | 0] & 255) | 0;
    var $add174 = $add113 + $sum2_48 + $add117 + $add121 + $add125 + $add129 + $add133 + $add137 + $add141 + $add145 + $add149 + $add153 + $add157 + $add161 + $add165 + $add169 + $add173 | 0;
    var $add_ptr175 = $buf_addr_310 + 16 | 0;
    if ($sub110 >>> 0 > 15) {
      var $sum2_48 = $add174;
      var $len_addr_29 = $sub110;
      var $buf_addr_310 = $add_ptr175;
      var $adler_addr_511 = $add173;
      __label__ = 15;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 16:
    var $adler_addr_65;
    var $buf_addr_44;
    var $len_addr_33;
    var $sum2_52;
    var $dec178 = $len_addr_33 - 1 | 0;
    var $add183 = (HEAPU8[$buf_addr_44] & 255) + $adler_addr_65 | 0;
    var $add184 = $add183 + $sum2_52 | 0;
    if (($dec178 | 0) == 0) {
      var $sum2_5_lcssa = $add184;
      var $adler_addr_6_lcssa = $add183;
      __label__ = 17;
      break;
    } else {
      var $sum2_52 = $add184;
      var $len_addr_33 = $dec178;
      var $buf_addr_44 = $buf_addr_44 + 1 | 0;
      var $adler_addr_65 = $add183;
      __label__ = 16;
      break;
    }
   case 17:
    var $adler_addr_6_lcssa;
    var $sum2_5_lcssa;
    var $adler_addr_7 = ($adler_addr_6_lcssa >>> 0) % 65521;
    var $sum2_6 = ($sum2_5_lcssa >>> 0) % 65521;
    __label__ = 18;
    break;
   case 18:
    var $sum2_6;
    var $adler_addr_7;
    var $retval_0 = $adler_addr_7 | $sum2_6 << 16;
    __label__ = 19;
    break;
   case 19:
    var $retval_0;
    return $retval_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_adler32["X"] = 1;

function _crc32_little($crc, $buf, $len) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $buf_addr_0 = $buf;
    var $len_addr_0 = $len;
    var $c_0 = $crc ^ -1;
    __label__ = 2;
    break;
   case 2:
    var $c_0;
    var $len_addr_0;
    var $buf_addr_0;
    if (($len_addr_0 | 0) == 0) {
      var $c_4 = $c_0;
      __label__ = 12;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    if (($buf_addr_0 & 3 | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $xor3 = HEAP32[_crc_table + ((HEAPU8[$buf_addr_0] & 255 ^ $c_0 & 255) << 2) >> 2] ^ $c_0 >>> 8;
    var $buf_addr_0 = $buf_addr_0 + 1 | 0;
    var $len_addr_0 = $len_addr_0 - 1 | 0;
    var $c_0 = $xor3;
    __label__ = 2;
    break;
   case 5:
    var $3 = $buf_addr_0;
    if ($len_addr_0 >>> 0 > 31) {
      var $c_18 = $c_0;
      var $len_addr_19 = $len_addr_0;
      var $buf4_010 = $3;
      __label__ = 7;
      break;
    } else {
      var $c_1_lcssa = $c_0;
      var $len_addr_1_lcssa = $len_addr_0;
      var $buf4_0_lcssa = $3;
      __label__ = 6;
      break;
    }
   case 6:
    var $buf4_0_lcssa;
    var $len_addr_1_lcssa;
    var $c_1_lcssa;
    if ($len_addr_1_lcssa >>> 0 > 3) {
      var $c_22 = $c_1_lcssa;
      var $len_addr_23 = $len_addr_1_lcssa;
      var $buf4_14 = $buf4_0_lcssa;
      __label__ = 8;
      break;
    } else {
      var $c_2_lcssa = $c_1_lcssa;
      var $len_addr_2_lcssa = $len_addr_1_lcssa;
      var $buf4_1_lcssa = $buf4_0_lcssa;
      __label__ = 9;
      break;
    }
   case 7:
    var $buf4_010;
    var $len_addr_19;
    var $c_18;
    var $xor8 = HEAP32[$buf4_010 >> 2] ^ $c_18;
    var $xor23 = HEAP32[_crc_table + 2048 + (($xor8 >>> 8 & 255) << 2) >> 2] ^ HEAP32[_crc_table + 3072 + (($xor8 & 255) << 2) >> 2] ^ HEAP32[_crc_table + 1024 + (($xor8 >>> 16 & 255) << 2) >> 2] ^ HEAP32[_crc_table + ($xor8 >>> 24 << 2) >> 2] ^ HEAP32[$buf4_010 + 4 >> 2];
    var $xor38 = HEAP32[_crc_table + 2048 + (($xor23 >>> 8 & 255) << 2) >> 2] ^ HEAP32[_crc_table + 3072 + (($xor23 & 255) << 2) >> 2] ^ HEAP32[_crc_table + 1024 + (($xor23 >>> 16 & 255) << 2) >> 2] ^ HEAP32[_crc_table + ($xor23 >>> 24 << 2) >> 2] ^ HEAP32[$buf4_010 + 8 >> 2];
    var $xor53 = HEAP32[_crc_table + 2048 + (($xor38 >>> 8 & 255) << 2) >> 2] ^ HEAP32[_crc_table + 3072 + (($xor38 & 255) << 2) >> 2] ^ HEAP32[_crc_table + 1024 + (($xor38 >>> 16 & 255) << 2) >> 2] ^ HEAP32[_crc_table + ($xor38 >>> 24 << 2) >> 2] ^ HEAP32[$buf4_010 + 12 >> 2];
    var $xor68 = HEAP32[_crc_table + 2048 + (($xor53 >>> 8 & 255) << 2) >> 2] ^ HEAP32[_crc_table + 3072 + (($xor53 & 255) << 2) >> 2] ^ HEAP32[_crc_table + 1024 + (($xor53 >>> 16 & 255) << 2) >> 2] ^ HEAP32[_crc_table + ($xor53 >>> 24 << 2) >> 2] ^ HEAP32[$buf4_010 + 16 >> 2];
    var $xor83 = HEAP32[_crc_table + 2048 + (($xor68 >>> 8 & 255) << 2) >> 2] ^ HEAP32[_crc_table + 3072 + (($xor68 & 255) << 2) >> 2] ^ HEAP32[_crc_table + 1024 + (($xor68 >>> 16 & 255) << 2) >> 2] ^ HEAP32[_crc_table + ($xor68 >>> 24 << 2) >> 2] ^ HEAP32[$buf4_010 + 20 >> 2];
    var $xor98 = HEAP32[_crc_table + 2048 + (($xor83 >>> 8 & 255) << 2) >> 2] ^ HEAP32[_crc_table + 3072 + (($xor83 & 255) << 2) >> 2] ^ HEAP32[_crc_table + 1024 + (($xor83 >>> 16 & 255) << 2) >> 2] ^ HEAP32[_crc_table + ($xor83 >>> 24 << 2) >> 2] ^ HEAP32[$buf4_010 + 24 >> 2];
    var $incdec_ptr112 = $buf4_010 + 32 | 0;
    var $xor113 = HEAP32[_crc_table + 2048 + (($xor98 >>> 8 & 255) << 2) >> 2] ^ HEAP32[_crc_table + 3072 + (($xor98 & 255) << 2) >> 2] ^ HEAP32[_crc_table + 1024 + (($xor98 >>> 16 & 255) << 2) >> 2] ^ HEAP32[_crc_table + ($xor98 >>> 24 << 2) >> 2] ^ HEAP32[$buf4_010 + 28 >> 2];
    var $xor126 = HEAP32[_crc_table + 2048 + (($xor113 >>> 8 & 255) << 2) >> 2] ^ HEAP32[_crc_table + 3072 + (($xor113 & 255) << 2) >> 2] ^ HEAP32[_crc_table + 1024 + (($xor113 >>> 16 & 255) << 2) >> 2] ^ HEAP32[_crc_table + ($xor113 >>> 24 << 2) >> 2];
    var $sub = $len_addr_19 - 32 | 0;
    if ($sub >>> 0 > 31) {
      var $c_18 = $xor126;
      var $len_addr_19 = $sub;
      var $buf4_010 = $incdec_ptr112;
      __label__ = 7;
      break;
    } else {
      var $c_1_lcssa = $xor126;
      var $len_addr_1_lcssa = $sub;
      var $buf4_0_lcssa = $incdec_ptr112;
      __label__ = 6;
      break;
    }
   case 8:
    var $buf4_14;
    var $len_addr_23;
    var $c_22;
    var $incdec_ptr132 = $buf4_14 + 4 | 0;
    var $xor133 = HEAP32[$buf4_14 >> 2] ^ $c_22;
    var $xor146 = HEAP32[_crc_table + 2048 + (($xor133 >>> 8 & 255) << 2) >> 2] ^ HEAP32[_crc_table + 3072 + (($xor133 & 255) << 2) >> 2] ^ HEAP32[_crc_table + 1024 + (($xor133 >>> 16 & 255) << 2) >> 2] ^ HEAP32[_crc_table + ($xor133 >>> 24 << 2) >> 2];
    var $sub147 = $len_addr_23 - 4 | 0;
    if ($sub147 >>> 0 > 3) {
      var $c_22 = $xor146;
      var $len_addr_23 = $sub147;
      var $buf4_14 = $incdec_ptr132;
      __label__ = 8;
      break;
    } else {
      var $c_2_lcssa = $xor146;
      var $len_addr_2_lcssa = $sub147;
      var $buf4_1_lcssa = $incdec_ptr132;
      __label__ = 9;
      break;
    }
   case 9:
    var $buf4_1_lcssa;
    var $len_addr_2_lcssa;
    var $c_2_lcssa;
    if (($len_addr_2_lcssa | 0) == 0) {
      var $c_4 = $c_2_lcssa;
      __label__ = 12;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 10:
    var $buf_addr_1 = $buf4_1_lcssa;
    var $len_addr_3 = $len_addr_2_lcssa;
    var $c_3 = $c_2_lcssa;
    __label__ = 11;
    break;
   case 11:
    var $c_3;
    var $len_addr_3;
    var $buf_addr_1;
    var $xor156 = HEAP32[_crc_table + ((HEAPU8[$buf_addr_1] & 255 ^ $c_3 & 255) << 2) >> 2] ^ $c_3 >>> 8;
    var $dec157 = $len_addr_3 - 1 | 0;
    if (($dec157 | 0) == 0) {
      var $c_4 = $xor156;
      __label__ = 12;
      break;
    } else {
      var $buf_addr_1 = $buf_addr_1 + 1 | 0;
      var $len_addr_3 = $dec157;
      var $c_3 = $xor156;
      __label__ = 11;
      break;
    }
   case 12:
    var $c_4;
    return $c_4 ^ -1;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_crc32_little["X"] = 1;

function _png_write_filtered_row($png_ptr, $filtered_row, $avail) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $zstream = $png_ptr + 96 | 0;
    HEAP32[$zstream >> 2] = $filtered_row;
    var $avail_in = $png_ptr + 100 | 0;
    HEAP32[$avail_in >> 2] = 0;
    var $0 = $zstream;
    var $avail_out = $png_ptr + 112 | 0;
    var $zbuf = $png_ptr + 152 | 0;
    var $zbuf_size = $png_ptr + 156 | 0;
    var $msg = $png_ptr + 120 | 0;
    var $1 = $png_ptr;
    var $avail_addr_0 = $avail;
    var $2 = 1;
    __label__ = 2;
    break;
   case 2:
    var $2;
    var $avail_addr_0;
    if ($2) {
      __label__ = 3;
      break;
    } else {
      var $avail_addr_1 = $avail_addr_0;
      __label__ = 4;
      break;
    }
   case 3:
    HEAP32[$avail_in >> 2] = $avail_addr_0;
    var $avail_addr_1 = 0;
    __label__ = 4;
    break;
   case 4:
    var $avail_addr_1;
    var $call = _deflate($0, 0);
    if (($call | 0) == 0) {
      __label__ = 8;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $3 = HEAP32[$msg >> 2];
    if (($3 | 0) == 0) {
      __label__ = 7;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    _png_error($1, $3);
    __label__ = 8;
    break;
   case 7:
    _png_error($1, STRING_TABLE.__str401173 | 0);
    __label__ = 8;
    break;
   case 8:
    if ((HEAP32[$avail_out >> 2] | 0) == 0) {
      __label__ = 9;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 9:
    var $5 = HEAP32[$zbuf >> 2];
    var $6 = HEAP32[$zbuf_size >> 2];
    _png_write_IDAT($png_ptr, $5, $6);
    __label__ = 10;
    break;
   case 10:
    var $cmp28 = (HEAP32[$avail_in >> 2] | 0) == 0;
    var $cmp25_not = ($avail_addr_1 | 0) == 0 ^ 1;
    var $avail_addr_1_mux = $cmp25_not ? $avail_addr_1 : 0;
    if ($cmp25_not | $cmp28 ^ 1) {
      var $avail_addr_0 = $avail_addr_1_mux;
      var $2 = $cmp28;
      __label__ = 2;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    var $prev_row = $png_ptr + 236 | 0;
    var $8 = HEAP32[$prev_row >> 2];
    if (($8 | 0) == 0) {
      __label__ = 13;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 12:
    var $row_buf = $png_ptr + 240 | 0;
    var $9 = HEAP32[$row_buf >> 2];
    HEAP32[$prev_row >> 2] = $9;
    HEAP32[$row_buf >> 2] = $8;
    __label__ = 13;
    break;
   case 13:
    _png_write_finish_row($png_ptr);
    var $flush_rows = $png_ptr + 344 | 0;
    var $inc = HEAP32[$flush_rows >> 2] + 1 | 0;
    HEAP32[$flush_rows >> 2] = $inc;
    var $11 = HEAPU32[$png_ptr + 340 >> 2];
    if (($11 | 0) == 0 | $inc >>> 0 < $11 >>> 0) {
      __label__ = 15;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 14:
    var $12 = $png_ptr;
    _png_write_flush($12);
    __label__ = 15;
    break;
   case 15:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_png_write_filtered_row["X"] = 1;

function _crc32($crc, $buf, $len) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($buf | 0) == 0) {
      var $retval_0 = 0;
      __label__ = 3;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $call = _crc32_little($crc, $buf, $len);
    var $retval_0 = $call;
    __label__ = 3;
    break;
   case 3:
    var $retval_0;
    return $retval_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _deflateInit2_($strm, $level, $method, $windowBits, $memLevel, $strategy) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($strm | 0) == 0) {
      var $retval_0 = -2;
      __label__ = 16;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $msg = $strm + 24 | 0;
    HEAP32[$msg >> 2] = 0;
    var $zalloc = $strm + 32 | 0;
    var $0 = HEAPU32[$zalloc >> 2];
    if (($0 | 0) == 0) {
      var $retval_0 = -2;
      __label__ = 16;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    if ((HEAP32[$strm + 36 >> 2] | 0) == 0) {
      var $retval_0 = -2;
      __label__ = 16;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $level_addr_0 = ($level | 0) == -1 ? 6 : $level;
    if (($windowBits | 0) < 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    var $wrap_0 = 0;
    var $windowBits_addr_0 = -$windowBits | 0;
    __label__ = 8;
    break;
   case 6:
    var $cmp26 = ($windowBits | 0) > 15;
    var $sub29_windowBits = $cmp26 ? $windowBits - 16 | 0 : $windowBits;
    if ($cmp26) {
      __label__ = 7;
      break;
    } else {
      var $wrap_0 = 1;
      var $windowBits_addr_0 = $sub29_windowBits;
      __label__ = 8;
      break;
    }
   case 7:
    var $wrap_0 = 2;
    var $windowBits_addr_0 = $sub29_windowBits;
    __label__ = 8;
    break;
   case 8:
    var $windowBits_addr_0;
    var $wrap_0;
    if (($memLevel - 1 | 0) >>> 0 < 9 & ($method | 0) == 8) {
      __label__ = 9;
      break;
    } else {
      var $retval_0 = -2;
      __label__ = 16;
      break;
    }
   case 9:
    if (($windowBits_addr_0 - 8 | 0) >>> 0 > 7 | $level_addr_0 >>> 0 > 9 | $strategy >>> 0 > 4) {
      var $retval_0 = -2;
      __label__ = 16;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 10:
    var $windowBits_addr_1 = ($windowBits_addr_0 | 0) == 8 ? 9 : $windowBits_addr_0;
    var $opaque = $strm + 40 | 0;
    var $6 = HEAP32[$opaque >> 2];
    var $call = FUNCTION_TABLE[$0]($6, 1, 5828);
    if (($call | 0) == 0) {
      var $retval_0 = -4;
      __label__ = 16;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    var $7 = $call;
    HEAP32[$strm + 28 >> 2] = $7;
    var $strm69 = $call;
    HEAP32[$strm69 >> 2] = $strm;
    var $8 = $call + 24 | 0;
    HEAP32[$8 >> 2] = $wrap_0;
    var $9 = $call + 28 | 0;
    HEAP32[$9 >> 2] = 0;
    var $10 = $call + 48 | 0;
    HEAP32[$10 >> 2] = $windowBits_addr_1;
    var $shl = 1 << $windowBits_addr_1;
    var $11 = $call + 44 | 0;
    HEAP32[$11 >> 2] = $shl;
    var $12 = $call + 52 | 0;
    HEAP32[$12 >> 2] = $shl - 1 | 0;
    var $add = $memLevel + 7 | 0;
    var $13 = $call + 80 | 0;
    HEAP32[$13 >> 2] = $add;
    var $shl75 = 1 << $add;
    var $14 = $call + 76 | 0;
    HEAP32[$14 >> 2] = $shl75;
    var $15 = $call + 84 | 0;
    HEAP32[$15 >> 2] = $shl75 - 1 | 0;
    var $sub80 = $memLevel + 9 | 0;
    var $div = Math.floor(($sub80 >>> 0) / 3);
    var $16 = $call + 88 | 0;
    HEAP32[$16 >> 2] = $div;
    var $17 = HEAP32[$zalloc >> 2];
    var $18 = HEAP32[$opaque >> 2];
    var $call84 = FUNCTION_TABLE[$17]($18, $shl, 2);
    var $19 = $call + 56 | 0;
    HEAP32[$19 >> 2] = $call84;
    var $20 = HEAP32[$zalloc >> 2];
    var $21 = HEAP32[$opaque >> 2];
    var $22 = HEAP32[$11 >> 2];
    var $call88 = FUNCTION_TABLE[$20]($21, $22, 2);
    var $23 = $call88;
    var $24 = $call + 64 | 0;
    HEAP32[$24 >> 2] = $23;
    var $25 = HEAP32[$zalloc >> 2];
    var $26 = HEAP32[$opaque >> 2];
    var $27 = HEAP32[$14 >> 2];
    var $call92 = FUNCTION_TABLE[$25]($26, $27, 2);
    var $28 = $call92;
    var $29 = $call + 68 | 0;
    HEAP32[$29 >> 2] = $28;
    var $30 = $call + 5824 | 0;
    HEAP32[$30 >> 2] = 0;
    var $shl94 = 1 << $memLevel + 6;
    var $31 = $call + 5788 | 0;
    HEAP32[$31 >> 2] = $shl94;
    var $32 = HEAP32[$zalloc >> 2];
    var $33 = HEAP32[$opaque >> 2];
    var $call98 = FUNCTION_TABLE[$32]($33, $shl94, 4);
    var $34 = $call98;
    var $35 = $call + 8 | 0;
    HEAP32[$35 >> 2] = $call98;
    var $36 = HEAPU32[$31 >> 2];
    var $mul = $36 << 2;
    var $37 = $call + 12 | 0;
    HEAP32[$37 >> 2] = $mul;
    if ((HEAP32[$19 >> 2] | 0) == 0) {
      __label__ = 14;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 12:
    if ((HEAP32[$24 >> 2] | 0) == 0) {
      __label__ = 14;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 13:
    if ((HEAP32[$29 >> 2] | 0) == 0 | ($call98 | 0) == 0) {
      __label__ = 14;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 14:
    var $41 = $call + 4 | 0;
    HEAP32[$41 >> 2] = 666;
    HEAP32[$msg >> 2] = STRING_TABLE.__str61335 | 0;
    var $call117 = _deflateEnd($strm);
    var $retval_0 = -4;
    __label__ = 16;
    break;
   case 15:
    var $add_ptr = $34 + ($36 >>> 1 << 1) | 0;
    var $42 = $call + 5796 | 0;
    HEAP32[$42 >> 2] = $add_ptr;
    var $add_ptr124 = $call98 + $36 * 3 | 0;
    var $43 = $call + 5784 | 0;
    HEAP32[$43 >> 2] = $add_ptr124;
    var $44 = $call + 132 | 0;
    HEAP32[$44 >> 2] = $level_addr_0;
    var $45 = $call + 136 | 0;
    HEAP32[$45 >> 2] = $strategy;
    HEAP8[$call + 36 | 0] = 8;
    var $call129 = _deflateReset($strm);
    var $retval_0 = $call129;
    __label__ = 16;
    break;
   case 16:
    var $retval_0;
    return $retval_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_deflateInit2_["X"] = 1;

function _deflateEnd($strm) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($strm | 0) == 0) {
      var $retval_0 = -2;
      __label__ = 14;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $state = $strm + 28 | 0;
    var $0 = HEAP32[$state >> 2];
    if (($0 | 0) == 0) {
      var $retval_0 = -2;
      __label__ = 14;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $1 = HEAP32[$0 + 4 >> 2];
    if (($1 | 0) == 666 || ($1 | 0) == 113 || ($1 | 0) == 103 || ($1 | 0) == 91 || ($1 | 0) == 73 || ($1 | 0) == 69 || ($1 | 0) == 42) {
      __label__ = 4;
      break;
    } else {
      var $retval_0 = -2;
      __label__ = 14;
      break;
    }
   case 4:
    var $2 = HEAP32[$0 + 8 >> 2];
    if (($2 | 0) == 0) {
      var $5 = $0;
      __label__ = 6;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $3 = HEAP32[$strm + 36 >> 2];
    var $4 = HEAP32[$strm + 40 >> 2];
    FUNCTION_TABLE[$3]($4, $2);
    var $5 = HEAP32[$state >> 2];
    __label__ = 6;
    break;
   case 6:
    var $5;
    var $6 = HEAP32[$5 + 68 >> 2];
    if (($6 | 0) == 0) {
      var $10 = $5;
      __label__ = 8;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    var $7 = HEAP32[$strm + 36 >> 2];
    var $8 = HEAP32[$strm + 40 >> 2];
    var $9 = $6;
    FUNCTION_TABLE[$7]($8, $9);
    var $10 = HEAP32[$state >> 2];
    __label__ = 8;
    break;
   case 8:
    var $10;
    var $11 = HEAP32[$10 + 64 >> 2];
    if (($11 | 0) == 0) {
      var $15 = $10;
      __label__ = 10;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    var $12 = HEAP32[$strm + 36 >> 2];
    var $13 = HEAP32[$strm + 40 >> 2];
    var $14 = $11;
    FUNCTION_TABLE[$12]($13, $14);
    var $15 = HEAP32[$state >> 2];
    __label__ = 10;
    break;
   case 10:
    var $15;
    var $16 = HEAP32[$15 + 56 >> 2];
    var $zfree47_pre = $strm + 36 | 0;
    if (($16 | 0) == 0) {
      __label__ = 11;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 11:
    var $19 = $15;
    var $opaque48_pre_phi = $strm + 40 | 0;
    __label__ = 13;
    break;
   case 12:
    var $17 = HEAP32[$zfree47_pre >> 2];
    var $opaque43 = $strm + 40 | 0;
    var $18 = HEAP32[$opaque43 >> 2];
    FUNCTION_TABLE[$17]($18, $16);
    var $19 = HEAP32[$state >> 2];
    var $opaque48_pre_phi = $opaque43;
    __label__ = 13;
    break;
   case 13:
    var $opaque48_pre_phi;
    var $19;
    var $20 = HEAP32[$zfree47_pre >> 2];
    var $21 = HEAP32[$opaque48_pre_phi >> 2];
    FUNCTION_TABLE[$20]($21, $19);
    HEAP32[$state >> 2] = 0;
    var $cond = ($1 | 0) == 113 ? -3 : 0;
    var $retval_0 = $cond;
    __label__ = 14;
    break;
   case 14:
    var $retval_0;
    return $retval_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_deflateEnd["X"] = 1;

function _deflateReset($strm) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $call = _deflateResetKeep($strm);
    if (($call | 0) == 0) {
      __label__ = 2;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 2:
    var $0 = HEAP32[$strm + 28 >> 2];
    _lm_init($0);
    __label__ = 3;
    break;
   case 3:
    return $call;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _fill_window($s) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $w_size = $s + 44 | 0;
    var $0 = HEAPU32[$w_size >> 2];
    var $window_size = $s + 60 | 0;
    var $lookahead = $s + 116 | 0;
    var $strstart = $s + 108 | 0;
    var $sub4 = $0 - 262 | 0;
    var $strm = $s | 0;
    var $window37 = $s + 56 | 0;
    var $insert = $s + 5812 | 0;
    var $ins_h = $s + 72 | 0;
    var $hash_shift = $s + 88 | 0;
    var $hash_mask = $s + 84 | 0;
    var $head76 = $s + 68 | 0;
    var $w_mask = $s + 52 | 0;
    var $prev79 = $s + 64 | 0;
    var $match_start = $s + 112 | 0;
    var $block_start = $s + 92 | 0;
    var $hash_size = $s + 76 | 0;
    var $2 = HEAP32[$lookahead >> 2];
    var $1 = $0;
    __label__ = 2;
    break;
   case 2:
    var $1;
    var $2;
    var $4 = HEAPU32[$strstart >> 2];
    var $sub1 = HEAP32[$window_size >> 2] - $2 - $4 | 0;
    if ($4 >>> 0 < ($sub4 + $1 | 0) >>> 0) {
      var $more_0 = $sub1;
      __label__ = 12;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $5 = HEAPU32[$window37 >> 2];
    var $add_ptr = $5 + $0 | 0;
    _zmemcpy($5, $add_ptr, $0);
    var $sub6 = HEAP32[$match_start >> 2] - $0 | 0;
    HEAP32[$match_start >> 2] = $sub6;
    var $sub8 = HEAP32[$strstart >> 2] - $0 | 0;
    HEAP32[$strstart >> 2] = $sub8;
    var $sub9 = HEAP32[$block_start >> 2] - $0 | 0;
    HEAP32[$block_start >> 2] = $sub9;
    var $9 = HEAP32[$hash_size >> 2];
    var $n_0 = $9;
    var $p_0 = HEAP32[$head76 >> 2] + ($9 << 1) | 0;
    __label__ = 4;
    break;
   case 4:
    var $p_0;
    var $n_0;
    var $incdec_ptr = $p_0 - 2 | 0;
    var $conv = HEAPU16[$incdec_ptr >> 1] & 65535;
    if ($conv >>> 0 < $0 >>> 0) {
      var $cond = 0;
      __label__ = 6;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $cond = $conv - $0 & 65535;
    __label__ = 6;
    break;
   case 6:
    var $cond;
    HEAP16[$incdec_ptr >> 1] = $cond;
    var $dec = $n_0 - 1 | 0;
    if (($dec | 0) == 0) {
      __label__ = 7;
      break;
    } else {
      var $n_0 = $dec;
      var $p_0 = $incdec_ptr;
      __label__ = 4;
      break;
    }
   case 7:
    var $n_1 = $0;
    var $p_1 = HEAP32[$prev79 >> 2] + ($0 << 1) | 0;
    __label__ = 8;
    break;
   case 8:
    var $p_1;
    var $n_1;
    var $incdec_ptr17 = $p_1 - 2 | 0;
    var $conv18 = HEAPU16[$incdec_ptr17 >> 1] & 65535;
    if ($conv18 >>> 0 < $0 >>> 0) {
      var $cond25 = 0;
      __label__ = 10;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    var $cond25 = $conv18 - $0 & 65535;
    __label__ = 10;
    break;
   case 10:
    var $cond25;
    HEAP16[$incdec_ptr17 >> 1] = $cond25;
    var $dec28 = $n_1 - 1 | 0;
    if (($dec28 | 0) == 0) {
      __label__ = 11;
      break;
    } else {
      var $n_1 = $dec28;
      var $p_1 = $incdec_ptr17;
      __label__ = 8;
      break;
    }
   case 11:
    var $more_0 = $sub1 + $0 | 0;
    __label__ = 12;
    break;
   case 12:
    var $more_0;
    var $14 = HEAP32[$strm >> 2];
    if ((HEAP32[$14 + 4 >> 2] | 0) == 0) {
      __label__ = 20;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 13:
    var $add_ptr41 = HEAP32[$window37 >> 2] + (HEAP32[$lookahead >> 2] + HEAP32[$strstart >> 2]) | 0;
    var $call = _read_buf($14, $add_ptr41, $more_0);
    var $add43 = HEAP32[$lookahead >> 2] + $call | 0;
    HEAP32[$lookahead >> 2] = $add43;
    var $20 = HEAPU32[$insert >> 2];
    if (($add43 + $20 | 0) >>> 0 > 2) {
      __label__ = 14;
      break;
    } else {
      var $41 = $add43;
      __label__ = 17;
      break;
    }
   case 14:
    var $sub51 = HEAP32[$strstart >> 2] - $20 | 0;
    var $22 = HEAPU32[$window37 >> 2];
    var $conv54 = HEAPU8[$22 + $sub51 | 0] & 255;
    HEAP32[$ins_h >> 2] = $conv54;
    var $and = (HEAPU8[$sub51 + ($22 + 1) | 0] & 255 ^ $conv54 << HEAP32[$hash_shift >> 2]) & HEAP32[$hash_mask >> 2];
    HEAP32[$ins_h >> 2] = $and;
    var $str_0 = $sub51;
    var $27 = $20;
    var $_pr2 = $add43;
    __label__ = 15;
    break;
   case 15:
    var $_pr2;
    var $27;
    var $str_0;
    if (($27 | 0) == 0) {
      var $41 = $_pr2;
      __label__ = 17;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 16:
    var $and73 = (HEAPU8[HEAP32[$window37 >> 2] + ($str_0 + 2) | 0] & 255 ^ HEAP32[$ins_h >> 2] << HEAP32[$hash_shift >> 2]) & HEAP32[$hash_mask >> 2];
    HEAP32[$ins_h >> 2] = $and73;
    var $34 = HEAP16[HEAP32[$head76 >> 2] + ($and73 << 1) >> 1];
    HEAP16[HEAP32[$prev79 >> 2] + ((HEAP32[$w_mask >> 2] & $str_0) << 1) >> 1] = $34;
    HEAP16[HEAP32[$head76 >> 2] + (HEAP32[$ins_h >> 2] << 1) >> 1] = $str_0 & 65535;
    var $dec86 = HEAP32[$insert >> 2] - 1 | 0;
    HEAP32[$insert >> 2] = $dec86;
    var $40 = HEAPU32[$lookahead >> 2];
    if (($40 + $dec86 | 0) >>> 0 < 3) {
      var $41 = $40;
      __label__ = 17;
      break;
    } else {
      var $str_0 = $str_0 + 1 | 0;
      var $27 = $dec86;
      var $_pr2 = $40;
      __label__ = 15;
      break;
    }
   case 17:
    var $41;
    if ($41 >>> 0 < 262) {
      __label__ = 18;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 18:
    if ((HEAP32[HEAP32[$strm >> 2] + 4 >> 2] | 0) == 0) {
      __label__ = 20;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 19:
    var $2 = $41;
    var $1 = HEAP32[$w_size >> 2];
    __label__ = 2;
    break;
   case 20:
    var $high_water = $s + 5824 | 0;
    var $44 = HEAPU32[$high_water >> 2];
    var $45 = HEAPU32[$window_size >> 2];
    if ($44 >>> 0 < $45 >>> 0) {
      __label__ = 21;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 21:
    var $add110 = HEAP32[$lookahead >> 2] + HEAP32[$strstart >> 2] | 0;
    if ($44 >>> 0 < $add110 >>> 0) {
      __label__ = 22;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 22:
    var $sub116 = $45 - $add110 | 0;
    var $init_0 = $sub116 >>> 0 > 258 ? 258 : $sub116;
    var $add_ptr122 = HEAP32[$window37 >> 2] + $add110 | 0;
    _zmemzero($add_ptr122, $init_0);
    var $add123 = $init_0 + $add110 | 0;
    HEAP32[$high_water >> 2] = $add123;
    __label__ = 25;
    break;
   case 23:
    var $add126 = $add110 + 258 | 0;
    if ($44 >>> 0 < $add126 >>> 0) {
      __label__ = 24;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 24:
    var $sub132 = $add126 - $44 | 0;
    var $sub135 = $45 - $44 | 0;
    var $init_1 = $sub132 >>> 0 > $sub135 >>> 0 ? $sub135 : $sub132;
    var $add_ptr145 = HEAP32[$window37 >> 2] + $44 | 0;
    _zmemzero($add_ptr145, $init_1);
    var $add147 = $44 + $init_1 | 0;
    HEAP32[$high_water >> 2] = $add147;
    __label__ = 25;
    break;
   case 25:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_fill_window["X"] = 1;

function _deflateResetKeep($strm) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($strm | 0) == 0) {
      var $retval_0 = -2;
      __label__ = 11;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $0 = HEAP32[$strm + 28 >> 2];
    if (($0 | 0) == 0) {
      var $retval_0 = -2;
      __label__ = 11;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    if ((HEAP32[$strm + 32 >> 2] | 0) == 0) {
      var $retval_0 = -2;
      __label__ = 11;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    if ((HEAP32[$strm + 36 >> 2] | 0) == 0) {
      var $retval_0 = -2;
      __label__ = 11;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    HEAP32[$strm + 20 >> 2] = 0;
    HEAP32[$strm + 8 >> 2] = 0;
    HEAP32[$strm + 24 >> 2] = 0;
    HEAP32[$strm + 44 >> 2] = 2;
    var $pending = $0 + 20 | 0;
    HEAP32[$pending >> 2] = 0;
    var $3 = HEAP32[$0 + 8 >> 2];
    var $pending_out = $0 + 16 | 0;
    HEAP32[$pending_out >> 2] = $3;
    var $wrap = $0 + 24 | 0;
    var $4 = HEAP32[$wrap >> 2];
    if (($4 | 0) < 0) {
      __label__ = 6;
      break;
    } else {
      var $5 = $4;
      __label__ = 7;
      break;
    }
   case 6:
    var $sub = -$4 | 0;
    HEAP32[$wrap >> 2] = $sub;
    var $5 = $sub;
    __label__ = 7;
    break;
   case 7:
    var $5;
    var $cond = ($5 | 0) != 0 ? 42 : 113;
    var $status = $0 + 4 | 0;
    HEAP32[$status >> 2] = $cond;
    if (($5 | 0) == 2) {
      __label__ = 8;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 8:
    var $call = _crc32(0, 0, 0);
    var $cond16 = $call;
    __label__ = 10;
    break;
   case 9:
    var $call15 = _adler32(0, 0, 0);
    var $cond16 = $call15;
    __label__ = 10;
    break;
   case 10:
    var $cond16;
    HEAP32[$strm + 48 >> 2] = $cond16;
    var $last_flush = $0 + 40 | 0;
    HEAP32[$last_flush >> 2] = 0;
    var $6 = $0;
    __tr_init($6);
    var $retval_0 = 0;
    __label__ = 11;
    break;
   case 11:
    var $retval_0;
    return $retval_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_deflateResetKeep["X"] = 1;

function _lm_init($s) {
  var $mul = HEAP32[$s + 44 >> 2] << 1;
  HEAP32[$s + 60 >> 2] = $mul;
  var $hash_size = $s + 76 | 0;
  var $head = $s + 68 | 0;
  HEAP16[HEAP32[$head >> 2] + (HEAP32[$hash_size >> 2] - 1 << 1) >> 1] = 0;
  var $4 = HEAP32[$head >> 2];
  var $mul4 = (HEAP32[$hash_size >> 2] << 1) - 2 | 0;
  _zmemzero($4, $mul4);
  var $6 = HEAPU32[$s + 132 >> 2];
  HEAP32[$s + 128 >> 2] = HEAPU16[_configuration_table + $6 * 12 + 2 >> 1] & 65535;
  HEAP32[$s + 140 >> 2] = HEAPU16[_configuration_table + $6 * 12 >> 1] & 65535;
  HEAP32[$s + 144 >> 2] = HEAPU16[_configuration_table + $6 * 12 + 4 >> 1] & 65535;
  HEAP32[$s + 124 >> 2] = HEAPU16[_configuration_table + $6 * 12 + 6 >> 1] & 65535;
  HEAP32[$s + 108 >> 2] = 0;
  HEAP32[$s + 92 >> 2] = 0;
  HEAP32[$s + 116 >> 2] = 0;
  HEAP32[$s + 5812 >> 2] = 0;
  HEAP32[$s + 120 >> 2] = 2;
  HEAP32[$s + 96 >> 2] = 2;
  HEAP32[$s + 104 >> 2] = 0;
  HEAP32[$s + 72 >> 2] = 0;
  return;
}

_lm_init["X"] = 1;

function _deflate($strm, $flush) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($strm | 0) == 0) {
      var $retval_0 = -2;
      __label__ = 130;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $0 = HEAPU32[$strm + 28 >> 2];
    if (($0 | 0) == 0 | $flush >>> 0 > 5) {
      var $retval_0 = -2;
      __label__ = 130;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    if ((HEAP32[$strm + 12 >> 2] | 0) == 0) {
      __label__ = 7;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    if ((HEAP32[$strm >> 2] | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    if ((HEAP32[$strm + 4 >> 2] | 0) == 0) {
      __label__ = 6;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 6:
    var $status = $0 + 4 | 0;
    var $5 = HEAPU32[$status >> 2];
    var $cmp14 = ($flush | 0) == 4;
    if (($5 | 0) != 666 | $cmp14) {
      __label__ = 8;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    HEAP32[$strm + 24 >> 2] = STRING_TABLE.__str41333 | 0;
    var $retval_0 = -2;
    __label__ = 130;
    break;
   case 8:
    var $avail_out = $strm + 16 | 0;
    if ((HEAP32[$avail_out >> 2] | 0) == 0) {
      __label__ = 9;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 9:
    HEAP32[$strm + 24 >> 2] = STRING_TABLE.__str71336 | 0;
    var $retval_0 = -5;
    __label__ = 130;
    break;
   case 10:
    HEAP32[$0 >> 2] = $strm;
    var $last_flush = $0 + 40 | 0;
    var $7 = HEAP32[$last_flush >> 2];
    HEAP32[$last_flush >> 2] = $flush;
    if (($5 | 0) == 42) {
      __label__ = 11;
      break;
    } else {
      var $84 = $5;
      __label__ = 32;
      break;
    }
   case 11:
    if ((HEAP32[$0 + 24 >> 2] | 0) == 2) {
      __label__ = 12;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 12:
    var $call = _crc32(0, 0, 0);
    var $adler = $strm + 48 | 0;
    HEAP32[$adler >> 2] = $call;
    var $pending = $0 + 20 | 0;
    var $9 = HEAP32[$pending >> 2];
    var $inc = $9 + 1 | 0;
    HEAP32[$pending >> 2] = $inc;
    var $pending_buf = $0 + 8 | 0;
    HEAP8[HEAP32[$pending_buf >> 2] + $9 | 0] = 31;
    var $11 = HEAP32[$pending >> 2];
    var $inc29 = $11 + 1 | 0;
    HEAP32[$pending >> 2] = $inc29;
    HEAP8[HEAP32[$pending_buf >> 2] + $11 | 0] = -117;
    var $13 = HEAP32[$pending >> 2];
    var $inc33 = $13 + 1 | 0;
    HEAP32[$pending >> 2] = $inc33;
    HEAP8[HEAP32[$pending_buf >> 2] + $13 | 0] = 8;
    var $gzhead = $0 + 28 | 0;
    var $15 = HEAPU32[$gzhead >> 2];
    if (($15 | 0) == 0) {
      __label__ = 13;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 13:
    var $16 = HEAP32[$pending >> 2];
    var $inc39 = $16 + 1 | 0;
    HEAP32[$pending >> 2] = $inc39;
    HEAP8[HEAP32[$pending_buf >> 2] + $16 | 0] = 0;
    var $18 = HEAP32[$pending >> 2];
    var $inc43 = $18 + 1 | 0;
    HEAP32[$pending >> 2] = $inc43;
    HEAP8[HEAP32[$pending_buf >> 2] + $18 | 0] = 0;
    var $20 = HEAP32[$pending >> 2];
    var $inc47 = $20 + 1 | 0;
    HEAP32[$pending >> 2] = $inc47;
    HEAP8[HEAP32[$pending_buf >> 2] + $20 | 0] = 0;
    var $22 = HEAP32[$pending >> 2];
    var $inc51 = $22 + 1 | 0;
    HEAP32[$pending >> 2] = $inc51;
    HEAP8[HEAP32[$pending_buf >> 2] + $22 | 0] = 0;
    var $24 = HEAP32[$pending >> 2];
    var $inc55 = $24 + 1 | 0;
    HEAP32[$pending >> 2] = $inc55;
    HEAP8[HEAP32[$pending_buf >> 2] + $24 | 0] = 0;
    var $26 = HEAP32[$0 + 132 >> 2];
    if (($26 | 0) == 9) {
      var $cond62 = 2;
      __label__ = 16;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 14:
    if ((HEAP32[$0 + 136 >> 2] | 0) > 1) {
      var $cond62 = 4;
      __label__ = 16;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 15:
    var $phitmp3 = ($26 | 0) < 2 ? 4 : 0;
    var $cond62 = $phitmp3;
    __label__ = 16;
    break;
   case 16:
    var $cond62;
    var $28 = HEAP32[$pending >> 2];
    var $inc64 = $28 + 1 | 0;
    HEAP32[$pending >> 2] = $inc64;
    HEAP8[HEAP32[$pending_buf >> 2] + $28 | 0] = $cond62;
    var $30 = HEAP32[$pending >> 2];
    var $inc68 = $30 + 1 | 0;
    HEAP32[$pending >> 2] = $inc68;
    HEAP8[HEAP32[$pending_buf >> 2] + $30 | 0] = 3;
    HEAP32[$status >> 2] = 113;
    __label__ = 93;
    break;
   case 17:
    var $cond76 = (HEAP32[$15 + 44 >> 2] | 0) != 0 ? 2 : 0;
    var $cond80 = (HEAP32[$15 + 16 >> 2] | 0) == 0 ? 0 : 4;
    var $cond85 = (HEAP32[$15 + 28 >> 2] | 0) == 0 ? 0 : 8;
    var $cond90 = (HEAP32[$15 + 36 >> 2] | 0) == 0 ? 0 : 16;
    var $add91 = $cond76 | (HEAP32[$15 >> 2] | 0) != 0 & 1 | $cond80 | $cond85 | $cond90;
    var $37 = HEAP32[$pending >> 2];
    var $inc94 = $37 + 1 | 0;
    HEAP32[$pending >> 2] = $inc94;
    HEAP8[HEAP32[$pending_buf >> 2] + $37 | 0] = $add91;
    var $conv98 = HEAP32[HEAP32[$gzhead >> 2] + 4 >> 2] & 255;
    var $41 = HEAP32[$pending >> 2];
    var $inc100 = $41 + 1 | 0;
    HEAP32[$pending >> 2] = $inc100;
    HEAP8[HEAP32[$pending_buf >> 2] + $41 | 0] = $conv98;
    var $conv106 = HEAPU32[HEAP32[$gzhead >> 2] + 4 >> 2] >>> 8 & 255;
    var $45 = HEAPU32[$pending >> 2];
    HEAP32[$pending >> 2] = $45 + 1 | 0;
    HEAP8[HEAP32[$pending_buf >> 2] + $45 | 0] = $conv106;
    var $conv115 = HEAPU32[HEAP32[$gzhead >> 2] + 4 >> 2] >>> 16 & 255;
    var $49 = HEAPU32[$pending >> 2];
    HEAP32[$pending >> 2] = $49 + 1 | 0;
    HEAP8[HEAP32[$pending_buf >> 2] + $49 | 0] = $conv115;
    var $conv124 = HEAPU32[HEAP32[$gzhead >> 2] + 4 >> 2] >>> 24 & 255;
    var $53 = HEAPU32[$pending >> 2];
    HEAP32[$pending >> 2] = $53 + 1 | 0;
    HEAP8[HEAP32[$pending_buf >> 2] + $53 | 0] = $conv124;
    var $55 = HEAP32[$0 + 132 >> 2];
    if (($55 | 0) == 9) {
      var $cond144 = 2;
      __label__ = 20;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 18:
    if ((HEAP32[$0 + 136 >> 2] | 0) > 1) {
      var $cond144 = 4;
      __label__ = 20;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 19:
    var $phitmp = ($55 | 0) < 2 ? 4 : 0;
    var $cond144 = $phitmp;
    __label__ = 20;
    break;
   case 20:
    var $cond144;
    var $57 = HEAP32[$pending >> 2];
    var $inc147 = $57 + 1 | 0;
    HEAP32[$pending >> 2] = $inc147;
    HEAP8[HEAP32[$pending_buf >> 2] + $57 | 0] = $cond144;
    var $conv152 = HEAP32[HEAP32[$gzhead >> 2] + 12 >> 2] & 255;
    var $61 = HEAP32[$pending >> 2];
    var $inc154 = $61 + 1 | 0;
    HEAP32[$pending >> 2] = $inc154;
    HEAP8[HEAP32[$pending_buf >> 2] + $61 | 0] = $conv152;
    var $63 = HEAPU32[$gzhead >> 2];
    if ((HEAP32[$63 + 16 >> 2] | 0) == 0) {
      var $72 = $63;
      __label__ = 22;
      break;
    } else {
      __label__ = 21;
      break;
    }
   case 21:
    var $conv164 = HEAP32[$63 + 20 >> 2] & 255;
    var $66 = HEAP32[$pending >> 2];
    var $inc166 = $66 + 1 | 0;
    HEAP32[$pending >> 2] = $inc166;
    HEAP8[HEAP32[$pending_buf >> 2] + $66 | 0] = $conv164;
    var $conv173 = HEAPU32[HEAP32[$gzhead >> 2] + 20 >> 2] >>> 8 & 255;
    var $70 = HEAPU32[$pending >> 2];
    HEAP32[$pending >> 2] = $70 + 1 | 0;
    HEAP8[HEAP32[$pending_buf >> 2] + $70 | 0] = $conv173;
    var $72 = HEAP32[$gzhead >> 2];
    __label__ = 22;
    break;
   case 22:
    var $72;
    if ((HEAP32[$72 + 44 >> 2] | 0) == 0) {
      __label__ = 24;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 23:
    var $74 = HEAP32[$adler >> 2];
    var $75 = HEAP32[$pending_buf >> 2];
    var $76 = HEAP32[$pending >> 2];
    var $call186 = _crc32($74, $75, $76);
    HEAP32[$adler >> 2] = $call186;
    __label__ = 24;
    break;
   case 24:
    HEAP32[$0 + 32 >> 2] = 0;
    HEAP32[$status >> 2] = 69;
    var $gzhead242_pre_phi = $gzhead;
    __label__ = 34;
    break;
   case 25:
    var $shl193 = (HEAP32[$0 + 48 >> 2] << 12) - 30720 | 0;
    if ((HEAP32[$0 + 136 >> 2] | 0) > 1) {
      var $level_flags_0 = 0;
      __label__ = 29;
      break;
    } else {
      __label__ = 26;
      break;
    }
   case 26:
    var $79 = HEAP32[$0 + 132 >> 2];
    if (($79 | 0) < 2) {
      var $level_flags_0 = 0;
      __label__ = 29;
      break;
    } else {
      __label__ = 27;
      break;
    }
   case 27:
    if (($79 | 0) < 6) {
      var $level_flags_0 = 64;
      __label__ = 29;
      break;
    } else {
      __label__ = 28;
      break;
    }
   case 28:
    var $_ = ($79 | 0) == 6 ? 128 : 192;
    var $level_flags_0 = $_;
    __label__ = 29;
    break;
   case 29:
    var $level_flags_0;
    var $or = $level_flags_0 | $shl193;
    var $strstart = $0 + 108 | 0;
    var $header_0 = (HEAP32[$strstart >> 2] | 0) == 0 ? $or : $or | 32;
    var $add223 = $header_0 | 31 - ($header_0 >>> 0) % 31;
    HEAP32[$status >> 2] = 113;
    _putShortMSB($0, $add223);
    var $adler235_pre = $strm + 48 | 0;
    if ((HEAP32[$strstart >> 2] | 0) == 0) {
      __label__ = 31;
      break;
    } else {
      __label__ = 30;
      break;
    }
   case 30:
    var $shr230 = HEAPU32[$adler235_pre >> 2] >>> 16;
    _putShortMSB($0, $shr230);
    var $and232 = HEAP32[$adler235_pre >> 2] & 65535;
    _putShortMSB($0, $and232);
    __label__ = 31;
    break;
   case 31:
    var $call234 = _adler32(0, 0, 0);
    HEAP32[$adler235_pre >> 2] = $call234;
    var $84 = HEAP32[$status >> 2];
    __label__ = 32;
    break;
   case 32:
    var $84;
    if (($84 | 0) == 69) {
      __label__ = 33;
      break;
    } else {
      var $_pr12_pr = $84;
      __label__ = 51;
      break;
    }
   case 33:
    var $gzhead242_pre_phi = $0 + 28 | 0;
    __label__ = 34;
    break;
   case 34:
    var $gzhead242_pre_phi;
    var $85 = HEAPU32[$gzhead242_pre_phi >> 2];
    if ((HEAP32[$85 + 16 >> 2] | 0) == 0) {
      __label__ = 50;
      break;
    } else {
      __label__ = 35;
      break;
    }
   case 35:
    var $pending247 = $0 + 20 | 0;
    var $gzindex248 = $0 + 32 | 0;
    var $pending_buf_size = $0 + 12 | 0;
    var $adler266 = $strm + 48 | 0;
    var $pending_buf267 = $0 + 8 | 0;
    var $beg_0 = HEAP32[$pending247 >> 2];
    var $89 = HEAP32[$gzindex248 >> 2];
    var $88 = $85;
    __label__ = 36;
    break;
   case 36:
    var $88;
    var $89;
    var $beg_0;
    if ($89 >>> 0 < (HEAP32[$88 + 20 >> 2] & 65535) >>> 0) {
      __label__ = 37;
      break;
    } else {
      var $beg_2 = $beg_0;
      var $105 = $88;
      __label__ = 44;
      break;
    }
   case 37:
    var $91 = HEAPU32[$pending247 >> 2];
    if (($91 | 0) == (HEAP32[$pending_buf_size >> 2] | 0)) {
      __label__ = 38;
      break;
    } else {
      var $beg_1 = $beg_0;
      var $100 = $91;
      var $99 = $89;
      var $98 = $88;
      __label__ = 43;
      break;
    }
   case 38:
    if ((HEAP32[$88 + 44 >> 2] | 0) != 0 & $91 >>> 0 > $beg_0 >>> 0) {
      __label__ = 39;
      break;
    } else {
      __label__ = 40;
      break;
    }
   case 39:
    var $94 = HEAP32[$adler266 >> 2];
    var $add_ptr = HEAP32[$pending_buf267 >> 2] + $beg_0 | 0;
    var $sub269 = $91 - $beg_0 | 0;
    var $call270 = _crc32($94, $add_ptr, $sub269);
    HEAP32[$adler266 >> 2] = $call270;
    __label__ = 40;
    break;
   case 40:
    _flush_pending($strm);
    var $96 = HEAPU32[$pending247 >> 2];
    if (($96 | 0) == (HEAP32[$pending_buf_size >> 2] | 0)) {
      __label__ = 42;
      break;
    } else {
      __label__ = 41;
      break;
    }
   case 41:
    var $beg_1 = $96;
    var $100 = $96;
    var $99 = HEAP32[$gzindex248 >> 2];
    var $98 = HEAP32[$gzhead242_pre_phi >> 2];
    __label__ = 43;
    break;
   case 42:
    var $beg_2 = $96;
    var $105 = HEAP32[$gzhead242_pre_phi >> 2];
    __label__ = 44;
    break;
   case 43:
    var $98;
    var $99;
    var $100;
    var $beg_1;
    var $102 = HEAP8[HEAP32[$98 + 16 >> 2] + $99 | 0];
    HEAP32[$pending247 >> 2] = $100 + 1 | 0;
    HEAP8[HEAP32[$pending_buf267 >> 2] + $100 | 0] = $102;
    var $inc290 = HEAP32[$gzindex248 >> 2] + 1 | 0;
    HEAP32[$gzindex248 >> 2] = $inc290;
    var $beg_0 = $beg_1;
    var $89 = $inc290;
    var $88 = HEAP32[$gzhead242_pre_phi >> 2];
    __label__ = 36;
    break;
   case 44:
    var $105;
    var $beg_2;
    if ((HEAP32[$105 + 44 >> 2] | 0) == 0) {
      var $110 = $105;
      __label__ = 47;
      break;
    } else {
      __label__ = 45;
      break;
    }
   case 45:
    var $107 = HEAPU32[$pending247 >> 2];
    if ($107 >>> 0 > $beg_2 >>> 0) {
      __label__ = 46;
      break;
    } else {
      var $110 = $105;
      __label__ = 47;
      break;
    }
   case 46:
    var $108 = HEAP32[$adler266 >> 2];
    var $add_ptr301 = HEAP32[$pending_buf267 >> 2] + $beg_2 | 0;
    var $sub303 = $107 - $beg_2 | 0;
    var $call304 = _crc32($108, $add_ptr301, $sub303);
    HEAP32[$adler266 >> 2] = $call304;
    var $110 = HEAP32[$gzhead242_pre_phi >> 2];
    __label__ = 47;
    break;
   case 47:
    var $110;
    if ((HEAP32[$gzindex248 >> 2] | 0) == (HEAP32[$110 + 20 >> 2] | 0)) {
      __label__ = 49;
      break;
    } else {
      __label__ = 48;
      break;
    }
   case 48:
    var $_pr12_pr = HEAP32[$status >> 2];
    __label__ = 51;
    break;
   case 49:
    HEAP32[$gzindex248 >> 2] = 0;
    HEAP32[$status >> 2] = 73;
    var $113 = $110;
    __label__ = 53;
    break;
   case 50:
    HEAP32[$status >> 2] = 73;
    var $113 = $85;
    __label__ = 53;
    break;
   case 51:
    var $_pr12_pr;
    if (($_pr12_pr | 0) == 73) {
      __label__ = 52;
      break;
    } else {
      var $135 = $_pr12_pr;
      __label__ = 68;
      break;
    }
   case 52:
    var $113 = HEAP32[$0 + 28 >> 2];
    __label__ = 53;
    break;
   case 53:
    var $113;
    var $gzhead324 = $0 + 28 | 0;
    if ((HEAP32[$113 + 28 >> 2] | 0) == 0) {
      __label__ = 66;
      break;
    } else {
      __label__ = 54;
      break;
    }
   case 54:
    var $pending330 = $0 + 20 | 0;
    var $115 = HEAP32[$pending330 >> 2];
    var $pending_buf_size332 = $0 + 12 | 0;
    var $adler344 = $strm + 48 | 0;
    var $pending_buf345 = $0 + 8 | 0;
    var $gzindex360 = $0 + 32 | 0;
    var $beg329_0 = $115;
    var $116 = $115;
    __label__ = 55;
    break;
   case 55:
    var $116;
    var $beg329_0;
    if (($116 | 0) == (HEAP32[$pending_buf_size332 >> 2] | 0)) {
      __label__ = 56;
      break;
    } else {
      var $beg329_1 = $beg329_0;
      var $124 = $116;
      __label__ = 59;
      break;
    }
   case 56:
    if ((HEAP32[HEAP32[$gzhead324 >> 2] + 44 >> 2] | 0) != 0 & $116 >>> 0 > $beg329_0 >>> 0) {
      __label__ = 57;
      break;
    } else {
      __label__ = 58;
      break;
    }
   case 57:
    var $120 = HEAP32[$adler344 >> 2];
    var $add_ptr346 = HEAP32[$pending_buf345 >> 2] + $beg329_0 | 0;
    var $call349 = _crc32($120, $add_ptr346, $116 - $beg329_0 | 0);
    HEAP32[$adler344 >> 2] = $call349;
    __label__ = 58;
    break;
   case 58:
    _flush_pending($strm);
    var $122 = HEAPU32[$pending330 >> 2];
    if (($122 | 0) == (HEAP32[$pending_buf_size332 >> 2] | 0)) {
      var $val_0 = 1;
      var $beg329_2 = $122;
      __label__ = 61;
      break;
    } else {
      var $beg329_1 = $122;
      var $124 = $122;
      __label__ = 59;
      break;
    }
   case 59:
    var $124;
    var $beg329_1;
    var $125 = HEAP32[$gzindex360 >> 2];
    var $inc361 = $125 + 1 | 0;
    HEAP32[$gzindex360 >> 2] = $inc361;
    var $128 = HEAPU8[HEAP32[HEAP32[$gzhead324 >> 2] + 28 >> 2] + $125 | 0];
    var $conv365 = $128 & 255;
    HEAP32[$pending330 >> 2] = $124 + 1 | 0;
    HEAP8[HEAP32[$pending_buf345 >> 2] + $124 | 0] = $128;
    if ($128 << 24 >> 24 == 0) {
      var $val_0 = $conv365;
      var $beg329_2 = $beg329_1;
      __label__ = 61;
      break;
    } else {
      __label__ = 60;
      break;
    }
   case 60:
    var $beg329_0 = $beg329_1;
    var $116 = HEAP32[$pending330 >> 2];
    __label__ = 55;
    break;
   case 61:
    var $beg329_2;
    var $val_0;
    if ((HEAP32[HEAP32[$gzhead324 >> 2] + 44 >> 2] | 0) == 0) {
      __label__ = 64;
      break;
    } else {
      __label__ = 62;
      break;
    }
   case 62:
    var $132 = HEAPU32[$pending330 >> 2];
    if ($132 >>> 0 > $beg329_2 >>> 0) {
      __label__ = 63;
      break;
    } else {
      __label__ = 64;
      break;
    }
   case 63:
    var $133 = HEAP32[$adler344 >> 2];
    var $add_ptr383 = HEAP32[$pending_buf345 >> 2] + $beg329_2 | 0;
    var $sub385 = $132 - $beg329_2 | 0;
    var $call386 = _crc32($133, $add_ptr383, $sub385);
    HEAP32[$adler344 >> 2] = $call386;
    __label__ = 64;
    break;
   case 64:
    if (($val_0 | 0) == 0) {
      __label__ = 65;
      break;
    } else {
      __label__ = 67;
      break;
    }
   case 65:
    HEAP32[$gzindex360 >> 2] = 0;
    HEAP32[$status >> 2] = 91;
    var $gzhead403_pre_phi = $gzhead324;
    __label__ = 70;
    break;
   case 66:
    HEAP32[$status >> 2] = 91;
    var $gzhead403_pre_phi = $gzhead324;
    __label__ = 70;
    break;
   case 67:
    var $135 = HEAP32[$status >> 2];
    __label__ = 68;
    break;
   case 68:
    var $135;
    if (($135 | 0) == 91) {
      __label__ = 69;
      break;
    } else {
      var $_pr16_pr = $135;
      __label__ = 85;
      break;
    }
   case 69:
    var $gzhead403_pre_phi = $0 + 28 | 0;
    __label__ = 70;
    break;
   case 70:
    var $gzhead403_pre_phi;
    if ((HEAP32[HEAP32[$gzhead403_pre_phi >> 2] + 36 >> 2] | 0) == 0) {
      __label__ = 84;
      break;
    } else {
      __label__ = 71;
      break;
    }
   case 71:
    var $pending409 = $0 + 20 | 0;
    var $138 = HEAP32[$pending409 >> 2];
    var $pending_buf_size413 = $0 + 12 | 0;
    var $adler425 = $strm + 48 | 0;
    var $pending_buf426 = $0 + 8 | 0;
    var $gzindex441 = $0 + 32 | 0;
    var $beg408_0 = $138;
    var $139 = $138;
    __label__ = 72;
    break;
   case 72:
    var $139;
    var $beg408_0;
    if (($139 | 0) == (HEAP32[$pending_buf_size413 >> 2] | 0)) {
      __label__ = 73;
      break;
    } else {
      var $beg408_1 = $beg408_0;
      var $147 = $139;
      __label__ = 76;
      break;
    }
   case 73:
    if ((HEAP32[HEAP32[$gzhead403_pre_phi >> 2] + 44 >> 2] | 0) != 0 & $139 >>> 0 > $beg408_0 >>> 0) {
      __label__ = 74;
      break;
    } else {
      __label__ = 75;
      break;
    }
   case 74:
    var $143 = HEAP32[$adler425 >> 2];
    var $add_ptr427 = HEAP32[$pending_buf426 >> 2] + $beg408_0 | 0;
    var $call430 = _crc32($143, $add_ptr427, $139 - $beg408_0 | 0);
    HEAP32[$adler425 >> 2] = $call430;
    __label__ = 75;
    break;
   case 75:
    _flush_pending($strm);
    var $145 = HEAPU32[$pending409 >> 2];
    if (($145 | 0) == (HEAP32[$pending_buf_size413 >> 2] | 0)) {
      var $val410_0 = 1;
      var $beg408_2 = $145;
      __label__ = 78;
      break;
    } else {
      var $beg408_1 = $145;
      var $147 = $145;
      __label__ = 76;
      break;
    }
   case 76:
    var $147;
    var $beg408_1;
    var $148 = HEAP32[$gzindex441 >> 2];
    var $inc442 = $148 + 1 | 0;
    HEAP32[$gzindex441 >> 2] = $inc442;
    var $151 = HEAPU8[HEAP32[HEAP32[$gzhead403_pre_phi >> 2] + 36 >> 2] + $148 | 0];
    var $conv446 = $151 & 255;
    HEAP32[$pending409 >> 2] = $147 + 1 | 0;
    HEAP8[HEAP32[$pending_buf426 >> 2] + $147 | 0] = $151;
    if ($151 << 24 >> 24 == 0) {
      var $val410_0 = $conv446;
      var $beg408_2 = $beg408_1;
      __label__ = 78;
      break;
    } else {
      __label__ = 77;
      break;
    }
   case 77:
    var $beg408_0 = $beg408_1;
    var $139 = HEAP32[$pending409 >> 2];
    __label__ = 72;
    break;
   case 78:
    var $beg408_2;
    var $val410_0;
    if ((HEAP32[HEAP32[$gzhead403_pre_phi >> 2] + 44 >> 2] | 0) == 0) {
      __label__ = 81;
      break;
    } else {
      __label__ = 79;
      break;
    }
   case 79:
    var $155 = HEAPU32[$pending409 >> 2];
    if ($155 >>> 0 > $beg408_2 >>> 0) {
      __label__ = 80;
      break;
    } else {
      __label__ = 81;
      break;
    }
   case 80:
    var $156 = HEAP32[$adler425 >> 2];
    var $add_ptr466 = HEAP32[$pending_buf426 >> 2] + $beg408_2 | 0;
    var $sub468 = $155 - $beg408_2 | 0;
    var $call469 = _crc32($156, $add_ptr466, $sub468);
    HEAP32[$adler425 >> 2] = $call469;
    __label__ = 81;
    break;
   case 81:
    if (($val410_0 | 0) == 0) {
      __label__ = 83;
      break;
    } else {
      __label__ = 82;
      break;
    }
   case 82:
    var $_pr16_pr = HEAP32[$status >> 2];
    __label__ = 85;
    break;
   case 83:
    HEAP32[$status >> 2] = 103;
    var $gzhead485_pre_phi = $gzhead403_pre_phi;
    __label__ = 87;
    break;
   case 84:
    HEAP32[$status >> 2] = 103;
    var $gzhead485_pre_phi = $gzhead403_pre_phi;
    __label__ = 87;
    break;
   case 85:
    var $_pr16_pr;
    if (($_pr16_pr | 0) == 103) {
      __label__ = 86;
      break;
    } else {
      __label__ = 93;
      break;
    }
   case 86:
    var $gzhead485_pre_phi = $0 + 28 | 0;
    __label__ = 87;
    break;
   case 87:
    var $gzhead485_pre_phi;
    if ((HEAP32[HEAP32[$gzhead485_pre_phi >> 2] + 44 >> 2] | 0) == 0) {
      __label__ = 92;
      break;
    } else {
      __label__ = 88;
      break;
    }
   case 88:
    var $pending489 = $0 + 20 | 0;
    var $160 = HEAPU32[$pending489 >> 2];
    var $pending_buf_size491 = $0 + 12 | 0;
    var $161 = HEAPU32[$pending_buf_size491 >> 2];
    if (($160 + 2 | 0) >>> 0 > $161 >>> 0) {
      __label__ = 89;
      break;
    } else {
      var $163 = $160;
      var $162 = $161;
      __label__ = 90;
      break;
    }
   case 89:
    _flush_pending($strm);
    var $163 = HEAP32[$pending489 >> 2];
    var $162 = HEAP32[$pending_buf_size491 >> 2];
    __label__ = 90;
    break;
   case 90:
    var $162;
    var $163;
    if (($163 + 2 | 0) >>> 0 > $162 >>> 0) {
      __label__ = 93;
      break;
    } else {
      __label__ = 91;
      break;
    }
   case 91:
    var $adler502 = $strm + 48 | 0;
    var $conv504 = HEAP32[$adler502 >> 2] & 255;
    HEAP32[$pending489 >> 2] = $163 + 1 | 0;
    var $pending_buf507 = $0 + 8 | 0;
    HEAP8[HEAP32[$pending_buf507 >> 2] + $163 | 0] = $conv504;
    var $conv512 = HEAPU32[$adler502 >> 2] >>> 8 & 255;
    var $167 = HEAPU32[$pending489 >> 2];
    HEAP32[$pending489 >> 2] = $167 + 1 | 0;
    HEAP8[HEAP32[$pending_buf507 >> 2] + $167 | 0] = $conv512;
    var $call517 = _crc32(0, 0, 0);
    HEAP32[$adler502 >> 2] = $call517;
    HEAP32[$status >> 2] = 113;
    __label__ = 93;
    break;
   case 92:
    HEAP32[$status >> 2] = 113;
    __label__ = 93;
    break;
   case 93:
    var $pending525 = $0 + 20 | 0;
    if ((HEAP32[$pending525 >> 2] | 0) == 0) {
      __label__ = 96;
      break;
    } else {
      __label__ = 94;
      break;
    }
   case 94:
    _flush_pending($strm);
    if ((HEAP32[$avail_out >> 2] | 0) == 0) {
      __label__ = 95;
      break;
    } else {
      __label__ = 99;
      break;
    }
   case 95:
    HEAP32[$last_flush >> 2] = -1;
    var $retval_0 = 0;
    __label__ = 130;
    break;
   case 96:
    if ((HEAP32[$strm + 4 >> 2] | 0) == 0) {
      __label__ = 97;
      break;
    } else {
      __label__ = 99;
      break;
    }
   case 97:
    var $cond543 = ($flush | 0) > 4 ? 9 : 0;
    var $cond548 = ($7 | 0) > 4 ? 9 : 0;
    if ((($flush << 1) - $cond543 | 0) > (($7 << 1) - $cond548 | 0) | $cmp14) {
      __label__ = 99;
      break;
    } else {
      __label__ = 98;
      break;
    }
   case 98:
    HEAP32[$strm + 24 >> 2] = STRING_TABLE.__str71336 | 0;
    var $retval_0 = -5;
    __label__ = 130;
    break;
   case 99:
    var $cmp560 = (HEAP32[$status >> 2] | 0) == 666;
    var $cmp564 = (HEAP32[$strm + 4 >> 2] | 0) == 0;
    if ($cmp560) {
      __label__ = 100;
      break;
    } else {
      __label__ = 102;
      break;
    }
   case 100:
    if ($cmp564) {
      __label__ = 103;
      break;
    } else {
      __label__ = 101;
      break;
    }
   case 101:
    HEAP32[$strm + 24 >> 2] = STRING_TABLE.__str71336 | 0;
    var $retval_0 = -5;
    __label__ = 130;
    break;
   case 102:
    if ($cmp564) {
      __label__ = 103;
      break;
    } else {
      __label__ = 106;
      break;
    }
   case 103:
    if ((HEAP32[$0 + 116 >> 2] | 0) == 0) {
      __label__ = 104;
      break;
    } else {
      __label__ = 106;
      break;
    }
   case 104:
    if (($flush | 0) == 0) {
      var $retval_0 = 0;
      __label__ = 130;
      break;
    } else {
      __label__ = 105;
      break;
    }
   case 105:
    if ($cmp560) {
      __label__ = 122;
      break;
    } else {
      __label__ = 106;
      break;
    }
   case 106:
    var $175 = HEAP32[$0 + 136 >> 2];
    if (($175 | 0) == 2) {
      __label__ = 107;
      break;
    } else if (($175 | 0) == 3) {
      __label__ = 108;
      break;
    } else {
      __label__ = 109;
      break;
    }
   case 107:
    var $call587 = _deflate_huff($0, $flush);
    var $cond601 = $call587;
    __label__ = 110;
    break;
   case 108:
    var $call593 = _deflate_rle($0, $flush);
    var $cond601 = $call593;
    __label__ = 110;
    break;
   case 109:
    var $177 = HEAP32[_configuration_table + HEAP32[$0 + 132 >> 2] * 12 + 8 >> 2];
    var $call597 = FUNCTION_TABLE[$177]($0, $flush);
    var $cond601 = $call597;
    __label__ = 110;
    break;
   case 110:
    var $cond601;
    if (($cond601 - 2 | 0) >>> 0 < 2) {
      __label__ = 111;
      break;
    } else {
      __label__ = 112;
      break;
    }
   case 111:
    HEAP32[$status >> 2] = 666;
    __label__ = 112;
    break;
   case 112:
    if (($cond601 | 0) == 2 || ($cond601 | 0) == 0) {
      __label__ = 113;
      break;
    } else if (($cond601 | 0) == 1) {
      __label__ = 115;
      break;
    } else {
      __label__ = 122;
      break;
    }
   case 113:
    if ((HEAP32[$avail_out >> 2] | 0) == 0) {
      __label__ = 114;
      break;
    } else {
      var $retval_0 = 0;
      __label__ = 130;
      break;
    }
   case 114:
    HEAP32[$last_flush >> 2] = -1;
    var $retval_0 = 0;
    __label__ = 130;
    break;
   case 115:
    if (($flush | 0) == 1) {
      __label__ = 116;
      break;
    } else if (($flush | 0) == 5) {
      __label__ = 120;
      break;
    } else {
      __label__ = 117;
      break;
    }
   case 116:
    var $180 = $0;
    __tr_align($180);
    __label__ = 120;
    break;
   case 117:
    var $181 = $0;
    __tr_stored_block($181, 0, 0, 0);
    if (($flush | 0) == 3) {
      __label__ = 118;
      break;
    } else {
      __label__ = 120;
      break;
    }
   case 118:
    var $hash_size = $0 + 76 | 0;
    var $head = $0 + 68 | 0;
    HEAP16[HEAP32[$head >> 2] + (HEAP32[$hash_size >> 2] - 1 << 1) >> 1] = 0;
    var $185 = HEAP32[$head >> 2];
    var $mul = (HEAP32[$hash_size >> 2] << 1) - 2 | 0;
    _zmemzero($185, $mul);
    if ((HEAP32[$0 + 116 >> 2] | 0) == 0) {
      __label__ = 119;
      break;
    } else {
      __label__ = 120;
      break;
    }
   case 119:
    HEAP32[$0 + 108 >> 2] = 0;
    HEAP32[$0 + 92 >> 2] = 0;
    HEAP32[$0 + 5812 >> 2] = 0;
    __label__ = 120;
    break;
   case 120:
    _flush_pending($strm);
    if ((HEAP32[$avail_out >> 2] | 0) == 0) {
      __label__ = 121;
      break;
    } else {
      __label__ = 122;
      break;
    }
   case 121:
    HEAP32[$last_flush >> 2] = -1;
    var $retval_0 = 0;
    __label__ = 130;
    break;
   case 122:
    if ($cmp14) {
      __label__ = 123;
      break;
    } else {
      var $retval_0 = 0;
      __label__ = 130;
      break;
    }
   case 123:
    var $wrap662 = $0 + 24 | 0;
    var $189 = HEAP32[$wrap662 >> 2];
    if (($189 | 0) < 1) {
      var $retval_0 = 1;
      __label__ = 130;
      break;
    } else {
      __label__ = 124;
      break;
    }
   case 124:
    var $adler671 = $strm + 48 | 0;
    var $190 = HEAPU32[$adler671 >> 2];
    if (($189 | 0) == 2) {
      __label__ = 125;
      break;
    } else {
      __label__ = 126;
      break;
    }
   case 125:
    var $conv673 = $190 & 255;
    var $191 = HEAP32[$pending525 >> 2];
    var $inc675 = $191 + 1 | 0;
    HEAP32[$pending525 >> 2] = $inc675;
    var $pending_buf676 = $0 + 8 | 0;
    HEAP8[HEAP32[$pending_buf676 >> 2] + $191 | 0] = $conv673;
    var $conv681 = HEAPU32[$adler671 >> 2] >>> 8 & 255;
    var $194 = HEAPU32[$pending525 >> 2];
    HEAP32[$pending525 >> 2] = $194 + 1 | 0;
    HEAP8[HEAP32[$pending_buf676 >> 2] + $194 | 0] = $conv681;
    var $conv689 = HEAPU32[$adler671 >> 2] >>> 16 & 255;
    var $197 = HEAPU32[$pending525 >> 2];
    HEAP32[$pending525 >> 2] = $197 + 1 | 0;
    HEAP8[HEAP32[$pending_buf676 >> 2] + $197 | 0] = $conv689;
    var $conv697 = HEAPU32[$adler671 >> 2] >>> 24 & 255;
    var $200 = HEAPU32[$pending525 >> 2];
    HEAP32[$pending525 >> 2] = $200 + 1 | 0;
    HEAP8[HEAP32[$pending_buf676 >> 2] + $200 | 0] = $conv697;
    var $total_in = $strm + 8 | 0;
    var $conv703 = HEAP32[$total_in >> 2] & 255;
    var $203 = HEAP32[$pending525 >> 2];
    var $inc705 = $203 + 1 | 0;
    HEAP32[$pending525 >> 2] = $inc705;
    HEAP8[HEAP32[$pending_buf676 >> 2] + $203 | 0] = $conv703;
    var $conv711 = HEAPU32[$total_in >> 2] >>> 8 & 255;
    var $206 = HEAPU32[$pending525 >> 2];
    HEAP32[$pending525 >> 2] = $206 + 1 | 0;
    HEAP8[HEAP32[$pending_buf676 >> 2] + $206 | 0] = $conv711;
    var $conv719 = HEAPU32[$total_in >> 2] >>> 16 & 255;
    var $209 = HEAPU32[$pending525 >> 2];
    HEAP32[$pending525 >> 2] = $209 + 1 | 0;
    HEAP8[HEAP32[$pending_buf676 >> 2] + $209 | 0] = $conv719;
    var $conv727 = HEAPU32[$total_in >> 2] >>> 24 & 255;
    var $212 = HEAPU32[$pending525 >> 2];
    HEAP32[$pending525 >> 2] = $212 + 1 | 0;
    HEAP8[HEAP32[$pending_buf676 >> 2] + $212 | 0] = $conv727;
    __label__ = 127;
    break;
   case 126:
    var $shr734 = $190 >>> 16;
    _putShortMSB($0, $shr734);
    var $and736 = HEAP32[$adler671 >> 2] & 65535;
    _putShortMSB($0, $and736);
    __label__ = 127;
    break;
   case 127:
    _flush_pending($strm);
    var $215 = HEAP32[$wrap662 >> 2];
    if (($215 | 0) > 0) {
      __label__ = 128;
      break;
    } else {
      __label__ = 129;
      break;
    }
   case 128:
    var $sub743 = -$215 | 0;
    HEAP32[$wrap662 >> 2] = $sub743;
    __label__ = 129;
    break;
   case 129:
    var $retval_0 = (HEAP32[$pending525 >> 2] | 0) == 0 & 1;
    __label__ = 130;
    break;
   case 130:
    var $retval_0;
    return $retval_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_deflate["X"] = 1;

function _putShortMSB($s, $b) {
  var $conv = $b >>> 8 & 255;
  var $pending = $s + 20 | 0;
  var $0 = HEAPU32[$pending >> 2];
  HEAP32[$pending >> 2] = $0 + 1 | 0;
  var $pending_buf = $s + 8 | 0;
  HEAP8[HEAP32[$pending_buf >> 2] + $0 | 0] = $conv;
  var $conv1 = $b & 255;
  var $2 = HEAP32[$pending >> 2];
  var $inc3 = $2 + 1 | 0;
  HEAP32[$pending >> 2] = $inc3;
  HEAP8[HEAP32[$pending_buf >> 2] + $2 | 0] = $conv1;
  return;
}

function _flush_pending($strm) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $0 = HEAPU32[$strm + 28 >> 2];
    var $1 = $0;
    __tr_flush_bits($1);
    var $pending = $0 + 20 | 0;
    var $2 = HEAPU32[$pending >> 2];
    var $avail_out = $strm + 16 | 0;
    var $3 = HEAPU32[$avail_out >> 2];
    var $len_0 = $2 >>> 0 > $3 >>> 0 ? $3 : $2;
    if (($len_0 | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $next_out = $strm + 12 | 0;
    var $4 = HEAP32[$next_out >> 2];
    var $pending_out = $0 + 16 | 0;
    var $5 = HEAP32[$pending_out >> 2];
    _zmemcpy($4, $5, $len_0);
    var $add_ptr = HEAP32[$next_out >> 2] + $len_0 | 0;
    HEAP32[$next_out >> 2] = $add_ptr;
    var $add_ptr7 = HEAP32[$pending_out >> 2] + $len_0 | 0;
    HEAP32[$pending_out >> 2] = $add_ptr7;
    var $total_out = $strm + 20 | 0;
    var $add = HEAP32[$total_out >> 2] + $len_0 | 0;
    HEAP32[$total_out >> 2] = $add;
    var $sub = HEAP32[$avail_out >> 2] - $len_0 | 0;
    HEAP32[$avail_out >> 2] = $sub;
    var $10 = HEAP32[$pending >> 2];
    var $sub10 = $10 - $len_0 | 0;
    HEAP32[$pending >> 2] = $sub10;
    if (($10 | 0) == ($len_0 | 0)) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $11 = HEAP32[$0 + 8 >> 2];
    HEAP32[$pending_out >> 2] = $11;
    __label__ = 4;
    break;
   case 4:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _deflate_huff($s, $flush) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $lookahead = $s + 116 | 0;
    var $match_length = $s + 96 | 0;
    var $strstart = $s + 108 | 0;
    var $window = $s + 56 | 0;
    var $last_lit = $s + 5792 | 0;
    var $d_buf = $s + 5796 | 0;
    var $l_buf = $s + 5784 | 0;
    var $lit_bufsize = $s + 5788 | 0;
    var $block_start = $s + 92 | 0;
    var $0 = $s;
    var $strm = $s | 0;
    __label__ = 2;
    break;
   case 2:
    if ((HEAP32[$lookahead >> 2] | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 3:
    _fill_window($s);
    if ((HEAP32[$lookahead >> 2] | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 4:
    if (($flush | 0) == 0) {
      var $retval_0 = 0;
      __label__ = 18;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 5:
    HEAP32[$match_length >> 2] = 0;
    var $5 = HEAPU8[HEAP32[$window >> 2] + HEAP32[$strstart >> 2] | 0];
    HEAP16[HEAP32[$d_buf >> 2] + (HEAP32[$last_lit >> 2] << 1) >> 1] = 0;
    var $8 = HEAP32[$last_lit >> 2];
    var $inc = $8 + 1 | 0;
    HEAP32[$last_lit >> 2] = $inc;
    HEAP8[HEAP32[$l_buf >> 2] + $8 | 0] = $5;
    var $freq = $s + 148 + (($5 & 255) << 2) | 0;
    var $inc12 = HEAP16[$freq >> 1] + 1 & 65535;
    HEAP16[$freq >> 1] = $inc12;
    var $cmp14 = (HEAP32[$last_lit >> 2] | 0) == (HEAP32[$lit_bufsize >> 2] - 1 | 0);
    var $dec = HEAP32[$lookahead >> 2] - 1 | 0;
    HEAP32[$lookahead >> 2] = $dec;
    var $inc17 = HEAP32[$strstart >> 2] + 1 | 0;
    HEAP32[$strstart >> 2] = $inc17;
    if ($cmp14) {
      __label__ = 6;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 6:
    var $15 = HEAP32[$block_start >> 2];
    if (($15 | 0) > -1) {
      __label__ = 7;
      break;
    } else {
      var $cond = 0;
      __label__ = 8;
      break;
    }
   case 7:
    var $cond = HEAP32[$window >> 2] + $15 | 0;
    __label__ = 8;
    break;
   case 8:
    var $cond;
    var $sub26 = $inc17 - $15 | 0;
    __tr_flush_block($0, $cond, $sub26, 0);
    var $17 = HEAP32[$strstart >> 2];
    HEAP32[$block_start >> 2] = $17;
    var $18 = HEAP32[$strm >> 2];
    _flush_pending($18);
    if ((HEAP32[HEAP32[$strm >> 2] + 16 >> 2] | 0) == 0) {
      var $retval_0 = 0;
      __label__ = 18;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 9:
    HEAP32[$s + 5812 >> 2] = 0;
    if (($flush | 0) == 4) {
      __label__ = 10;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 10:
    var $21 = HEAP32[$block_start >> 2];
    if (($21 | 0) > -1) {
      __label__ = 11;
      break;
    } else {
      var $cond47 = 0;
      __label__ = 12;
      break;
    }
   case 11:
    var $cond47 = HEAP32[$window >> 2] + $21 | 0;
    __label__ = 12;
    break;
   case 12:
    var $cond47;
    var $sub50 = HEAP32[$strstart >> 2] - $21 | 0;
    __tr_flush_block($0, $cond47, $sub50, 1);
    var $24 = HEAP32[$strstart >> 2];
    HEAP32[$block_start >> 2] = $24;
    var $25 = HEAP32[$strm >> 2];
    _flush_pending($25);
    var $_ = (HEAP32[HEAP32[$strm >> 2] + 16 >> 2] | 0) == 0 ? 2 : 3;
    var $retval_0 = $_;
    __label__ = 18;
    break;
   case 13:
    if ((HEAP32[$last_lit >> 2] | 0) == 0) {
      __label__ = 17;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 14:
    var $29 = HEAP32[$block_start >> 2];
    if (($29 | 0) > -1) {
      __label__ = 15;
      break;
    } else {
      var $cond73 = 0;
      __label__ = 16;
      break;
    }
   case 15:
    var $cond73 = HEAP32[$window >> 2] + $29 | 0;
    __label__ = 16;
    break;
   case 16:
    var $cond73;
    var $sub76 = HEAP32[$strstart >> 2] - $29 | 0;
    __tr_flush_block($0, $cond73, $sub76, 0);
    var $32 = HEAP32[$strstart >> 2];
    HEAP32[$block_start >> 2] = $32;
    var $33 = HEAP32[$strm >> 2];
    _flush_pending($33);
    if ((HEAP32[HEAP32[$strm >> 2] + 16 >> 2] | 0) == 0) {
      var $retval_0 = 0;
      __label__ = 18;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 17:
    var $retval_0 = 1;
    __label__ = 18;
    break;
   case 18:
    var $retval_0;
    return $retval_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_deflate_huff["X"] = 1;

function _deflate_rle($s, $flush) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $lookahead = $s + 116 | 0;
    var $cmp3 = ($flush | 0) == 0;
    var $match_length = $s + 96 | 0;
    var $strstart = $s + 108 | 0;
    var $last_lit = $s + 5792 | 0;
    var $d_buf = $s + 5796 | 0;
    var $l_buf = $s + 5784 | 0;
    var $freq113 = $s + 2440 | 0;
    var $lit_bufsize = $s + 5788 | 0;
    var $window = $s + 56 | 0;
    var $block_start = $s + 92 | 0;
    var $0 = $s;
    var $strm = $s | 0;
    __label__ = 2;
    break;
   case 2:
    var $1 = HEAPU32[$lookahead >> 2];
    if ($1 >>> 0 < 259) {
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    HEAP32[$match_length >> 2] = 0;
    var $4 = $1;
    __label__ = 8;
    break;
   case 4:
    _fill_window($s);
    var $2 = HEAPU32[$lookahead >> 2];
    if ($2 >>> 0 < 259 & $cmp3) {
      var $retval_0 = 0;
      __label__ = 39;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    if (($2 | 0) == 0) {
      __label__ = 30;
      break;
    } else {
      var $3 = $2;
      __label__ = 6;
      break;
    }
   case 6:
    var $3;
    HEAP32[$match_length >> 2] = 0;
    if ($3 >>> 0 > 2) {
      var $4 = $3;
      __label__ = 8;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    var $32 = HEAP32[$strstart >> 2];
    __label__ = 25;
    break;
   case 8:
    var $4;
    var $5 = HEAPU32[$strstart >> 2];
    if (($5 | 0) == 0) {
      var $32 = $5;
      __label__ = 25;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    var $6 = HEAPU32[$window >> 2];
    var $7 = HEAPU8[$6 + ($5 - 1) | 0];
    if ($7 << 24 >> 24 == HEAP8[$6 + $5 | 0] << 24 >> 24) {
      __label__ = 10;
      break;
    } else {
      var $32 = $5;
      __label__ = 25;
      break;
    }
   case 10:
    if ($7 << 24 >> 24 == HEAP8[$5 + ($6 + 1) | 0] << 24 >> 24) {
      __label__ = 11;
      break;
    } else {
      var $32 = $5;
      __label__ = 25;
      break;
    }
   case 11:
    var $incdec_ptr26 = $5 + ($6 + 2) | 0;
    if ($7 << 24 >> 24 == HEAP8[$incdec_ptr26] << 24 >> 24) {
      __label__ = 12;
      break;
    } else {
      var $32 = $5;
      __label__ = 25;
      break;
    }
   case 12:
    var $add_ptr34 = $5 + ($6 + 258) | 0;
    var $scan_0 = $incdec_ptr26;
    __label__ = 13;
    break;
   case 13:
    var $scan_0;
    var $incdec_ptr35 = $scan_0 + 1 | 0;
    if ($7 << 24 >> 24 == HEAP8[$incdec_ptr35] << 24 >> 24) {
      __label__ = 14;
      break;
    } else {
      var $scan_1 = $incdec_ptr35;
      __label__ = 21;
      break;
    }
   case 14:
    var $incdec_ptr40 = $scan_0 + 2 | 0;
    if ($7 << 24 >> 24 == HEAP8[$incdec_ptr40] << 24 >> 24) {
      __label__ = 15;
      break;
    } else {
      var $scan_1 = $incdec_ptr40;
      __label__ = 21;
      break;
    }
   case 15:
    var $incdec_ptr45 = $scan_0 + 3 | 0;
    if ($7 << 24 >> 24 == HEAP8[$incdec_ptr45] << 24 >> 24) {
      __label__ = 16;
      break;
    } else {
      var $scan_1 = $incdec_ptr45;
      __label__ = 21;
      break;
    }
   case 16:
    var $incdec_ptr50 = $scan_0 + 4 | 0;
    if ($7 << 24 >> 24 == HEAP8[$incdec_ptr50] << 24 >> 24) {
      __label__ = 17;
      break;
    } else {
      var $scan_1 = $incdec_ptr50;
      __label__ = 21;
      break;
    }
   case 17:
    var $incdec_ptr55 = $scan_0 + 5 | 0;
    if ($7 << 24 >> 24 == HEAP8[$incdec_ptr55] << 24 >> 24) {
      __label__ = 18;
      break;
    } else {
      var $scan_1 = $incdec_ptr55;
      __label__ = 21;
      break;
    }
   case 18:
    var $incdec_ptr60 = $scan_0 + 6 | 0;
    if ($7 << 24 >> 24 == HEAP8[$incdec_ptr60] << 24 >> 24) {
      __label__ = 19;
      break;
    } else {
      var $scan_1 = $incdec_ptr60;
      __label__ = 21;
      break;
    }
   case 19:
    var $incdec_ptr65 = $scan_0 + 7 | 0;
    if ($7 << 24 >> 24 == HEAP8[$incdec_ptr65] << 24 >> 24) {
      __label__ = 20;
      break;
    } else {
      var $scan_1 = $incdec_ptr65;
      __label__ = 21;
      break;
    }
   case 20:
    var $incdec_ptr70 = $scan_0 + 8 | 0;
    if ($7 << 24 >> 24 == HEAP8[$incdec_ptr70] << 24 >> 24 & $incdec_ptr70 >>> 0 < $add_ptr34 >>> 0) {
      var $scan_0 = $incdec_ptr70;
      __label__ = 13;
      break;
    } else {
      var $scan_1 = $incdec_ptr70;
      __label__ = 21;
      break;
    }
   case 21:
    var $scan_1;
    var $sub = $scan_1 - $add_ptr34 + 258 | 0;
    HEAP32[$match_length >> 2] = $sub;
    if ($sub >>> 0 > $4 >>> 0) {
      __label__ = 22;
      break;
    } else {
      var $19 = $sub;
      __label__ = 23;
      break;
    }
   case 22:
    HEAP32[$match_length >> 2] = $4;
    var $19 = $4;
    __label__ = 23;
    break;
   case 23:
    var $19;
    if ($19 >>> 0 > 2) {
      __label__ = 24;
      break;
    } else {
      var $32 = $5;
      __label__ = 25;
      break;
    }
   case 24:
    var $sub92 = $19 + 253 | 0;
    HEAP16[HEAP32[$d_buf >> 2] + (HEAP32[$last_lit >> 2] << 1) >> 1] = 1;
    var $22 = HEAP32[$last_lit >> 2];
    var $inc = $22 + 1 | 0;
    HEAP32[$last_lit >> 2] = $inc;
    HEAP8[HEAP32[$l_buf >> 2] + $22 | 0] = $sub92 & 255;
    var $arrayidx96 = STRING_TABLE.__length_code + ($sub92 & 255) | 0;
    var $freq = $s + 148 + ((HEAPU8[$arrayidx96] & 255 | 256) + 1 << 2) | 0;
    var $inc100 = HEAP16[$freq >> 1] + 1 & 65535;
    HEAP16[$freq >> 1] = $inc100;
    var $inc114 = HEAP16[$freq113 >> 1] + 1 & 65535;
    HEAP16[$freq113 >> 1] = $inc114;
    var $conv118 = (HEAP32[$last_lit >> 2] | 0) == (HEAP32[$lit_bufsize >> 2] - 1 | 0) & 1;
    var $29 = HEAP32[$match_length >> 2];
    var $sub121 = HEAP32[$lookahead >> 2] - $29 | 0;
    HEAP32[$lookahead >> 2] = $sub121;
    var $add124 = HEAP32[$strstart >> 2] + $29 | 0;
    HEAP32[$strstart >> 2] = $add124;
    HEAP32[$match_length >> 2] = 0;
    var $bflush_0 = $conv118;
    var $44 = $add124;
    __label__ = 26;
    break;
   case 25:
    var $32;
    var $34 = HEAPU8[HEAP32[$window >> 2] + $32 | 0];
    HEAP16[HEAP32[$d_buf >> 2] + (HEAP32[$last_lit >> 2] << 1) >> 1] = 0;
    var $37 = HEAP32[$last_lit >> 2];
    var $inc133 = $37 + 1 | 0;
    HEAP32[$last_lit >> 2] = $inc133;
    HEAP8[HEAP32[$l_buf >> 2] + $37 | 0] = $34;
    var $freq140 = $s + 148 + (($34 & 255) << 2) | 0;
    var $inc141 = HEAP16[$freq140 >> 1] + 1 & 65535;
    HEAP16[$freq140 >> 1] = $inc141;
    var $conv146 = (HEAP32[$last_lit >> 2] | 0) == (HEAP32[$lit_bufsize >> 2] - 1 | 0) & 1;
    var $dec148 = HEAP32[$lookahead >> 2] - 1 | 0;
    HEAP32[$lookahead >> 2] = $dec148;
    var $inc150 = HEAP32[$strstart >> 2] + 1 | 0;
    HEAP32[$strstart >> 2] = $inc150;
    var $bflush_0 = $conv146;
    var $44 = $inc150;
    __label__ = 26;
    break;
   case 26:
    var $44;
    var $bflush_0;
    if (($bflush_0 | 0) == 0) {
      __label__ = 2;
      break;
    } else {
      __label__ = 27;
      break;
    }
   case 27:
    var $45 = HEAP32[$block_start >> 2];
    if (($45 | 0) > -1) {
      __label__ = 28;
      break;
    } else {
      var $cond161 = 0;
      __label__ = 29;
      break;
    }
   case 28:
    var $cond161 = HEAP32[$window >> 2] + $45 | 0;
    __label__ = 29;
    break;
   case 29:
    var $cond161;
    var $sub164 = $44 - $45 | 0;
    __tr_flush_block($0, $cond161, $sub164, 0);
    var $47 = HEAP32[$strstart >> 2];
    HEAP32[$block_start >> 2] = $47;
    var $48 = HEAP32[$strm >> 2];
    _flush_pending($48);
    if ((HEAP32[HEAP32[$strm >> 2] + 16 >> 2] | 0) == 0) {
      var $retval_0 = 0;
      __label__ = 39;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 30:
    HEAP32[$s + 5812 >> 2] = 0;
    if (($flush | 0) == 4) {
      __label__ = 31;
      break;
    } else {
      __label__ = 34;
      break;
    }
   case 31:
    var $51 = HEAP32[$block_start >> 2];
    if (($51 | 0) > -1) {
      __label__ = 32;
      break;
    } else {
      var $cond185 = 0;
      __label__ = 33;
      break;
    }
   case 32:
    var $cond185 = HEAP32[$window >> 2] + $51 | 0;
    __label__ = 33;
    break;
   case 33:
    var $cond185;
    var $sub188 = HEAP32[$strstart >> 2] - $51 | 0;
    __tr_flush_block($0, $cond185, $sub188, 1);
    var $54 = HEAP32[$strstart >> 2];
    HEAP32[$block_start >> 2] = $54;
    var $55 = HEAP32[$strm >> 2];
    _flush_pending($55);
    var $_ = (HEAP32[HEAP32[$strm >> 2] + 16 >> 2] | 0) == 0 ? 2 : 3;
    var $retval_0 = $_;
    __label__ = 39;
    break;
   case 34:
    if ((HEAP32[$last_lit >> 2] | 0) == 0) {
      __label__ = 38;
      break;
    } else {
      __label__ = 35;
      break;
    }
   case 35:
    var $59 = HEAP32[$block_start >> 2];
    if (($59 | 0) > -1) {
      __label__ = 36;
      break;
    } else {
      var $cond211 = 0;
      __label__ = 37;
      break;
    }
   case 36:
    var $cond211 = HEAP32[$window >> 2] + $59 | 0;
    __label__ = 37;
    break;
   case 37:
    var $cond211;
    var $sub214 = HEAP32[$strstart >> 2] - $59 | 0;
    __tr_flush_block($0, $cond211, $sub214, 0);
    var $62 = HEAP32[$strstart >> 2];
    HEAP32[$block_start >> 2] = $62;
    var $63 = HEAP32[$strm >> 2];
    _flush_pending($63);
    if ((HEAP32[HEAP32[$strm >> 2] + 16 >> 2] | 0) == 0) {
      var $retval_0 = 0;
      __label__ = 39;
      break;
    } else {
      __label__ = 38;
      break;
    }
   case 38:
    var $retval_0 = 1;
    __label__ = 39;
    break;
   case 39:
    var $retval_0;
    return $retval_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_deflate_rle["X"] = 1;

function _read_buf($strm, $buf, $size) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $avail_in = $strm + 4 | 0;
    var $0 = HEAPU32[$avail_in >> 2];
    var $len_0 = $0 >>> 0 > $size >>> 0 ? $size : $0;
    if (($len_0 | 0) == 0) {
      var $retval_0 = 0;
      __label__ = 6;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    HEAP32[$avail_in >> 2] = $0 - $len_0 | 0;
    var $next_in = $strm | 0;
    var $1 = HEAP32[$next_in >> 2];
    _zmemcpy($buf, $1, $len_0);
    var $3 = HEAP32[HEAP32[$strm + 28 >> 2] + 24 >> 2];
    if (($3 | 0) == 1) {
      __label__ = 3;
      break;
    } else if (($3 | 0) == 2) {
      __label__ = 4;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 3:
    var $adler = $strm + 48 | 0;
    var $4 = HEAP32[$adler >> 2];
    var $call = _adler32($4, $buf, $len_0);
    HEAP32[$adler >> 2] = $call;
    __label__ = 5;
    break;
   case 4:
    var $adler12 = $strm + 48 | 0;
    var $5 = HEAP32[$adler12 >> 2];
    var $call13 = _crc32($5, $buf, $len_0);
    HEAP32[$adler12 >> 2] = $call13;
    __label__ = 5;
    break;
   case 5:
    var $add_ptr = HEAP32[$next_in >> 2] + $len_0 | 0;
    HEAP32[$next_in >> 2] = $add_ptr;
    var $total_in = $strm + 8 | 0;
    var $add = HEAP32[$total_in >> 2] + $len_0 | 0;
    HEAP32[$total_in >> 2] = $add;
    var $retval_0 = $len_0;
    __label__ = 6;
    break;
   case 6:
    var $retval_0;
    return $retval_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _deflate_stored($s, $flush) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $sub = HEAP32[$s + 12 >> 2] - 5 | 0;
    var $max_block_size_0_ph = $sub >>> 0 < 65535 ? $sub : 65535;
    var $lookahead = $s + 116 | 0;
    var $strstart = $s + 108 | 0;
    var $block_start = $s + 92 | 0;
    var $w_size = $s + 44 | 0;
    var $window50 = $s + 56 | 0;
    var $1 = $s;
    var $strm60 = $s | 0;
    __label__ = 2;
    break;
   case 2:
    var $2 = HEAPU32[$lookahead >> 2];
    if ($2 >>> 0 < 2) {
      __label__ = 3;
      break;
    } else {
      var $6 = $2;
      __label__ = 5;
      break;
    }
   case 3:
    _fill_window($s);
    var $3 = HEAPU32[$lookahead >> 2];
    if (($3 | $flush | 0) == 0) {
      var $retval_0 = 0;
      __label__ = 23;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    if (($3 | 0) == 0) {
      __label__ = 14;
      break;
    } else {
      var $6 = $3;
      __label__ = 5;
      break;
    }
   case 5:
    var $6;
    var $add = HEAP32[$strstart >> 2] + $6 | 0;
    HEAP32[$strstart >> 2] = $add;
    HEAP32[$lookahead >> 2] = 0;
    var $8 = HEAPU32[$block_start >> 2];
    var $add17 = $8 + $max_block_size_0_ph | 0;
    if (($add | 0) != 0 & $add >>> 0 < $add17 >>> 0) {
      var $15 = $add;
      var $14 = $8;
      __label__ = 10;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    var $sub24 = $add - $add17 | 0;
    HEAP32[$lookahead >> 2] = $sub24;
    HEAP32[$strstart >> 2] = $add17;
    if (($8 | 0) > -1) {
      __label__ = 7;
      break;
    } else {
      var $cond = 0;
      __label__ = 8;
      break;
    }
   case 7:
    var $cond = HEAP32[$window50 >> 2] + $8 | 0;
    __label__ = 8;
    break;
   case 8:
    var $cond;
    __tr_flush_block($1, $cond, $max_block_size_0_ph, 0);
    var $10 = HEAP32[$strstart >> 2];
    HEAP32[$block_start >> 2] = $10;
    var $11 = HEAP32[$strm60 >> 2];
    _flush_pending($11);
    if ((HEAP32[HEAP32[$strm60 >> 2] + 16 >> 2] | 0) == 0) {
      var $retval_0 = 0;
      __label__ = 23;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    var $15 = HEAP32[$strstart >> 2];
    var $14 = HEAP32[$block_start >> 2];
    __label__ = 10;
    break;
   case 10:
    var $14;
    var $15;
    var $sub42 = $15 - $14 | 0;
    if ($sub42 >>> 0 < (HEAP32[$w_size >> 2] - 262 | 0) >>> 0) {
      __label__ = 2;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    if (($14 | 0) > -1) {
      __label__ = 12;
      break;
    } else {
      var $cond54 = 0;
      __label__ = 13;
      break;
    }
   case 12:
    var $cond54 = HEAP32[$window50 >> 2] + $14 | 0;
    __label__ = 13;
    break;
   case 13:
    var $cond54;
    __tr_flush_block($1, $cond54, $sub42, 0);
    var $18 = HEAP32[$strstart >> 2];
    HEAP32[$block_start >> 2] = $18;
    var $19 = HEAP32[$strm60 >> 2];
    _flush_pending($19);
    if ((HEAP32[HEAP32[$strm60 >> 2] + 16 >> 2] | 0) == 0) {
      var $retval_0 = 0;
      __label__ = 23;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 14:
    HEAP32[$s + 5812 >> 2] = 0;
    if (($flush | 0) == 4) {
      __label__ = 15;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 15:
    var $22 = HEAP32[$block_start >> 2];
    if (($22 | 0) > -1) {
      __label__ = 16;
      break;
    } else {
      var $cond77 = 0;
      __label__ = 17;
      break;
    }
   case 16:
    var $cond77 = HEAP32[$window50 >> 2] + $22 | 0;
    __label__ = 17;
    break;
   case 17:
    var $cond77;
    var $sub80 = HEAP32[$strstart >> 2] - $22 | 0;
    __tr_flush_block($1, $cond77, $sub80, 1);
    var $25 = HEAP32[$strstart >> 2];
    HEAP32[$block_start >> 2] = $25;
    var $26 = HEAP32[$strm60 >> 2];
    _flush_pending($26);
    var $_ = (HEAP32[HEAP32[$strm60 >> 2] + 16 >> 2] | 0) == 0 ? 2 : 3;
    var $retval_0 = $_;
    __label__ = 23;
    break;
   case 18:
    var $29 = HEAP32[$strstart >> 2];
    var $30 = HEAP32[$block_start >> 2];
    if (($29 | 0) > ($30 | 0)) {
      __label__ = 19;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 19:
    if (($30 | 0) > -1) {
      __label__ = 20;
      break;
    } else {
      var $cond102 = 0;
      __label__ = 21;
      break;
    }
   case 20:
    var $cond102 = HEAP32[$window50 >> 2] + $30 | 0;
    __label__ = 21;
    break;
   case 21:
    var $cond102;
    var $sub105 = $29 - $30 | 0;
    __tr_flush_block($1, $cond102, $sub105, 0);
    var $32 = HEAP32[$strstart >> 2];
    HEAP32[$block_start >> 2] = $32;
    var $33 = HEAP32[$strm60 >> 2];
    _flush_pending($33);
    if ((HEAP32[HEAP32[$strm60 >> 2] + 16 >> 2] | 0) == 0) {
      var $retval_0 = 0;
      __label__ = 23;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 22:
    var $retval_0 = 1;
    __label__ = 23;
    break;
   case 23:
    var $retval_0;
    return $retval_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_deflate_stored["X"] = 1;

function _deflate_fast($s, $flush) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $lookahead = $s + 116 | 0;
    var $cmp3 = ($flush | 0) == 0;
    var $ins_h = $s + 72 | 0;
    var $hash_shift = $s + 88 | 0;
    var $strstart = $s + 108 | 0;
    var $window = $s + 56 | 0;
    var $hash_mask = $s + 84 | 0;
    var $head = $s + 68 | 0;
    var $w_mask = $s + 52 | 0;
    var $prev = $s + 64 | 0;
    var $w_size = $s + 44 | 0;
    var $match_length = $s + 96 | 0;
    var $match_start = $s + 112 | 0;
    var $last_lit = $s + 5792 | 0;
    var $d_buf = $s + 5796 | 0;
    var $l_buf = $s + 5784 | 0;
    var $lit_bufsize = $s + 5788 | 0;
    var $max_lazy_match = $s + 128 | 0;
    var $block_start = $s + 92 | 0;
    var $0 = $s;
    var $strm = $s | 0;
    __label__ = 2;
    break;
   case 2:
    if (HEAPU32[$lookahead >> 2] >>> 0 < 262) {
      __label__ = 3;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 3:
    _fill_window($s);
    var $2 = HEAPU32[$lookahead >> 2];
    if ($2 >>> 0 < 262 & $cmp3) {
      var $retval_0 = 0;
      __label__ = 32;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    if (($2 | 0) == 0) {
      __label__ = 23;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    if ($2 >>> 0 > 2) {
      __label__ = 6;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 6:
    var $5 = HEAPU32[$strstart >> 2];
    var $and = (HEAPU8[HEAP32[$window >> 2] + ($5 + 2) | 0] & 255 ^ HEAP32[$ins_h >> 2] << HEAP32[$hash_shift >> 2]) & HEAP32[$hash_mask >> 2];
    HEAP32[$ins_h >> 2] = $and;
    var $10 = HEAPU16[HEAP32[$head >> 2] + ($and << 1) >> 1];
    HEAP16[HEAP32[$prev >> 2] + ((HEAP32[$w_mask >> 2] & $5) << 1) >> 1] = $10;
    var $conv19 = $10 & 65535;
    HEAP16[HEAP32[$head >> 2] + (HEAP32[$ins_h >> 2] << 1) >> 1] = HEAP32[$strstart >> 2] & 65535;
    if ($10 << 16 >> 16 == 0) {
      __label__ = 9;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    if ((HEAP32[$strstart >> 2] - $conv19 | 0) >>> 0 > (HEAP32[$w_size >> 2] - 262 | 0) >>> 0) {
      __label__ = 9;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    var $call = _longest_match($s, $conv19);
    HEAP32[$match_length >> 2] = $call;
    var $18 = $call;
    __label__ = 10;
    break;
   case 9:
    var $18 = HEAP32[$match_length >> 2];
    __label__ = 10;
    break;
   case 10:
    var $18;
    if ($18 >>> 0 > 2) {
      __label__ = 11;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 11:
    var $sub40 = $18 + 253 | 0;
    var $conv44 = HEAP32[$strstart >> 2] - HEAP32[$match_start >> 2] & 65535;
    HEAP16[HEAP32[$d_buf >> 2] + (HEAP32[$last_lit >> 2] << 1) >> 1] = $conv44;
    var $23 = HEAP32[$last_lit >> 2];
    var $inc = $23 + 1 | 0;
    HEAP32[$last_lit >> 2] = $inc;
    HEAP8[HEAP32[$l_buf >> 2] + $23 | 0] = $sub40 & 255;
    var $dec = $conv44 - 1 & 65535;
    var $arrayidx48 = STRING_TABLE.__length_code + ($sub40 & 255) | 0;
    var $freq = $s + 148 + ((HEAPU8[$arrayidx48] & 255 | 256) + 1 << 2) | 0;
    var $inc53 = HEAP16[$freq >> 1] + 1 & 65535;
    HEAP16[$freq >> 1] = $inc53;
    var $conv54 = $dec & 65535;
    if (($dec & 65535) < 256) {
      var $conv54_pn = $conv54;
      __label__ = 13;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 12:
    var $conv54_pn = ($conv54 >>> 7) + 256 | 0;
    __label__ = 13;
    break;
   case 13:
    var $conv54_pn;
    var $cond_in_in = STRING_TABLE.__dist_code + $conv54_pn | 0;
    var $freq66 = $s + 2440 + ((HEAPU8[$cond_in_in] & 255) << 2) | 0;
    var $inc67 = HEAP16[$freq66 >> 1] + 1 & 65535;
    HEAP16[$freq66 >> 1] = $inc67;
    var $conv71 = (HEAP32[$last_lit >> 2] | 0) == (HEAP32[$lit_bufsize >> 2] - 1 | 0) & 1;
    var $30 = HEAPU32[$match_length >> 2];
    var $sub74 = HEAP32[$lookahead >> 2] - $30 | 0;
    HEAP32[$lookahead >> 2] = $sub74;
    if ($30 >>> 0 <= HEAPU32[$max_lazy_match >> 2] >>> 0 & $sub74 >>> 0 > 2) {
      __label__ = 14;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 14:
    HEAP32[$match_length >> 2] = $30 - 1 | 0;
    __label__ = 15;
    break;
   case 15:
    var $33 = HEAPU32[$strstart >> 2];
    var $inc86 = $33 + 1 | 0;
    HEAP32[$strstart >> 2] = $inc86;
    var $and97 = (HEAPU8[HEAP32[$window >> 2] + ($33 + 3) | 0] & 255 ^ HEAP32[$ins_h >> 2] << HEAP32[$hash_shift >> 2]) & HEAP32[$hash_mask >> 2];
    HEAP32[$ins_h >> 2] = $and97;
    var $40 = HEAP16[HEAP32[$head >> 2] + ($and97 << 1) >> 1];
    HEAP16[HEAP32[$prev >> 2] + ((HEAP32[$w_mask >> 2] & $inc86) << 1) >> 1] = $40;
    HEAP16[HEAP32[$head >> 2] + (HEAP32[$ins_h >> 2] << 1) >> 1] = HEAP32[$strstart >> 2] & 65535;
    var $dec114 = HEAP32[$match_length >> 2] - 1 | 0;
    HEAP32[$match_length >> 2] = $dec114;
    if (($dec114 | 0) == 0) {
      __label__ = 16;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 16:
    var $inc118 = HEAP32[$strstart >> 2] + 1 | 0;
    HEAP32[$strstart >> 2] = $inc118;
    var $bflush_0 = $conv71;
    var $66 = $inc118;
    __label__ = 19;
    break;
   case 17:
    var $add121 = HEAP32[$strstart >> 2] + $30 | 0;
    HEAP32[$strstart >> 2] = $add121;
    HEAP32[$match_length >> 2] = 0;
    var $49 = HEAPU32[$window >> 2];
    var $conv126 = HEAPU8[$49 + $add121 | 0] & 255;
    HEAP32[$ins_h >> 2] = $conv126;
    var $and138 = (HEAPU8[$add121 + ($49 + 1) | 0] & 255 ^ $conv126 << HEAP32[$hash_shift >> 2]) & HEAP32[$hash_mask >> 2];
    HEAP32[$ins_h >> 2] = $and138;
    var $bflush_0 = $conv71;
    var $66 = $add121;
    __label__ = 19;
    break;
   case 18:
    var $56 = HEAPU8[HEAP32[$window >> 2] + HEAP32[$strstart >> 2] | 0];
    HEAP16[HEAP32[$d_buf >> 2] + (HEAP32[$last_lit >> 2] << 1) >> 1] = 0;
    var $59 = HEAP32[$last_lit >> 2];
    var $inc149 = $59 + 1 | 0;
    HEAP32[$last_lit >> 2] = $inc149;
    HEAP8[HEAP32[$l_buf >> 2] + $59 | 0] = $56;
    var $freq156 = $s + 148 + (($56 & 255) << 2) | 0;
    var $inc157 = HEAP16[$freq156 >> 1] + 1 & 65535;
    HEAP16[$freq156 >> 1] = $inc157;
    var $conv162 = (HEAP32[$last_lit >> 2] | 0) == (HEAP32[$lit_bufsize >> 2] - 1 | 0) & 1;
    var $dec164 = HEAP32[$lookahead >> 2] - 1 | 0;
    HEAP32[$lookahead >> 2] = $dec164;
    var $inc166 = HEAP32[$strstart >> 2] + 1 | 0;
    HEAP32[$strstart >> 2] = $inc166;
    var $bflush_0 = $conv162;
    var $66 = $inc166;
    __label__ = 19;
    break;
   case 19:
    var $66;
    var $bflush_0;
    if (($bflush_0 | 0) == 0) {
      __label__ = 2;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 20:
    var $67 = HEAP32[$block_start >> 2];
    if (($67 | 0) > -1) {
      __label__ = 21;
      break;
    } else {
      var $cond177 = 0;
      __label__ = 22;
      break;
    }
   case 21:
    var $cond177 = HEAP32[$window >> 2] + $67 | 0;
    __label__ = 22;
    break;
   case 22:
    var $cond177;
    var $sub180 = $66 - $67 | 0;
    __tr_flush_block($0, $cond177, $sub180, 0);
    var $69 = HEAP32[$strstart >> 2];
    HEAP32[$block_start >> 2] = $69;
    var $70 = HEAP32[$strm >> 2];
    _flush_pending($70);
    if ((HEAP32[HEAP32[$strm >> 2] + 16 >> 2] | 0) == 0) {
      var $retval_0 = 0;
      __label__ = 32;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 23:
    var $73 = HEAPU32[$strstart >> 2];
    var $cond196 = $73 >>> 0 < 2 ? $73 : 2;
    HEAP32[$s + 5812 >> 2] = $cond196;
    if (($flush | 0) == 4) {
      __label__ = 24;
      break;
    } else {
      __label__ = 27;
      break;
    }
   case 24:
    var $74 = HEAPU32[$block_start >> 2];
    if (($74 | 0) > -1) {
      __label__ = 25;
      break;
    } else {
      var $cond209 = 0;
      __label__ = 26;
      break;
    }
   case 25:
    var $cond209 = HEAP32[$window >> 2] + $74 | 0;
    __label__ = 26;
    break;
   case 26:
    var $cond209;
    var $sub212 = $73 - $74 | 0;
    __tr_flush_block($0, $cond209, $sub212, 1);
    var $76 = HEAP32[$strstart >> 2];
    HEAP32[$block_start >> 2] = $76;
    var $77 = HEAP32[$strm >> 2];
    _flush_pending($77);
    var $_ = (HEAP32[HEAP32[$strm >> 2] + 16 >> 2] | 0) == 0 ? 2 : 3;
    var $retval_0 = $_;
    __label__ = 32;
    break;
   case 27:
    if ((HEAP32[$last_lit >> 2] | 0) == 0) {
      __label__ = 31;
      break;
    } else {
      __label__ = 28;
      break;
    }
   case 28:
    var $81 = HEAP32[$block_start >> 2];
    if (($81 | 0) > -1) {
      __label__ = 29;
      break;
    } else {
      var $cond235 = 0;
      __label__ = 30;
      break;
    }
   case 29:
    var $cond235 = HEAP32[$window >> 2] + $81 | 0;
    __label__ = 30;
    break;
   case 30:
    var $cond235;
    var $sub238 = $73 - $81 | 0;
    __tr_flush_block($0, $cond235, $sub238, 0);
    var $83 = HEAP32[$strstart >> 2];
    HEAP32[$block_start >> 2] = $83;
    var $84 = HEAP32[$strm >> 2];
    _flush_pending($84);
    if ((HEAP32[HEAP32[$strm >> 2] + 16 >> 2] | 0) == 0) {
      var $retval_0 = 0;
      __label__ = 32;
      break;
    } else {
      __label__ = 31;
      break;
    }
   case 31:
    var $retval_0 = 1;
    __label__ = 32;
    break;
   case 32:
    var $retval_0;
    return $retval_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_deflate_fast["X"] = 1;

function _deflate_slow($s, $flush) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $lookahead = $s + 116 | 0;
    var $cmp3 = ($flush | 0) == 0;
    var $ins_h = $s + 72 | 0;
    var $hash_shift = $s + 88 | 0;
    var $strstart = $s + 108 | 0;
    var $window = $s + 56 | 0;
    var $hash_mask = $s + 84 | 0;
    var $head = $s + 68 | 0;
    var $w_mask = $s + 52 | 0;
    var $prev = $s + 64 | 0;
    var $match_length = $s + 96 | 0;
    var $prev_length = $s + 120 | 0;
    var $match_start = $s + 112 | 0;
    var $prev_match = $s + 100 | 0;
    var $last_lit = $s + 5792 | 0;
    var $d_buf = $s + 5796 | 0;
    var $l_buf = $s + 5784 | 0;
    var $lit_bufsize = $s + 5788 | 0;
    var $match_available = $s + 104 | 0;
    var $block_start = $s + 92 | 0;
    var $0 = $s;
    var $strm = $s | 0;
    var $max_lazy_match = $s + 128 | 0;
    var $w_size = $s + 44 | 0;
    var $strategy = $s + 136 | 0;
    __label__ = 2;
    break;
   case 2:
    var $1 = HEAP32[$lookahead >> 2];
    __label__ = 3;
    break;
   case 3:
    var $1;
    if ($1 >>> 0 < 262) {
      __label__ = 4;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 4:
    _fill_window($s);
    var $2 = HEAPU32[$lookahead >> 2];
    if ($2 >>> 0 < 262 & $cmp3) {
      var $retval_0 = 0;
      __label__ = 46;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    if (($2 | 0) == 0) {
      __label__ = 35;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    if ($2 >>> 0 > 2) {
      __label__ = 8;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    var $3 = HEAP32[$match_length >> 2];
    HEAP32[$prev_length >> 2] = $3;
    var $4 = HEAP32[$match_start >> 2];
    HEAP32[$prev_match >> 2] = $4;
    HEAP32[$match_length >> 2] = 2;
    var $26 = 2;
    __label__ = 16;
    break;
   case 8:
    var $7 = HEAPU32[$strstart >> 2];
    var $and = (HEAPU8[HEAP32[$window >> 2] + ($7 + 2) | 0] & 255 ^ HEAP32[$ins_h >> 2] << HEAP32[$hash_shift >> 2]) & HEAP32[$hash_mask >> 2];
    HEAP32[$ins_h >> 2] = $and;
    var $12 = HEAPU16[HEAP32[$head >> 2] + ($and << 1) >> 1];
    HEAP16[HEAP32[$prev >> 2] + ((HEAP32[$w_mask >> 2] & $7) << 1) >> 1] = $12;
    var $conv19 = $12 & 65535;
    HEAP16[HEAP32[$head >> 2] + (HEAP32[$ins_h >> 2] << 1) >> 1] = HEAP32[$strstart >> 2] & 65535;
    var $18 = HEAPU32[$match_length >> 2];
    HEAP32[$prev_length >> 2] = $18;
    var $19 = HEAP32[$match_start >> 2];
    HEAP32[$prev_match >> 2] = $19;
    HEAP32[$match_length >> 2] = 2;
    if ($12 << 16 >> 16 == 0) {
      var $26 = 2;
      __label__ = 16;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    if ($18 >>> 0 < HEAPU32[$max_lazy_match >> 2] >>> 0) {
      __label__ = 10;
      break;
    } else {
      var $28 = $18;
      var $27 = 2;
      __label__ = 17;
      break;
    }
   case 10:
    if ((HEAP32[$strstart >> 2] - $conv19 | 0) >>> 0 > (HEAP32[$w_size >> 2] - 262 | 0) >>> 0) {
      var $26 = 2;
      __label__ = 16;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    var $call = _longest_match($s, $conv19);
    HEAP32[$match_length >> 2] = $call;
    if ($call >>> 0 < 6) {
      __label__ = 12;
      break;
    } else {
      var $26 = $call;
      __label__ = 16;
      break;
    }
   case 12:
    if ((HEAP32[$strategy >> 2] | 0) == 1) {
      __label__ = 15;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 13:
    if (($call | 0) == 3) {
      __label__ = 14;
      break;
    } else {
      var $26 = $call;
      __label__ = 16;
      break;
    }
   case 14:
    if ((HEAP32[$strstart >> 2] - HEAP32[$match_start >> 2] | 0) >>> 0 > 32767) {
      __label__ = 15;
      break;
    } else {
      var $26 = $call;
      __label__ = 16;
      break;
    }
   case 15:
    HEAP32[$match_length >> 2] = 2;
    var $26 = 2;
    __label__ = 16;
    break;
   case 16:
    var $26;
    var $28 = HEAP32[$prev_length >> 2];
    var $27 = $26;
    __label__ = 17;
    break;
   case 17:
    var $27;
    var $28;
    if ($28 >>> 0 <= 2 | $27 >>> 0 > $28 >>> 0) {
      __label__ = 28;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 18:
    var $29 = HEAPU32[$strstart >> 2];
    var $sub71 = $29 - 3 + HEAP32[$lookahead >> 2] | 0;
    var $sub73 = $28 + 253 | 0;
    var $conv79 = $29 + 65535 - HEAP32[$prev_match >> 2] & 65535;
    HEAP16[HEAP32[$d_buf >> 2] + (HEAP32[$last_lit >> 2] << 1) >> 1] = $conv79;
    var $34 = HEAP32[$last_lit >> 2];
    var $inc = $34 + 1 | 0;
    HEAP32[$last_lit >> 2] = $inc;
    HEAP8[HEAP32[$l_buf >> 2] + $34 | 0] = $sub73 & 255;
    var $dec = $conv79 - 1 & 65535;
    var $arrayidx83 = STRING_TABLE.__length_code + ($sub73 & 255) | 0;
    var $freq = $s + 148 + ((HEAPU8[$arrayidx83] & 255 | 256) + 1 << 2) | 0;
    var $inc88 = HEAP16[$freq >> 1] + 1 & 65535;
    HEAP16[$freq >> 1] = $inc88;
    var $conv89 = $dec & 65535;
    if (($dec & 65535) < 256) {
      var $conv89_pn = $conv89;
      __label__ = 20;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 19:
    var $conv89_pn = ($conv89 >>> 7) + 256 | 0;
    __label__ = 20;
    break;
   case 20:
    var $conv89_pn;
    var $cond_in_in = STRING_TABLE.__dist_code + $conv89_pn | 0;
    var $freq101 = $s + 2440 + ((HEAPU8[$cond_in_in] & 255) << 2) | 0;
    var $inc102 = HEAP16[$freq101 >> 1] + 1 & 65535;
    HEAP16[$freq101 >> 1] = $inc102;
    var $39 = HEAP32[$last_lit >> 2];
    var $sub104 = HEAP32[$lit_bufsize >> 2] - 1 | 0;
    var $41 = HEAP32[$prev_length >> 2];
    var $sub110 = 1 - $41 + HEAP32[$lookahead >> 2] | 0;
    HEAP32[$lookahead >> 2] = $sub110;
    var $sub112 = $41 - 2 | 0;
    HEAP32[$prev_length >> 2] = $sub112;
    var $43 = $sub112;
    __label__ = 21;
    break;
   case 21:
    var $43;
    var $44 = HEAPU32[$strstart >> 2];
    var $inc114 = $44 + 1 | 0;
    HEAP32[$strstart >> 2] = $inc114;
    if ($inc114 >>> 0 > $sub71 >>> 0) {
      var $57 = $43;
      __label__ = 23;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 22:
    var $and128 = (HEAPU8[HEAP32[$window >> 2] + ($44 + 3) | 0] & 255 ^ HEAP32[$ins_h >> 2] << HEAP32[$hash_shift >> 2]) & HEAP32[$hash_mask >> 2];
    HEAP32[$ins_h >> 2] = $and128;
    var $51 = HEAP16[HEAP32[$head >> 2] + ($and128 << 1) >> 1];
    HEAP16[HEAP32[$prev >> 2] + ((HEAP32[$w_mask >> 2] & $inc114) << 1) >> 1] = $51;
    HEAP16[HEAP32[$head >> 2] + (HEAP32[$ins_h >> 2] << 1) >> 1] = HEAP32[$strstart >> 2] & 65535;
    var $57 = HEAP32[$prev_length >> 2];
    __label__ = 23;
    break;
   case 23:
    var $57;
    var $dec146 = $57 - 1 | 0;
    HEAP32[$prev_length >> 2] = $dec146;
    if (($dec146 | 0) == 0) {
      __label__ = 24;
      break;
    } else {
      var $43 = $dec146;
      __label__ = 21;
      break;
    }
   case 24:
    var $cmp105 = ($39 | 0) == ($sub104 | 0);
    HEAP32[$match_available >> 2] = 0;
    HEAP32[$match_length >> 2] = 2;
    var $inc151 = HEAP32[$strstart >> 2] + 1 | 0;
    HEAP32[$strstart >> 2] = $inc151;
    if ($cmp105) {
      __label__ = 25;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 25:
    var $59 = HEAP32[$block_start >> 2];
    if (($59 | 0) > -1) {
      __label__ = 26;
      break;
    } else {
      var $cond161 = 0;
      __label__ = 27;
      break;
    }
   case 26:
    var $cond161 = HEAP32[$window >> 2] + $59 | 0;
    __label__ = 27;
    break;
   case 27:
    var $cond161;
    var $sub164 = $inc151 - $59 | 0;
    __tr_flush_block($0, $cond161, $sub164, 0);
    var $61 = HEAP32[$strstart >> 2];
    HEAP32[$block_start >> 2] = $61;
    var $62 = HEAP32[$strm >> 2];
    _flush_pending($62);
    if ((HEAP32[HEAP32[$strm >> 2] + 16 >> 2] | 0) == 0) {
      var $retval_0 = 0;
      __label__ = 46;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 28:
    if ((HEAP32[$match_available >> 2] | 0) == 0) {
      __label__ = 34;
      break;
    } else {
      __label__ = 29;
      break;
    }
   case 29:
    var $68 = HEAPU8[HEAP32[$window >> 2] + (HEAP32[$strstart >> 2] - 1) | 0];
    HEAP16[HEAP32[$d_buf >> 2] + (HEAP32[$last_lit >> 2] << 1) >> 1] = 0;
    var $71 = HEAP32[$last_lit >> 2];
    var $inc184 = $71 + 1 | 0;
    HEAP32[$last_lit >> 2] = $inc184;
    HEAP8[HEAP32[$l_buf >> 2] + $71 | 0] = $68;
    var $freq191 = $s + 148 + (($68 & 255) << 2) | 0;
    var $inc192 = HEAP16[$freq191 >> 1] + 1 & 65535;
    HEAP16[$freq191 >> 1] = $inc192;
    if ((HEAP32[$last_lit >> 2] | 0) == (HEAP32[$lit_bufsize >> 2] - 1 | 0)) {
      __label__ = 30;
      break;
    } else {
      __label__ = 33;
      break;
    }
   case 30:
    var $76 = HEAP32[$block_start >> 2];
    if (($76 | 0) > -1) {
      __label__ = 31;
      break;
    } else {
      var $cond209 = 0;
      __label__ = 32;
      break;
    }
   case 31:
    var $cond209 = HEAP32[$window >> 2] + $76 | 0;
    __label__ = 32;
    break;
   case 32:
    var $cond209;
    var $sub212 = HEAP32[$strstart >> 2] - $76 | 0;
    __tr_flush_block($0, $cond209, $sub212, 0);
    var $79 = HEAP32[$strstart >> 2];
    HEAP32[$block_start >> 2] = $79;
    var $80 = HEAP32[$strm >> 2];
    _flush_pending($80);
    __label__ = 33;
    break;
   case 33:
    var $inc218 = HEAP32[$strstart >> 2] + 1 | 0;
    HEAP32[$strstart >> 2] = $inc218;
    var $dec220 = HEAP32[$lookahead >> 2] - 1 | 0;
    HEAP32[$lookahead >> 2] = $dec220;
    if ((HEAP32[HEAP32[$strm >> 2] + 16 >> 2] | 0) == 0) {
      var $retval_0 = 0;
      __label__ = 46;
      break;
    } else {
      var $1 = $dec220;
      __label__ = 3;
      break;
    }
   case 34:
    HEAP32[$match_available >> 2] = 1;
    var $inc230 = HEAP32[$strstart >> 2] + 1 | 0;
    HEAP32[$strstart >> 2] = $inc230;
    var $dec232 = HEAP32[$lookahead >> 2] - 1 | 0;
    HEAP32[$lookahead >> 2] = $dec232;
    var $1 = $dec232;
    __label__ = 3;
    break;
   case 35:
    if ((HEAP32[$match_available >> 2] | 0) == 0) {
      __label__ = 37;
      break;
    } else {
      __label__ = 36;
      break;
    }
   case 36:
    var $90 = HEAPU8[HEAP32[$window >> 2] + (HEAP32[$strstart >> 2] - 1) | 0];
    HEAP16[HEAP32[$d_buf >> 2] + (HEAP32[$last_lit >> 2] << 1) >> 1] = 0;
    var $93 = HEAP32[$last_lit >> 2];
    var $inc247 = $93 + 1 | 0;
    HEAP32[$last_lit >> 2] = $inc247;
    HEAP8[HEAP32[$l_buf >> 2] + $93 | 0] = $90;
    var $freq254 = $s + 148 + (($90 & 255) << 2) | 0;
    var $inc255 = HEAP16[$freq254 >> 1] + 1 & 65535;
    HEAP16[$freq254 >> 1] = $inc255;
    HEAP32[$match_available >> 2] = 0;
    __label__ = 37;
    break;
   case 37:
    var $96 = HEAPU32[$strstart >> 2];
    var $cond270 = $96 >>> 0 < 2 ? $96 : 2;
    HEAP32[$s + 5812 >> 2] = $cond270;
    if (($flush | 0) == 4) {
      __label__ = 38;
      break;
    } else {
      __label__ = 41;
      break;
    }
   case 38:
    var $97 = HEAPU32[$block_start >> 2];
    if (($97 | 0) > -1) {
      __label__ = 39;
      break;
    } else {
      var $cond283 = 0;
      __label__ = 40;
      break;
    }
   case 39:
    var $cond283 = HEAP32[$window >> 2] + $97 | 0;
    __label__ = 40;
    break;
   case 40:
    var $cond283;
    var $sub286 = $96 - $97 | 0;
    __tr_flush_block($0, $cond283, $sub286, 1);
    var $99 = HEAP32[$strstart >> 2];
    HEAP32[$block_start >> 2] = $99;
    var $100 = HEAP32[$strm >> 2];
    _flush_pending($100);
    var $_ = (HEAP32[HEAP32[$strm >> 2] + 16 >> 2] | 0) == 0 ? 2 : 3;
    var $retval_0 = $_;
    __label__ = 46;
    break;
   case 41:
    if ((HEAP32[$last_lit >> 2] | 0) == 0) {
      __label__ = 45;
      break;
    } else {
      __label__ = 42;
      break;
    }
   case 42:
    var $104 = HEAP32[$block_start >> 2];
    if (($104 | 0) > -1) {
      __label__ = 43;
      break;
    } else {
      var $cond309 = 0;
      __label__ = 44;
      break;
    }
   case 43:
    var $cond309 = HEAP32[$window >> 2] + $104 | 0;
    __label__ = 44;
    break;
   case 44:
    var $cond309;
    var $sub312 = $96 - $104 | 0;
    __tr_flush_block($0, $cond309, $sub312, 0);
    var $106 = HEAP32[$strstart >> 2];
    HEAP32[$block_start >> 2] = $106;
    var $107 = HEAP32[$strm >> 2];
    _flush_pending($107);
    if ((HEAP32[HEAP32[$strm >> 2] + 16 >> 2] | 0) == 0) {
      var $retval_0 = 0;
      __label__ = 46;
      break;
    } else {
      __label__ = 45;
      break;
    }
   case 45:
    var $retval_0 = 1;
    __label__ = 46;
    break;
   case 46:
    var $retval_0;
    return $retval_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_deflate_slow["X"] = 1;

function _longest_match($s, $cur_match) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $0 = HEAPU32[$s + 124 >> 2];
    var $1 = HEAPU32[$s + 56 >> 2];
    var $2 = HEAPU32[$s + 108 >> 2];
    var $add_ptr = $1 + $2 | 0;
    var $3 = HEAPU32[$s + 120 >> 2];
    var $4 = HEAPU32[$s + 144 >> 2];
    var $sub = HEAP32[$s + 44 >> 2] - 262 | 0;
    var $sub6_ = $2 >>> 0 > $sub >>> 0 ? $2 - $sub | 0 : 0;
    var $6 = HEAP32[$s + 64 >> 2];
    var $7 = HEAP32[$s + 52 >> 2];
    var $add_ptr11 = $2 + ($1 + 258) | 0;
    var $chain_length_0 = $3 >>> 0 < HEAPU32[$s + 140 >> 2] >>> 0 ? $0 : $0 >>> 2;
    var $11 = HEAPU32[$s + 116 >> 2];
    var $nice_match_0_ph = $4 >>> 0 > $11 >>> 0 ? $11 : $4;
    var $match_start = $s + 112 | 0;
    var $arrayidx39 = $2 + ($1 + 1) | 0;
    var $add_ptr45 = $2 + ($1 + 2) | 0;
    var $sub_ptr_lhs_cast = $add_ptr11;
    var $sub113 = $2 + 257 | 0;
    var $scan_end_0 = HEAP8[$1 + ($3 + $2) | 0];
    var $cur_match_addr_0 = $cur_match;
    var $chain_length_1 = $chain_length_0;
    var $scan_end1_0 = HEAP8[$1 + ($2 - 1 + $3) | 0];
    var $best_len_0 = $3;
    __label__ = 2;
    break;
   case 2:
    var $best_len_0;
    var $scan_end1_0;
    var $chain_length_1;
    var $cur_match_addr_0;
    var $scan_end_0;
    var $add_ptr21 = $1 + $cur_match_addr_0 | 0;
    if (HEAP8[$1 + ($cur_match_addr_0 + $best_len_0) | 0] << 24 >> 24 == $scan_end_0 << 24 >> 24) {
      __label__ = 3;
      break;
    } else {
      var $scan_end_1 = $scan_end_0;
      var $scan_end1_1 = $scan_end1_0;
      var $best_len_1 = $best_len_0;
      __label__ = 18;
      break;
    }
   case 3:
    if (HEAP8[$1 + ($best_len_0 - 1 + $cur_match_addr_0) | 0] << 24 >> 24 == $scan_end1_0 << 24 >> 24) {
      __label__ = 4;
      break;
    } else {
      var $scan_end_1 = $scan_end_0;
      var $scan_end1_1 = $scan_end1_0;
      var $best_len_1 = $best_len_0;
      __label__ = 18;
      break;
    }
   case 4:
    if (HEAP8[$add_ptr21] << 24 >> 24 == HEAP8[$add_ptr] << 24 >> 24) {
      __label__ = 5;
      break;
    } else {
      var $scan_end_1 = $scan_end_0;
      var $scan_end1_1 = $scan_end1_0;
      var $best_len_1 = $best_len_0;
      __label__ = 18;
      break;
    }
   case 5:
    if (HEAP8[$cur_match_addr_0 + ($1 + 1) | 0] << 24 >> 24 == HEAP8[$arrayidx39] << 24 >> 24) {
      __label__ = 6;
      break;
    } else {
      var $scan_end_1 = $scan_end_0;
      var $scan_end1_1 = $scan_end1_0;
      var $best_len_1 = $best_len_0;
      __label__ = 18;
      break;
    }
   case 6:
    var $scan_1 = $add_ptr45;
    var $match_0 = $cur_match_addr_0 + ($1 + 2) | 0;
    __label__ = 7;
    break;
   case 7:
    var $match_0;
    var $scan_1;
    var $incdec_ptr48 = $scan_1 + 1 | 0;
    if (HEAP8[$incdec_ptr48] << 24 >> 24 == HEAP8[$match_0 + 1 | 0] << 24 >> 24) {
      __label__ = 8;
      break;
    } else {
      var $scan_2 = $incdec_ptr48;
      __label__ = 15;
      break;
    }
   case 8:
    var $incdec_ptr54 = $scan_1 + 2 | 0;
    if (HEAP8[$incdec_ptr54] << 24 >> 24 == HEAP8[$match_0 + 2 | 0] << 24 >> 24) {
      __label__ = 9;
      break;
    } else {
      var $scan_2 = $incdec_ptr54;
      __label__ = 15;
      break;
    }
   case 9:
    var $incdec_ptr61 = $scan_1 + 3 | 0;
    if (HEAP8[$incdec_ptr61] << 24 >> 24 == HEAP8[$match_0 + 3 | 0] << 24 >> 24) {
      __label__ = 10;
      break;
    } else {
      var $scan_2 = $incdec_ptr61;
      __label__ = 15;
      break;
    }
   case 10:
    var $incdec_ptr68 = $scan_1 + 4 | 0;
    if (HEAP8[$incdec_ptr68] << 24 >> 24 == HEAP8[$match_0 + 4 | 0] << 24 >> 24) {
      __label__ = 11;
      break;
    } else {
      var $scan_2 = $incdec_ptr68;
      __label__ = 15;
      break;
    }
   case 11:
    var $incdec_ptr75 = $scan_1 + 5 | 0;
    if (HEAP8[$incdec_ptr75] << 24 >> 24 == HEAP8[$match_0 + 5 | 0] << 24 >> 24) {
      __label__ = 12;
      break;
    } else {
      var $scan_2 = $incdec_ptr75;
      __label__ = 15;
      break;
    }
   case 12:
    var $incdec_ptr82 = $scan_1 + 6 | 0;
    if (HEAP8[$incdec_ptr82] << 24 >> 24 == HEAP8[$match_0 + 6 | 0] << 24 >> 24) {
      __label__ = 13;
      break;
    } else {
      var $scan_2 = $incdec_ptr82;
      __label__ = 15;
      break;
    }
   case 13:
    var $incdec_ptr89 = $scan_1 + 7 | 0;
    if (HEAP8[$incdec_ptr89] << 24 >> 24 == HEAP8[$match_0 + 7 | 0] << 24 >> 24) {
      __label__ = 14;
      break;
    } else {
      var $scan_2 = $incdec_ptr89;
      __label__ = 15;
      break;
    }
   case 14:
    var $incdec_ptr96 = $scan_1 + 8 | 0;
    var $incdec_ptr98 = $match_0 + 8 | 0;
    if (HEAP8[$incdec_ptr96] << 24 >> 24 == HEAP8[$incdec_ptr98] << 24 >> 24 & $incdec_ptr96 >>> 0 < $add_ptr11 >>> 0) {
      var $scan_1 = $incdec_ptr96;
      var $match_0 = $incdec_ptr98;
      __label__ = 7;
      break;
    } else {
      var $scan_2 = $incdec_ptr96;
      __label__ = 15;
      break;
    }
   case 15:
    var $scan_2;
    var $sub_ptr_sub11 = $scan_2 - $sub_ptr_lhs_cast | 0;
    var $sub104 = $sub_ptr_sub11 + 258 | 0;
    if (($sub104 | 0) > ($best_len_0 | 0)) {
      __label__ = 16;
      break;
    } else {
      var $scan_end_1 = $scan_end_0;
      var $scan_end1_1 = $scan_end1_0;
      var $best_len_1 = $best_len_0;
      __label__ = 18;
      break;
    }
   case 16:
    HEAP32[$match_start >> 2] = $cur_match_addr_0;
    if (($sub104 | 0) < ($nice_match_0_ph | 0)) {
      __label__ = 17;
      break;
    } else {
      var $best_len_2 = $sub104;
      __label__ = 20;
      break;
    }
   case 17:
    var $scan_end_1 = HEAP8[$1 + ($sub104 + $2) | 0];
    var $scan_end1_1 = HEAP8[$1 + ($sub113 + $sub_ptr_sub11) | 0];
    var $best_len_1 = $sub104;
    __label__ = 18;
    break;
   case 18:
    var $best_len_1;
    var $scan_end1_1;
    var $scan_end_1;
    var $conv119 = HEAPU16[$6 + (($cur_match_addr_0 & $7) << 1) >> 1] & 65535;
    if ($conv119 >>> 0 > $sub6_ >>> 0) {
      __label__ = 19;
      break;
    } else {
      var $best_len_2 = $best_len_1;
      __label__ = 20;
      break;
    }
   case 19:
    var $dec = $chain_length_1 - 1 | 0;
    if (($dec | 0) == 0) {
      var $best_len_2 = $best_len_1;
      __label__ = 20;
      break;
    } else {
      var $scan_end_0 = $scan_end_1;
      var $cur_match_addr_0 = $conv119;
      var $chain_length_1 = $dec;
      var $scan_end1_0 = $scan_end1_1;
      var $best_len_0 = $best_len_1;
      __label__ = 2;
      break;
    }
   case 20:
    var $best_len_2;
    var $_best_len_2 = $best_len_2 >>> 0 > $11 >>> 0 ? $11 : $best_len_2;
    return $_best_len_2;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_longest_match["X"] = 1;

function _inflate_fast($strm, $start) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $0 = HEAPU32[$strm + 28 >> 2];
    var $1 = $0;
    var $next_in = $strm | 0;
    var $2 = HEAP32[$next_in >> 2];
    var $avail_in = $strm + 4 | 0;
    var $add_ptr2 = $2 + (HEAP32[$avail_in >> 2] - 6) | 0;
    var $next_out = $strm + 12 | 0;
    var $4 = HEAP32[$next_out >> 2];
    var $avail_out = $strm + 16 | 0;
    var $5 = HEAP32[$avail_out >> 2];
    var $add_ptr8 = $4 + ($5 - 258) | 0;
    var $7 = HEAPU32[$1 + 44 >> 2];
    var $8 = HEAPU32[$1 + 48 >> 2];
    var $9 = HEAPU32[$1 + 52 >> 2];
    var $hold13 = $1 + 56 | 0;
    var $bits14 = $1 + 60 | 0;
    var $12 = HEAP32[$1 + 76 >> 2];
    var $13 = HEAP32[$1 + 80 >> 2];
    var $sub15 = (1 << HEAP32[$1 + 84 >> 2]) - 1 | 0;
    var $sub17 = (1 << HEAP32[$1 + 88 >> 2]) - 1 | 0;
    var $sub_ptr_rhs_cast = $4 + ($5 + ($start ^ -1)) | 0;
    var $sane = $1 + 7104 | 0;
    var $add_ptr121 = $9 - 1 | 0;
    var $cmp122 = ($8 | 0) == 0;
    var $sub125 = HEAP32[$1 + 40 >> 2] - 1 | 0;
    var $sub143 = $sub125 + $8 | 0;
    var $sub174 = $8 - 1 | 0;
    var $16 = $sub_ptr_rhs_cast - 1 | 0;
    var $17 = $sub_ptr_rhs_cast - $8 | 0;
    var $in_0 = $2 - 1 | 0;
    var $out_0 = $4 - 1 | 0;
    var $bits_0 = HEAP32[$bits14 >> 2];
    var $hold_0 = HEAP32[$hold13 >> 2];
    __label__ = 2;
    break;
   case 2:
    var $hold_0;
    var $bits_0;
    var $out_0;
    var $in_0;
    if ($bits_0 >>> 0 < 15) {
      __label__ = 3;
      break;
    } else {
      var $in_1 = $in_0;
      var $bits_1 = $bits_0;
      var $hold_1 = $hold_0;
      __label__ = 4;
      break;
    }
   case 3:
    var $incdec_ptr20 = $in_0 + 2 | 0;
    var $in_1 = $incdec_ptr20;
    var $bits_1 = $bits_0 + 16 | 0;
    var $hold_1 = ((HEAPU8[$in_0 + 1 | 0] & 255) << $bits_0) + $hold_0 + ((HEAPU8[$incdec_ptr20] & 255) << $bits_0 + 8) | 0;
    __label__ = 4;
    break;
   case 4:
    var $hold_1;
    var $bits_1;
    var $in_1;
    var $bits_2 = $bits_1;
    var $hold_2 = $hold_1;
    var $and_pn = $hold_1 & $sub15;
    __label__ = 5;
    break;
   case 5:
    var $and_pn;
    var $hold_2;
    var $bits_2;
    var $here_0_0 = HEAPU8[$12 + ($and_pn << 2) | 0];
    var $here_2_0 = HEAPU16[$12 + ($and_pn << 2) + 2 >> 1];
    var $conv26 = HEAPU8[$12 + ($and_pn << 2) + 1 | 0] & 255;
    var $shr = $hold_2 >>> ($conv26 >>> 0);
    var $sub27 = $bits_2 - $conv26 | 0;
    var $conv29 = $here_0_0 & 255;
    if ($here_0_0 << 24 >> 24 == 0) {
      __label__ = 6;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 6:
    var $incdec_ptr34 = $out_0 + 1 | 0;
    HEAP8[$incdec_ptr34] = $here_2_0 & 255;
    var $in_6 = $in_1;
    var $out_7 = $incdec_ptr34;
    var $bits_8 = $sub27;
    var $hold_8 = $shr;
    __label__ = 58;
    break;
   case 7:
    if (($conv29 & 16 | 0) == 0) {
      __label__ = 53;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    var $conv38 = $here_2_0 & 65535;
    var $and39 = $conv29 & 15;
    if (($and39 | 0) == 0) {
      var $len_0 = $conv38;
      var $in_3 = $in_1;
      var $bits_4 = $sub27;
      var $hold_4 = $shr;
      __label__ = 12;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    if ($sub27 >>> 0 < $and39 >>> 0) {
      __label__ = 10;
      break;
    } else {
      var $in_2 = $in_1;
      var $bits_3 = $sub27;
      var $hold_3 = $shr;
      __label__ = 11;
      break;
    }
   case 10:
    var $incdec_ptr45 = $in_1 + 1 | 0;
    var $in_2 = $incdec_ptr45;
    var $bits_3 = $sub27 + 8 | 0;
    var $hold_3 = ((HEAPU8[$incdec_ptr45] & 255) << $sub27) + $shr | 0;
    __label__ = 11;
    break;
   case 11:
    var $hold_3;
    var $bits_3;
    var $in_2;
    var $len_0 = ($hold_3 & (1 << $and39) - 1) + $conv38 | 0;
    var $in_3 = $in_2;
    var $bits_4 = $bits_3 - $and39 | 0;
    var $hold_4 = $hold_3 >>> ($and39 >>> 0);
    __label__ = 12;
    break;
   case 12:
    var $hold_4;
    var $bits_4;
    var $in_3;
    var $len_0;
    if ($bits_4 >>> 0 < 15) {
      __label__ = 13;
      break;
    } else {
      var $in_4 = $in_3;
      var $bits_5 = $bits_4;
      var $hold_5 = $hold_4;
      __label__ = 14;
      break;
    }
   case 13:
    var $incdec_ptr66 = $in_3 + 2 | 0;
    var $in_4 = $incdec_ptr66;
    var $bits_5 = $bits_4 + 16 | 0;
    var $hold_5 = ((HEAPU8[$in_3 + 1 | 0] & 255) << $bits_4) + $hold_4 + ((HEAPU8[$incdec_ptr66] & 255) << $bits_4 + 8) | 0;
    __label__ = 14;
    break;
   case 14:
    var $hold_5;
    var $bits_5;
    var $in_4;
    var $bits_6 = $bits_5;
    var $hold_6 = $hold_5;
    var $and72_pn = $hold_5 & $sub17;
    __label__ = 15;
    break;
   case 15:
    var $and72_pn;
    var $hold_6;
    var $bits_6;
    var $here_2_1 = HEAPU16[$13 + ($and72_pn << 2) + 2 >> 1];
    var $conv75 = HEAPU8[$13 + ($and72_pn << 2) + 1 | 0] & 255;
    var $shr76 = $hold_6 >>> ($conv75 >>> 0);
    var $sub77 = $bits_6 - $conv75 | 0;
    var $conv79 = HEAPU8[$13 + ($and72_pn << 2) | 0] & 255;
    if (($conv79 & 16 | 0) == 0) {
      __label__ = 50;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 16:
    var $conv84 = $here_2_1 & 65535;
    var $and85 = $conv79 & 15;
    if ($sub77 >>> 0 < $and85 >>> 0) {
      __label__ = 17;
      break;
    } else {
      var $in_5 = $in_4;
      var $bits_7 = $sub77;
      var $hold_7 = $shr76;
      __label__ = 19;
      break;
    }
   case 17:
    var $incdec_ptr89 = $in_4 + 1 | 0;
    var $add92 = ((HEAPU8[$incdec_ptr89] & 255) << $sub77) + $shr76 | 0;
    var $add93 = $sub77 + 8 | 0;
    if ($add93 >>> 0 < $and85 >>> 0) {
      __label__ = 18;
      break;
    } else {
      var $in_5 = $incdec_ptr89;
      var $bits_7 = $add93;
      var $hold_7 = $add92;
      __label__ = 19;
      break;
    }
   case 18:
    var $incdec_ptr97 = $in_4 + 2 | 0;
    var $in_5 = $incdec_ptr97;
    var $bits_7 = $sub77 + 16 | 0;
    var $hold_7 = ((HEAPU8[$incdec_ptr97] & 255) << $add93) + $add92 | 0;
    __label__ = 19;
    break;
   case 19:
    var $hold_7;
    var $bits_7;
    var $in_5;
    var $and106 = $hold_7 & (1 << $and85) - 1;
    var $add107 = $and106 + $conv84 | 0;
    var $shr108 = $hold_7 >>> ($and85 >>> 0);
    var $sub109 = $bits_7 - $and85 | 0;
    var $sub_ptr_lhs_cast = $out_0;
    var $sub_ptr_sub = $sub_ptr_lhs_cast - $sub_ptr_rhs_cast | 0;
    if ($add107 >>> 0 > $sub_ptr_sub >>> 0) {
      __label__ = 20;
      break;
    } else {
      __label__ = 45;
      break;
    }
   case 20:
    var $sub113 = $add107 - $sub_ptr_sub | 0;
    if ($sub113 >>> 0 > $7 >>> 0) {
      __label__ = 21;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 21:
    if ((HEAP32[$sane >> 2] | 0) == 0) {
      __label__ = 23;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 22:
    HEAP32[$strm + 24 >> 2] = STRING_TABLE.__str161298 | 0;
    HEAP32[$0 >> 2] = 29;
    var $in_7 = $in_5;
    var $out_8 = $out_0;
    var $bits_9 = $sub109;
    var $hold_9 = $shr108;
    __label__ = 59;
    break;
   case 23:
    if ($cmp122) {
      __label__ = 24;
      break;
    } else {
      __label__ = 28;
      break;
    }
   case 24:
    var $add_ptr126 = $9 + ($sub125 - $sub113) | 0;
    if ($sub113 >>> 0 < $len_0 >>> 0) {
      __label__ = 25;
      break;
    } else {
      var $from_4_ph = $add_ptr126;
      var $len_1_ph = $len_0;
      var $out_5_ph = $out_0;
      __label__ = 40;
      break;
    }
   case 25:
    var $sub130 = $len_0 - $sub113 | 0;
    var $26 = $and106 - $sub_ptr_lhs_cast | 0;
    var $scevgep49_sum = $16 + $26 | 0;
    var $from_0 = $add_ptr126;
    var $op_0 = $sub113;
    var $out_1 = $out_0;
    __label__ = 26;
    break;
   case 26:
    var $out_1;
    var $op_0;
    var $from_0;
    var $incdec_ptr132 = $from_0 + 1 | 0;
    var $27 = HEAP8[$incdec_ptr132];
    var $incdec_ptr133 = $out_1 + 1 | 0;
    HEAP8[$incdec_ptr133] = $27;
    var $dec = $op_0 - 1 | 0;
    if (($dec | 0) == 0) {
      __label__ = 27;
      break;
    } else {
      var $from_0 = $incdec_ptr132;
      var $op_0 = $dec;
      var $out_1 = $incdec_ptr133;
      __label__ = 26;
      break;
    }
   case 27:
    var $from_4_ph = $out_0 + ($scevgep49_sum + $conv84 + (1 - $add107)) | 0;
    var $len_1_ph = $sub130;
    var $out_5_ph = $out_0 + ($sub_ptr_rhs_cast + $26 + $conv84) | 0;
    __label__ = 40;
    break;
   case 28:
    if ($8 >>> 0 < $sub113 >>> 0) {
      __label__ = 29;
      break;
    } else {
      __label__ = 36;
      break;
    }
   case 29:
    var $add_ptr144 = $9 + ($sub143 - $sub113) | 0;
    var $sub145 = $sub113 - $8 | 0;
    if ($sub145 >>> 0 < $len_0 >>> 0) {
      __label__ = 30;
      break;
    } else {
      var $from_4_ph = $add_ptr144;
      var $len_1_ph = $len_0;
      var $out_5_ph = $out_0;
      __label__ = 40;
      break;
    }
   case 30:
    var $sub149 = $len_0 - $sub145 | 0;
    var $28 = $and106 - $sub_ptr_lhs_cast | 0;
    var $from_1 = $add_ptr144;
    var $op_1 = $sub145;
    var $out_2 = $out_0;
    __label__ = 31;
    break;
   case 31:
    var $out_2;
    var $op_1;
    var $from_1;
    var $incdec_ptr151 = $from_1 + 1 | 0;
    var $29 = HEAP8[$incdec_ptr151];
    var $incdec_ptr152 = $out_2 + 1 | 0;
    HEAP8[$incdec_ptr152] = $29;
    var $dec154 = $op_1 - 1 | 0;
    if (($dec154 | 0) == 0) {
      __label__ = 32;
      break;
    } else {
      var $from_1 = $incdec_ptr151;
      var $op_1 = $dec154;
      var $out_2 = $incdec_ptr152;
      __label__ = 31;
      break;
    }
   case 32:
    var $scevgep81 = $out_0 + ($17 + $28 + $conv84) | 0;
    if ($8 >>> 0 < $sub149 >>> 0) {
      __label__ = 33;
      break;
    } else {
      var $from_4_ph = $add_ptr121;
      var $len_1_ph = $sub149;
      var $out_5_ph = $scevgep81;
      __label__ = 40;
      break;
    }
   case 33:
    var $sub161 = $sub149 - $8 | 0;
    var $scevgep63_sum = $16 + $28 | 0;
    var $from_2 = $add_ptr121;
    var $op_2 = $8;
    var $out_3 = $scevgep81;
    __label__ = 34;
    break;
   case 34:
    var $out_3;
    var $op_2;
    var $from_2;
    var $incdec_ptr163 = $from_2 + 1 | 0;
    var $30 = HEAP8[$incdec_ptr163];
    var $incdec_ptr164 = $out_3 + 1 | 0;
    HEAP8[$incdec_ptr164] = $30;
    var $dec166 = $op_2 - 1 | 0;
    if (($dec166 | 0) == 0) {
      __label__ = 35;
      break;
    } else {
      var $from_2 = $incdec_ptr163;
      var $op_2 = $dec166;
      var $out_3 = $incdec_ptr164;
      __label__ = 34;
      break;
    }
   case 35:
    var $from_4_ph = $out_0 + ($scevgep63_sum + $conv84 + (1 - $add107)) | 0;
    var $len_1_ph = $sub161;
    var $out_5_ph = $out_0 + ($sub_ptr_rhs_cast + $28 + $conv84) | 0;
    __label__ = 40;
    break;
   case 36:
    var $add_ptr175 = $9 + ($sub174 - $sub113) | 0;
    if ($sub113 >>> 0 < $len_0 >>> 0) {
      __label__ = 37;
      break;
    } else {
      var $from_4_ph = $add_ptr175;
      var $len_1_ph = $len_0;
      var $out_5_ph = $out_0;
      __label__ = 40;
      break;
    }
   case 37:
    var $sub179 = $len_0 - $sub113 | 0;
    var $31 = $and106 - $sub_ptr_lhs_cast | 0;
    var $scevgep56_sum = $16 + $31 | 0;
    var $from_3 = $add_ptr175;
    var $op_3 = $sub113;
    var $out_4 = $out_0;
    __label__ = 38;
    break;
   case 38:
    var $out_4;
    var $op_3;
    var $from_3;
    var $incdec_ptr181 = $from_3 + 1 | 0;
    var $32 = HEAP8[$incdec_ptr181];
    var $incdec_ptr182 = $out_4 + 1 | 0;
    HEAP8[$incdec_ptr182] = $32;
    var $dec184 = $op_3 - 1 | 0;
    if (($dec184 | 0) == 0) {
      __label__ = 39;
      break;
    } else {
      var $from_3 = $incdec_ptr181;
      var $op_3 = $dec184;
      var $out_4 = $incdec_ptr182;
      __label__ = 38;
      break;
    }
   case 39:
    var $from_4_ph = $out_0 + ($scevgep56_sum + $conv84 + (1 - $add107)) | 0;
    var $len_1_ph = $sub179;
    var $out_5_ph = $out_0 + ($sub_ptr_rhs_cast + $31 + $conv84) | 0;
    __label__ = 40;
    break;
   case 40:
    var $out_5_ph;
    var $len_1_ph;
    var $from_4_ph;
    if ($len_1_ph >>> 0 > 2) {
      var $out_535 = $out_5_ph;
      var $len_136 = $len_1_ph;
      var $from_437 = $from_4_ph;
      __label__ = 41;
      break;
    } else {
      var $out_5_lcssa = $out_5_ph;
      var $len_1_lcssa = $len_1_ph;
      var $from_4_lcssa = $from_4_ph;
      __label__ = 42;
      break;
    }
   case 41:
    var $from_437;
    var $len_136;
    var $out_535;
    var $33 = HEAP8[$from_437 + 1 | 0];
    HEAP8[$out_535 + 1 | 0] = $33;
    var $34 = HEAP8[$from_437 + 2 | 0];
    HEAP8[$out_535 + 2 | 0] = $34;
    var $incdec_ptr198 = $from_437 + 3 | 0;
    var $35 = HEAP8[$incdec_ptr198];
    var $incdec_ptr199 = $out_535 + 3 | 0;
    HEAP8[$incdec_ptr199] = $35;
    var $sub200 = $len_136 - 3 | 0;
    if ($sub200 >>> 0 > 2) {
      var $out_535 = $incdec_ptr199;
      var $len_136 = $sub200;
      var $from_437 = $incdec_ptr198;
      __label__ = 41;
      break;
    } else {
      var $out_5_lcssa = $incdec_ptr199;
      var $len_1_lcssa = $sub200;
      var $from_4_lcssa = $incdec_ptr198;
      __label__ = 42;
      break;
    }
   case 42:
    var $from_4_lcssa;
    var $len_1_lcssa;
    var $out_5_lcssa;
    if (($len_1_lcssa | 0) == 0) {
      var $in_6 = $in_5;
      var $out_7 = $out_5_lcssa;
      var $bits_8 = $sub109;
      var $hold_8 = $shr108;
      __label__ = 58;
      break;
    } else {
      __label__ = 43;
      break;
    }
   case 43:
    var $36 = HEAP8[$from_4_lcssa + 1 | 0];
    var $incdec_ptr204 = $out_5_lcssa + 1 | 0;
    HEAP8[$incdec_ptr204] = $36;
    if ($len_1_lcssa >>> 0 > 1) {
      __label__ = 44;
      break;
    } else {
      var $in_6 = $in_5;
      var $out_7 = $incdec_ptr204;
      var $bits_8 = $sub109;
      var $hold_8 = $shr108;
      __label__ = 58;
      break;
    }
   case 44:
    var $37 = HEAP8[$from_4_lcssa + 2 | 0];
    var $incdec_ptr209 = $out_5_lcssa + 2 | 0;
    HEAP8[$incdec_ptr209] = $37;
    var $in_6 = $in_5;
    var $out_7 = $incdec_ptr209;
    var $bits_8 = $sub109;
    var $hold_8 = $shr108;
    __label__ = 58;
    break;
   case 45:
    var $from_5 = $out_0 + -$add107 | 0;
    var $len_2 = $len_0;
    var $out_6 = $out_0;
    __label__ = 46;
    break;
   case 46:
    var $out_6;
    var $len_2;
    var $from_5;
    var $38 = HEAP8[$from_5 + 1 | 0];
    HEAP8[$out_6 + 1 | 0] = $38;
    var $39 = HEAP8[$from_5 + 2 | 0];
    HEAP8[$out_6 + 2 | 0] = $39;
    var $incdec_ptr220 = $from_5 + 3 | 0;
    var $40 = HEAP8[$incdec_ptr220];
    var $incdec_ptr221 = $out_6 + 3 | 0;
    HEAP8[$incdec_ptr221] = $40;
    var $sub222 = $len_2 - 3 | 0;
    if ($sub222 >>> 0 > 2) {
      var $from_5 = $incdec_ptr220;
      var $len_2 = $sub222;
      var $out_6 = $incdec_ptr221;
      __label__ = 46;
      break;
    } else {
      __label__ = 47;
      break;
    }
   case 47:
    if (($sub222 | 0) == 0) {
      var $in_6 = $in_5;
      var $out_7 = $incdec_ptr221;
      var $bits_8 = $sub109;
      var $hold_8 = $shr108;
      __label__ = 58;
      break;
    } else {
      __label__ = 48;
      break;
    }
   case 48:
    var $41 = HEAP8[$from_5 + 4 | 0];
    var $incdec_ptr230 = $out_6 + 4 | 0;
    HEAP8[$incdec_ptr230] = $41;
    if ($sub222 >>> 0 > 1) {
      __label__ = 49;
      break;
    } else {
      var $in_6 = $in_5;
      var $out_7 = $incdec_ptr230;
      var $bits_8 = $sub109;
      var $hold_8 = $shr108;
      __label__ = 58;
      break;
    }
   case 49:
    var $42 = HEAP8[$from_5 + 5 | 0];
    var $incdec_ptr235 = $out_6 + 5 | 0;
    HEAP8[$incdec_ptr235] = $42;
    var $in_6 = $in_5;
    var $out_7 = $incdec_ptr235;
    var $bits_8 = $sub109;
    var $hold_8 = $shr108;
    __label__ = 58;
    break;
   case 50:
    if (($conv79 & 64 | 0) == 0) {
      __label__ = 51;
      break;
    } else {
      __label__ = 52;
      break;
    }
   case 51:
    var $add249 = ($shr76 & (1 << $conv79) - 1) + ($here_2_1 & 65535) | 0;
    var $bits_6 = $sub77;
    var $hold_6 = $shr76;
    var $and72_pn = $add249;
    __label__ = 15;
    break;
   case 52:
    HEAP32[$strm + 24 >> 2] = STRING_TABLE.__str151297 | 0;
    HEAP32[$0 >> 2] = 29;
    var $in_7 = $in_4;
    var $out_8 = $out_0;
    var $bits_9 = $sub77;
    var $hold_9 = $shr76;
    __label__ = 59;
    break;
   case 53:
    if (($conv29 & 64 | 0) == 0) {
      __label__ = 54;
      break;
    } else {
      __label__ = 55;
      break;
    }
   case 54:
    var $add265 = ($shr & (1 << $conv29) - 1) + ($here_2_0 & 65535) | 0;
    var $bits_2 = $sub27;
    var $hold_2 = $shr;
    var $and_pn = $add265;
    __label__ = 5;
    break;
   case 55:
    if (($conv29 & 32 | 0) == 0) {
      __label__ = 57;
      break;
    } else {
      __label__ = 56;
      break;
    }
   case 56:
    HEAP32[$0 >> 2] = 11;
    var $in_7 = $in_1;
    var $out_8 = $out_0;
    var $bits_9 = $sub27;
    var $hold_9 = $shr;
    __label__ = 59;
    break;
   case 57:
    HEAP32[$strm + 24 >> 2] = STRING_TABLE.__str141296 | 0;
    HEAP32[$0 >> 2] = 29;
    var $in_7 = $in_1;
    var $out_8 = $out_0;
    var $bits_9 = $sub27;
    var $hold_9 = $shr;
    __label__ = 59;
    break;
   case 58:
    var $hold_8;
    var $bits_8;
    var $out_7;
    var $in_6;
    if ($in_6 >>> 0 < $add_ptr2 >>> 0 & $out_7 >>> 0 < $add_ptr8 >>> 0) {
      var $in_0 = $in_6;
      var $out_0 = $out_7;
      var $bits_0 = $bits_8;
      var $hold_0 = $hold_8;
      __label__ = 2;
      break;
    } else {
      var $in_7 = $in_6;
      var $out_8 = $out_7;
      var $bits_9 = $bits_8;
      var $hold_9 = $hold_8;
      __label__ = 59;
      break;
    }
   case 59:
    var $hold_9;
    var $bits_9;
    var $out_8;
    var $in_7;
    var $shr283 = $bits_9 >>> 3;
    var $add_ptr285 = $in_7 + -$shr283 | 0;
    var $sub287 = $bits_9 & 7;
    var $and290 = (1 << $sub287) - 1 & $hold_9;
    HEAP32[$next_in >> 2] = $in_7 + (1 - $shr283) | 0;
    HEAP32[$next_out >> 2] = $out_8 + 1 | 0;
    if ($add_ptr285 >>> 0 < $add_ptr2 >>> 0) {
      __label__ = 60;
      break;
    } else {
      __label__ = 61;
      break;
    }
   case 60:
    var $cond_in = $add_ptr2 - $add_ptr285 | 0;
    __label__ = 62;
    break;
   case 61:
    var $cond_in = $add_ptr2 - $add_ptr285 | 0;
    __label__ = 62;
    break;
   case 62:
    var $cond_in;
    HEAP32[$avail_in >> 2] = $cond_in + 5 | 0;
    if ($out_8 >>> 0 < $add_ptr8 >>> 0) {
      __label__ = 63;
      break;
    } else {
      __label__ = 64;
      break;
    }
   case 63:
    var $cond319_in = $add_ptr8 - $out_8 | 0;
    __label__ = 65;
    break;
   case 64:
    var $cond319_in = $add_ptr8 - $out_8 | 0;
    __label__ = 65;
    break;
   case 65:
    var $cond319_in;
    HEAP32[$avail_out >> 2] = $cond319_in + 257 | 0;
    HEAP32[$hold13 >> 2] = $and290;
    HEAP32[$bits14 >> 2] = $sub287;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_inflate_fast["X"] = 1;

function _inflateResetKeep($strm) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($strm | 0) == 0) {
      var $retval_0 = -2;
      __label__ = 6;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $0 = HEAP32[$strm + 28 >> 2];
    if (($0 | 0) == 0) {
      var $retval_0 = -2;
      __label__ = 6;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $1 = $0 + 28 | 0;
    HEAP32[$1 >> 2] = 0;
    HEAP32[$strm + 20 >> 2] = 0;
    HEAP32[$strm + 8 >> 2] = 0;
    HEAP32[$strm + 24 >> 2] = 0;
    var $3 = HEAP32[$0 + 8 >> 2];
    if (($3 | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $and = $3 & 1;
    HEAP32[$strm + 48 >> 2] = $and;
    __label__ = 5;
    break;
   case 5:
    var $mode = $0 | 0;
    HEAP32[$mode >> 2] = 0;
    var $4 = $0 + 4 | 0;
    HEAP32[$4 >> 2] = 0;
    var $5 = $0 + 12 | 0;
    HEAP32[$5 >> 2] = 0;
    var $6 = $0 + 20 | 0;
    HEAP32[$6 >> 2] = 32768;
    var $7 = $0 + 32 | 0;
    HEAP32[$7 >> 2] = 0;
    var $8 = $0 + 56 | 0;
    HEAP32[$8 >> 2] = 0;
    var $9 = $0 + 60 | 0;
    HEAP32[$9 >> 2] = 0;
    var $10 = $0 + 108 | 0;
    var $arraydecay_c = $0 + 1328 | 0;
    HEAP32[$10 >> 2] = $arraydecay_c;
    var $11 = $0 + 80 | 0;
    HEAP32[$11 >> 2] = $arraydecay_c;
    var $12 = $0 + 76 | 0;
    HEAP32[$12 >> 2] = $arraydecay_c;
    var $13 = $0 + 7104 | 0;
    HEAP32[$13 >> 2] = 1;
    var $14 = $0 + 7108 | 0;
    HEAP32[$14 >> 2] = -1;
    var $retval_0 = 0;
    __label__ = 6;
    break;
   case 6:
    var $retval_0;
    return $retval_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_inflateResetKeep["X"] = 1;

function _inflateReset($strm) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($strm | 0) == 0) {
      var $retval_0 = -2;
      __label__ = 4;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $0 = HEAP32[$strm + 28 >> 2];
    if (($0 | 0) == 0) {
      var $retval_0 = -2;
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $1 = $0 + 40 | 0;
    HEAP32[$1 >> 2] = 0;
    var $2 = $0 + 44 | 0;
    HEAP32[$2 >> 2] = 0;
    var $3 = $0 + 48 | 0;
    HEAP32[$3 >> 2] = 0;
    var $call = _inflateResetKeep($strm);
    var $retval_0 = $call;
    __label__ = 4;
    break;
   case 4:
    var $retval_0;
    return $retval_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _inflateReset2($strm) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($strm | 0) == 0) {
      var $retval_0 = -2;
      __label__ = 7;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $0 = HEAP32[$strm + 28 >> 2];
    if (($0 | 0) == 0) {
      var $retval_0 = -2;
      __label__ = 7;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $window = $0 + 52 | 0;
    var $2 = HEAP32[$window >> 2];
    var $_pre = $0 + 36 | 0;
    if (($2 | 0) == 0) {
      var $_pre_phi = $_pre;
      __label__ = 6;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    if ((HEAP32[$_pre >> 2] | 0) == 15) {
      var $_pre_phi = $_pre;
      __label__ = 6;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $4 = HEAP32[$strm + 36 >> 2];
    var $5 = HEAP32[$strm + 40 >> 2];
    FUNCTION_TABLE[$4]($5, $2);
    var $6 = $window | 0;
    HEAP32[$6 >> 2] = 0;
    var $_pre_phi = $_pre;
    __label__ = 6;
    break;
   case 6:
    var $_pre_phi;
    var $7 = $0 + 8 | 0;
    HEAP32[$7 >> 2] = 1;
    HEAP32[$_pre_phi >> 2] = 15;
    var $call = _inflateReset($strm);
    var $retval_0 = $call;
    __label__ = 7;
    break;
   case 7:
    var $retval_0;
    return $retval_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _inflateInit2_($strm) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($strm | 0) == 0) {
      var $retval_0 = -2;
      __label__ = 7;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    HEAP32[$strm + 24 >> 2] = 0;
    var $0 = HEAP32[$strm + 32 >> 2];
    if (($0 | 0) == 0) {
      var $retval_0 = -2;
      __label__ = 7;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $zfree = $strm + 36 | 0;
    if ((HEAP32[$zfree >> 2] | 0) == 0) {
      var $retval_0 = -2;
      __label__ = 7;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $opaque = $strm + 40 | 0;
    var $2 = HEAP32[$opaque >> 2];
    var $call = FUNCTION_TABLE[$0]($2, 1, 7116);
    if (($call | 0) == 0) {
      var $retval_0 = -4;
      __label__ = 7;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $3 = $call;
    var $state24 = $strm + 28 | 0;
    HEAP32[$state24 >> 2] = $3;
    var $4 = $call + 52 | 0;
    HEAP32[$4 >> 2] = 0;
    var $call25 = _inflateReset2($strm);
    if (($call25 | 0) == 0) {
      var $retval_0 = 0;
      __label__ = 7;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    var $5 = HEAP32[$zfree >> 2];
    var $6 = HEAP32[$opaque >> 2];
    FUNCTION_TABLE[$5]($6, $call);
    HEAP32[$state24 >> 2] = 0;
    var $retval_0 = $call25;
    __label__ = 7;
    break;
   case 7:
    var $retval_0;
    return $retval_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _inflateInit_($strm) {
  var $call = _inflateInit2_($strm);
  return $call;
}

function _inflate($strm, $flush) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $hbuf = __stackBase__;
    if (($strm | 0) == 0) {
      var $retval_0 = -2;
      __label__ = 308;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $0 = HEAPU32[$strm + 28 >> 2];
    if (($0 | 0) == 0) {
      var $retval_0 = -2;
      __label__ = 308;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $next_out = $strm + 12 | 0;
    var $1 = HEAP32[$next_out >> 2];
    if (($1 | 0) == 0) {
      var $retval_0 = -2;
      __label__ = 308;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $next_in = $strm | 0;
    var $2 = HEAP32[$next_in >> 2];
    if (($2 | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    if ((HEAP32[$strm + 4 >> 2] | 0) == 0) {
      __label__ = 6;
      break;
    } else {
      var $retval_0 = -2;
      __label__ = 308;
      break;
    }
   case 6:
    var $4 = $0;
    var $mode = $0 | 0;
    var $5 = HEAP32[$mode >> 2];
    if (($5 | 0) == 11) {
      __label__ = 7;
      break;
    } else {
      var $8 = $1;
      var $7 = $2;
      var $6 = $5;
      __label__ = 8;
      break;
    }
   case 7:
    HEAP32[$mode >> 2] = 12;
    var $8 = HEAP32[$next_out >> 2];
    var $7 = HEAP32[$next_in >> 2];
    var $6 = 12;
    __label__ = 8;
    break;
   case 8:
    var $6;
    var $7;
    var $8;
    var $avail_out = $strm + 16 | 0;
    var $9 = HEAP32[$avail_out >> 2];
    var $avail_in15 = $strm + 4 | 0;
    var $10 = HEAPU32[$avail_in15 >> 2];
    var $11 = $0 + 56 | 0;
    var $13 = $0 + 60 | 0;
    var $15 = $0 + 8 | 0;
    var $16 = $0 + 24 | 0;
    var $arrayidx = $hbuf | 0;
    var $arrayidx40 = $hbuf + 1 | 0;
    var $17 = $0 + 16 | 0;
    var $18 = $0 + 32 | 0;
    var $msg = $strm + 24 | 0;
    var $19 = $0 + 36 | 0;
    var $20 = $0 + 20 | 0;
    var $adler = $strm + 48 | 0;
    var $21 = $0 + 64 | 0;
    var $22 = $0 + 12 | 0;
    var $23 = ($flush - 5 | 0) >>> 0 < 2;
    var $24 = $0 + 4 | 0;
    var $cmp660 = ($flush | 0) == 6;
    var $25 = $strm;
    var $26 = $0 + 7108 | 0;
    var $27 = $0 + 84 | 0;
    var $28 = $0 + 76 | 0;
    var $29 = $0 + 72 | 0;
    var $30 = $0 + 7112 | 0;
    var $31 = $0 + 68 | 0;
    var $32 = $0 + 44 | 0;
    var $33 = $0 + 7104 | 0;
    var $34 = $0 + 48 | 0;
    var $35 = $0 + 52 | 0;
    var $36 = $0 + 40 | 0;
    var $total_out = $strm + 20 | 0;
    var $37 = $0 + 28 | 0;
    var $arrayidx199 = $hbuf + 2 | 0;
    var $arrayidx202 = $hbuf + 3 | 0;
    var $38 = $0 + 96 | 0;
    var $39 = $0 + 100 | 0;
    var $40 = $0 + 92 | 0;
    var $41 = $0 + 104 | 0;
    var $lens = $0 + 112 | 0;
    var $42 = $lens;
    var $next861 = $0 + 108 | 0;
    var $43 = $next861;
    var $44 = $next861 | 0;
    var $arraydecay860_c = $0 + 1328 | 0;
    var $45 = $0 + 76 | 0;
    var $arraydecay864 = $lens;
    var $arraydecay867 = $0 + 752 | 0;
    var $46 = $0 + 624 | 0;
    var $47 = $0 + 80 | 0;
    var $48 = $0 + 88 | 0;
    var $49 = $0 + 80 | 0;
    var $ret_0 = 0;
    var $next_0 = $7;
    var $put_0 = $8;
    var $have_0 = $10;
    var $left_0 = $9;
    var $hold_0 = HEAP32[$11 >> 2];
    var $bits_0 = HEAP32[$13 >> 2];
    var $out_0 = $9;
    var $50 = $6;
    __label__ = 9;
    break;
   case 9:
    var $50;
    var $out_0;
    var $bits_0;
    var $hold_0;
    var $left_0;
    var $have_0;
    var $put_0;
    var $next_0;
    var $ret_0;
    if (($50 | 0) == 6) {
      __label__ = 10;
      break;
    } else if (($50 | 0) == 21) {
      __label__ = 11;
      break;
    } else if (($50 | 0) == 23) {
      __label__ = 12;
      break;
    } else if (($50 | 0) == 0) {
      __label__ = 13;
      break;
    } else if (($50 | 0) == 1) {
      var $next_2 = $next_0;
      var $have_2 = $have_0;
      var $hold_2 = $hold_0;
      var $bits_2 = $bits_0;
      __label__ = 33;
      break;
    } else if (($50 | 0) == 2) {
      var $next_3 = $next_0;
      var $have_3 = $have_0;
      var $hold_3 = $hold_0;
      var $bits_3 = $bits_0;
      __label__ = 45;
      break;
    } else if (($50 | 0) == 3) {
      var $next_4 = $next_0;
      var $have_4 = $have_0;
      var $hold_4 = $hold_0;
      var $bits_4 = $bits_0;
      __label__ = 53;
      break;
    } else if (($50 | 0) == 4) {
      var $next_5 = $next_0;
      var $have_5 = $have_0;
      var $hold_5 = $hold_0;
      var $bits_5 = $bits_0;
      __label__ = 61;
      break;
    } else if (($50 | 0) == 5) {
      var $next_8 = $next_0;
      var $have_8 = $have_0;
      var $hold_8 = $hold_0;
      var $bits_8 = $bits_0;
      __label__ = 72;
      break;
    } else if (($50 | 0) == 7) {
      var $next_13 = $next_0;
      var $have_13 = $have_0;
      var $hold_10 = $hold_0;
      var $bits_10 = $bits_0;
      __label__ = 95;
      break;
    } else if (($50 | 0) == 8) {
      var $next_15 = $next_0;
      var $have_15 = $have_0;
      var $hold_11 = $hold_0;
      var $bits_11 = $bits_0;
      __label__ = 108;
      break;
    } else if (($50 | 0) == 9) {
      var $next_18 = $next_0;
      var $have_18 = $have_0;
      var $hold_14 = $hold_0;
      var $bits_14 = $bits_0;
      __label__ = 117;
      break;
    } else if (($50 | 0) == 10) {
      var $next_19 = $next_0;
      var $have_19 = $have_0;
      var $hold_15 = $hold_0;
      var $bits_15 = $bits_0;
      __label__ = 121;
      break;
    } else if (($50 | 0) == 11) {
      var $next_20 = $next_0;
      var $have_20 = $have_0;
      var $hold_16 = $hold_0;
      var $bits_16 = $bits_0;
      __label__ = 124;
      break;
    } else if (($50 | 0) == 12) {
      var $next_21 = $next_0;
      var $have_21 = $have_0;
      var $hold_17 = $hold_0;
      var $bits_17 = $bits_0;
      __label__ = 125;
      break;
    } else if (($50 | 0) == 13) {
      __label__ = 137;
      break;
    } else if (($50 | 0) == 14) {
      var $next_24 = $next_0;
      var $have_24 = $have_0;
      var $hold_20 = $hold_0;
      var $bits_20 = $bits_0;
      __label__ = 144;
      break;
    } else if (($50 | 0) == 15) {
      var $next_25 = $next_0;
      var $have_25 = $have_0;
      var $hold_21 = $hold_0;
      var $bits_21 = $bits_0;
      __label__ = 145;
      break;
    } else if (($50 | 0) == 16) {
      var $next_26 = $next_0;
      var $have_26 = $have_0;
      var $hold_22 = $hold_0;
      var $bits_22 = $bits_0;
      __label__ = 149;
      break;
    } else if (($50 | 0) == 17) {
      var $next_27 = $next_0;
      var $have_27 = $have_0;
      var $hold_23 = $hold_0;
      var $bits_23 = $bits_0;
      __label__ = 155;
      break;
    } else if (($50 | 0) == 18) {
      var $ret_1_ph = $ret_0;
      var $next_29_ph = $next_0;
      var $have_29_ph = $have_0;
      var $hold_25_ph = $hold_0;
      var $bits_25_ph = $bits_0;
      __label__ = 165;
      break;
    } else if (($50 | 0) == 19) {
      var $ret_2 = $ret_0;
      var $next_36 = $next_0;
      var $have_36 = $have_0;
      var $hold_32 = $hold_0;
      var $bits_32 = $bits_0;
      __label__ = 203;
      break;
    } else if (($50 | 0) == 20) {
      var $ret_3 = $ret_0;
      var $next_37 = $next_0;
      var $have_37 = $have_0;
      var $hold_33 = $hold_0;
      var $bits_33 = $bits_0;
      __label__ = 204;
      break;
    } else if (($50 | 0) == 22) {
      var $ret_5_ph = $ret_0;
      var $next_44_ph = $next_0;
      var $have_44_ph = $have_0;
      var $hold_40_ph = $hold_0;
      var $bits_40_ph = $bits_0;
      __label__ = 232;
      break;
    } else if (($50 | 0) == 24) {
      var $ret_7 = $ret_0;
      var $next_50 = $next_0;
      var $have_50 = $have_0;
      var $hold_46 = $hold_0;
      var $bits_46 = $bits_0;
      __label__ = 252;
      break;
    } else if (($50 | 0) == 25) {
      __label__ = 267;
      break;
    } else if (($50 | 0) == 26) {
      __label__ = 269;
      break;
    } else if (($50 | 0) == 27) {
      var $next_53 = $next_0;
      var $have_53 = $have_0;
      var $hold_49 = $hold_0;
      var $bits_49 = $bits_0;
      var $out_2 = $out_0;
      __label__ = 283;
      break;
    } else if (($50 | 0) == 29) {
      __label__ = 291;
      break;
    } else if (($50 | 0) == 28) {
      var $ret_8 = 1;
      var $next_57 = $next_0;
      var $have_57 = $have_0;
      var $hold_53 = $hold_0;
      var $bits_53 = $bits_0;
      var $out_4 = $out_0;
      __label__ = 292;
      break;
    } else if (($50 | 0) == 30) {
      var $retval_0 = -4;
      __label__ = 308;
      break;
    } else {
      __label__ = 307;
      break;
    }
   case 10:
    var $next_11 = $next_0;
    var $have_11 = $have_0;
    var $hold_9 = $hold_0;
    var $bits_9 = $bits_0;
    var $90 = HEAP32[$17 >> 2];
    __label__ = 82;
    break;
   case 11:
    var $ret_4 = $ret_0;
    var $next_41 = $next_0;
    var $have_41 = $have_0;
    var $hold_37 = $hold_0;
    var $bits_37 = $bits_0;
    var $156 = HEAP32[$29 >> 2];
    __label__ = 225;
    break;
   case 12:
    var $ret_6 = $ret_0;
    var $next_47 = $next_0;
    var $have_47 = $have_0;
    var $hold_43 = $hold_0;
    var $bits_43 = $bits_0;
    var $167 = HEAP32[$29 >> 2];
    __label__ = 246;
    break;
   case 13:
    var $51 = HEAPU32[$15 >> 2];
    if (($51 | 0) == 0) {
      __label__ = 14;
      break;
    } else {
      var $next_1 = $next_0;
      var $have_1 = $have_0;
      var $hold_1 = $hold_0;
      var $bits_1 = $bits_0;
      __label__ = 16;
      break;
    }
   case 14:
    HEAP32[$mode >> 2] = 12;
    var $ret_0_be = $ret_0;
    var $next_0_be = $next_0;
    var $put_0_be = $put_0;
    var $have_0_be = $have_0;
    var $left_0_be = $left_0;
    var $hold_0_be = $hold_0;
    var $bits_0_be = $bits_0;
    var $out_0_be = $out_0;
    __label__ = 15;
    break;
   case 15:
    var $out_0_be;
    var $bits_0_be;
    var $hold_0_be;
    var $left_0_be;
    var $have_0_be;
    var $put_0_be;
    var $next_0_be;
    var $ret_0_be;
    var $ret_0 = $ret_0_be;
    var $next_0 = $next_0_be;
    var $put_0 = $put_0_be;
    var $have_0 = $have_0_be;
    var $left_0 = $left_0_be;
    var $hold_0 = $hold_0_be;
    var $bits_0 = $bits_0_be;
    var $out_0 = $out_0_be;
    var $50 = HEAP32[$mode >> 2];
    __label__ = 9;
    break;
   case 16:
    var $bits_1;
    var $hold_1;
    var $have_1;
    var $next_1;
    if ($bits_1 >>> 0 < 16) {
      __label__ = 17;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 17:
    if (($have_1 | 0) == 0) {
      var $ret_8 = $ret_0;
      var $next_57 = $next_1;
      var $have_57 = 0;
      var $hold_53 = $hold_1;
      var $bits_53 = $bits_1;
      var $out_4 = $out_0;
      __label__ = 292;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 18:
    var $add = ((HEAPU8[$next_1] & 255) << $bits_1) + $hold_1 | 0;
    var $next_1 = $next_1 + 1 | 0;
    var $have_1 = $have_1 - 1 | 0;
    var $hold_1 = $add;
    var $bits_1 = $bits_1 + 8 | 0;
    __label__ = 16;
    break;
   case 19:
    if (($51 & 2 | 0) != 0 & ($hold_1 | 0) == 35615) {
      __label__ = 20;
      break;
    } else {
      __label__ = 21;
      break;
    }
   case 20:
    var $call = _crc32(0, 0, 0);
    HEAP32[$16 >> 2] = $call;
    HEAP8[$arrayidx] = 31;
    HEAP8[$arrayidx40] = -117;
    var $53 = HEAP32[$16 >> 2];
    var $call42 = _crc32($53, $arrayidx, 2);
    HEAP32[$16 >> 2] = $call42;
    HEAP32[$mode >> 2] = 1;
    var $ret_0_be = $ret_0;
    var $next_0_be = $next_1;
    var $put_0_be = $put_0;
    var $have_0_be = $have_1;
    var $left_0_be = $left_0;
    var $hold_0_be = 0;
    var $bits_0_be = 0;
    var $out_0_be = $out_0;
    __label__ = 15;
    break;
   case 21:
    HEAP32[$17 >> 2] = 0;
    var $54 = HEAP32[$18 >> 2];
    if (($54 | 0) == 0) {
      var $55 = $51;
      __label__ = 23;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 22:
    var $done = $54 + 48 | 0;
    HEAP32[$done >> 2] = -1;
    var $55 = HEAP32[$15 >> 2];
    __label__ = 23;
    break;
   case 23:
    var $55;
    if (($55 & 1 | 0) == 0) {
      __label__ = 25;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 24:
    if ((((($hold_1 << 8 & 65280) + ($hold_1 >>> 8) | 0) >>> 0) % 31 | 0) == 0) {
      __label__ = 26;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 25:
    HEAP32[$msg >> 2] = STRING_TABLE.__str11283 | 0;
    HEAP32[$mode >> 2] = 29;
    var $ret_0_be = $ret_0;
    var $next_0_be = $next_1;
    var $put_0_be = $put_0;
    var $have_0_be = $have_1;
    var $left_0_be = $left_0;
    var $hold_0_be = $hold_1;
    var $bits_0_be = $bits_1;
    var $out_0_be = $out_0;
    __label__ = 15;
    break;
   case 26:
    if (($hold_1 & 15 | 0) == 8) {
      __label__ = 28;
      break;
    } else {
      __label__ = 27;
      break;
    }
   case 27:
    HEAP32[$msg >> 2] = STRING_TABLE.__str21284 | 0;
    HEAP32[$mode >> 2] = 29;
    var $ret_0_be = $ret_0;
    var $next_0_be = $next_1;
    var $put_0_be = $put_0;
    var $have_0_be = $have_1;
    var $left_0_be = $left_0;
    var $hold_0_be = $hold_1;
    var $bits_0_be = $bits_1;
    var $out_0_be = $out_0;
    __label__ = 15;
    break;
   case 28:
    var $shr74 = $hold_1 >>> 4;
    var $sub = $bits_1 - 4 | 0;
    var $add77 = ($shr74 & 15) + 8 | 0;
    var $56 = HEAPU32[$19 >> 2];
    if (($56 | 0) == 0) {
      __label__ = 29;
      break;
    } else {
      __label__ = 30;
      break;
    }
   case 29:
    HEAP32[$19 >> 2] = $add77;
    __label__ = 32;
    break;
   case 30:
    if ($add77 >>> 0 > $56 >>> 0) {
      __label__ = 31;
      break;
    } else {
      __label__ = 32;
      break;
    }
   case 31:
    HEAP32[$msg >> 2] = STRING_TABLE.__str31285 | 0;
    HEAP32[$mode >> 2] = 29;
    var $ret_0_be = $ret_0;
    var $next_0_be = $next_1;
    var $put_0_be = $put_0;
    var $have_0_be = $have_1;
    var $left_0_be = $left_0;
    var $hold_0_be = $shr74;
    var $bits_0_be = $sub;
    var $out_0_be = $out_0;
    __label__ = 15;
    break;
   case 32:
    HEAP32[$20 >> 2] = 1 << $add77;
    var $call91 = _adler32(0, 0, 0);
    HEAP32[$16 >> 2] = $call91;
    HEAP32[$adler >> 2] = $call91;
    HEAP32[$mode >> 2] = $hold_1 >>> 12 & 2 ^ 11;
    var $ret_0_be = $ret_0;
    var $next_0_be = $next_1;
    var $put_0_be = $put_0;
    var $have_0_be = $have_1;
    var $left_0_be = $left_0;
    var $hold_0_be = 0;
    var $bits_0_be = 0;
    var $out_0_be = $out_0;
    __label__ = 15;
    break;
   case 33:
    var $bits_2;
    var $hold_2;
    var $have_2;
    var $next_2;
    if ($bits_2 >>> 0 < 16) {
      __label__ = 34;
      break;
    } else {
      __label__ = 36;
      break;
    }
   case 34:
    if (($have_2 | 0) == 0) {
      var $ret_8 = $ret_0;
      var $next_57 = $next_2;
      var $have_57 = 0;
      var $hold_53 = $hold_2;
      var $bits_53 = $bits_2;
      var $out_4 = $out_0;
      __label__ = 292;
      break;
    } else {
      __label__ = 35;
      break;
    }
   case 35:
    var $add113 = ((HEAPU8[$next_2] & 255) << $bits_2) + $hold_2 | 0;
    var $next_2 = $next_2 + 1 | 0;
    var $have_2 = $have_2 - 1 | 0;
    var $hold_2 = $add113;
    var $bits_2 = $bits_2 + 8 | 0;
    __label__ = 33;
    break;
   case 36:
    HEAP32[$17 >> 2] = $hold_2;
    if (($hold_2 & 255 | 0) == 8) {
      __label__ = 38;
      break;
    } else {
      __label__ = 37;
      break;
    }
   case 37:
    HEAP32[$msg >> 2] = STRING_TABLE.__str21284 | 0;
    HEAP32[$mode >> 2] = 29;
    var $ret_0_be = $ret_0;
    var $next_0_be = $next_2;
    var $put_0_be = $put_0;
    var $have_0_be = $have_2;
    var $left_0_be = $left_0;
    var $hold_0_be = $hold_2;
    var $bits_0_be = $bits_2;
    var $out_0_be = $out_0;
    __label__ = 15;
    break;
   case 38:
    if (($hold_2 & 57344 | 0) == 0) {
      __label__ = 40;
      break;
    } else {
      __label__ = 39;
      break;
    }
   case 39:
    HEAP32[$msg >> 2] = STRING_TABLE.__str41286 | 0;
    HEAP32[$mode >> 2] = 29;
    var $ret_0_be = $ret_0;
    var $next_0_be = $next_2;
    var $put_0_be = $put_0;
    var $have_0_be = $have_2;
    var $left_0_be = $left_0;
    var $hold_0_be = $hold_2;
    var $bits_0_be = $bits_2;
    var $out_0_be = $out_0;
    __label__ = 15;
    break;
   case 40:
    var $60 = HEAPU32[$18 >> 2];
    if (($60 | 0) == 0) {
      var $61 = $hold_2;
      __label__ = 42;
      break;
    } else {
      __label__ = 41;
      break;
    }
   case 41:
    HEAP32[$60 >> 2] = $hold_2 >>> 8 & 1;
    var $61 = HEAP32[$17 >> 2];
    __label__ = 42;
    break;
   case 42:
    var $61;
    if (($61 & 512 | 0) == 0) {
      __label__ = 44;
      break;
    } else {
      __label__ = 43;
      break;
    }
   case 43:
    HEAP8[$arrayidx] = $hold_2 & 255;
    HEAP8[$arrayidx40] = $hold_2 >>> 8 & 255;
    var $62 = HEAP32[$16 >> 2];
    var $call154 = _crc32($62, $arrayidx, 2);
    HEAP32[$16 >> 2] = $call154;
    __label__ = 44;
    break;
   case 44:
    HEAP32[$mode >> 2] = 2;
    var $next_3 = $next_2;
    var $have_3 = $have_2;
    var $hold_3 = 0;
    var $bits_3 = 0;
    __label__ = 45;
    break;
   case 45:
    var $bits_3;
    var $hold_3;
    var $have_3;
    var $next_3;
    if ($bits_3 >>> 0 < 32) {
      __label__ = 46;
      break;
    } else {
      __label__ = 48;
      break;
    }
   case 46:
    if (($have_3 | 0) == 0) {
      var $ret_8 = $ret_0;
      var $next_57 = $next_3;
      var $have_57 = 0;
      var $hold_53 = $hold_3;
      var $bits_53 = $bits_3;
      var $out_4 = $out_0;
      __label__ = 292;
      break;
    } else {
      __label__ = 47;
      break;
    }
   case 47:
    var $add176 = ((HEAPU8[$next_3] & 255) << $bits_3) + $hold_3 | 0;
    var $next_3 = $next_3 + 1 | 0;
    var $have_3 = $have_3 - 1 | 0;
    var $hold_3 = $add176;
    var $bits_3 = $bits_3 + 8 | 0;
    __label__ = 45;
    break;
   case 48:
    var $64 = HEAP32[$18 >> 2];
    if (($64 | 0) == 0) {
      __label__ = 50;
      break;
    } else {
      __label__ = 49;
      break;
    }
   case 49:
    var $time = $64 + 4 | 0;
    HEAP32[$time >> 2] = $hold_3;
    __label__ = 50;
    break;
   case 50:
    if ((HEAP32[$17 >> 2] & 512 | 0) == 0) {
      __label__ = 52;
      break;
    } else {
      __label__ = 51;
      break;
    }
   case 51:
    HEAP8[$arrayidx] = $hold_3 & 255;
    HEAP8[$arrayidx40] = $hold_3 >>> 8 & 255;
    HEAP8[$arrayidx199] = $hold_3 >>> 16 & 255;
    HEAP8[$arrayidx202] = $hold_3 >>> 24 & 255;
    var $66 = HEAP32[$16 >> 2];
    var $call205 = _crc32($66, $arrayidx, 4);
    HEAP32[$16 >> 2] = $call205;
    __label__ = 52;
    break;
   case 52:
    HEAP32[$mode >> 2] = 3;
    var $next_4 = $next_3;
    var $have_4 = $have_3;
    var $hold_4 = 0;
    var $bits_4 = 0;
    __label__ = 53;
    break;
   case 53:
    var $bits_4;
    var $hold_4;
    var $have_4;
    var $next_4;
    if ($bits_4 >>> 0 < 16) {
      __label__ = 54;
      break;
    } else {
      __label__ = 56;
      break;
    }
   case 54:
    if (($have_4 | 0) == 0) {
      var $ret_8 = $ret_0;
      var $next_57 = $next_4;
      var $have_57 = 0;
      var $hold_53 = $hold_4;
      var $bits_53 = $bits_4;
      var $out_4 = $out_0;
      __label__ = 292;
      break;
    } else {
      __label__ = 55;
      break;
    }
   case 55:
    var $add227 = ((HEAPU8[$next_4] & 255) << $bits_4) + $hold_4 | 0;
    var $next_4 = $next_4 + 1 | 0;
    var $have_4 = $have_4 - 1 | 0;
    var $hold_4 = $add227;
    var $bits_4 = $bits_4 + 8 | 0;
    __label__ = 53;
    break;
   case 56:
    var $68 = HEAP32[$18 >> 2];
    if (($68 | 0) == 0) {
      __label__ = 58;
      break;
    } else {
      __label__ = 57;
      break;
    }
   case 57:
    var $xflags = $68 + 8 | 0;
    HEAP32[$xflags >> 2] = $hold_4 & 255;
    var $os = HEAP32[$18 >> 2] + 12 | 0;
    HEAP32[$os >> 2] = $hold_4 >>> 8;
    __label__ = 58;
    break;
   case 58:
    if ((HEAP32[$17 >> 2] & 512 | 0) == 0) {
      __label__ = 60;
      break;
    } else {
      __label__ = 59;
      break;
    }
   case 59:
    HEAP8[$arrayidx] = $hold_4 & 255;
    HEAP8[$arrayidx40] = $hold_4 >>> 8 & 255;
    var $71 = HEAP32[$16 >> 2];
    var $call253 = _crc32($71, $arrayidx, 2);
    HEAP32[$16 >> 2] = $call253;
    __label__ = 60;
    break;
   case 60:
    HEAP32[$mode >> 2] = 4;
    var $next_5 = $next_4;
    var $have_5 = $have_4;
    var $hold_5 = 0;
    var $bits_5 = 0;
    __label__ = 61;
    break;
   case 61:
    var $bits_5;
    var $hold_5;
    var $have_5;
    var $next_5;
    var $72 = HEAPU32[$17 >> 2];
    if (($72 & 1024 | 0) == 0) {
      __label__ = 69;
      break;
    } else {
      var $next_6 = $next_5;
      var $have_6 = $have_5;
      var $hold_6 = $hold_5;
      var $bits_6 = $bits_5;
      __label__ = 62;
      break;
    }
   case 62:
    var $bits_6;
    var $hold_6;
    var $have_6;
    var $next_6;
    if ($bits_6 >>> 0 < 16) {
      __label__ = 63;
      break;
    } else {
      __label__ = 65;
      break;
    }
   case 63:
    if (($have_6 | 0) == 0) {
      var $ret_8 = $ret_0;
      var $next_57 = $next_6;
      var $have_57 = 0;
      var $hold_53 = $hold_6;
      var $bits_53 = $bits_6;
      var $out_4 = $out_0;
      __label__ = 292;
      break;
    } else {
      __label__ = 64;
      break;
    }
   case 64:
    var $add279 = ((HEAPU8[$next_6] & 255) << $bits_6) + $hold_6 | 0;
    var $next_6 = $next_6 + 1 | 0;
    var $have_6 = $have_6 - 1 | 0;
    var $hold_6 = $add279;
    var $bits_6 = $bits_6 + 8 | 0;
    __label__ = 62;
    break;
   case 65:
    HEAP32[$21 >> 2] = $hold_6;
    var $74 = HEAP32[$18 >> 2];
    if (($74 | 0) == 0) {
      var $75 = $72;
      __label__ = 67;
      break;
    } else {
      __label__ = 66;
      break;
    }
   case 66:
    var $extra_len = $74 + 20 | 0;
    HEAP32[$extra_len >> 2] = $hold_6;
    var $75 = HEAP32[$17 >> 2];
    __label__ = 67;
    break;
   case 67:
    var $75;
    if (($75 & 512 | 0) == 0) {
      var $next_7 = $next_6;
      var $have_7 = $have_6;
      var $hold_7 = 0;
      var $bits_7 = 0;
      __label__ = 71;
      break;
    } else {
      __label__ = 68;
      break;
    }
   case 68:
    HEAP8[$arrayidx] = $hold_6 & 255;
    HEAP8[$arrayidx40] = $hold_6 >>> 8 & 255;
    var $76 = HEAP32[$16 >> 2];
    var $call302 = _crc32($76, $arrayidx, 2);
    HEAP32[$16 >> 2] = $call302;
    var $next_7 = $next_6;
    var $have_7 = $have_6;
    var $hold_7 = 0;
    var $bits_7 = 0;
    __label__ = 71;
    break;
   case 69:
    var $77 = HEAP32[$18 >> 2];
    if (($77 | 0) == 0) {
      var $next_7 = $next_5;
      var $have_7 = $have_5;
      var $hold_7 = $hold_5;
      var $bits_7 = $bits_5;
      __label__ = 71;
      break;
    } else {
      __label__ = 70;
      break;
    }
   case 70:
    var $extra = $77 + 16 | 0;
    HEAP32[$extra >> 2] = 0;
    var $next_7 = $next_5;
    var $have_7 = $have_5;
    var $hold_7 = $hold_5;
    var $bits_7 = $bits_5;
    __label__ = 71;
    break;
   case 71:
    var $bits_7;
    var $hold_7;
    var $have_7;
    var $next_7;
    HEAP32[$mode >> 2] = 5;
    var $next_8 = $next_7;
    var $have_8 = $have_7;
    var $hold_8 = $hold_7;
    var $bits_8 = $bits_7;
    __label__ = 72;
    break;
   case 72:
    var $bits_8;
    var $hold_8;
    var $have_8;
    var $next_8;
    var $78 = HEAPU32[$17 >> 2];
    if (($78 & 1024 | 0) == 0) {
      var $next_10 = $next_8;
      var $have_10 = $have_8;
      var $89 = $78;
      __label__ = 81;
      break;
    } else {
      __label__ = 73;
      break;
    }
   case 73:
    var $79 = HEAPU32[$21 >> 2];
    var $copy_0 = $79 >>> 0 > $have_8 >>> 0 ? $have_8 : $79;
    if (($copy_0 | 0) == 0) {
      var $next_9 = $next_8;
      var $have_9 = $have_8;
      var $88 = $79;
      var $87 = $78;
      __label__ = 80;
      break;
    } else {
      __label__ = 74;
      break;
    }
   case 74:
    var $80 = HEAPU32[$18 >> 2];
    if (($80 | 0) == 0) {
      var $84 = $78;
      __label__ = 77;
      break;
    } else {
      __label__ = 75;
      break;
    }
   case 75:
    var $81 = HEAP32[$80 + 16 >> 2];
    if (($81 | 0) == 0) {
      var $84 = $78;
      __label__ = 77;
      break;
    } else {
      __label__ = 76;
      break;
    }
   case 76:
    var $sub341 = HEAP32[$80 + 20 >> 2] - $79 | 0;
    var $add_ptr = $81 + $sub341 | 0;
    var $83 = HEAPU32[$80 + 24 >> 2];
    var $cond351 = ($sub341 + $copy_0 | 0) >>> 0 > $83 >>> 0 ? $83 - $sub341 | 0 : $copy_0;
    _zmemcpy($add_ptr, $next_8, $cond351);
    var $84 = HEAP32[$17 >> 2];
    __label__ = 77;
    break;
   case 77:
    var $84;
    if (($84 & 512 | 0) == 0) {
      __label__ = 79;
      break;
    } else {
      __label__ = 78;
      break;
    }
   case 78:
    var $85 = HEAP32[$16 >> 2];
    var $call358 = _crc32($85, $next_8, $copy_0);
    HEAP32[$16 >> 2] = $call358;
    __label__ = 79;
    break;
   case 79:
    var $sub361 = $have_8 - $copy_0 | 0;
    var $add_ptr362 = $next_8 + $copy_0 | 0;
    var $sub364 = HEAP32[$21 >> 2] - $copy_0 | 0;
    HEAP32[$21 >> 2] = $sub364;
    var $next_9 = $add_ptr362;
    var $have_9 = $sub361;
    var $88 = $sub364;
    var $87 = $84;
    __label__ = 80;
    break;
   case 80:
    var $87;
    var $88;
    var $have_9;
    var $next_9;
    if (($88 | 0) == 0) {
      var $next_10 = $next_9;
      var $have_10 = $have_9;
      var $89 = $87;
      __label__ = 81;
      break;
    } else {
      var $ret_8 = $ret_0;
      var $next_57 = $next_9;
      var $have_57 = $have_9;
      var $hold_53 = $hold_8;
      var $bits_53 = $bits_8;
      var $out_4 = $out_0;
      __label__ = 292;
      break;
    }
   case 81:
    var $89;
    var $have_10;
    var $next_10;
    HEAP32[$21 >> 2] = 0;
    HEAP32[$mode >> 2] = 6;
    var $next_11 = $next_10;
    var $have_11 = $have_10;
    var $hold_9 = $hold_8;
    var $bits_9 = $bits_8;
    var $90 = $89;
    __label__ = 82;
    break;
   case 82:
    var $90;
    var $bits_9;
    var $hold_9;
    var $have_11;
    var $next_11;
    if (($90 & 2048 | 0) == 0) {
      __label__ = 92;
      break;
    } else {
      __label__ = 83;
      break;
    }
   case 83:
    if (($have_11 | 0) == 0) {
      var $ret_8 = $ret_0;
      var $next_57 = $next_11;
      var $have_57 = 0;
      var $hold_53 = $hold_9;
      var $bits_53 = $bits_9;
      var $out_4 = $out_0;
      __label__ = 292;
      break;
    } else {
      var $copy_1 = 0;
      __label__ = 84;
      break;
    }
   case 84:
    var $copy_1;
    var $inc = $copy_1 + 1 | 0;
    var $91 = HEAP8[$next_11 + $copy_1 | 0];
    var $92 = HEAP32[$18 >> 2];
    if (($92 | 0) == 0) {
      __label__ = 88;
      break;
    } else {
      __label__ = 85;
      break;
    }
   case 85:
    var $name = $92 + 28 | 0;
    if ((HEAP32[$name >> 2] | 0) == 0) {
      __label__ = 88;
      break;
    } else {
      __label__ = 86;
      break;
    }
   case 86:
    var $94 = HEAPU32[$21 >> 2];
    if ($94 >>> 0 < HEAPU32[$92 + 32 >> 2] >>> 0) {
      __label__ = 87;
      break;
    } else {
      __label__ = 88;
      break;
    }
   case 87:
    HEAP32[$21 >> 2] = $94 + 1 | 0;
    HEAP8[HEAP32[$name >> 2] + $94 | 0] = $91;
    __label__ = 88;
    break;
   case 88:
    var $tobool405 = $91 << 24 >> 24 != 0;
    if ($tobool405 & $inc >>> 0 < $have_11 >>> 0) {
      var $copy_1 = $inc;
      __label__ = 84;
      break;
    } else {
      __label__ = 89;
      break;
    }
   case 89:
    if ((HEAP32[$17 >> 2] & 512 | 0) == 0) {
      __label__ = 91;
      break;
    } else {
      __label__ = 90;
      break;
    }
   case 90:
    var $98 = HEAP32[$16 >> 2];
    var $call414 = _crc32($98, $next_11, $inc);
    HEAP32[$16 >> 2] = $call414;
    __label__ = 91;
    break;
   case 91:
    var $sub417 = $have_11 - $inc | 0;
    var $add_ptr418 = $next_11 + $inc | 0;
    if ($tobool405) {
      var $ret_8 = $ret_0;
      var $next_57 = $add_ptr418;
      var $have_57 = $sub417;
      var $hold_53 = $hold_9;
      var $bits_53 = $bits_9;
      var $out_4 = $out_0;
      __label__ = 292;
      break;
    } else {
      var $next_12 = $add_ptr418;
      var $have_12 = $sub417;
      __label__ = 94;
      break;
    }
   case 92:
    var $99 = HEAP32[$18 >> 2];
    if (($99 | 0) == 0) {
      var $next_12 = $next_11;
      var $have_12 = $have_11;
      __label__ = 94;
      break;
    } else {
      __label__ = 93;
      break;
    }
   case 93:
    var $name428 = $99 + 28 | 0;
    HEAP32[$name428 >> 2] = 0;
    var $next_12 = $next_11;
    var $have_12 = $have_11;
    __label__ = 94;
    break;
   case 94:
    var $have_12;
    var $next_12;
    HEAP32[$21 >> 2] = 0;
    HEAP32[$mode >> 2] = 7;
    var $next_13 = $next_12;
    var $have_13 = $have_12;
    var $hold_10 = $hold_9;
    var $bits_10 = $bits_9;
    __label__ = 95;
    break;
   case 95:
    var $bits_10;
    var $hold_10;
    var $have_13;
    var $next_13;
    if ((HEAP32[$17 >> 2] & 4096 | 0) == 0) {
      __label__ = 105;
      break;
    } else {
      __label__ = 96;
      break;
    }
   case 96:
    if (($have_13 | 0) == 0) {
      var $ret_8 = $ret_0;
      var $next_57 = $next_13;
      var $have_57 = 0;
      var $hold_53 = $hold_10;
      var $bits_53 = $bits_10;
      var $out_4 = $out_0;
      __label__ = 292;
      break;
    } else {
      var $copy_2 = 0;
      __label__ = 97;
      break;
    }
   case 97:
    var $copy_2;
    var $inc443 = $copy_2 + 1 | 0;
    var $101 = HEAP8[$next_13 + $copy_2 | 0];
    var $102 = HEAP32[$18 >> 2];
    if (($102 | 0) == 0) {
      __label__ = 101;
      break;
    } else {
      __label__ = 98;
      break;
    }
   case 98:
    var $comment = $102 + 36 | 0;
    if ((HEAP32[$comment >> 2] | 0) == 0) {
      __label__ = 101;
      break;
    } else {
      __label__ = 99;
      break;
    }
   case 99:
    var $104 = HEAPU32[$21 >> 2];
    if ($104 >>> 0 < HEAPU32[$102 + 40 >> 2] >>> 0) {
      __label__ = 100;
      break;
    } else {
      __label__ = 101;
      break;
    }
   case 100:
    HEAP32[$21 >> 2] = $104 + 1 | 0;
    HEAP8[HEAP32[$comment >> 2] + $104 | 0] = $101;
    __label__ = 101;
    break;
   case 101:
    var $tobool467 = $101 << 24 >> 24 != 0;
    if ($tobool467 & $inc443 >>> 0 < $have_13 >>> 0) {
      var $copy_2 = $inc443;
      __label__ = 97;
      break;
    } else {
      __label__ = 102;
      break;
    }
   case 102:
    if ((HEAP32[$17 >> 2] & 512 | 0) == 0) {
      __label__ = 104;
      break;
    } else {
      __label__ = 103;
      break;
    }
   case 103:
    var $108 = HEAP32[$16 >> 2];
    var $call478 = _crc32($108, $next_13, $inc443);
    HEAP32[$16 >> 2] = $call478;
    __label__ = 104;
    break;
   case 104:
    var $sub481 = $have_13 - $inc443 | 0;
    var $add_ptr482 = $next_13 + $inc443 | 0;
    if ($tobool467) {
      var $ret_8 = $ret_0;
      var $next_57 = $add_ptr482;
      var $have_57 = $sub481;
      var $hold_53 = $hold_10;
      var $bits_53 = $bits_10;
      var $out_4 = $out_0;
      __label__ = 292;
      break;
    } else {
      var $next_14 = $add_ptr482;
      var $have_14 = $sub481;
      __label__ = 107;
      break;
    }
   case 105:
    var $109 = HEAP32[$18 >> 2];
    if (($109 | 0) == 0) {
      var $next_14 = $next_13;
      var $have_14 = $have_13;
      __label__ = 107;
      break;
    } else {
      __label__ = 106;
      break;
    }
   case 106:
    var $comment492 = $109 + 36 | 0;
    HEAP32[$comment492 >> 2] = 0;
    var $next_14 = $next_13;
    var $have_14 = $have_13;
    __label__ = 107;
    break;
   case 107:
    var $have_14;
    var $next_14;
    HEAP32[$mode >> 2] = 8;
    var $next_15 = $next_14;
    var $have_15 = $have_14;
    var $hold_11 = $hold_10;
    var $bits_11 = $bits_10;
    __label__ = 108;
    break;
   case 108:
    var $bits_11;
    var $hold_11;
    var $have_15;
    var $next_15;
    var $110 = HEAPU32[$17 >> 2];
    if (($110 & 512 | 0) == 0) {
      var $next_17 = $next_15;
      var $have_17 = $have_15;
      var $hold_13 = $hold_11;
      var $bits_13 = $bits_11;
      __label__ = 114;
      break;
    } else {
      var $next_16 = $next_15;
      var $have_16 = $have_15;
      var $hold_12 = $hold_11;
      var $bits_12 = $bits_11;
      __label__ = 109;
      break;
    }
   case 109:
    var $bits_12;
    var $hold_12;
    var $have_16;
    var $next_16;
    if ($bits_12 >>> 0 < 16) {
      __label__ = 110;
      break;
    } else {
      __label__ = 112;
      break;
    }
   case 110:
    if (($have_16 | 0) == 0) {
      var $ret_8 = $ret_0;
      var $next_57 = $next_16;
      var $have_57 = 0;
      var $hold_53 = $hold_12;
      var $bits_53 = $bits_12;
      var $out_4 = $out_0;
      __label__ = 292;
      break;
    } else {
      __label__ = 111;
      break;
    }
   case 111:
    var $add515 = ((HEAPU8[$next_16] & 255) << $bits_12) + $hold_12 | 0;
    var $next_16 = $next_16 + 1 | 0;
    var $have_16 = $have_16 - 1 | 0;
    var $hold_12 = $add515;
    var $bits_12 = $bits_12 + 8 | 0;
    __label__ = 109;
    break;
   case 112:
    if (($hold_12 | 0) == (HEAP32[$16 >> 2] & 65535 | 0)) {
      var $next_17 = $next_16;
      var $have_17 = $have_16;
      var $hold_13 = 0;
      var $bits_13 = 0;
      __label__ = 114;
      break;
    } else {
      __label__ = 113;
      break;
    }
   case 113:
    HEAP32[$msg >> 2] = STRING_TABLE.__str51287 | 0;
    HEAP32[$mode >> 2] = 29;
    var $ret_0_be = $ret_0;
    var $next_0_be = $next_16;
    var $put_0_be = $put_0;
    var $have_0_be = $have_16;
    var $left_0_be = $left_0;
    var $hold_0_be = $hold_12;
    var $bits_0_be = $bits_12;
    var $out_0_be = $out_0;
    __label__ = 15;
    break;
   case 114:
    var $bits_13;
    var $hold_13;
    var $have_17;
    var $next_17;
    var $113 = HEAPU32[$18 >> 2];
    if (($113 | 0) == 0) {
      __label__ = 116;
      break;
    } else {
      __label__ = 115;
      break;
    }
   case 115:
    HEAP32[$113 + 44 >> 2] = $110 >>> 9 & 1;
    var $done543 = HEAP32[$18 >> 2] + 48 | 0;
    HEAP32[$done543 >> 2] = 1;
    __label__ = 116;
    break;
   case 116:
    var $call545 = _crc32(0, 0, 0);
    HEAP32[$16 >> 2] = $call545;
    HEAP32[$adler >> 2] = $call545;
    HEAP32[$mode >> 2] = 11;
    var $ret_0_be = $ret_0;
    var $next_0_be = $next_17;
    var $put_0_be = $put_0;
    var $have_0_be = $have_17;
    var $left_0_be = $left_0;
    var $hold_0_be = $hold_13;
    var $bits_0_be = $bits_13;
    var $out_0_be = $out_0;
    __label__ = 15;
    break;
   case 117:
    var $bits_14;
    var $hold_14;
    var $have_18;
    var $next_18;
    if ($bits_14 >>> 0 < 32) {
      __label__ = 118;
      break;
    } else {
      __label__ = 120;
      break;
    }
   case 118:
    if (($have_18 | 0) == 0) {
      var $ret_8 = $ret_0;
      var $next_57 = $next_18;
      var $have_57 = 0;
      var $hold_53 = $hold_14;
      var $bits_53 = $bits_14;
      var $out_4 = $out_0;
      __label__ = 292;
      break;
    } else {
      __label__ = 119;
      break;
    }
   case 119:
    var $add564 = ((HEAPU8[$next_18] & 255) << $bits_14) + $hold_14 | 0;
    var $next_18 = $next_18 + 1 | 0;
    var $have_18 = $have_18 - 1 | 0;
    var $hold_14 = $add564;
    var $bits_14 = $bits_14 + 8 | 0;
    __label__ = 117;
    break;
   case 120:
    var $add581 = _llvm_bswap_i32($hold_14);
    HEAP32[$16 >> 2] = $add581;
    HEAP32[$adler >> 2] = $add581;
    HEAP32[$mode >> 2] = 10;
    var $next_19 = $next_18;
    var $have_19 = $have_18;
    var $hold_15 = 0;
    var $bits_15 = 0;
    __label__ = 121;
    break;
   case 121:
    var $bits_15;
    var $hold_15;
    var $have_19;
    var $next_19;
    if ((HEAP32[$22 >> 2] | 0) == 0) {
      __label__ = 122;
      break;
    } else {
      __label__ = 123;
      break;
    }
   case 122:
    HEAP32[$next_out >> 2] = $put_0;
    HEAP32[$avail_out >> 2] = $left_0;
    HEAP32[$next_in >> 2] = $next_19;
    HEAP32[$avail_in15 >> 2] = $have_19;
    HEAP32[$11 >> 2] = $hold_15;
    HEAP32[$13 >> 2] = $bits_15;
    var $retval_0 = 2;
    __label__ = 308;
    break;
   case 123:
    var $call602 = _adler32(0, 0, 0);
    HEAP32[$16 >> 2] = $call602;
    HEAP32[$adler >> 2] = $call602;
    HEAP32[$mode >> 2] = 11;
    var $next_20 = $next_19;
    var $have_20 = $have_19;
    var $hold_16 = $hold_15;
    var $bits_16 = $bits_15;
    __label__ = 124;
    break;
   case 124:
    var $bits_16;
    var $hold_16;
    var $have_20;
    var $next_20;
    if ($23) {
      var $ret_8 = $ret_0;
      var $next_57 = $next_20;
      var $have_57 = $have_20;
      var $hold_53 = $hold_16;
      var $bits_53 = $bits_16;
      var $out_4 = $out_0;
      __label__ = 292;
      break;
    } else {
      var $next_21 = $next_20;
      var $have_21 = $have_20;
      var $hold_17 = $hold_16;
      var $bits_17 = $bits_16;
      __label__ = 125;
      break;
    }
   case 125:
    var $bits_17;
    var $hold_17;
    var $have_21;
    var $next_21;
    if ((HEAP32[$24 >> 2] | 0) == 0) {
      var $next_22 = $next_21;
      var $have_22 = $have_21;
      var $hold_18 = $hold_17;
      var $bits_18 = $bits_17;
      __label__ = 127;
      break;
    } else {
      __label__ = 126;
      break;
    }
   case 126:
    var $and619 = $bits_17 & 7;
    HEAP32[$mode >> 2] = 26;
    var $ret_0_be = $ret_0;
    var $next_0_be = $next_21;
    var $put_0_be = $put_0;
    var $have_0_be = $have_21;
    var $left_0_be = $left_0;
    var $hold_0_be = $hold_17 >>> ($and619 >>> 0);
    var $bits_0_be = $bits_17 - $and619 | 0;
    var $out_0_be = $out_0;
    __label__ = 15;
    break;
   case 127:
    var $bits_18;
    var $hold_18;
    var $have_22;
    var $next_22;
    if ($bits_18 >>> 0 < 3) {
      __label__ = 128;
      break;
    } else {
      __label__ = 130;
      break;
    }
   case 128:
    if (($have_22 | 0) == 0) {
      var $ret_8 = $ret_0;
      var $next_57 = $next_22;
      var $have_57 = 0;
      var $hold_53 = $hold_18;
      var $bits_53 = $bits_18;
      var $out_4 = $out_0;
      __label__ = 292;
      break;
    } else {
      __label__ = 129;
      break;
    }
   case 129:
    var $add641 = ((HEAPU8[$next_22] & 255) << $bits_18) + $hold_18 | 0;
    var $next_22 = $next_22 + 1 | 0;
    var $have_22 = $have_22 - 1 | 0;
    var $hold_18 = $add641;
    var $bits_18 = $bits_18 + 8 | 0;
    __label__ = 127;
    break;
   case 130:
    HEAP32[$24 >> 2] = $hold_18 & 1;
    var $and655 = $hold_18 >>> 1 & 3;
    if (($and655 | 0) == 0) {
      __label__ = 131;
      break;
    } else if (($and655 | 0) == 1) {
      __label__ = 132;
      break;
    } else if (($and655 | 0) == 2) {
      __label__ = 134;
      break;
    } else if (($and655 | 0) == 3) {
      __label__ = 135;
      break;
    } else {
      __label__ = 136;
      break;
    }
   case 131:
    HEAP32[$mode >> 2] = 13;
    __label__ = 136;
    break;
   case 132:
    _fixedtables1309($4);
    HEAP32[$mode >> 2] = 19;
    if ($cmp660) {
      __label__ = 133;
      break;
    } else {
      __label__ = 136;
      break;
    }
   case 133:
    var $ret_8 = $ret_0;
    var $next_57 = $next_22;
    var $have_57 = $have_22;
    var $hold_53 = $hold_18 >>> 3;
    var $bits_53 = $bits_18 - 3 | 0;
    var $out_4 = $out_0;
    __label__ = 292;
    break;
   case 134:
    HEAP32[$mode >> 2] = 16;
    __label__ = 136;
    break;
   case 135:
    HEAP32[$msg >> 2] = STRING_TABLE.__str61288 | 0;
    HEAP32[$mode >> 2] = 29;
    __label__ = 136;
    break;
   case 136:
    var $ret_0_be = $ret_0;
    var $next_0_be = $next_22;
    var $put_0_be = $put_0;
    var $have_0_be = $have_22;
    var $left_0_be = $left_0;
    var $hold_0_be = $hold_18 >>> 3;
    var $bits_0_be = $bits_18 - 3 | 0;
    var $out_0_be = $out_0;
    __label__ = 15;
    break;
   case 137:
    var $and681 = $bits_0 & 7;
    var $next_23 = $next_0;
    var $have_23 = $have_0;
    var $hold_19 = $hold_0 >>> ($and681 >>> 0);
    var $bits_19 = $bits_0 - $and681 | 0;
    __label__ = 138;
    break;
   case 138:
    var $bits_19;
    var $hold_19;
    var $have_23;
    var $next_23;
    if ($bits_19 >>> 0 < 32) {
      __label__ = 139;
      break;
    } else {
      __label__ = 141;
      break;
    }
   case 139:
    if (($have_23 | 0) == 0) {
      var $ret_8 = $ret_0;
      var $next_57 = $next_23;
      var $have_57 = 0;
      var $hold_53 = $hold_19;
      var $bits_53 = $bits_19;
      var $out_4 = $out_0;
      __label__ = 292;
      break;
    } else {
      __label__ = 140;
      break;
    }
   case 140:
    var $add701 = ((HEAPU8[$next_23] & 255) << $bits_19) + $hold_19 | 0;
    var $next_23 = $next_23 + 1 | 0;
    var $have_23 = $have_23 - 1 | 0;
    var $hold_19 = $add701;
    var $bits_19 = $bits_19 + 8 | 0;
    __label__ = 138;
    break;
   case 141:
    var $and708 = $hold_19 & 65535;
    if (($and708 | 0) == ($hold_19 >>> 16 ^ 65535 | 0)) {
      __label__ = 143;
      break;
    } else {
      __label__ = 142;
      break;
    }
   case 142:
    HEAP32[$msg >> 2] = STRING_TABLE.__str71289 | 0;
    HEAP32[$mode >> 2] = 29;
    var $ret_0_be = $ret_0;
    var $next_0_be = $next_23;
    var $put_0_be = $put_0;
    var $have_0_be = $have_23;
    var $left_0_be = $left_0;
    var $hold_0_be = $hold_19;
    var $bits_0_be = $bits_19;
    var $out_0_be = $out_0;
    __label__ = 15;
    break;
   case 143:
    HEAP32[$21 >> 2] = $and708;
    HEAP32[$mode >> 2] = 14;
    if ($cmp660) {
      var $ret_8 = $ret_0;
      var $next_57 = $next_23;
      var $have_57 = $have_23;
      var $hold_53 = 0;
      var $bits_53 = 0;
      var $out_4 = $out_0;
      __label__ = 292;
      break;
    } else {
      var $next_24 = $next_23;
      var $have_24 = $have_23;
      var $hold_20 = 0;
      var $bits_20 = 0;
      __label__ = 144;
      break;
    }
   case 144:
    var $bits_20;
    var $hold_20;
    var $have_24;
    var $next_24;
    HEAP32[$mode >> 2] = 15;
    var $next_25 = $next_24;
    var $have_25 = $have_24;
    var $hold_21 = $hold_20;
    var $bits_21 = $bits_20;
    __label__ = 145;
    break;
   case 145:
    var $bits_21;
    var $hold_21;
    var $have_25;
    var $next_25;
    var $120 = HEAPU32[$21 >> 2];
    if (($120 | 0) == 0) {
      __label__ = 148;
      break;
    } else {
      __label__ = 146;
      break;
    }
   case 146:
    var $copy_3 = $120 >>> 0 > $have_25 >>> 0 ? $have_25 : $120;
    var $copy_4 = $copy_3 >>> 0 > $left_0 >>> 0 ? $left_0 : $copy_3;
    if (($copy_4 | 0) == 0) {
      var $ret_8 = $ret_0;
      var $next_57 = $next_25;
      var $have_57 = $have_25;
      var $hold_53 = $hold_21;
      var $bits_53 = $bits_21;
      var $out_4 = $out_0;
      __label__ = 292;
      break;
    } else {
      __label__ = 147;
      break;
    }
   case 147:
    _zmemcpy($put_0, $next_25, $copy_4);
    var $sub744 = $have_25 - $copy_4 | 0;
    var $add_ptr745 = $next_25 + $copy_4 | 0;
    var $sub746 = $left_0 - $copy_4 | 0;
    var $add_ptr747 = $put_0 + $copy_4 | 0;
    var $sub749 = HEAP32[$21 >> 2] - $copy_4 | 0;
    HEAP32[$21 >> 2] = $sub749;
    var $ret_0_be = $ret_0;
    var $next_0_be = $add_ptr745;
    var $put_0_be = $add_ptr747;
    var $have_0_be = $sub744;
    var $left_0_be = $sub746;
    var $hold_0_be = $hold_21;
    var $bits_0_be = $bits_21;
    var $out_0_be = $out_0;
    __label__ = 15;
    break;
   case 148:
    HEAP32[$mode >> 2] = 11;
    var $ret_0_be = $ret_0;
    var $next_0_be = $next_25;
    var $put_0_be = $put_0;
    var $have_0_be = $have_25;
    var $left_0_be = $left_0;
    var $hold_0_be = $hold_21;
    var $bits_0_be = $bits_21;
    var $out_0_be = $out_0;
    __label__ = 15;
    break;
   case 149:
    var $bits_22;
    var $hold_22;
    var $have_26;
    var $next_26;
    if ($bits_22 >>> 0 < 14) {
      __label__ = 150;
      break;
    } else {
      __label__ = 152;
      break;
    }
   case 150:
    if (($have_26 | 0) == 0) {
      var $ret_8 = $ret_0;
      var $next_57 = $next_26;
      var $have_57 = 0;
      var $hold_53 = $hold_22;
      var $bits_53 = $bits_22;
      var $out_4 = $out_0;
      __label__ = 292;
      break;
    } else {
      __label__ = 151;
      break;
    }
   case 151:
    var $add767 = ((HEAPU8[$next_26] & 255) << $bits_22) + $hold_22 | 0;
    var $next_26 = $next_26 + 1 | 0;
    var $have_26 = $have_26 - 1 | 0;
    var $hold_22 = $add767;
    var $bits_22 = $bits_22 + 8 | 0;
    __label__ = 149;
    break;
   case 152:
    var $add775 = ($hold_22 & 31) + 257 | 0;
    HEAP32[$38 >> 2] = $add775;
    var $add782 = ($hold_22 >>> 5 & 31) + 1 | 0;
    HEAP32[$39 >> 2] = $add782;
    HEAP32[$40 >> 2] = ($hold_22 >>> 10 & 15) + 4 | 0;
    var $shr791 = $hold_22 >>> 14;
    var $sub792 = $bits_22 - 14 | 0;
    if ($add775 >>> 0 > 286 | $add782 >>> 0 > 30) {
      __label__ = 153;
      break;
    } else {
      __label__ = 154;
      break;
    }
   case 153:
    HEAP32[$msg >> 2] = STRING_TABLE.__str81290 | 0;
    HEAP32[$mode >> 2] = 29;
    var $ret_0_be = $ret_0;
    var $next_0_be = $next_26;
    var $put_0_be = $put_0;
    var $have_0_be = $have_26;
    var $left_0_be = $left_0;
    var $hold_0_be = $shr791;
    var $bits_0_be = $sub792;
    var $out_0_be = $out_0;
    __label__ = 15;
    break;
   case 154:
    HEAP32[$41 >> 2] = 0;
    HEAP32[$mode >> 2] = 17;
    var $next_27 = $next_26;
    var $have_27 = $have_26;
    var $hold_23 = $shr791;
    var $bits_23 = $sub792;
    __label__ = 155;
    break;
   case 155:
    var $bits_23;
    var $hold_23;
    var $have_27;
    var $next_27;
    var $123 = HEAPU32[$41 >> 2];
    if ($123 >>> 0 < HEAPU32[$40 >> 2] >>> 0) {
      var $next_28 = $next_27;
      var $have_28 = $have_27;
      var $hold_24 = $hold_23;
      var $bits_24 = $bits_23;
      __label__ = 156;
      break;
    } else {
      __label__ = 160;
      break;
    }
   case 156:
    var $bits_24;
    var $hold_24;
    var $have_28;
    var $next_28;
    if ($bits_24 >>> 0 < 3) {
      __label__ = 157;
      break;
    } else {
      __label__ = 159;
      break;
    }
   case 157:
    if (($have_28 | 0) == 0) {
      var $ret_8 = $ret_0;
      var $next_57 = $next_28;
      var $have_57 = 0;
      var $hold_53 = $hold_24;
      var $bits_53 = $bits_24;
      var $out_4 = $out_0;
      __label__ = 292;
      break;
    } else {
      __label__ = 158;
      break;
    }
   case 158:
    var $add829 = ((HEAPU8[$next_28] & 255) << $bits_24) + $hold_24 | 0;
    var $next_28 = $next_28 + 1 | 0;
    var $have_28 = $have_28 - 1 | 0;
    var $hold_24 = $add829;
    var $bits_24 = $bits_24 + 8 | 0;
    __label__ = 156;
    break;
   case 159:
    HEAP32[$41 >> 2] = $123 + 1 | 0;
    HEAP16[$42 + ((HEAPU16[_inflate_order + ($123 << 1) >> 1] & 65535) << 1) >> 1] = $hold_24 & 65535 & 7;
    var $next_27 = $next_28;
    var $have_27 = $have_28;
    var $hold_23 = $hold_24 >>> 3;
    var $bits_23 = $bits_24 - 3 | 0;
    __label__ = 155;
    break;
   case 160:
    if ($123 >>> 0 < 19) {
      var $127 = $123;
      __label__ = 161;
      break;
    } else {
      __label__ = 162;
      break;
    }
   case 161:
    var $127;
    HEAP32[$41 >> 2] = $127 + 1 | 0;
    HEAP16[$42 + ((HEAPU16[_inflate_order + ($127 << 1) >> 1] & 65535) << 1) >> 1] = 0;
    var $_pr = HEAPU32[$41 >> 2];
    if ($_pr >>> 0 < 19) {
      var $127 = $_pr;
      __label__ = 161;
      break;
    } else {
      __label__ = 162;
      break;
    }
   case 162:
    HEAP32[$44 >> 2] = $arraydecay860_c;
    HEAP32[$45 >> 2] = $arraydecay860_c;
    HEAP32[$27 >> 2] = 7;
    var $call868 = _inflate_table(0, $arraydecay864, 19, $43, $27, $arraydecay867);
    if (($call868 | 0) == 0) {
      __label__ = 164;
      break;
    } else {
      __label__ = 163;
      break;
    }
   case 163:
    HEAP32[$msg >> 2] = STRING_TABLE.__str91291 | 0;
    HEAP32[$mode >> 2] = 29;
    var $ret_0_be = $call868;
    var $next_0_be = $next_27;
    var $put_0_be = $put_0;
    var $have_0_be = $have_27;
    var $left_0_be = $left_0;
    var $hold_0_be = $hold_23;
    var $bits_0_be = $bits_23;
    var $out_0_be = $out_0;
    __label__ = 15;
    break;
   case 164:
    HEAP32[$41 >> 2] = 0;
    HEAP32[$mode >> 2] = 18;
    var $ret_1_ph = 0;
    var $next_29_ph = $next_27;
    var $have_29_ph = $have_27;
    var $hold_25_ph = $hold_23;
    var $bits_25_ph = $bits_23;
    __label__ = 165;
    break;
   case 165:
    var $bits_25_ph;
    var $hold_25_ph;
    var $have_29_ph;
    var $next_29_ph;
    var $ret_1_ph;
    var $next_29 = $next_29_ph;
    var $have_29 = $have_29_ph;
    var $hold_25 = $hold_25_ph;
    var $bits_25 = $bits_25_ph;
    __label__ = 166;
    break;
   case 166:
    var $bits_25;
    var $hold_25;
    var $have_29;
    var $next_29;
    var $129 = HEAPU32[$41 >> 2];
    var $130 = HEAPU32[$38 >> 2];
    var $add881 = HEAP32[$39 >> 2] + $130 | 0;
    if ($129 >>> 0 < $add881 >>> 0) {
      __label__ = 167;
      break;
    } else {
      __label__ = 195;
      break;
    }
   case 167:
    var $sub888 = (1 << HEAP32[$27 >> 2]) - 1 | 0;
    var $133 = HEAPU32[$28 >> 2];
    var $next_30 = $next_29;
    var $have_30 = $have_29;
    var $hold_26 = $hold_25;
    var $bits_26 = $bits_25;
    __label__ = 168;
    break;
   case 168:
    var $bits_26;
    var $hold_26;
    var $have_30;
    var $next_30;
    var $and889 = $sub888 & $hold_26;
    var $conv893 = HEAPU8[$133 + ($and889 << 2) + 1 | 0] & 255;
    if ($conv893 >>> 0 > $bits_26 >>> 0) {
      __label__ = 169;
      break;
    } else {
      __label__ = 171;
      break;
    }
   case 169:
    if (($have_30 | 0) == 0) {
      var $ret_8 = $ret_1_ph;
      var $next_57 = $next_30;
      var $have_57 = 0;
      var $hold_53 = $hold_26;
      var $bits_53 = $bits_26;
      var $out_4 = $out_0;
      __label__ = 292;
      break;
    } else {
      __label__ = 170;
      break;
    }
   case 170:
    var $add907 = ((HEAPU8[$next_30] & 255) << $bits_26) + $hold_26 | 0;
    var $next_30 = $next_30 + 1 | 0;
    var $have_30 = $have_30 - 1 | 0;
    var $hold_26 = $add907;
    var $bits_26 = $bits_26 + 8 | 0;
    __label__ = 168;
    break;
   case 171:
    var $tmp26 = HEAPU16[$133 + ($and889 << 2) + 2 >> 1];
    if (($tmp26 & 65535) < 16) {
      __label__ = 172;
      break;
    } else {
      __label__ = 173;
      break;
    }
   case 172:
    var $shr918 = $hold_26 >>> ($conv893 >>> 0);
    var $sub921 = $bits_26 - $conv893 | 0;
    HEAP32[$41 >> 2] = $129 + 1 | 0;
    HEAP16[$42 + ($129 << 1) >> 1] = $tmp26;
    var $next_29 = $next_30;
    var $have_29 = $have_30;
    var $hold_25 = $shr918;
    var $bits_25 = $sub921;
    __label__ = 166;
    break;
   case 173:
    if ($tmp26 << 16 >> 16 == 16) {
      __label__ = 174;
      break;
    } else if ($tmp26 << 16 >> 16 == 17) {
      __label__ = 176;
      break;
    } else {
      __label__ = 175;
      break;
    }
   case 174:
    var $add939 = $conv893 + 2 | 0;
    var $next_31 = $next_30;
    var $have_31 = $have_30;
    var $hold_27 = $hold_26;
    var $bits_27 = $bits_26;
    __label__ = 177;
    break;
   case 175:
    var $add1038 = $conv893 + 7 | 0;
    var $next_33 = $next_30;
    var $have_33 = $have_30;
    var $hold_29 = $hold_26;
    var $bits_29 = $bits_26;
    __label__ = 187;
    break;
   case 176:
    var $add997 = $conv893 + 3 | 0;
    var $next_32 = $next_30;
    var $have_32 = $have_30;
    var $hold_28 = $hold_26;
    var $bits_28 = $bits_26;
    __label__ = 183;
    break;
   case 177:
    var $bits_27;
    var $hold_27;
    var $have_31;
    var $next_31;
    if ($bits_27 >>> 0 < $add939 >>> 0) {
      __label__ = 178;
      break;
    } else {
      __label__ = 180;
      break;
    }
   case 178:
    if (($have_31 | 0) == 0) {
      var $ret_8 = $ret_1_ph;
      var $next_57 = $next_31;
      var $have_57 = 0;
      var $hold_53 = $hold_27;
      var $bits_53 = $bits_27;
      var $out_4 = $out_0;
      __label__ = 292;
      break;
    } else {
      __label__ = 179;
      break;
    }
   case 179:
    var $add952 = ((HEAPU8[$next_31] & 255) << $bits_27) + $hold_27 | 0;
    var $next_31 = $next_31 + 1 | 0;
    var $have_31 = $have_31 - 1 | 0;
    var $hold_27 = $add952;
    var $bits_27 = $bits_27 + 8 | 0;
    __label__ = 177;
    break;
   case 180:
    var $shr962 = $hold_27 >>> ($conv893 >>> 0);
    var $sub965 = $bits_27 - $conv893 | 0;
    if (($129 | 0) == 0) {
      __label__ = 181;
      break;
    } else {
      __label__ = 182;
      break;
    }
   case 181:
    HEAP32[$msg >> 2] = STRING_TABLE.__str101292 | 0;
    HEAP32[$mode >> 2] = 29;
    var $ret_0_be = $ret_1_ph;
    var $next_0_be = $next_31;
    var $put_0_be = $put_0;
    var $have_0_be = $have_31;
    var $left_0_be = $left_0;
    var $hold_0_be = $shr962;
    var $bits_0_be = $sub965;
    var $out_0_be = $out_0;
    __label__ = 15;
    break;
   case 182:
    var $len_0 = HEAP16[$42 + ($129 - 1 << 1) >> 1];
    var $next_34 = $next_31;
    var $have_34 = $have_31;
    var $hold_30 = $shr962 >>> 2;
    var $bits_30 = $sub965 - 2 | 0;
    var $copy_5 = ($shr962 & 3) + 3 | 0;
    __label__ = 191;
    break;
   case 183:
    var $bits_28;
    var $hold_28;
    var $have_32;
    var $next_32;
    if ($bits_28 >>> 0 < $add997 >>> 0) {
      __label__ = 184;
      break;
    } else {
      __label__ = 186;
      break;
    }
   case 184:
    if (($have_32 | 0) == 0) {
      var $ret_8 = $ret_1_ph;
      var $next_57 = $next_32;
      var $have_57 = 0;
      var $hold_53 = $hold_28;
      var $bits_53 = $bits_28;
      var $out_4 = $out_0;
      __label__ = 292;
      break;
    } else {
      __label__ = 185;
      break;
    }
   case 185:
    var $add1010 = ((HEAPU8[$next_32] & 255) << $bits_28) + $hold_28 | 0;
    var $next_32 = $next_32 + 1 | 0;
    var $have_32 = $have_32 - 1 | 0;
    var $hold_28 = $add1010;
    var $bits_28 = $bits_28 + 8 | 0;
    __label__ = 183;
    break;
   case 186:
    var $shr1020 = $hold_28 >>> ($conv893 >>> 0);
    var $len_0 = 0;
    var $next_34 = $next_32;
    var $have_34 = $have_32;
    var $hold_30 = $shr1020 >>> 3;
    var $bits_30 = -3 - $conv893 + $bits_28 | 0;
    var $copy_5 = ($shr1020 & 7) + 3 | 0;
    __label__ = 191;
    break;
   case 187:
    var $bits_29;
    var $hold_29;
    var $have_33;
    var $next_33;
    if ($bits_29 >>> 0 < $add1038 >>> 0) {
      __label__ = 188;
      break;
    } else {
      __label__ = 190;
      break;
    }
   case 188:
    if (($have_33 | 0) == 0) {
      var $ret_8 = $ret_1_ph;
      var $next_57 = $next_33;
      var $have_57 = 0;
      var $hold_53 = $hold_29;
      var $bits_53 = $bits_29;
      var $out_4 = $out_0;
      __label__ = 292;
      break;
    } else {
      __label__ = 189;
      break;
    }
   case 189:
    var $add1051 = ((HEAPU8[$next_33] & 255) << $bits_29) + $hold_29 | 0;
    var $next_33 = $next_33 + 1 | 0;
    var $have_33 = $have_33 - 1 | 0;
    var $hold_29 = $add1051;
    var $bits_29 = $bits_29 + 8 | 0;
    __label__ = 187;
    break;
   case 190:
    var $shr1061 = $hold_29 >>> ($conv893 >>> 0);
    var $len_0 = 0;
    var $next_34 = $next_33;
    var $have_34 = $have_33;
    var $hold_30 = $shr1061 >>> 7;
    var $bits_30 = -7 - $conv893 + $bits_29 | 0;
    var $copy_5 = ($shr1061 & 127) + 11 | 0;
    __label__ = 191;
    break;
   case 191:
    var $copy_5;
    var $bits_30;
    var $hold_30;
    var $have_34;
    var $next_34;
    var $len_0;
    if (($129 + $copy_5 | 0) >>> 0 > $add881 >>> 0) {
      __label__ = 192;
      break;
    } else {
      var $copy_6128 = $copy_5;
      var $139 = $129;
      __label__ = 193;
      break;
    }
   case 192:
    HEAP32[$msg >> 2] = STRING_TABLE.__str101292 | 0;
    HEAP32[$mode >> 2] = 29;
    var $ret_0_be = $ret_1_ph;
    var $next_0_be = $next_34;
    var $put_0_be = $put_0;
    var $have_0_be = $have_34;
    var $left_0_be = $left_0;
    var $hold_0_be = $hold_30;
    var $bits_0_be = $bits_30;
    var $out_0_be = $out_0;
    __label__ = 15;
    break;
   case 193:
    var $139;
    var $copy_6128;
    var $dec1088 = $copy_6128 - 1 | 0;
    HEAP32[$41 >> 2] = $139 + 1 | 0;
    HEAP16[$42 + ($139 << 1) >> 1] = $len_0;
    if (($dec1088 | 0) == 0) {
      var $next_29 = $next_34;
      var $have_29 = $have_34;
      var $hold_25 = $hold_30;
      var $bits_25 = $bits_30;
      __label__ = 166;
      break;
    } else {
      __label__ = 194;
      break;
    }
   case 194:
    var $copy_6128 = $dec1088;
    var $139 = HEAP32[$41 >> 2];
    __label__ = 193;
    break;
   case 195:
    if ((HEAP32[$mode >> 2] | 0) == 29) {
      var $ret_0_be = $ret_1_ph;
      var $next_0_be = $next_29;
      var $put_0_be = $put_0;
      var $have_0_be = $have_29;
      var $left_0_be = $left_0;
      var $hold_0_be = $hold_25;
      var $bits_0_be = $bits_25;
      var $out_0_be = $out_0;
      __label__ = 15;
      break;
    } else {
      __label__ = 196;
      break;
    }
   case 196:
    if (HEAP16[$46 >> 1] << 16 >> 16 == 0) {
      __label__ = 197;
      break;
    } else {
      __label__ = 198;
      break;
    }
   case 197:
    HEAP32[$msg >> 2] = STRING_TABLE.__str111293 | 0;
    HEAP32[$mode >> 2] = 29;
    var $ret_0_be = $ret_1_ph;
    var $next_0_be = $next_29;
    var $put_0_be = $put_0;
    var $have_0_be = $have_29;
    var $left_0_be = $left_0;
    var $hold_0_be = $hold_25;
    var $bits_0_be = $bits_25;
    var $out_0_be = $out_0;
    __label__ = 15;
    break;
   case 198:
    HEAP32[$44 >> 2] = $arraydecay860_c;
    HEAP32[$45 >> 2] = $arraydecay860_c;
    HEAP32[$27 >> 2] = 9;
    var $call1126 = _inflate_table(1, $arraydecay864, $130, $43, $27, $arraydecay867);
    if (($call1126 | 0) == 0) {
      __label__ = 200;
      break;
    } else {
      __label__ = 199;
      break;
    }
   case 199:
    HEAP32[$msg >> 2] = STRING_TABLE.__str121294 | 0;
    HEAP32[$mode >> 2] = 29;
    var $ret_0_be = $call1126;
    var $next_0_be = $next_29;
    var $put_0_be = $put_0;
    var $have_0_be = $have_29;
    var $left_0_be = $left_0;
    var $hold_0_be = $hold_25;
    var $bits_0_be = $bits_25;
    var $out_0_be = $out_0;
    __label__ = 15;
    break;
   case 200:
    var $_c = HEAP32[$43 >> 2];
    HEAP32[$47 >> 2] = $_c;
    HEAP32[$48 >> 2] = 6;
    var $add_ptr1136 = $arraydecay864 + (HEAP32[$38 >> 2] << 1) | 0;
    var $143 = HEAP32[$39 >> 2];
    var $call1142 = _inflate_table(2, $add_ptr1136, $143, $43, $48, $arraydecay867);
    if (($call1142 | 0) == 0) {
      __label__ = 202;
      break;
    } else {
      __label__ = 201;
      break;
    }
   case 201:
    HEAP32[$msg >> 2] = STRING_TABLE.__str131295 | 0;
    HEAP32[$mode >> 2] = 29;
    var $ret_0_be = $call1142;
    var $next_0_be = $next_29;
    var $put_0_be = $put_0;
    var $have_0_be = $have_29;
    var $left_0_be = $left_0;
    var $hold_0_be = $hold_25;
    var $bits_0_be = $bits_25;
    var $out_0_be = $out_0;
    __label__ = 15;
    break;
   case 202:
    HEAP32[$mode >> 2] = 19;
    if ($cmp660) {
      var $ret_8 = 0;
      var $next_57 = $next_29;
      var $have_57 = $have_29;
      var $hold_53 = $hold_25;
      var $bits_53 = $bits_25;
      var $out_4 = $out_0;
      __label__ = 292;
      break;
    } else {
      var $ret_2 = 0;
      var $next_36 = $next_29;
      var $have_36 = $have_29;
      var $hold_32 = $hold_25;
      var $bits_32 = $bits_25;
      __label__ = 203;
      break;
    }
   case 203:
    var $bits_32;
    var $hold_32;
    var $have_36;
    var $next_36;
    var $ret_2;
    HEAP32[$mode >> 2] = 20;
    var $ret_3 = $ret_2;
    var $next_37 = $next_36;
    var $have_37 = $have_36;
    var $hold_33 = $hold_32;
    var $bits_33 = $bits_32;
    __label__ = 204;
    break;
   case 204:
    var $bits_33;
    var $hold_33;
    var $have_37;
    var $next_37;
    var $ret_3;
    if ($have_37 >>> 0 > 5 & $left_0 >>> 0 > 257) {
      __label__ = 205;
      break;
    } else {
      __label__ = 207;
      break;
    }
   case 205:
    HEAP32[$next_out >> 2] = $put_0;
    HEAP32[$avail_out >> 2] = $left_0;
    HEAP32[$next_in >> 2] = $next_37;
    HEAP32[$avail_in15 >> 2] = $have_37;
    HEAP32[$11 >> 2] = $hold_33;
    HEAP32[$13 >> 2] = $bits_33;
    _inflate_fast($25, $out_0);
    var $144 = HEAP32[$next_out >> 2];
    var $145 = HEAP32[$avail_out >> 2];
    var $146 = HEAP32[$next_in >> 2];
    var $147 = HEAP32[$avail_in15 >> 2];
    var $148 = HEAP32[$11 >> 2];
    var $149 = HEAP32[$13 >> 2];
    if ((HEAP32[$mode >> 2] | 0) == 11) {
      __label__ = 206;
      break;
    } else {
      var $ret_0_be = $ret_3;
      var $next_0_be = $146;
      var $put_0_be = $144;
      var $have_0_be = $147;
      var $left_0_be = $145;
      var $hold_0_be = $148;
      var $bits_0_be = $149;
      var $out_0_be = $out_0;
      __label__ = 15;
      break;
    }
   case 206:
    HEAP32[$26 >> 2] = -1;
    var $ret_0_be = $ret_3;
    var $next_0_be = $146;
    var $put_0_be = $144;
    var $have_0_be = $147;
    var $left_0_be = $145;
    var $hold_0_be = $148;
    var $bits_0_be = $149;
    var $out_0_be = $out_0;
    __label__ = 15;
    break;
   case 207:
    HEAP32[$26 >> 2] = 0;
    var $sub1190 = (1 << HEAP32[$27 >> 2]) - 1 | 0;
    var $152 = HEAPU32[$28 >> 2];
    var $next_38 = $next_37;
    var $have_38 = $have_37;
    var $hold_34 = $hold_33;
    var $bits_34 = $bits_33;
    __label__ = 208;
    break;
   case 208:
    var $bits_34;
    var $hold_34;
    var $have_38;
    var $next_38;
    var $and1191 = $sub1190 & $hold_34;
    var $tmp22 = HEAPU8[$152 + ($and1191 << 2) + 1 | 0];
    var $conv1195 = $tmp22 & 255;
    if ($conv1195 >>> 0 > $bits_34 >>> 0) {
      __label__ = 209;
      break;
    } else {
      __label__ = 211;
      break;
    }
   case 209:
    if (($have_38 | 0) == 0) {
      var $ret_8 = $ret_3;
      var $next_57 = $next_38;
      var $have_57 = 0;
      var $hold_53 = $hold_34;
      var $bits_53 = $bits_34;
      var $out_4 = $out_0;
      __label__ = 292;
      break;
    } else {
      __label__ = 210;
      break;
    }
   case 210:
    var $add1209 = ((HEAPU8[$next_38] & 255) << $bits_34) + $hold_34 | 0;
    var $next_38 = $next_38 + 1 | 0;
    var $have_38 = $have_38 - 1 | 0;
    var $hold_34 = $add1209;
    var $bits_34 = $bits_34 + 8 | 0;
    __label__ = 208;
    break;
   case 211:
    var $tmp21 = HEAPU8[$152 + ($and1191 << 2) | 0];
    var $tmp23 = HEAPU16[$152 + ($and1191 << 2) + 2 >> 1];
    var $conv1214 = $tmp21 & 255;
    if ($tmp21 << 24 >> 24 == 0) {
      var $next_40 = $next_38;
      var $have_40 = $have_38;
      var $hold_36 = $hold_34;
      var $bits_36 = $bits_34;
      var $here_09_0 = 0;
      var $here_110_0 = $tmp22;
      var $here_211_0 = $tmp23;
      var $155 = 0;
      __label__ = 218;
      break;
    } else {
      __label__ = 212;
      break;
    }
   case 212:
    if (($conv1214 & 240 | 0) == 0) {
      __label__ = 213;
      break;
    } else {
      var $next_40 = $next_38;
      var $have_40 = $have_38;
      var $hold_36 = $hold_34;
      var $bits_36 = $bits_34;
      var $here_09_0 = $tmp21;
      var $here_110_0 = $tmp22;
      var $here_211_0 = $tmp23;
      var $155 = 0;
      __label__ = 218;
      break;
    }
   case 213:
    var $conv1225 = $tmp23 & 65535;
    var $sub1232 = (1 << $conv1195 + $conv1214) - 1 | 0;
    var $next_39 = $next_38;
    var $have_39 = $have_38;
    var $hold_35 = $hold_34;
    var $bits_35 = $bits_34;
    __label__ = 214;
    break;
   case 214:
    var $bits_35;
    var $hold_35;
    var $have_39;
    var $next_39;
    var $add1237 = (($hold_35 & $sub1232) >>> ($conv1195 >>> 0)) + $conv1225 | 0;
    var $tmp19 = HEAPU8[$152 + ($add1237 << 2) + 1 | 0];
    if ((($tmp19 & 255) + $conv1195 | 0) >>> 0 > $bits_35 >>> 0) {
      __label__ = 215;
      break;
    } else {
      __label__ = 217;
      break;
    }
   case 215:
    if (($have_39 | 0) == 0) {
      var $ret_8 = $ret_3;
      var $next_57 = $next_39;
      var $have_57 = 0;
      var $hold_53 = $hold_35;
      var $bits_53 = $bits_35;
      var $out_4 = $out_0;
      __label__ = 292;
      break;
    } else {
      __label__ = 216;
      break;
    }
   case 216:
    var $add1258 = ((HEAPU8[$next_39] & 255) << $bits_35) + $hold_35 | 0;
    var $next_39 = $next_39 + 1 | 0;
    var $have_39 = $have_39 - 1 | 0;
    var $hold_35 = $add1258;
    var $bits_35 = $bits_35 + 8 | 0;
    __label__ = 214;
    break;
   case 217:
    var $tmp20 = HEAP16[$152 + ($add1237 << 2) + 2 >> 1];
    var $tmp18 = HEAP8[$152 + ($add1237 << 2) | 0];
    var $shr1266 = $hold_35 >>> ($conv1195 >>> 0);
    var $sub1269 = $bits_35 - $conv1195 | 0;
    HEAP32[$26 >> 2] = $conv1195;
    var $next_40 = $next_39;
    var $have_40 = $have_39;
    var $hold_36 = $shr1266;
    var $bits_36 = $sub1269;
    var $here_09_0 = $tmp18;
    var $here_110_0 = $tmp19;
    var $here_211_0 = $tmp20;
    var $155 = $conv1195;
    __label__ = 218;
    break;
   case 218:
    var $155;
    var $here_211_0;
    var $here_110_0;
    var $here_09_0;
    var $bits_36;
    var $hold_36;
    var $have_40;
    var $next_40;
    var $conv1279 = $here_110_0 & 255;
    var $shr1280 = $hold_36 >>> ($conv1279 >>> 0);
    var $sub1283 = $bits_36 - $conv1279 | 0;
    HEAP32[$26 >> 2] = $155 + $conv1279 | 0;
    HEAP32[$21 >> 2] = $here_211_0 & 65535;
    var $conv1294 = $here_09_0 & 255;
    if ($here_09_0 << 24 >> 24 == 0) {
      __label__ = 219;
      break;
    } else {
      __label__ = 220;
      break;
    }
   case 219:
    HEAP32[$mode >> 2] = 25;
    var $ret_0_be = $ret_3;
    var $next_0_be = $next_40;
    var $put_0_be = $put_0;
    var $have_0_be = $have_40;
    var $left_0_be = $left_0;
    var $hold_0_be = $shr1280;
    var $bits_0_be = $sub1283;
    var $out_0_be = $out_0;
    __label__ = 15;
    break;
   case 220:
    if (($conv1294 & 32 | 0) == 0) {
      __label__ = 222;
      break;
    } else {
      __label__ = 221;
      break;
    }
   case 221:
    HEAP32[$26 >> 2] = -1;
    HEAP32[$mode >> 2] = 11;
    var $ret_0_be = $ret_3;
    var $next_0_be = $next_40;
    var $put_0_be = $put_0;
    var $have_0_be = $have_40;
    var $left_0_be = $left_0;
    var $hold_0_be = $shr1280;
    var $bits_0_be = $sub1283;
    var $out_0_be = $out_0;
    __label__ = 15;
    break;
   case 222:
    if (($conv1294 & 64 | 0) == 0) {
      __label__ = 224;
      break;
    } else {
      __label__ = 223;
      break;
    }
   case 223:
    HEAP32[$msg >> 2] = STRING_TABLE.__str141296 | 0;
    HEAP32[$mode >> 2] = 29;
    var $ret_0_be = $ret_3;
    var $next_0_be = $next_40;
    var $put_0_be = $put_0;
    var $have_0_be = $have_40;
    var $left_0_be = $left_0;
    var $hold_0_be = $shr1280;
    var $bits_0_be = $sub1283;
    var $out_0_be = $out_0;
    __label__ = 15;
    break;
   case 224:
    var $and1318 = $conv1294 & 15;
    HEAP32[$29 >> 2] = $and1318;
    HEAP32[$mode >> 2] = 21;
    var $ret_4 = $ret_3;
    var $next_41 = $next_40;
    var $have_41 = $have_40;
    var $hold_37 = $shr1280;
    var $bits_37 = $sub1283;
    var $156 = $and1318;
    __label__ = 225;
    break;
   case 225:
    var $156;
    var $bits_37;
    var $hold_37;
    var $have_41;
    var $next_41;
    var $ret_4;
    if (($156 | 0) == 0) {
      __label__ = 226;
      break;
    } else {
      var $next_42 = $next_41;
      var $have_42 = $have_41;
      var $hold_38 = $hold_37;
      var $bits_38 = $bits_37;
      __label__ = 227;
      break;
    }
   case 226:
    var $next_43 = $next_41;
    var $have_43 = $have_41;
    var $hold_39 = $hold_37;
    var $bits_39 = $bits_37;
    var $160 = HEAP32[$21 >> 2];
    __label__ = 231;
    break;
   case 227:
    var $bits_38;
    var $hold_38;
    var $have_42;
    var $next_42;
    if ($bits_38 >>> 0 < $156 >>> 0) {
      __label__ = 228;
      break;
    } else {
      __label__ = 230;
      break;
    }
   case 228:
    if (($have_42 | 0) == 0) {
      var $ret_8 = $ret_4;
      var $next_57 = $next_42;
      var $have_57 = 0;
      var $hold_53 = $hold_38;
      var $bits_53 = $bits_38;
      var $out_4 = $out_0;
      __label__ = 292;
      break;
    } else {
      __label__ = 229;
      break;
    }
   case 229:
    var $add1340 = ((HEAPU8[$next_42] & 255) << $bits_38) + $hold_38 | 0;
    var $next_42 = $next_42 + 1 | 0;
    var $have_42 = $have_42 - 1 | 0;
    var $hold_38 = $add1340;
    var $bits_38 = $bits_38 + 8 | 0;
    __label__ = 227;
    break;
   case 230:
    var $add1352 = HEAP32[$21 >> 2] + ((1 << $156) - 1 & $hold_38) | 0;
    HEAP32[$21 >> 2] = $add1352;
    var $add1362 = HEAP32[$26 >> 2] + $156 | 0;
    HEAP32[$26 >> 2] = $add1362;
    var $next_43 = $next_42;
    var $have_43 = $have_42;
    var $hold_39 = $hold_38 >>> ($156 >>> 0);
    var $bits_39 = $bits_38 - $156 | 0;
    var $160 = $add1352;
    __label__ = 231;
    break;
   case 231:
    var $160;
    var $bits_39;
    var $hold_39;
    var $have_43;
    var $next_43;
    HEAP32[$30 >> 2] = $160;
    HEAP32[$mode >> 2] = 22;
    var $ret_5_ph = $ret_4;
    var $next_44_ph = $next_43;
    var $have_44_ph = $have_43;
    var $hold_40_ph = $hold_39;
    var $bits_40_ph = $bits_39;
    __label__ = 232;
    break;
   case 232:
    var $bits_40_ph;
    var $hold_40_ph;
    var $have_44_ph;
    var $next_44_ph;
    var $ret_5_ph;
    var $sub1370 = (1 << HEAP32[$48 >> 2]) - 1 | 0;
    var $162 = HEAPU32[$49 >> 2];
    var $next_44 = $next_44_ph;
    var $have_44 = $have_44_ph;
    var $hold_40 = $hold_40_ph;
    var $bits_40 = $bits_40_ph;
    __label__ = 233;
    break;
   case 233:
    var $bits_40;
    var $hold_40;
    var $have_44;
    var $next_44;
    var $and1371 = $sub1370 & $hold_40;
    var $tmp16 = HEAPU8[$162 + ($and1371 << 2) + 1 | 0];
    var $conv1375 = $tmp16 & 255;
    if ($conv1375 >>> 0 > $bits_40 >>> 0) {
      __label__ = 234;
      break;
    } else {
      __label__ = 236;
      break;
    }
   case 234:
    if (($have_44 | 0) == 0) {
      var $ret_8 = $ret_5_ph;
      var $next_57 = $next_44;
      var $have_57 = 0;
      var $hold_53 = $hold_40;
      var $bits_53 = $bits_40;
      var $out_4 = $out_0;
      __label__ = 292;
      break;
    } else {
      __label__ = 235;
      break;
    }
   case 235:
    var $add1389 = ((HEAPU8[$next_44] & 255) << $bits_40) + $hold_40 | 0;
    var $next_44 = $next_44 + 1 | 0;
    var $have_44 = $have_44 - 1 | 0;
    var $hold_40 = $add1389;
    var $bits_40 = $bits_40 + 8 | 0;
    __label__ = 233;
    break;
   case 236:
    var $tmp15 = HEAPU8[$162 + ($and1371 << 2) | 0];
    var $tmp17 = HEAPU16[$162 + ($and1371 << 2) + 2 >> 1];
    var $conv1395 = $tmp15 & 255;
    if (($conv1395 & 240 | 0) == 0) {
      __label__ = 238;
      break;
    } else {
      __label__ = 237;
      break;
    }
   case 237:
    var $next_46 = $next_44;
    var $have_46 = $have_44;
    var $hold_42 = $hold_40;
    var $bits_42 = $bits_40;
    var $here_09_1 = $tmp15;
    var $here_110_1 = $tmp16;
    var $here_211_1 = $tmp17;
    var $166 = HEAP32[$26 >> 2];
    __label__ = 243;
    break;
   case 238:
    var $conv1402 = $tmp17 & 65535;
    var $sub1409 = (1 << $conv1375 + $conv1395) - 1 | 0;
    var $next_45 = $next_44;
    var $have_45 = $have_44;
    var $hold_41 = $hold_40;
    var $bits_41 = $bits_40;
    __label__ = 239;
    break;
   case 239:
    var $bits_41;
    var $hold_41;
    var $have_45;
    var $next_45;
    var $add1414 = (($hold_41 & $sub1409) >>> ($conv1375 >>> 0)) + $conv1402 | 0;
    var $tmp13 = HEAPU8[$162 + ($add1414 << 2) + 1 | 0];
    if ((($tmp13 & 255) + $conv1375 | 0) >>> 0 > $bits_41 >>> 0) {
      __label__ = 240;
      break;
    } else {
      __label__ = 242;
      break;
    }
   case 240:
    if (($have_45 | 0) == 0) {
      var $ret_8 = $ret_5_ph;
      var $next_57 = $next_45;
      var $have_57 = 0;
      var $hold_53 = $hold_41;
      var $bits_53 = $bits_41;
      var $out_4 = $out_0;
      __label__ = 292;
      break;
    } else {
      __label__ = 241;
      break;
    }
   case 241:
    var $add1435 = ((HEAPU8[$next_45] & 255) << $bits_41) + $hold_41 | 0;
    var $next_45 = $next_45 + 1 | 0;
    var $have_45 = $have_45 - 1 | 0;
    var $hold_41 = $add1435;
    var $bits_41 = $bits_41 + 8 | 0;
    __label__ = 239;
    break;
   case 242:
    var $tmp14 = HEAP16[$162 + ($add1414 << 2) + 2 >> 1];
    var $tmp12 = HEAP8[$162 + ($add1414 << 2) | 0];
    var $shr1443 = $hold_41 >>> ($conv1375 >>> 0);
    var $sub1446 = $bits_41 - $conv1375 | 0;
    var $add1452 = HEAP32[$26 >> 2] + $conv1375 | 0;
    HEAP32[$26 >> 2] = $add1452;
    var $next_46 = $next_45;
    var $have_46 = $have_45;
    var $hold_42 = $shr1443;
    var $bits_42 = $sub1446;
    var $here_09_1 = $tmp12;
    var $here_110_1 = $tmp13;
    var $here_211_1 = $tmp14;
    var $166 = $add1452;
    __label__ = 243;
    break;
   case 243:
    var $166;
    var $here_211_1;
    var $here_110_1;
    var $here_09_1;
    var $bits_42;
    var $hold_42;
    var $have_46;
    var $next_46;
    var $conv1456 = $here_110_1 & 255;
    var $shr1457 = $hold_42 >>> ($conv1456 >>> 0);
    var $sub1460 = $bits_42 - $conv1456 | 0;
    HEAP32[$26 >> 2] = $166 + $conv1456 | 0;
    var $conv1468 = $here_09_1 & 255;
    if (($conv1468 & 64 | 0) == 0) {
      __label__ = 245;
      break;
    } else {
      __label__ = 244;
      break;
    }
   case 244:
    HEAP32[$msg >> 2] = STRING_TABLE.__str151297 | 0;
    HEAP32[$mode >> 2] = 29;
    var $ret_0_be = $ret_5_ph;
    var $next_0_be = $next_46;
    var $put_0_be = $put_0;
    var $have_0_be = $have_46;
    var $left_0_be = $left_0;
    var $hold_0_be = $shr1457;
    var $bits_0_be = $sub1460;
    var $out_0_be = $out_0;
    __label__ = 15;
    break;
   case 245:
    HEAP32[$31 >> 2] = $here_211_1 & 65535;
    var $and1479 = $conv1468 & 15;
    HEAP32[$29 >> 2] = $and1479;
    HEAP32[$mode >> 2] = 23;
    var $ret_6 = $ret_5_ph;
    var $next_47 = $next_46;
    var $have_47 = $have_46;
    var $hold_43 = $shr1457;
    var $bits_43 = $sub1460;
    var $167 = $and1479;
    __label__ = 246;
    break;
   case 246:
    var $167;
    var $bits_43;
    var $hold_43;
    var $have_47;
    var $next_47;
    var $ret_6;
    if (($167 | 0) == 0) {
      var $next_49 = $next_47;
      var $have_49 = $have_47;
      var $hold_45 = $hold_43;
      var $bits_45 = $bits_43;
      __label__ = 251;
      break;
    } else {
      var $next_48 = $next_47;
      var $have_48 = $have_47;
      var $hold_44 = $hold_43;
      var $bits_44 = $bits_43;
      __label__ = 247;
      break;
    }
   case 247:
    var $bits_44;
    var $hold_44;
    var $have_48;
    var $next_48;
    if ($bits_44 >>> 0 < $167 >>> 0) {
      __label__ = 248;
      break;
    } else {
      __label__ = 250;
      break;
    }
   case 248:
    if (($have_48 | 0) == 0) {
      var $ret_8 = $ret_6;
      var $next_57 = $next_48;
      var $have_57 = 0;
      var $hold_53 = $hold_44;
      var $bits_53 = $bits_44;
      var $out_4 = $out_0;
      __label__ = 292;
      break;
    } else {
      __label__ = 249;
      break;
    }
   case 249:
    var $add1501 = ((HEAPU8[$next_48] & 255) << $bits_44) + $hold_44 | 0;
    var $next_48 = $next_48 + 1 | 0;
    var $have_48 = $have_48 - 1 | 0;
    var $hold_44 = $add1501;
    var $bits_44 = $bits_44 + 8 | 0;
    __label__ = 247;
    break;
   case 250:
    var $add1513 = HEAP32[$31 >> 2] + ((1 << $167) - 1 & $hold_44) | 0;
    HEAP32[$31 >> 2] = $add1513;
    var $add1523 = HEAP32[$26 >> 2] + $167 | 0;
    HEAP32[$26 >> 2] = $add1523;
    var $next_49 = $next_48;
    var $have_49 = $have_48;
    var $hold_45 = $hold_44 >>> ($167 >>> 0);
    var $bits_45 = $bits_44 - $167 | 0;
    __label__ = 251;
    break;
   case 251:
    var $bits_45;
    var $hold_45;
    var $have_49;
    var $next_49;
    HEAP32[$mode >> 2] = 24;
    var $ret_7 = $ret_6;
    var $next_50 = $next_49;
    var $have_50 = $have_49;
    var $hold_46 = $hold_45;
    var $bits_46 = $bits_45;
    __label__ = 252;
    break;
   case 252:
    var $bits_46;
    var $hold_46;
    var $have_50;
    var $next_50;
    var $ret_7;
    if (($left_0 | 0) == 0) {
      var $ret_8 = $ret_7;
      var $next_57 = $next_50;
      var $have_57 = $have_50;
      var $hold_53 = $hold_46;
      var $bits_53 = $bits_46;
      var $out_4 = $out_0;
      __label__ = 292;
      break;
    } else {
      __label__ = 253;
      break;
    }
   case 253:
    var $sub1531 = $out_0 - $left_0 | 0;
    var $171 = HEAPU32[$31 >> 2];
    if ($171 >>> 0 > $sub1531 >>> 0) {
      __label__ = 254;
      break;
    } else {
      __label__ = 262;
      break;
    }
   case 254:
    var $sub1537 = $171 - $sub1531 | 0;
    if ($sub1537 >>> 0 > HEAPU32[$32 >> 2] >>> 0) {
      __label__ = 255;
      break;
    } else {
      __label__ = 257;
      break;
    }
   case 255:
    if ((HEAP32[$33 >> 2] | 0) == 0) {
      __label__ = 257;
      break;
    } else {
      __label__ = 256;
      break;
    }
   case 256:
    HEAP32[$msg >> 2] = STRING_TABLE.__str161298 | 0;
    HEAP32[$mode >> 2] = 29;
    var $ret_0_be = $ret_7;
    var $next_0_be = $next_50;
    var $put_0_be = $put_0;
    var $have_0_be = $have_50;
    var $left_0_be = $left_0;
    var $hold_0_be = $hold_46;
    var $bits_0_be = $bits_46;
    var $out_0_be = $out_0;
    __label__ = 15;
    break;
   case 257:
    var $174 = HEAPU32[$34 >> 2];
    if ($sub1537 >>> 0 > $174 >>> 0) {
      __label__ = 258;
      break;
    } else {
      __label__ = 259;
      break;
    }
   case 258:
    var $sub1551 = $sub1537 - $174 | 0;
    var $from_0 = HEAP32[$35 >> 2] + (HEAP32[$36 >> 2] - $sub1551) | 0;
    var $copy_7 = $sub1551;
    __label__ = 260;
    break;
   case 259:
    var $from_0 = HEAP32[$35 >> 2] + ($174 - $sub1537) | 0;
    var $copy_7 = $sub1537;
    __label__ = 260;
    break;
   case 260:
    var $copy_7;
    var $from_0;
    var $178 = HEAPU32[$21 >> 2];
    if ($copy_7 >>> 0 > $178 >>> 0) {
      __label__ = 261;
      break;
    } else {
      var $from_1 = $from_0;
      var $copy_8 = $copy_7;
      var $180 = $178;
      __label__ = 263;
      break;
    }
   case 261:
    var $from_1 = $from_0;
    var $copy_8 = $178;
    var $180 = $178;
    __label__ = 263;
    break;
   case 262:
    var $179 = HEAP32[$21 >> 2];
    var $from_1 = $put_0 + -$171 | 0;
    var $copy_8 = $179;
    var $180 = $179;
    __label__ = 263;
    break;
   case 263:
    var $180;
    var $copy_8;
    var $from_1;
    var $copy_9 = $copy_8 >>> 0 > $left_0 >>> 0 ? $left_0 : $copy_8;
    HEAP32[$21 >> 2] = $180 - $copy_9 | 0;
    var $181 = $copy_8 ^ -1;
    var $182 = $left_0 ^ -1;
    var $umax = $181 >>> 0 > $182 >>> 0 ? $181 : $182;
    var $from_2 = $from_1;
    var $put_1 = $put_0;
    var $copy_10 = $copy_9;
    __label__ = 264;
    break;
   case 264:
    var $copy_10;
    var $put_1;
    var $from_2;
    var $184 = HEAP8[$from_2];
    HEAP8[$put_1] = $184;
    var $dec1582 = $copy_10 - 1 | 0;
    if (($dec1582 | 0) == 0) {
      __label__ = 265;
      break;
    } else {
      var $from_2 = $from_2 + 1 | 0;
      var $put_1 = $put_1 + 1 | 0;
      var $copy_10 = $dec1582;
      __label__ = 264;
      break;
    }
   case 265:
    var $sub1575 = $left_0 - $copy_9 | 0;
    var $scevgep605 = $put_0 + ($umax ^ -1) | 0;
    if ((HEAP32[$21 >> 2] | 0) == 0) {
      __label__ = 266;
      break;
    } else {
      var $ret_0_be = $ret_7;
      var $next_0_be = $next_50;
      var $put_0_be = $scevgep605;
      var $have_0_be = $have_50;
      var $left_0_be = $sub1575;
      var $hold_0_be = $hold_46;
      var $bits_0_be = $bits_46;
      var $out_0_be = $out_0;
      __label__ = 15;
      break;
    }
   case 266:
    HEAP32[$mode >> 2] = 20;
    var $ret_0_be = $ret_7;
    var $next_0_be = $next_50;
    var $put_0_be = $scevgep605;
    var $have_0_be = $have_50;
    var $left_0_be = $sub1575;
    var $hold_0_be = $hold_46;
    var $bits_0_be = $bits_46;
    var $out_0_be = $out_0;
    __label__ = 15;
    break;
   case 267:
    if (($left_0 | 0) == 0) {
      var $ret_8 = $ret_0;
      var $next_57 = $next_0;
      var $have_57 = $have_0;
      var $hold_53 = $hold_0;
      var $bits_53 = $bits_0;
      var $out_4 = $out_0;
      __label__ = 292;
      break;
    } else {
      __label__ = 268;
      break;
    }
   case 268:
    HEAP8[$put_0] = HEAP32[$21 >> 2] & 255;
    HEAP32[$mode >> 2] = 20;
    var $ret_0_be = $ret_0;
    var $next_0_be = $next_0;
    var $put_0_be = $put_0 + 1 | 0;
    var $have_0_be = $have_0;
    var $left_0_be = $left_0 - 1 | 0;
    var $hold_0_be = $hold_0;
    var $bits_0_be = $bits_0;
    var $out_0_be = $out_0;
    __label__ = 15;
    break;
   case 269:
    if ((HEAP32[$15 >> 2] | 0) == 0) {
      var $next_52 = $next_0;
      var $have_52 = $have_0;
      var $hold_48 = $hold_0;
      var $bits_48 = $bits_0;
      var $out_1 = $out_0;
      __label__ = 282;
      break;
    } else {
      var $next_51 = $next_0;
      var $have_51 = $have_0;
      var $hold_47 = $hold_0;
      var $bits_47 = $bits_0;
      __label__ = 270;
      break;
    }
   case 270:
    var $bits_47;
    var $hold_47;
    var $have_51;
    var $next_51;
    if ($bits_47 >>> 0 < 32) {
      __label__ = 271;
      break;
    } else {
      __label__ = 273;
      break;
    }
   case 271:
    if (($have_51 | 0) == 0) {
      var $ret_8 = $ret_0;
      var $next_57 = $next_51;
      var $have_57 = 0;
      var $hold_53 = $hold_47;
      var $bits_53 = $bits_47;
      var $out_4 = $out_0;
      __label__ = 292;
      break;
    } else {
      __label__ = 272;
      break;
    }
   case 272:
    var $add1619 = ((HEAPU8[$next_51] & 255) << $bits_47) + $hold_47 | 0;
    var $next_51 = $next_51 + 1 | 0;
    var $have_51 = $have_51 - 1 | 0;
    var $hold_47 = $add1619;
    var $bits_47 = $bits_47 + 8 | 0;
    __label__ = 270;
    break;
   case 273:
    var $sub1626 = $out_0 - $left_0 | 0;
    var $add1627 = HEAP32[$total_out >> 2] + $sub1626 | 0;
    HEAP32[$total_out >> 2] = $add1627;
    var $add1628 = HEAP32[$37 >> 2] + $sub1626 | 0;
    HEAP32[$37 >> 2] = $add1628;
    if (($out_0 | 0) == ($left_0 | 0)) {
      __label__ = 278;
      break;
    } else {
      __label__ = 274;
      break;
    }
   case 274:
    var $192 = HEAP32[$16 >> 2];
    var $add_ptr1636 = $put_0 + -$sub1626 | 0;
    if ((HEAP32[$17 >> 2] | 0) == 0) {
      __label__ = 276;
      break;
    } else {
      __label__ = 275;
      break;
    }
   case 275:
    var $call1637 = _crc32($192, $add_ptr1636, $sub1626);
    var $cond1644 = $call1637;
    __label__ = 277;
    break;
   case 276:
    var $call1642 = _adler32($192, $add_ptr1636, $sub1626);
    var $cond1644 = $call1642;
    __label__ = 277;
    break;
   case 277:
    var $cond1644;
    HEAP32[$16 >> 2] = $cond1644;
    HEAP32[$adler >> 2] = $cond1644;
    __label__ = 278;
    break;
   case 278:
    if ((HEAP32[$17 >> 2] | 0) == 0) {
      __label__ = 279;
      break;
    } else {
      var $cond1664 = $hold_47;
      __label__ = 280;
      break;
    }
   case 279:
    var $add1662 = _llvm_bswap_i32($hold_47);
    var $cond1664 = $add1662;
    __label__ = 280;
    break;
   case 280:
    var $cond1664;
    if (($cond1664 | 0) == (HEAP32[$16 >> 2] | 0)) {
      var $next_52 = $next_51;
      var $have_52 = $have_51;
      var $hold_48 = 0;
      var $bits_48 = 0;
      var $out_1 = $left_0;
      __label__ = 282;
      break;
    } else {
      __label__ = 281;
      break;
    }
   case 281:
    HEAP32[$msg >> 2] = STRING_TABLE.__str171299 | 0;
    HEAP32[$mode >> 2] = 29;
    var $ret_0_be = $ret_0;
    var $next_0_be = $next_51;
    var $put_0_be = $put_0;
    var $have_0_be = $have_51;
    var $left_0_be = $left_0;
    var $hold_0_be = $hold_47;
    var $bits_0_be = $bits_47;
    var $out_0_be = $left_0;
    __label__ = 15;
    break;
   case 282:
    var $out_1;
    var $bits_48;
    var $hold_48;
    var $have_52;
    var $next_52;
    HEAP32[$mode >> 2] = 27;
    var $next_53 = $next_52;
    var $have_53 = $have_52;
    var $hold_49 = $hold_48;
    var $bits_49 = $bits_48;
    var $out_2 = $out_1;
    __label__ = 283;
    break;
   case 283:
    var $out_2;
    var $bits_49;
    var $hold_49;
    var $have_53;
    var $next_53;
    if ((HEAP32[$15 >> 2] | 0) == 0) {
      var $next_55 = $next_53;
      var $have_55 = $have_53;
      var $hold_51 = $hold_49;
      var $bits_51 = $bits_49;
      __label__ = 290;
      break;
    } else {
      __label__ = 284;
      break;
    }
   case 284:
    if ((HEAP32[$17 >> 2] | 0) == 0) {
      var $next_55 = $next_53;
      var $have_55 = $have_53;
      var $hold_51 = $hold_49;
      var $bits_51 = $bits_49;
      __label__ = 290;
      break;
    } else {
      var $next_54 = $next_53;
      var $have_54 = $have_53;
      var $hold_50 = $hold_49;
      var $bits_50 = $bits_49;
      __label__ = 285;
      break;
    }
   case 285:
    var $bits_50;
    var $hold_50;
    var $have_54;
    var $next_54;
    if ($bits_50 >>> 0 < 32) {
      __label__ = 286;
      break;
    } else {
      __label__ = 288;
      break;
    }
   case 286:
    if (($have_54 | 0) == 0) {
      var $ret_8 = $ret_0;
      var $next_57 = $next_54;
      var $have_57 = 0;
      var $hold_53 = $hold_50;
      var $bits_53 = $bits_50;
      var $out_4 = $out_2;
      __label__ = 292;
      break;
    } else {
      __label__ = 287;
      break;
    }
   case 287:
    var $add1698 = ((HEAPU8[$next_54] & 255) << $bits_50) + $hold_50 | 0;
    var $next_54 = $next_54 + 1 | 0;
    var $have_54 = $have_54 - 1 | 0;
    var $hold_50 = $add1698;
    var $bits_50 = $bits_50 + 8 | 0;
    __label__ = 285;
    break;
   case 288:
    if (($hold_50 | 0) == (HEAP32[$37 >> 2] | 0)) {
      var $next_55 = $next_54;
      var $have_55 = $have_54;
      var $hold_51 = 0;
      var $bits_51 = 0;
      __label__ = 290;
      break;
    } else {
      __label__ = 289;
      break;
    }
   case 289:
    HEAP32[$msg >> 2] = STRING_TABLE.__str181300 | 0;
    HEAP32[$mode >> 2] = 29;
    var $ret_0_be = $ret_0;
    var $next_0_be = $next_54;
    var $put_0_be = $put_0;
    var $have_0_be = $have_54;
    var $left_0_be = $left_0;
    var $hold_0_be = $hold_50;
    var $bits_0_be = $bits_50;
    var $out_0_be = $out_2;
    __label__ = 15;
    break;
   case 290:
    var $bits_51;
    var $hold_51;
    var $have_55;
    var $next_55;
    HEAP32[$mode >> 2] = 28;
    var $ret_8 = 1;
    var $next_57 = $next_55;
    var $have_57 = $have_55;
    var $hold_53 = $hold_51;
    var $bits_53 = $bits_51;
    var $out_4 = $out_2;
    __label__ = 292;
    break;
   case 291:
    var $ret_8 = -3;
    var $next_57 = $next_0;
    var $have_57 = $have_0;
    var $hold_53 = $hold_0;
    var $bits_53 = $bits_0;
    var $out_4 = $out_0;
    __label__ = 292;
    break;
   case 292:
    var $out_4;
    var $bits_53;
    var $hold_53;
    var $have_57;
    var $next_57;
    var $ret_8;
    HEAP32[$next_out >> 2] = $put_0;
    HEAP32[$avail_out >> 2] = $left_0;
    HEAP32[$next_in >> 2] = $next_57;
    HEAP32[$avail_in15 >> 2] = $have_57;
    HEAP32[$11 >> 2] = $hold_53;
    HEAP32[$13 >> 2] = $bits_53;
    if ((HEAP32[$36 >> 2] | 0) == 0) {
      __label__ = 293;
      break;
    } else {
      __label__ = 296;
      break;
    }
   case 293:
    var $200 = HEAPU32[$avail_out >> 2];
    if (($out_4 | 0) == ($200 | 0)) {
      var $202 = $200;
      __label__ = 299;
      break;
    } else {
      __label__ = 294;
      break;
    }
   case 294:
    var $201 = HEAPU32[$mode >> 2];
    if ($201 >>> 0 < 29) {
      __label__ = 295;
      break;
    } else {
      var $202 = $200;
      __label__ = 299;
      break;
    }
   case 295:
    if ($201 >>> 0 > 25 & ($flush | 0) == 4) {
      var $202 = $200;
      __label__ = 299;
      break;
    } else {
      __label__ = 296;
      break;
    }
   case 296:
    var $call1749 = _updatewindow($strm, $out_4);
    if (($call1749 | 0) == 0) {
      __label__ = 297;
      break;
    } else {
      __label__ = 298;
      break;
    }
   case 297:
    var $202 = HEAP32[$avail_out >> 2];
    __label__ = 299;
    break;
   case 298:
    HEAP32[$mode >> 2] = 30;
    var $retval_0 = -4;
    __label__ = 308;
    break;
   case 299:
    var $202;
    var $203 = HEAPU32[$avail_in15 >> 2];
    var $sub1758 = $out_4 - $202 | 0;
    var $total_in = $strm + 8 | 0;
    var $add1759 = $10 - $203 + HEAP32[$total_in >> 2] | 0;
    HEAP32[$total_in >> 2] = $add1759;
    var $add1761 = HEAP32[$total_out >> 2] + $sub1758 | 0;
    HEAP32[$total_out >> 2] = $add1761;
    var $add1763 = HEAP32[$37 >> 2] + $sub1758 | 0;
    HEAP32[$37 >> 2] = $add1763;
    var $tobool1767 = ($out_4 | 0) == ($202 | 0);
    if ((HEAP32[$15 >> 2] | 0) == 0 | $tobool1767) {
      __label__ = 304;
      break;
    } else {
      __label__ = 300;
      break;
    }
   case 300:
    var $209 = HEAP32[$16 >> 2];
    var $add_ptr1775 = HEAP32[$next_out >> 2] + -$sub1758 | 0;
    if ((HEAP32[$17 >> 2] | 0) == 0) {
      __label__ = 302;
      break;
    } else {
      __label__ = 301;
      break;
    }
   case 301:
    var $call1776 = _crc32($209, $add_ptr1775, $sub1758);
    var $cond1784 = $call1776;
    __label__ = 303;
    break;
   case 302:
    var $call1782 = _adler32($209, $add_ptr1775, $sub1758);
    var $cond1784 = $call1782;
    __label__ = 303;
    break;
   case 303:
    var $cond1784;
    HEAP32[$16 >> 2] = $cond1784;
    HEAP32[$adler >> 2] = $cond1784;
    __label__ = 304;
    break;
   case 304:
    var $211 = HEAP32[$13 >> 2];
    var $cond1791 = (HEAP32[$24 >> 2] | 0) != 0 ? 64 : 0;
    var $213 = HEAP32[$mode >> 2];
    var $cond1796 = ($213 | 0) == 11 ? 128 : 0;
    if (($213 | 0) == 19) {
      var $214 = 256;
      __label__ = 306;
      break;
    } else {
      __label__ = 305;
      break;
    }
   case 305:
    var $phitmp = ($213 | 0) == 14 ? 256 : 0;
    var $214 = $phitmp;
    __label__ = 306;
    break;
   case 306:
    var $214;
    var $add1805 = $cond1791 + $211 + $cond1796 + $214 | 0;
    HEAP32[$strm + 44 >> 2] = $add1805;
    var $ret_9 = (($10 | 0) == ($203 | 0) & $tobool1767 | ($flush | 0) == 4) & ($ret_8 | 0) == 0 ? -5 : $ret_8;
    var $retval_0 = $ret_9;
    __label__ = 308;
    break;
   case 307:
    var $retval_0 = -2;
    __label__ = 308;
    break;
   case 308:
    var $retval_0;
    STACKTOP = __stackBase__;
    return $retval_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_inflate["X"] = 1;

function _fixedtables1309($state) {
  HEAP32[$state + 76 >> 2] = _fixedtables_lenfix1301 | 0;
  HEAP32[$state + 84 >> 2] = 9;
  HEAP32[$state + 80 >> 2] = _fixedtables_distfix1302 | 0;
  HEAP32[$state + 88 >> 2] = 5;
  return;
}

function _init_block($s) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $n_03 = 0;
    __label__ = 2;
    break;
   case 2:
    var $n_03;
    HEAP16[$s + 148 + ($n_03 << 2) >> 1] = 0;
    var $inc = $n_03 + 1 | 0;
    if (($inc | 0) == 286) {
      __label__ = 3;
      break;
    } else {
      var $n_03 = $inc;
      __label__ = 2;
      break;
    }
   case 3:
    HEAP16[$s + 2440 >> 1] = 0;
    HEAP16[$s + 2444 >> 1] = 0;
    HEAP16[$s + 2448 >> 1] = 0;
    HEAP16[$s + 2452 >> 1] = 0;
    HEAP16[$s + 2456 >> 1] = 0;
    HEAP16[$s + 2460 >> 1] = 0;
    HEAP16[$s + 2464 >> 1] = 0;
    HEAP16[$s + 2468 >> 1] = 0;
    HEAP16[$s + 2472 >> 1] = 0;
    HEAP16[$s + 2476 >> 1] = 0;
    HEAP16[$s + 2480 >> 1] = 0;
    HEAP16[$s + 2484 >> 1] = 0;
    HEAP16[$s + 2488 >> 1] = 0;
    HEAP16[$s + 2492 >> 1] = 0;
    HEAP16[$s + 2496 >> 1] = 0;
    HEAP16[$s + 2500 >> 1] = 0;
    HEAP16[$s + 2504 >> 1] = 0;
    HEAP16[$s + 2508 >> 1] = 0;
    HEAP16[$s + 2512 >> 1] = 0;
    HEAP16[$s + 2516 >> 1] = 0;
    HEAP16[$s + 2520 >> 1] = 0;
    HEAP16[$s + 2524 >> 1] = 0;
    HEAP16[$s + 2528 >> 1] = 0;
    HEAP16[$s + 2532 >> 1] = 0;
    HEAP16[$s + 2536 >> 1] = 0;
    HEAP16[$s + 2540 >> 1] = 0;
    HEAP16[$s + 2544 >> 1] = 0;
    HEAP16[$s + 2548 >> 1] = 0;
    HEAP16[$s + 2552 >> 1] = 0;
    HEAP16[$s + 2556 >> 1] = 0;
    HEAP16[$s + 2684 >> 1] = 0;
    HEAP16[$s + 2688 >> 1] = 0;
    HEAP16[$s + 2692 >> 1] = 0;
    HEAP16[$s + 2696 >> 1] = 0;
    HEAP16[$s + 2700 >> 1] = 0;
    HEAP16[$s + 2704 >> 1] = 0;
    HEAP16[$s + 2708 >> 1] = 0;
    HEAP16[$s + 2712 >> 1] = 0;
    HEAP16[$s + 2716 >> 1] = 0;
    HEAP16[$s + 2720 >> 1] = 0;
    HEAP16[$s + 2724 >> 1] = 0;
    HEAP16[$s + 2728 >> 1] = 0;
    HEAP16[$s + 2732 >> 1] = 0;
    HEAP16[$s + 2736 >> 1] = 0;
    HEAP16[$s + 2740 >> 1] = 0;
    HEAP16[$s + 2744 >> 1] = 0;
    HEAP16[$s + 2748 >> 1] = 0;
    HEAP16[$s + 2752 >> 1] = 0;
    HEAP16[$s + 2756 >> 1] = 0;
    HEAP16[$s + 1172 >> 1] = 1;
    HEAP32[$s + 5804 >> 2] = 0;
    HEAP32[$s + 5800 >> 2] = 0;
    HEAP32[$s + 5808 >> 2] = 0;
    HEAP32[$s + 5792 >> 2] = 0;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_init_block["X"] = 1;

function _bi_flush($s) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $bi_valid = $s + 5820 | 0;
    var $0 = HEAPU32[$bi_valid >> 2];
    if (($0 | 0) == 16) {
      __label__ = 2;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 2:
    var $bi_buf = $s + 5816 | 0;
    var $conv1 = HEAP16[$bi_buf >> 1] & 255;
    var $pending = $s + 20 | 0;
    var $2 = HEAP32[$pending >> 2];
    var $inc = $2 + 1 | 0;
    HEAP32[$pending >> 2] = $inc;
    var $pending_buf = $s + 8 | 0;
    HEAP8[HEAP32[$pending_buf >> 2] + $2 | 0] = $conv1;
    var $conv4 = (HEAPU16[$bi_buf >> 1] & 65535) >>> 8 & 255;
    var $5 = HEAPU32[$pending >> 2];
    HEAP32[$pending >> 2] = $5 + 1 | 0;
    HEAP8[HEAP32[$pending_buf >> 2] + $5 | 0] = $conv4;
    HEAP16[$bi_buf >> 1] = 0;
    HEAP32[$bi_valid >> 2] = 0;
    __label__ = 5;
    break;
   case 3:
    if (($0 | 0) > 7) {
      __label__ = 4;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 4:
    var $bi_buf15 = $s + 5816 | 0;
    var $conv16 = HEAP16[$bi_buf15 >> 1] & 255;
    var $pending17 = $s + 20 | 0;
    var $8 = HEAP32[$pending17 >> 2];
    var $inc18 = $8 + 1 | 0;
    HEAP32[$pending17 >> 2] = $inc18;
    HEAP8[HEAP32[$s + 8 >> 2] + $8 | 0] = $conv16;
    HEAP16[$bi_buf15 >> 1] = (HEAPU16[$bi_buf15 >> 1] & 65535) >>> 8;
    var $sub = HEAP32[$bi_valid >> 2] - 8 | 0;
    HEAP32[$bi_valid >> 2] = $sub;
    __label__ = 5;
    break;
   case 5:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _updatewindow($strm, $out) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $0 = HEAPU32[$strm + 28 >> 2];
    var $window = $0 + 52 | 0;
    var $1 = $window;
    var $2 = HEAP32[$1 >> 2];
    if (($2 | 0) == 0) {
      __label__ = 2;
      break;
    } else {
      var $8 = $2;
      __label__ = 3;
      break;
    }
   case 2:
    var $3 = HEAP32[$strm + 32 >> 2];
    var $4 = HEAP32[$strm + 40 >> 2];
    var $shl = 1 << HEAP32[$0 + 36 >> 2];
    var $call = FUNCTION_TABLE[$3]($4, $shl, 1);
    var $call_c = $call;
    HEAP32[$window >> 2] = $call_c;
    if (($call | 0) == 0) {
      var $retval_0 = 1;
      __label__ = 13;
      break;
    } else {
      var $8 = $call;
      __label__ = 3;
      break;
    }
   case 3:
    var $8;
    var $9 = $0 + 40 | 0;
    var $10 = HEAP32[$9 >> 2];
    if (($10 | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      var $15 = $10;
      __label__ = 5;
      break;
    }
   case 4:
    var $shl10 = 1 << HEAP32[$0 + 36 >> 2];
    HEAP32[$9 >> 2] = $shl10;
    HEAP32[$0 + 48 >> 2] = 0;
    HEAP32[$0 + 44 >> 2] = 0;
    var $15 = $shl10;
    __label__ = 5;
    break;
   case 5:
    var $15;
    var $sub = $out - HEAP32[$strm + 16 >> 2] | 0;
    if ($sub >>> 0 < $15 >>> 0) {
      __label__ = 7;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    var $add_ptr = HEAP32[$strm + 12 >> 2] + -$15 | 0;
    _zmemcpy($8, $add_ptr, $15);
    HEAP32[$0 + 48 >> 2] = 0;
    var $19 = HEAP32[$9 >> 2];
    HEAP32[$0 + 44 >> 2] = $19;
    var $retval_0 = 0;
    __label__ = 13;
    break;
   case 7:
    var $21 = $0 + 48 | 0;
    var $22 = HEAPU32[$21 >> 2];
    var $sub24 = $15 - $22 | 0;
    var $dist_0 = $sub24 >>> 0 > $sub >>> 0 ? $sub : $sub24;
    var $add_ptr30 = $8 + $22 | 0;
    var $next_out31 = $strm + 12 | 0;
    var $add_ptr33 = HEAP32[$next_out31 >> 2] + -$sub | 0;
    _zmemcpy($add_ptr30, $add_ptr33, $dist_0);
    var $sub34 = $sub - $dist_0 | 0;
    if (($sub | 0) == ($dist_0 | 0)) {
      __label__ = 9;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    var $24 = HEAP32[$1 >> 2];
    var $add_ptr39 = HEAP32[$next_out31 >> 2] + -$sub34 | 0;
    _zmemcpy($24, $add_ptr39, $sub34);
    HEAP32[$21 >> 2] = $sub34;
    var $26 = HEAP32[$9 >> 2];
    HEAP32[$0 + 44 >> 2] = $26;
    var $retval_0 = 0;
    __label__ = 13;
    break;
   case 9:
    var $add = HEAP32[$21 >> 2] + $dist_0 | 0;
    HEAP32[$21 >> 2] = $add;
    var $29 = HEAPU32[$9 >> 2];
    if (($add | 0) == ($29 | 0)) {
      __label__ = 10;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 10:
    HEAP32[$21 >> 2] = 0;
    __label__ = 11;
    break;
   case 11:
    var $30 = $0 + 44 | 0;
    var $31 = HEAPU32[$30 >> 2];
    if ($31 >>> 0 < $29 >>> 0) {
      __label__ = 12;
      break;
    } else {
      var $retval_0 = 0;
      __label__ = 13;
      break;
    }
   case 12:
    var $add56 = $31 + $dist_0 | 0;
    HEAP32[$30 >> 2] = $add56;
    var $retval_0 = 0;
    __label__ = 13;
    break;
   case 13:
    var $retval_0;
    return $retval_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_updatewindow["X"] = 1;

function _inflateEnd($strm) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($strm | 0) == 0) {
      __label__ = 7;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $state1 = $strm + 28 | 0;
    var $0 = HEAP32[$state1 >> 2];
    if (($0 | 0) == 0) {
      __label__ = 7;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $zfree = $strm + 36 | 0;
    var $1 = HEAP32[$zfree >> 2];
    if (($1 | 0) == 0) {
      __label__ = 7;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $3 = HEAP32[$0 + 52 >> 2];
    var $opaque12_pre = $strm + 40 | 0;
    if (($3 | 0) == 0) {
      var $6 = $1;
      var $5 = $0;
      __label__ = 6;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $4 = HEAP32[$opaque12_pre >> 2];
    FUNCTION_TABLE[$1]($4, $3);
    var $6 = HEAP32[$zfree >> 2];
    var $5 = HEAP32[$state1 >> 2];
    __label__ = 6;
    break;
   case 6:
    var $5;
    var $6;
    var $7 = HEAP32[$opaque12_pre >> 2];
    FUNCTION_TABLE[$6]($7, $5);
    HEAP32[$state1 >> 2] = 0;
    __label__ = 7;
    break;
   case 7:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _inflate_table($type, $lens, $codes, $table, $bits, $work) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 32;
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $count = __stackBase__;
    var $count73 = $count;
    var $offs = STACKTOP;
    STACKTOP += 32;
    _memset($count73, 0, 32, 2);
    var $cmp258 = ($codes | 0) == 0;
    if ($cmp258) {
      __label__ = 3;
      break;
    } else {
      var $sym_059 = 0;
      __label__ = 2;
      break;
    }
   case 2:
    var $sym_059;
    var $arrayidx5 = $count + ((HEAPU16[$lens + ($sym_059 << 1) >> 1] & 65535) << 1) | 0;
    var $inc6 = HEAP16[$arrayidx5 >> 1] + 1 & 65535;
    HEAP16[$arrayidx5 >> 1] = $inc6;
    var $inc8 = $sym_059 + 1 | 0;
    if (($inc8 | 0) == ($codes | 0)) {
      __label__ = 3;
      break;
    } else {
      var $sym_059 = $inc8;
      __label__ = 2;
      break;
    }
   case 3:
    var $2 = HEAPU32[$bits >> 2];
    var $max_0 = 15;
    __label__ = 4;
    break;
   case 4:
    var $max_0;
    if (($max_0 | 0) == 0) {
      __label__ = 8;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    if (HEAP16[$count + ($max_0 << 1) >> 1] << 16 >> 16 == 0) {
      __label__ = 6;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 6:
    var $max_0 = $max_0 - 1 | 0;
    __label__ = 4;
    break;
   case 7:
    var $root_0 = $2 >>> 0 > $max_0 >>> 0 ? $max_0 : $2;
    var $min_0 = 1;
    __label__ = 9;
    break;
   case 8:
    var $4 = HEAPU32[$table >> 2];
    HEAP32[$table >> 2] = $4 + 4 | 0;
    HEAP8[$4 | 0] = 64;
    HEAP8[$4 + 1 | 0] = 1;
    HEAP16[$4 + 2 >> 1] = 0;
    var $5 = HEAP32[$table >> 2];
    var $incdec_ptr26 = $5 + 4 | 0;
    HEAP32[$table >> 2] = $incdec_ptr26;
    HEAP8[$5 | 0] = 64;
    HEAP8[$5 + 1 | 0] = 1;
    HEAP16[$5 + 2 >> 1] = 0;
    HEAP32[$bits >> 2] = 1;
    var $retval_0 = 0;
    __label__ = 52;
    break;
   case 9:
    var $min_0;
    if ($min_0 >>> 0 < $max_0 >>> 0) {
      __label__ = 10;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 10:
    if (HEAP16[$count + ($min_0 << 1) >> 1] << 16 >> 16 == 0) {
      __label__ = 11;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 11:
    var $min_0 = $min_0 + 1 | 0;
    __label__ = 9;
    break;
   case 12:
    var $root_1 = $root_0 >>> 0 < $min_0 >>> 0 ? $min_0 : $root_0;
    var $len_1 = 1;
    var $left_0 = 1;
    __label__ = 13;
    break;
   case 13:
    var $left_0;
    var $len_1;
    if ($len_1 >>> 0 < 16) {
      __label__ = 14;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 14:
    var $sub = ($left_0 << 1) - (HEAPU16[$count + ($len_1 << 1) >> 1] & 65535) | 0;
    if (($sub | 0) < 0) {
      var $retval_0 = -1;
      __label__ = 52;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 15:
    var $len_1 = $len_1 + 1 | 0;
    var $left_0 = $sub;
    __label__ = 13;
    break;
   case 16:
    if (($left_0 | 0) > 0) {
      __label__ = 17;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 17:
    if (($type | 0) != 0 & ($max_0 | 0) == 1) {
      __label__ = 18;
      break;
    } else {
      var $retval_0 = -1;
      __label__ = 52;
      break;
    }
   case 18:
    HEAP16[$offs + 2 >> 1] = 0;
    var $8 = HEAP16[$count + 2 >> 1];
    HEAP16[$offs + 4 >> 1] = $8;
    var $add_1 = HEAP16[$count + 4 >> 1] + $8 & 65535;
    HEAP16[$offs + 6 >> 1] = $add_1;
    var $add_2 = HEAP16[$count + 6 >> 1] + $add_1 & 65535;
    HEAP16[$offs + 8 >> 1] = $add_2;
    var $add_3 = HEAP16[$count + 8 >> 1] + $add_2 & 65535;
    HEAP16[$offs + 10 >> 1] = $add_3;
    var $add_4 = HEAP16[$count + 10 >> 1] + $add_3 & 65535;
    HEAP16[$offs + 12 >> 1] = $add_4;
    var $add_5 = HEAP16[$count + 12 >> 1] + $add_4 & 65535;
    HEAP16[$offs + 14 >> 1] = $add_5;
    var $add_6 = HEAP16[$count + 14 >> 1] + $add_5 & 65535;
    HEAP16[$offs + 16 >> 1] = $add_6;
    var $add_7 = HEAP16[$count + 16 >> 1] + $add_6 & 65535;
    HEAP16[$offs + 18 >> 1] = $add_7;
    var $add_8 = HEAP16[$count + 18 >> 1] + $add_7 & 65535;
    HEAP16[$offs + 20 >> 1] = $add_8;
    var $add_9 = HEAP16[$count + 20 >> 1] + $add_8 & 65535;
    HEAP16[$offs + 22 >> 1] = $add_9;
    var $add_10 = HEAP16[$count + 22 >> 1] + $add_9 & 65535;
    HEAP16[$offs + 24 >> 1] = $add_10;
    var $add_11 = HEAP16[$count + 24 >> 1] + $add_10 & 65535;
    HEAP16[$offs + 26 >> 1] = $add_11;
    var $add_12 = HEAP16[$count + 26 >> 1] + $add_11 & 65535;
    HEAP16[$offs + 28 >> 1] = $add_12;
    var $add_13 = HEAP16[$count + 28 >> 1] + $add_12 & 65535;
    HEAP16[$offs + 30 >> 1] = $add_13;
    if ($cmp258) {
      __label__ = 22;
      break;
    } else {
      var $sym_153 = 0;
      __label__ = 19;
      break;
    }
   case 19:
    var $sym_153;
    var $22 = HEAPU16[$lens + ($sym_153 << 1) >> 1];
    if ($22 << 16 >> 16 == 0) {
      __label__ = 21;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 20:
    var $arrayidx93 = $offs + (($22 & 65535) << 1) | 0;
    var $23 = HEAPU16[$arrayidx93 >> 1];
    HEAP16[$arrayidx93 >> 1] = $23 + 1 & 65535;
    HEAP16[$work + (($23 & 65535) << 1) >> 1] = $sym_153 & 65535;
    __label__ = 21;
    break;
   case 21:
    var $inc99 = $sym_153 + 1 | 0;
    if (($inc99 | 0) == ($codes | 0)) {
      __label__ = 22;
      break;
    } else {
      var $sym_153 = $inc99;
      __label__ = 19;
      break;
    }
   case 22:
    if (($type | 0) == 0) {
      __label__ = 23;
      break;
    } else if (($type | 0) == 1) {
      var $end_0 = 256;
      var $extra_0 = _inflate_table_lext + 4294966782 | 0;
      var $base_0 = _inflate_table_lbase + 4294966782 | 0;
      __label__ = 25;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 23:
    var $cmp1053337_ph = 0;
    var $sub1043238_ph_in = 1 << $root_1;
    var $end_03039_ph = 19;
    var $extra_02940_ph = $work;
    var $base_02841_ph = $work;
    var $cmp11142_ph = 0;
    __label__ = 27;
    break;
   case 24:
    var $end_0 = -1;
    var $extra_0 = _inflate_table_dext | 0;
    var $base_0 = _inflate_table_dbase | 0;
    __label__ = 25;
    break;
   case 25:
    var $base_0;
    var $extra_0;
    var $end_0;
    var $shl103 = 1 << $root_1;
    var $cmp105 = ($type | 0) == 1;
    if ($cmp105 & $shl103 >>> 0 > 851) {
      var $retval_0 = 1;
      __label__ = 52;
      break;
    } else {
      __label__ = 26;
      break;
    }
   case 26:
    var $cmp111 = ($type | 0) == 2;
    if ($cmp111 & $shl103 >>> 0 > 591) {
      var $retval_0 = 1;
      __label__ = 52;
      break;
    } else {
      var $cmp1053337_ph = $cmp105;
      var $sub1043238_ph_in = $shl103;
      var $end_03039_ph = $end_0;
      var $extra_02940_ph = $extra_0;
      var $base_02841_ph = $base_0;
      var $cmp11142_ph = $cmp111;
      __label__ = 27;
      break;
    }
   case 27:
    var $cmp11142_ph;
    var $base_02841_ph;
    var $extra_02940_ph;
    var $end_03039_ph;
    var $sub1043238_ph_in;
    var $cmp1053337_ph;
    var $sub1043238_ph = $sub1043238_ph_in - 1 | 0;
    var $conv233 = $root_1 & 255;
    var $next_0_ph47 = HEAP32[$table >> 2];
    var $low_0_ph = -1;
    var $len_3_ph = $min_0;
    var $sym_2_ph = 0;
    var $curr_0_ph = $root_1;
    var $drop_0_ph = 0;
    var $used_0_ph46 = $sub1043238_ph_in;
    var $huff_0_ph = 0;
    __label__ = 28;
    break;
   case 28:
    var $huff_0_ph;
    var $used_0_ph46;
    var $drop_0_ph;
    var $curr_0_ph;
    var $sym_2_ph;
    var $len_3_ph;
    var $low_0_ph;
    var $next_0_ph47;
    var $shl151 = 1 << $curr_0_ph;
    var $len_3 = $len_3_ph;
    var $sym_2 = $sym_2_ph;
    var $huff_0 = $huff_0_ph;
    __label__ = 29;
    break;
   case 29:
    var $huff_0;
    var $sym_2;
    var $len_3;
    var $sub119 = $len_3 - $drop_0_ph | 0;
    var $conv120 = $sub119 & 255;
    var $24 = HEAPU16[$work + ($sym_2 << 1) >> 1];
    var $conv123 = $24 & 65535;
    if (($conv123 | 0) < ($end_03039_ph | 0)) {
      var $here_0_0 = 0;
      var $here_2_0 = $24;
      __label__ = 32;
      break;
    } else {
      __label__ = 30;
      break;
    }
   case 30:
    if (($conv123 | 0) > ($end_03039_ph | 0)) {
      __label__ = 31;
      break;
    } else {
      var $here_0_0 = 96;
      var $here_2_0 = 0;
      __label__ = 32;
      break;
    }
   case 31:
    var $here_0_0 = HEAP16[$extra_02940_ph + ($conv123 << 1) >> 1] & 255;
    var $here_2_0 = HEAP16[$base_02841_ph + ($conv123 << 1) >> 1];
    __label__ = 32;
    break;
   case 32:
    var $here_2_0;
    var $here_0_0;
    var $shl150 = 1 << $sub119;
    var $shr = $huff_0 >>> ($drop_0_ph >>> 0);
    var $fill_0 = $shl151;
    __label__ = 33;
    break;
   case 33:
    var $fill_0;
    var $sub152 = $fill_0 - $shl150 | 0;
    var $add153 = $sub152 + $shr | 0;
    HEAP8[$next_0_ph47 + ($add153 << 2) | 0] = $here_0_0;
    HEAP8[$next_0_ph47 + ($add153 << 2) + 1 | 0] = $conv120;
    HEAP16[$next_0_ph47 + ($add153 << 2) + 2 >> 1] = $here_2_0;
    if (($fill_0 | 0) == ($shl150 | 0)) {
      __label__ = 34;
      break;
    } else {
      var $fill_0 = $sub152;
      __label__ = 33;
      break;
    }
   case 34:
    var $shl158 = 1 << $len_3 - 1;
    if (($shl158 & $huff_0 | 0) == 0) {
      var $incr_0_lcssa75 = $shl158;
      __label__ = 37;
      break;
    } else {
      var $incr_045 = $shl158;
      __label__ = 35;
      break;
    }
   case 35:
    var $incr_045;
    var $shr159 = $incr_045 >>> 1;
    if (($shr159 & $huff_0 | 0) == 0) {
      __label__ = 36;
      break;
    } else {
      var $incr_045 = $shr159;
      __label__ = 35;
      break;
    }
   case 36:
    if (($shr159 | 0) == 0) {
      var $huff_1 = 0;
      __label__ = 38;
      break;
    } else {
      var $incr_0_lcssa75 = $shr159;
      __label__ = 37;
      break;
    }
   case 37:
    var $incr_0_lcssa75;
    var $huff_1 = ($incr_0_lcssa75 - 1 & $huff_0) + $incr_0_lcssa75 | 0;
    __label__ = 38;
    break;
   case 38:
    var $huff_1;
    var $inc168 = $sym_2 + 1 | 0;
    var $arrayidx169 = $count + ($len_3 << 1) | 0;
    var $dec170 = HEAP16[$arrayidx169 >> 1] - 1 & 65535;
    HEAP16[$arrayidx169 >> 1] = $dec170;
    if ($dec170 << 16 >> 16 == 0) {
      __label__ = 39;
      break;
    } else {
      var $len_4 = $len_3;
      __label__ = 41;
      break;
    }
   case 39:
    if (($len_3 | 0) == ($max_0 | 0)) {
      __label__ = 49;
      break;
    } else {
      __label__ = 40;
      break;
    }
   case 40:
    var $len_4 = HEAPU16[$lens + ((HEAPU16[$work + ($inc168 << 1) >> 1] & 65535) << 1) >> 1] & 65535;
    __label__ = 41;
    break;
   case 41:
    var $len_4;
    if ($len_4 >>> 0 > $root_1 >>> 0) {
      __label__ = 42;
      break;
    } else {
      var $len_3 = $len_4;
      var $sym_2 = $inc168;
      var $huff_0 = $huff_1;
      __label__ = 29;
      break;
    }
   case 42:
    var $and187 = $huff_1 & $sub1043238_ph;
    if (($and187 | 0) == ($low_0_ph | 0)) {
      var $len_3 = $len_4;
      var $sym_2 = $inc168;
      var $huff_0 = $huff_1;
      __label__ = 29;
      break;
    } else {
      __label__ = 43;
      break;
    }
   case 43:
    var $drop_1 = ($drop_0_ph | 0) == 0 ? $root_1 : $drop_0_ph;
    var $add_ptr195 = $next_0_ph47 + ($shl151 << 2) | 0;
    var $sub196 = $len_4 - $drop_1 | 0;
    var $curr_1 = $sub196;
    var $left_1 = 1 << $sub196;
    __label__ = 44;
    break;
   case 44:
    var $left_1;
    var $curr_1;
    var $add199 = $curr_1 + $drop_1 | 0;
    if ($add199 >>> 0 < $max_0 >>> 0) {
      __label__ = 45;
      break;
    } else {
      __label__ = 47;
      break;
    }
   case 45:
    var $sub206 = $left_1 - (HEAPU16[$count + ($add199 << 1) >> 1] & 65535) | 0;
    if (($sub206 | 0) < 1) {
      __label__ = 47;
      break;
    } else {
      __label__ = 46;
      break;
    }
   case 46:
    var $shl212 = $sub206 << 1;
    var $curr_1 = $curr_1 + 1 | 0;
    var $left_1 = $shl212;
    __label__ = 44;
    break;
   case 47:
    var $add215 = (1 << $curr_1) + $used_0_ph46 | 0;
    if ($cmp1053337_ph & $add215 >>> 0 > 851 | $cmp11142_ph & $add215 >>> 0 > 591) {
      var $retval_0 = 1;
      __label__ = 52;
      break;
    } else {
      __label__ = 48;
      break;
    }
   case 48:
    HEAP8[HEAP32[$table >> 2] + ($and187 << 2) | 0] = $curr_1 & 255;
    HEAP8[HEAP32[$table >> 2] + ($and187 << 2) + 1 | 0] = $conv233;
    var $33 = HEAPU32[$table >> 2];
    HEAP16[$33 + ($and187 << 2) + 2 >> 1] = ($add_ptr195 - $33 | 0) >>> 2 & 65535;
    var $next_0_ph47 = $add_ptr195;
    var $low_0_ph = $and187;
    var $len_3_ph = $len_4;
    var $sym_2_ph = $inc168;
    var $curr_0_ph = $curr_1;
    var $drop_0_ph = $drop_1;
    var $used_0_ph46 = $add215;
    var $huff_0_ph = $huff_1;
    __label__ = 28;
    break;
   case 49:
    if (($huff_1 | 0) == 0) {
      __label__ = 51;
      break;
    } else {
      __label__ = 50;
      break;
    }
   case 50:
    HEAP8[$next_0_ph47 + ($huff_1 << 2) | 0] = 64;
    HEAP8[$next_0_ph47 + ($huff_1 << 2) + 1 | 0] = $conv120;
    HEAP16[$next_0_ph47 + ($huff_1 << 2) + 2 >> 1] = 0;
    __label__ = 51;
    break;
   case 51:
    var $add_ptr251 = HEAP32[$table >> 2] + ($used_0_ph46 << 2) | 0;
    HEAP32[$table >> 2] = $add_ptr251;
    HEAP32[$bits >> 2] = $root_1;
    var $retval_0 = 0;
    __label__ = 52;
    break;
   case 52:
    var $retval_0;
    STACKTOP = __stackBase__;
    return $retval_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_inflate_table["X"] = 1;

function __tr_init($s) {
  HEAP32[$s + 2840 >> 2] = $s + 148 | 0;
  HEAP32[$s + 2848 >> 2] = _static_l_desc;
  HEAP32[$s + 2852 >> 2] = $s + 2440 | 0;
  HEAP32[$s + 2860 >> 2] = _static_d_desc;
  HEAP32[$s + 2864 >> 2] = $s + 2684 | 0;
  HEAP32[$s + 2872 >> 2] = _static_bl_desc;
  HEAP16[$s + 5816 >> 1] = 0;
  HEAP32[$s + 5820 >> 2] = 0;
  _init_block($s);
  return;
}

function __tr_stored_block($s, $buf, $stored_len, $last) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $bi_valid = $s + 5820 | 0;
    var $0 = HEAPU32[$bi_valid >> 2];
    var $cmp = ($0 | 0) > 13;
    var $conv1 = $last & 65535;
    var $bi_buf = $s + 5816 | 0;
    var $or = HEAPU16[$bi_buf >> 1] & 65535 | $conv1 << $0;
    HEAP16[$bi_buf >> 1] = $or & 65535;
    if ($cmp) {
      __label__ = 2;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 2:
    var $conv7 = $or & 255;
    var $pending = $s + 20 | 0;
    var $2 = HEAP32[$pending >> 2];
    var $inc = $2 + 1 | 0;
    HEAP32[$pending >> 2] = $inc;
    var $pending_buf = $s + 8 | 0;
    HEAP8[HEAP32[$pending_buf >> 2] + $2 | 0] = $conv7;
    var $conv10 = (HEAPU16[$bi_buf >> 1] & 65535) >>> 8 & 255;
    var $5 = HEAPU32[$pending >> 2];
    HEAP32[$pending >> 2] = $5 + 1 | 0;
    HEAP8[HEAP32[$pending_buf >> 2] + $5 | 0] = $conv10;
    var $7 = HEAPU32[$bi_valid >> 2];
    HEAP16[$bi_buf >> 1] = $conv1 >>> ((16 - $7 | 0) >>> 0) & 65535;
    var $storemerge = $7 - 13 | 0;
    __label__ = 4;
    break;
   case 3:
    var $storemerge = $0 + 3 | 0;
    __label__ = 4;
    break;
   case 4:
    var $storemerge;
    HEAP32[$bi_valid >> 2] = $storemerge;
    _copy_block($s, $buf, $stored_len);
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _copy_block($s, $buf, $len) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    _bi_windup($s);
    var $conv2 = $len & 255;
    var $pending = $s + 20 | 0;
    var $0 = HEAP32[$pending >> 2];
    var $inc = $0 + 1 | 0;
    HEAP32[$pending >> 2] = $inc;
    var $pending_buf = $s + 8 | 0;
    HEAP8[HEAP32[$pending_buf >> 2] + $0 | 0] = $conv2;
    var $conv5 = $len >>> 8 & 255;
    var $2 = HEAPU32[$pending >> 2];
    HEAP32[$pending >> 2] = $2 + 1 | 0;
    HEAP8[HEAP32[$pending_buf >> 2] + $2 | 0] = $conv5;
    var $conv11 = $len & 65535 ^ 65535;
    var $conv13 = $conv11 & 255;
    var $4 = HEAP32[$pending >> 2];
    var $inc15 = $4 + 1 | 0;
    HEAP32[$pending >> 2] = $inc15;
    HEAP8[HEAP32[$pending_buf >> 2] + $4 | 0] = $conv13;
    var $conv22 = $conv11 >>> 8 & 255;
    var $6 = HEAPU32[$pending >> 2];
    HEAP32[$pending >> 2] = $6 + 1 | 0;
    HEAP8[HEAP32[$pending_buf >> 2] + $6 | 0] = $conv22;
    if (($len | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      var $buf_addr_04 = $buf;
      var $len_addr_05 = $len;
      __label__ = 2;
      break;
    }
   case 2:
    var $len_addr_05;
    var $buf_addr_04;
    var $dec = $len_addr_05 - 1 | 0;
    var $8 = HEAP8[$buf_addr_04];
    var $9 = HEAP32[$pending >> 2];
    var $inc29 = $9 + 1 | 0;
    HEAP32[$pending >> 2] = $inc29;
    HEAP8[HEAP32[$pending_buf >> 2] + $9 | 0] = $8;
    if (($dec | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      var $buf_addr_04 = $buf_addr_04 + 1 | 0;
      var $len_addr_05 = $dec;
      __label__ = 2;
      break;
    }
   case 3:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_copy_block["X"] = 1;

function __tr_flush_bits($s) {
  _bi_flush($s);
  return;
}

function _detect_data_type($s) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $n_0 = 0;
    var $black_mask_0 = -201342849;
    __label__ = 2;
    break;
   case 2:
    var $black_mask_0;
    var $n_0;
    if (($n_0 | 0) < 32) {
      __label__ = 3;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 3:
    if (($black_mask_0 & 1 | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    if (HEAP16[$s + 148 + ($n_0 << 2) >> 1] << 16 >> 16 == 0) {
      __label__ = 5;
      break;
    } else {
      var $retval_0 = 0;
      __label__ = 12;
      break;
    }
   case 5:
    var $n_0 = $n_0 + 1 | 0;
    var $black_mask_0 = $black_mask_0 >>> 1;
    __label__ = 2;
    break;
   case 6:
    if (HEAP16[$s + 184 >> 1] << 16 >> 16 == 0) {
      __label__ = 7;
      break;
    } else {
      var $retval_0 = 1;
      __label__ = 12;
      break;
    }
   case 7:
    if (HEAP16[$s + 188 >> 1] << 16 >> 16 == 0) {
      __label__ = 8;
      break;
    } else {
      var $retval_0 = 1;
      __label__ = 12;
      break;
    }
   case 8:
    if (HEAP16[$s + 200 >> 1] << 16 >> 16 == 0) {
      var $n_1 = 32;
      __label__ = 9;
      break;
    } else {
      var $retval_0 = 1;
      __label__ = 12;
      break;
    }
   case 9:
    var $n_1;
    if (($n_1 | 0) < 256) {
      __label__ = 10;
      break;
    } else {
      var $retval_0 = 0;
      __label__ = 12;
      break;
    }
   case 10:
    if (HEAP16[$s + 148 + ($n_1 << 2) >> 1] << 16 >> 16 == 0) {
      __label__ = 11;
      break;
    } else {
      var $retval_0 = 1;
      __label__ = 12;
      break;
    }
   case 11:
    var $n_1 = $n_1 + 1 | 0;
    __label__ = 9;
    break;
   case 12:
    var $retval_0;
    return $retval_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _compress_block($s, $ltree, $dtree) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $last_lit = $s + 5792 | 0;
    if ((HEAP32[$last_lit >> 2] | 0) == 0) {
      __label__ = 2;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 2:
    var $62 = HEAP32[$s + 5820 >> 2];
    var $61 = HEAP16[$s + 5816 >> 1];
    __label__ = 25;
    break;
   case 3:
    var $d_buf = $s + 5796 | 0;
    var $l_buf = $s + 5784 | 0;
    var $bi_valid = $s + 5820 | 0;
    var $bi_buf = $s + 5816 | 0;
    var $pending = $s + 20 | 0;
    var $pending_buf = $s + 8 | 0;
    var $lx_0 = 0;
    __label__ = 4;
    break;
   case 4:
    var $lx_0;
    var $2 = HEAPU16[HEAP32[$d_buf >> 2] + ($lx_0 << 1) >> 1];
    var $conv = $2 & 65535;
    var $inc = $lx_0 + 1 | 0;
    var $conv2 = HEAPU8[HEAP32[$l_buf >> 2] + $lx_0 | 0] & 255;
    if ($2 << 16 >> 16 == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 5:
    var $conv8 = HEAPU16[$ltree + ($conv2 << 2) + 2 >> 1] & 65535;
    var $6 = HEAPU32[$bi_valid >> 2];
    var $cmp9 = ($6 | 0) > (16 - $conv8 | 0);
    var $conv16 = HEAPU16[$ltree + ($conv2 << 2) >> 1] & 65535;
    var $or = HEAPU16[$bi_buf >> 1] & 65535 | $conv16 << $6;
    var $conv19 = $or & 65535;
    HEAP16[$bi_buf >> 1] = $conv19;
    if ($cmp9) {
      __label__ = 6;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 6:
    var $conv22 = $or & 255;
    var $9 = HEAP32[$pending >> 2];
    var $inc23 = $9 + 1 | 0;
    HEAP32[$pending >> 2] = $inc23;
    HEAP8[HEAP32[$pending_buf >> 2] + $9 | 0] = $conv22;
    var $conv27 = (HEAPU16[$bi_buf >> 1] & 65535) >>> 8 & 255;
    var $12 = HEAPU32[$pending >> 2];
    HEAP32[$pending >> 2] = $12 + 1 | 0;
    HEAP8[HEAP32[$pending_buf >> 2] + $12 | 0] = $conv27;
    var $14 = HEAPU32[$bi_valid >> 2];
    var $conv37 = $conv16 >>> ((16 - $14 | 0) >>> 0) & 65535;
    HEAP16[$bi_buf >> 1] = $conv37;
    var $add = $conv8 - 16 + $14 | 0;
    HEAP32[$bi_valid >> 2] = $add;
    var $59 = $add;
    var $58 = $conv37;
    __label__ = 24;
    break;
   case 7:
    var $add52 = $6 + $conv8 | 0;
    HEAP32[$bi_valid >> 2] = $add52;
    var $59 = $add52;
    var $58 = $conv19;
    __label__ = 24;
    break;
   case 8:
    var $arrayidx54 = STRING_TABLE.__length_code + $conv2 | 0;
    var $conv55 = HEAPU8[$arrayidx54] & 255;
    var $add58 = ($conv55 | 256) + 1 | 0;
    var $conv62 = HEAPU16[$ltree + ($add58 << 2) + 2 >> 1] & 65535;
    var $17 = HEAPU32[$bi_valid >> 2];
    var $cmp65 = ($17 | 0) > (16 - $conv62 | 0);
    var $conv76 = HEAPU16[$ltree + ($add58 << 2) >> 1] & 65535;
    var $or81 = HEAPU16[$bi_buf >> 1] & 65535 | $conv76 << $17;
    var $conv82 = $or81 & 65535;
    HEAP16[$bi_buf >> 1] = $conv82;
    if ($cmp65) {
      __label__ = 9;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 9:
    var $conv86 = $or81 & 255;
    var $20 = HEAP32[$pending >> 2];
    var $inc88 = $20 + 1 | 0;
    HEAP32[$pending >> 2] = $inc88;
    HEAP8[HEAP32[$pending_buf >> 2] + $20 | 0] = $conv86;
    var $conv94 = (HEAPU16[$bi_buf >> 1] & 65535) >>> 8 & 255;
    var $23 = HEAPU32[$pending >> 2];
    HEAP32[$pending >> 2] = $23 + 1 | 0;
    HEAP8[HEAP32[$pending_buf >> 2] + $23 | 0] = $conv94;
    var $25 = HEAPU32[$bi_valid >> 2];
    var $conv104 = $conv76 >>> ((16 - $25 | 0) >>> 0) & 65535;
    HEAP16[$bi_buf >> 1] = $conv104;
    var $27 = $conv62 - 16 + $25 | 0;
    var $26 = $conv104;
    __label__ = 11;
    break;
   case 10:
    var $27 = $17 + $conv62 | 0;
    var $26 = $conv82;
    __label__ = 11;
    break;
   case 11:
    var $26;
    var $27;
    HEAP32[$bi_valid >> 2] = $27;
    var $28 = HEAPU32[_extra_lbits + ($conv55 << 2) >> 2];
    if (($conv55 - 8 | 0) >>> 0 < 20) {
      __label__ = 12;
      break;
    } else {
      var $38 = $27;
      var $37 = $26;
      __label__ = 15;
      break;
    }
   case 12:
    var $cmp134 = ($27 | 0) > (16 - $28 | 0);
    var $conv139 = $conv2 - HEAP32[_base_length + ($conv55 << 2) >> 2] & 65535;
    var $or144 = $conv139 << $27 | $26 & 65535;
    var $conv145 = $or144 & 65535;
    HEAP16[$bi_buf >> 1] = $conv145;
    if ($cmp134) {
      __label__ = 13;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 13:
    var $conv149 = $or144 & 255;
    var $31 = HEAP32[$pending >> 2];
    var $inc151 = $31 + 1 | 0;
    HEAP32[$pending >> 2] = $inc151;
    HEAP8[HEAP32[$pending_buf >> 2] + $31 | 0] = $conv149;
    var $conv157 = (HEAPU16[$bi_buf >> 1] & 65535) >>> 8 & 255;
    var $34 = HEAPU32[$pending >> 2];
    HEAP32[$pending >> 2] = $34 + 1 | 0;
    HEAP8[HEAP32[$pending_buf >> 2] + $34 | 0] = $conv157;
    var $36 = HEAPU32[$bi_valid >> 2];
    var $conv167 = $conv139 >>> ((16 - $36 | 0) >>> 0) & 65535;
    HEAP16[$bi_buf >> 1] = $conv167;
    var $add171 = $28 - 16 + $36 | 0;
    HEAP32[$bi_valid >> 2] = $add171;
    var $38 = $add171;
    var $37 = $conv167;
    __label__ = 15;
    break;
   case 14:
    var $add182 = $27 + $28 | 0;
    HEAP32[$bi_valid >> 2] = $add182;
    var $38 = $add182;
    var $37 = $conv145;
    __label__ = 15;
    break;
   case 15:
    var $37;
    var $38;
    var $dec = $conv - 1 | 0;
    if ($dec >>> 0 < 256) {
      var $dec_pn = $dec;
      __label__ = 17;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 16:
    var $dec_pn = ($dec >>> 7) + 256 | 0;
    __label__ = 17;
    break;
   case 17:
    var $dec_pn;
    var $cond_in_in = STRING_TABLE.__dist_code + $dec_pn | 0;
    var $cond = HEAPU8[$cond_in_in] & 255;
    var $conv197 = HEAPU16[$dtree + ($cond << 2) + 2 >> 1] & 65535;
    var $cmp200 = ($38 | 0) > (16 - $conv197 | 0);
    var $conv209 = HEAPU16[$dtree + ($cond << 2) >> 1] & 65535;
    var $or214 = $37 & 65535 | $conv209 << $38;
    var $conv215 = $or214 & 65535;
    HEAP16[$bi_buf >> 1] = $conv215;
    if ($cmp200) {
      __label__ = 18;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 18:
    var $conv219 = $or214 & 255;
    var $41 = HEAP32[$pending >> 2];
    var $inc221 = $41 + 1 | 0;
    HEAP32[$pending >> 2] = $inc221;
    HEAP8[HEAP32[$pending_buf >> 2] + $41 | 0] = $conv219;
    var $conv227 = (HEAPU16[$bi_buf >> 1] & 65535) >>> 8 & 255;
    var $44 = HEAPU32[$pending >> 2];
    HEAP32[$pending >> 2] = $44 + 1 | 0;
    HEAP8[HEAP32[$pending_buf >> 2] + $44 | 0] = $conv227;
    var $46 = HEAPU32[$bi_valid >> 2];
    var $conv237 = $conv209 >>> ((16 - $46 | 0) >>> 0) & 65535;
    HEAP16[$bi_buf >> 1] = $conv237;
    var $48 = $conv197 - 16 + $46 | 0;
    var $47 = $conv237;
    __label__ = 20;
    break;
   case 19:
    var $48 = $38 + $conv197 | 0;
    var $47 = $conv215;
    __label__ = 20;
    break;
   case 20:
    var $47;
    var $48;
    HEAP32[$bi_valid >> 2] = $48;
    var $49 = HEAPU32[_extra_dbits + ($cond << 2) >> 2];
    if (($cond - 4 | 0) >>> 0 < 26) {
      __label__ = 21;
      break;
    } else {
      var $59 = $48;
      var $58 = $47;
      __label__ = 24;
      break;
    }
   case 21:
    var $cmp265 = ($48 | 0) > (16 - $49 | 0);
    var $conv270 = $dec - HEAP32[_base_dist + ($cond << 2) >> 2] & 65535;
    var $or275 = $conv270 << $48 | $47 & 65535;
    var $conv276 = $or275 & 65535;
    HEAP16[$bi_buf >> 1] = $conv276;
    if ($cmp265) {
      __label__ = 22;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 22:
    var $conv280 = $or275 & 255;
    var $52 = HEAP32[$pending >> 2];
    var $inc282 = $52 + 1 | 0;
    HEAP32[$pending >> 2] = $inc282;
    HEAP8[HEAP32[$pending_buf >> 2] + $52 | 0] = $conv280;
    var $conv288 = (HEAPU16[$bi_buf >> 1] & 65535) >>> 8 & 255;
    var $55 = HEAPU32[$pending >> 2];
    HEAP32[$pending >> 2] = $55 + 1 | 0;
    HEAP8[HEAP32[$pending_buf >> 2] + $55 | 0] = $conv288;
    var $57 = HEAPU32[$bi_valid >> 2];
    var $conv298 = $conv270 >>> ((16 - $57 | 0) >>> 0) & 65535;
    HEAP16[$bi_buf >> 1] = $conv298;
    var $add302 = $49 - 16 + $57 | 0;
    HEAP32[$bi_valid >> 2] = $add302;
    var $59 = $add302;
    var $58 = $conv298;
    __label__ = 24;
    break;
   case 23:
    var $add313 = $48 + $49 | 0;
    HEAP32[$bi_valid >> 2] = $add313;
    var $59 = $add313;
    var $58 = $conv276;
    __label__ = 24;
    break;
   case 24:
    var $58;
    var $59;
    if ($inc >>> 0 < HEAPU32[$last_lit >> 2] >>> 0) {
      var $lx_0 = $inc;
      __label__ = 4;
      break;
    } else {
      var $62 = $59;
      var $61 = $58;
      __label__ = 25;
      break;
    }
   case 25:
    var $61;
    var $62;
    var $conv325 = HEAPU16[$ltree + 1026 >> 1] & 65535;
    var $bi_valid326 = $s + 5820 | 0;
    var $cmp328 = ($62 | 0) > (16 - $conv325 | 0);
    var $conv337 = HEAPU16[$ltree + 1024 >> 1] & 65535;
    var $bi_buf340 = $s + 5816 | 0;
    var $or342 = $61 & 65535 | $conv337 << $62;
    HEAP16[$bi_buf340 >> 1] = $or342 & 65535;
    if ($cmp328) {
      __label__ = 26;
      break;
    } else {
      __label__ = 27;
      break;
    }
   case 26:
    var $conv347 = $or342 & 255;
    var $pending348 = $s + 20 | 0;
    var $65 = HEAP32[$pending348 >> 2];
    var $inc349 = $65 + 1 | 0;
    HEAP32[$pending348 >> 2] = $inc349;
    var $pending_buf350 = $s + 8 | 0;
    HEAP8[HEAP32[$pending_buf350 >> 2] + $65 | 0] = $conv347;
    var $conv355 = (HEAPU16[$bi_buf340 >> 1] & 65535) >>> 8 & 255;
    var $68 = HEAPU32[$pending348 >> 2];
    HEAP32[$pending348 >> 2] = $68 + 1 | 0;
    HEAP8[HEAP32[$pending_buf350 >> 2] + $68 | 0] = $conv355;
    var $70 = HEAPU32[$bi_valid326 >> 2];
    HEAP16[$bi_buf340 >> 1] = $conv337 >>> ((16 - $70 | 0) >>> 0) & 65535;
    var $storemerge = $conv325 - 16 + $70 | 0;
    __label__ = 28;
    break;
   case 27:
    var $storemerge = $62 + $conv325 | 0;
    __label__ = 28;
    break;
   case 28:
    var $storemerge;
    HEAP32[$bi_valid326 >> 2] = $storemerge;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_compress_block["X"] = 1;

function __tr_align($s) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $bi_valid = $s + 5820 | 0;
    var $0 = HEAPU32[$bi_valid >> 2];
    var $cmp = ($0 | 0) > 13;
    var $bi_buf = $s + 5816 | 0;
    var $or = HEAPU16[$bi_buf >> 1] & 65535 | 2 << $0;
    var $conv4 = $or & 65535;
    HEAP16[$bi_buf >> 1] = $conv4;
    if ($cmp) {
      __label__ = 2;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 2:
    var $conv7 = $or & 255;
    var $pending = $s + 20 | 0;
    var $2 = HEAP32[$pending >> 2];
    var $inc = $2 + 1 | 0;
    HEAP32[$pending >> 2] = $inc;
    var $pending_buf = $s + 8 | 0;
    HEAP8[HEAP32[$pending_buf >> 2] + $2 | 0] = $conv7;
    var $conv10 = (HEAPU16[$bi_buf >> 1] & 65535) >>> 8 & 255;
    var $5 = HEAPU32[$pending >> 2];
    HEAP32[$pending >> 2] = $5 + 1 | 0;
    HEAP8[HEAP32[$pending_buf >> 2] + $5 | 0] = $conv10;
    var $7 = HEAPU32[$bi_valid >> 2];
    var $conv20 = 2 >>> ((16 - $7 | 0) >>> 0) & 65535;
    HEAP16[$bi_buf >> 1] = $conv20;
    var $storemerge = $7 - 13 | 0;
    var $8 = $conv20;
    __label__ = 4;
    break;
   case 3:
    var $storemerge = $0 + 3 | 0;
    var $8 = $conv4;
    __label__ = 4;
    break;
   case 4:
    var $8;
    var $storemerge;
    HEAP32[$bi_valid >> 2] = $storemerge;
    if (($storemerge | 0) > 9) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    var $pending53 = $s + 20 | 0;
    var $9 = HEAP32[$pending53 >> 2];
    var $inc54 = $9 + 1 | 0;
    HEAP32[$pending53 >> 2] = $inc54;
    var $pending_buf55 = $s + 8 | 0;
    HEAP8[HEAP32[$pending_buf55 >> 2] + $9 | 0] = $8 & 255;
    var $conv60 = (HEAPU16[$bi_buf >> 1] & 65535) >>> 8 & 255;
    var $12 = HEAPU32[$pending53 >> 2];
    HEAP32[$pending53 >> 2] = $12 + 1 | 0;
    HEAP8[HEAP32[$pending_buf55 >> 2] + $12 | 0] = $conv60;
    HEAP16[$bi_buf >> 1] = 0;
    var $storemerge1 = HEAP32[$bi_valid >> 2] - 9 | 0;
    __label__ = 7;
    break;
   case 6:
    var $storemerge1 = $storemerge + 7 | 0;
    __label__ = 7;
    break;
   case 7:
    var $storemerge1;
    HEAP32[$bi_valid >> 2] = $storemerge1;
    _bi_flush($s);
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

__tr_align["X"] = 1;

function __tr_flush_block($s, $buf, $stored_len, $last) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if ((HEAP32[$s + 132 >> 2] | 0) > 0) {
      __label__ = 2;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 2:
    var $data_type = HEAP32[$s >> 2] + 44 | 0;
    if ((HEAP32[$data_type >> 2] | 0) == 2) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $call = _detect_data_type($s);
    HEAP32[$data_type >> 2] = $call;
    __label__ = 4;
    break;
   case 4:
    var $l_desc = $s + 2840 | 0;
    _build_tree($s, $l_desc);
    var $d_desc = $s + 2852 | 0;
    _build_tree($s, $d_desc);
    var $call5 = _build_bl_tree($s);
    var $shr = (HEAP32[$s + 5800 >> 2] + 10 | 0) >>> 3;
    var $shr9 = (HEAP32[$s + 5804 >> 2] + 10 | 0) >>> 3;
    if ($shr9 >>> 0 > $shr >>> 0) {
      var $max_blindex_0 = $call5;
      var $static_lenb_0 = $shr9;
      var $opt_lenb_0 = $shr;
      __label__ = 7;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $max_blindex_0 = $call5;
    var $static_lenb_0 = $shr9;
    var $opt_lenb_0 = $shr9;
    __label__ = 7;
    break;
   case 6:
    var $add13 = $stored_len + 5 | 0;
    var $max_blindex_0 = 0;
    var $static_lenb_0 = $add13;
    var $opt_lenb_0 = $add13;
    __label__ = 7;
    break;
   case 7:
    var $opt_lenb_0;
    var $static_lenb_0;
    var $max_blindex_0;
    if (($stored_len + 4 | 0) >>> 0 > $opt_lenb_0 >>> 0 | ($buf | 0) == 0) {
      __label__ = 9;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    __tr_stored_block($s, $buf, $stored_len, $last);
    __label__ = 18;
    break;
   case 9:
    var $bi_valid = $s + 5820 | 0;
    var $6 = HEAPU32[$bi_valid >> 2];
    var $cmp23 = ($6 | 0) > 13;
    if ((HEAP32[$s + 136 >> 2] | 0) == 4 | ($static_lenb_0 | 0) == ($opt_lenb_0 | 0)) {
      __label__ = 10;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 10:
    var $conv26 = $last + 2 & 65535;
    var $bi_buf = $s + 5816 | 0;
    var $or = HEAPU16[$bi_buf >> 1] & 65535 | $conv26 << $6;
    HEAP16[$bi_buf >> 1] = $or & 65535;
    if ($cmp23) {
      __label__ = 11;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 11:
    var $conv32 = $or & 255;
    var $pending = $s + 20 | 0;
    var $8 = HEAP32[$pending >> 2];
    var $inc = $8 + 1 | 0;
    HEAP32[$pending >> 2] = $inc;
    var $pending_buf = $s + 8 | 0;
    HEAP8[HEAP32[$pending_buf >> 2] + $8 | 0] = $conv32;
    var $conv36 = (HEAPU16[$bi_buf >> 1] & 65535) >>> 8 & 255;
    var $11 = HEAPU32[$pending >> 2];
    HEAP32[$pending >> 2] = $11 + 1 | 0;
    HEAP8[HEAP32[$pending_buf >> 2] + $11 | 0] = $conv36;
    var $13 = HEAPU32[$bi_valid >> 2];
    HEAP16[$bi_buf >> 1] = $conv26 >>> ((16 - $13 | 0) >>> 0) & 65535;
    var $storemerge2 = $13 - 13 | 0;
    __label__ = 13;
    break;
   case 12:
    var $storemerge2 = $6 + 3 | 0;
    __label__ = 13;
    break;
   case 13:
    var $storemerge2;
    HEAP32[$bi_valid >> 2] = $storemerge2;
    _compress_block($s, _static_ltree | 0, _static_dtree | 0);
    __label__ = 18;
    break;
   case 14:
    var $conv74 = $last + 4 & 65535;
    var $bi_buf77 = $s + 5816 | 0;
    var $or79 = HEAPU16[$bi_buf77 >> 1] & 65535 | $conv74 << $6;
    HEAP16[$bi_buf77 >> 1] = $or79 & 65535;
    if ($cmp23) {
      __label__ = 15;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 15:
    var $conv84 = $or79 & 255;
    var $pending85 = $s + 20 | 0;
    var $15 = HEAP32[$pending85 >> 2];
    var $inc86 = $15 + 1 | 0;
    HEAP32[$pending85 >> 2] = $inc86;
    var $pending_buf87 = $s + 8 | 0;
    HEAP8[HEAP32[$pending_buf87 >> 2] + $15 | 0] = $conv84;
    var $conv92 = (HEAPU16[$bi_buf77 >> 1] & 65535) >>> 8 & 255;
    var $18 = HEAPU32[$pending85 >> 2];
    HEAP32[$pending85 >> 2] = $18 + 1 | 0;
    HEAP8[HEAP32[$pending_buf87 >> 2] + $18 | 0] = $conv92;
    var $20 = HEAPU32[$bi_valid >> 2];
    HEAP16[$bi_buf77 >> 1] = $conv74 >>> ((16 - $20 | 0) >>> 0) & 65535;
    var $storemerge = $20 - 13 | 0;
    __label__ = 17;
    break;
   case 16:
    var $storemerge = $6 + 3 | 0;
    __label__ = 17;
    break;
   case 17:
    var $storemerge;
    HEAP32[$bi_valid >> 2] = $storemerge;
    var $add121 = HEAP32[$s + 2844 >> 2] + 1 | 0;
    var $add124 = HEAP32[$s + 2856 >> 2] + 1 | 0;
    _send_all_trees($s, $add121, $add124, $max_blindex_0 + 1 | 0);
    var $arraydecay = $s + 148 | 0;
    var $arraydecay126 = $s + 2440 | 0;
    _compress_block($s, $arraydecay, $arraydecay126);
    __label__ = 18;
    break;
   case 18:
    _init_block($s);
    if (($last | 0) == 0) {
      __label__ = 20;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 19:
    _bi_windup($s);
    __label__ = 20;
    break;
   case 20:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

__tr_flush_block["X"] = 1;

function _build_tree($s, $desc) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $dyn_tree = $desc | 0;
    var $0 = HEAPU32[$dyn_tree >> 2];
    var $stat_desc = $desc + 8 | 0;
    var $1 = HEAP32[$stat_desc >> 2];
    var $2 = HEAP32[$1 >> 2];
    var $3 = HEAPU32[$1 + 12 >> 2];
    var $heap_len = $s + 5200 | 0;
    HEAP32[$heap_len >> 2] = 0;
    var $heap_max = $s + 5204 | 0;
    HEAP32[$heap_max >> 2] = 573;
    if (($3 | 0) > 0) {
      var $n_06 = 0;
      var $max_code_07 = -1;
      __label__ = 4;
      break;
    } else {
      var $4 = 0;
      var $max_code_0_lcssa6 = -1;
      __label__ = 3;
      break;
    }
   case 2:
    var $_pre = HEAP32[$heap_len >> 2];
    if (($_pre | 0) < 2) {
      var $4 = $_pre;
      var $max_code_0_lcssa6 = $max_code_1;
      __label__ = 3;
      break;
    } else {
      var $max_code_2_lcssa = $max_code_1;
      __label__ = 11;
      break;
    }
   case 3:
    var $max_code_0_lcssa6;
    var $4;
    var $opt_len = $s + 5800 | 0;
    var $tobool = ($2 | 0) == 0;
    var $static_len = $s + 5804 | 0;
    var $max_code_24 = $max_code_0_lcssa6;
    var $7 = $4;
    __label__ = 8;
    break;
   case 4:
    var $max_code_07;
    var $n_06;
    if (HEAP16[$0 + ($n_06 << 2) >> 1] << 16 >> 16 == 0) {
      __label__ = 6;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $inc = HEAP32[$heap_len >> 2] + 1 | 0;
    HEAP32[$heap_len >> 2] = $inc;
    var $arrayidx6 = $s + 2908 + ($inc << 2) | 0;
    HEAP32[$arrayidx6 >> 2] = $n_06;
    HEAP8[$s + ($n_06 + 5208) | 0] = 0;
    var $max_code_1 = $n_06;
    __label__ = 7;
    break;
   case 6:
    HEAP16[$0 + ($n_06 << 2) + 2 >> 1] = 0;
    var $max_code_1 = $max_code_07;
    __label__ = 7;
    break;
   case 7:
    var $max_code_1;
    var $inc9 = $n_06 + 1 | 0;
    if (($inc9 | 0) == ($3 | 0)) {
      __label__ = 2;
      break;
    } else {
      var $n_06 = $inc9;
      var $max_code_07 = $max_code_1;
      __label__ = 4;
      break;
    }
   case 8:
    var $7;
    var $max_code_24;
    var $cmp13 = ($max_code_24 | 0) < 2;
    var $inc15 = $max_code_24 + 1 | 0;
    var $max_code_3 = $cmp13 ? $inc15 : $max_code_24;
    var $cond = $cmp13 ? $inc15 : 0;
    var $inc17 = $7 + 1 | 0;
    HEAP32[$heap_len >> 2] = $inc17;
    HEAP32[$s + 2908 + ($inc17 << 2) >> 2] = $cond;
    HEAP16[$0 + ($cond << 2) >> 1] = 1;
    HEAP8[$s + ($cond + 5208) | 0] = 0;
    var $dec = HEAP32[$opt_len >> 2] - 1 | 0;
    HEAP32[$opt_len >> 2] = $dec;
    if ($tobool) {
      __label__ = 10;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    var $sub = HEAP32[$static_len >> 2] - (HEAPU16[$2 + ($cond << 2) + 2 >> 1] & 65535) | 0;
    HEAP32[$static_len >> 2] = $sub;
    __label__ = 10;
    break;
   case 10:
    var $11 = HEAPU32[$heap_len >> 2];
    if (($11 | 0) < 2) {
      var $max_code_24 = $max_code_3;
      var $7 = $11;
      __label__ = 8;
      break;
    } else {
      var $max_code_2_lcssa = $max_code_3;
      __label__ = 11;
      break;
    }
   case 11:
    var $max_code_2_lcssa;
    var $max_code31 = $desc + 4 | 0;
    HEAP32[$max_code31 >> 2] = $max_code_2_lcssa;
    var $12 = HEAP32[$heap_len >> 2];
    if (($12 | 0) > 1) {
      __label__ = 12;
      break;
    } else {
      var $_pre3 = $12;
      __label__ = 14;
      break;
    }
   case 12:
    var $n_12 = ($12 | 0) / 2 & -1;
    __label__ = 15;
    break;
   case 13:
    var $_pre3 = HEAP32[$heap_len >> 2];
    __label__ = 14;
    break;
   case 14:
    var $_pre3;
    var $arrayidx41 = $s + 2912 | 0;
    var $node_0 = $3;
    var $13 = $_pre3;
    __label__ = 16;
    break;
   case 15:
    var $n_12;
    _pqdownheap($s, $0, $n_12);
    var $dec38 = $n_12 - 1 | 0;
    if (($dec38 | 0) > 0) {
      var $n_12 = $dec38;
      __label__ = 15;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 16:
    var $13;
    var $node_0;
    var $14 = HEAPU32[$arrayidx41 >> 2];
    HEAP32[$heap_len >> 2] = $13 - 1 | 0;
    var $15 = HEAP32[$s + 2908 + ($13 << 2) >> 2];
    HEAP32[$arrayidx41 >> 2] = $15;
    _pqdownheap($s, $0, 1);
    var $16 = HEAPU32[$arrayidx41 >> 2];
    var $dec51 = HEAP32[$heap_max >> 2] - 1 | 0;
    HEAP32[$heap_max >> 2] = $dec51;
    var $arrayidx53 = $s + 2908 + ($dec51 << 2) | 0;
    HEAP32[$arrayidx53 >> 2] = $14;
    var $dec55 = HEAP32[$heap_max >> 2] - 1 | 0;
    HEAP32[$heap_max >> 2] = $dec55;
    var $arrayidx57 = $s + 2908 + ($dec55 << 2) | 0;
    HEAP32[$arrayidx57 >> 2] = $16;
    var $add = HEAP16[$0 + ($16 << 2) >> 1] + HEAP16[$0 + ($14 << 2) >> 1] & 65535;
    HEAP16[$0 + ($node_0 << 2) >> 1] = $add;
    var $21 = HEAPU8[$s + ($14 + 5208) | 0];
    var $22 = HEAPU8[$s + ($16 + 5208) | 0];
    var $_ = ($21 & 255) < ($22 & 255) ? $22 : $21;
    HEAP8[$s + ($node_0 + 5208) | 0] = $_ + 1 & 255;
    var $conv92 = $node_0 & 65535;
    HEAP16[$0 + ($16 << 2) + 2 >> 1] = $conv92;
    HEAP16[$0 + ($14 << 2) + 2 >> 1] = $conv92;
    var $inc98 = $node_0 + 1 | 0;
    HEAP32[$arrayidx41 >> 2] = $node_0;
    _pqdownheap($s, $0, 1);
    var $23 = HEAPU32[$heap_len >> 2];
    if (($23 | 0) > 1) {
      var $node_0 = $inc98;
      var $13 = $23;
      __label__ = 16;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 17:
    var $24 = HEAP32[$arrayidx41 >> 2];
    var $dec107 = HEAP32[$heap_max >> 2] - 1 | 0;
    HEAP32[$heap_max >> 2] = $dec107;
    var $arrayidx109 = $s + 2908 + ($dec107 << 2) | 0;
    HEAP32[$arrayidx109 >> 2] = $24;
    var $desc_idx_val = HEAP32[$dyn_tree >> 2];
    var $desc_idx1_val = HEAP32[$max_code31 >> 2];
    var $desc_idx2_val = HEAP32[$stat_desc >> 2];
    _gen_bitlen($s, $desc_idx_val, $desc_idx1_val, $desc_idx2_val);
    var $arraydecay = $s + 2876 | 0;
    _gen_codes($0, $max_code_2_lcssa, $arraydecay);
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_build_tree["X"] = 1;

function _build_bl_tree($s) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $arraydecay = $s + 148 | 0;
    var $0 = HEAP32[$s + 2844 >> 2];
    _scan_tree($s, $arraydecay, $0);
    var $arraydecay1 = $s + 2440 | 0;
    var $1 = HEAP32[$s + 2856 >> 2];
    _scan_tree($s, $arraydecay1, $1);
    var $bl_desc = $s + 2864 | 0;
    _build_tree($s, $bl_desc);
    var $max_blindex_0 = 18;
    __label__ = 2;
    break;
   case 2:
    var $max_blindex_0;
    if (($max_blindex_0 | 0) > 2) {
      __label__ = 3;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 3:
    var $arrayidx = STRING_TABLE._bl_order + $max_blindex_0 | 0;
    if (HEAP16[$s + 2684 + ((HEAPU8[$arrayidx] & 255) << 2) + 2 >> 1] << 16 >> 16 == 0) {
      __label__ = 4;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 4:
    var $max_blindex_0 = $max_blindex_0 - 1 | 0;
    __label__ = 2;
    break;
   case 5:
    var $opt_len = $s + 5800 | 0;
    var $add9 = $max_blindex_0 * 3 + 17 + HEAP32[$opt_len >> 2] | 0;
    HEAP32[$opt_len >> 2] = $add9;
    return $max_blindex_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _bi_windup($s) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $bi_valid = $s + 5820 | 0;
    var $0 = HEAPU32[$bi_valid >> 2];
    if (($0 | 0) > 8) {
      __label__ = 2;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 2:
    var $bi_buf = $s + 5816 | 0;
    var $conv1 = HEAP16[$bi_buf >> 1] & 255;
    var $pending = $s + 20 | 0;
    var $2 = HEAP32[$pending >> 2];
    var $inc = $2 + 1 | 0;
    HEAP32[$pending >> 2] = $inc;
    var $pending_buf = $s + 8 | 0;
    HEAP8[HEAP32[$pending_buf >> 2] + $2 | 0] = $conv1;
    var $conv4 = (HEAPU16[$bi_buf >> 1] & 65535) >>> 8 & 255;
    var $5 = HEAPU32[$pending >> 2];
    HEAP32[$pending >> 2] = $5 + 1 | 0;
    HEAP8[HEAP32[$pending_buf >> 2] + $5 | 0] = $conv4;
    var $bi_buf20_pre_phi = $bi_buf;
    __label__ = 5;
    break;
   case 3:
    var $bi_buf13 = $s + 5816 | 0;
    if (($0 | 0) > 0) {
      __label__ = 4;
      break;
    } else {
      var $bi_buf20_pre_phi = $bi_buf13;
      __label__ = 5;
      break;
    }
   case 4:
    var $conv14 = HEAP16[$bi_buf13 >> 1] & 255;
    var $pending15 = $s + 20 | 0;
    var $8 = HEAP32[$pending15 >> 2];
    var $inc16 = $8 + 1 | 0;
    HEAP32[$pending15 >> 2] = $inc16;
    HEAP8[HEAP32[$s + 8 >> 2] + $8 | 0] = $conv14;
    var $bi_buf20_pre_phi = $bi_buf13;
    __label__ = 5;
    break;
   case 5:
    var $bi_buf20_pre_phi;
    HEAP16[$bi_buf20_pre_phi >> 1] = 0;
    HEAP32[$bi_valid >> 2] = 0;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _send_tree($s, $tree, $max_code) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $0 = HEAPU16[$tree + 2 >> 1];
    var $cmp = $0 << 16 >> 16 == 0;
    var $max_count_0 = $cmp ? 138 : 7;
    var $min_count_0 = $cmp ? 3 : 4;
    var $len275 = $s + 2754 | 0;
    var $bi_valid277 = $s + 5820 | 0;
    var $code286 = $s + 2752 | 0;
    var $bi_buf292 = $s + 5816 | 0;
    var $pending300 = $s + 20 | 0;
    var $pending_buf302 = $s + 8 | 0;
    var $len397 = $s + 2758 | 0;
    var $code408 = $s + 2756 | 0;
    var $len150 = $s + 2750 | 0;
    var $code161 = $s + 2748 | 0;
    var $min_count_1_ph = $min_count_0;
    var $max_count_1_ph = $max_count_0;
    var $n_0_ph = 0;
    var $prevlen_0_ph = -1;
    var $nextlen_0_ph = $0 & 65535;
    __label__ = 2;
    break;
   case 2:
    var $nextlen_0_ph;
    var $prevlen_0_ph;
    var $n_0_ph;
    var $max_count_1_ph;
    var $min_count_1_ph;
    var $count_0 = 0;
    var $n_0 = $n_0_ph;
    var $nextlen_0 = $nextlen_0_ph;
    __label__ = 3;
    break;
   case 3:
    var $nextlen_0;
    var $n_0;
    var $count_0;
    if (($n_0 | 0) > ($max_code | 0)) {
      __label__ = 39;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $add = $n_0 + 1 | 0;
    var $1 = HEAPU16[$tree + ($add << 2) + 2 >> 1];
    var $conv7 = $1 & 65535;
    var $inc = $count_0 + 1 | 0;
    var $cmp10 = ($nextlen_0 | 0) == ($conv7 | 0);
    if (($inc | 0) < ($max_count_1_ph | 0) & $cmp10) {
      var $count_0 = $inc;
      var $n_0 = $add;
      var $nextlen_0 = $conv7;
      __label__ = 3;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    if (($inc | 0) < ($min_count_1_ph | 0)) {
      __label__ = 6;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 6:
    var $len19 = $s + 2684 + ($nextlen_0 << 2) + 2 | 0;
    var $code = $s + 2684 + ($nextlen_0 << 2) | 0;
    var $count_1 = $inc;
    var $3 = HEAP32[$bi_valid277 >> 2];
    var $2 = HEAP16[$bi_buf292 >> 1];
    __label__ = 7;
    break;
   case 7:
    var $2;
    var $3;
    var $count_1;
    var $conv20 = HEAPU16[$len19 >> 1] & 65535;
    var $cmp21 = ($3 | 0) > (16 - $conv20 | 0);
    var $conv28 = HEAPU16[$code >> 1] & 65535;
    var $or = $2 & 65535 | $conv28 << $3;
    var $conv31 = $or & 65535;
    HEAP16[$bi_buf292 >> 1] = $conv31;
    if ($cmp21) {
      __label__ = 8;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 8:
    var $conv34 = $or & 255;
    var $6 = HEAP32[$pending300 >> 2];
    var $inc35 = $6 + 1 | 0;
    HEAP32[$pending300 >> 2] = $inc35;
    HEAP8[HEAP32[$pending_buf302 >> 2] + $6 | 0] = $conv34;
    var $conv39 = (HEAPU16[$bi_buf292 >> 1] & 65535) >>> 8 & 255;
    var $9 = HEAPU32[$pending300 >> 2];
    HEAP32[$pending300 >> 2] = $9 + 1 | 0;
    HEAP8[HEAP32[$pending_buf302 >> 2] + $9 | 0] = $conv39;
    var $11 = HEAPU32[$bi_valid277 >> 2];
    var $conv49 = $conv28 >>> ((16 - $11 | 0) >>> 0) & 65535;
    HEAP16[$bi_buf292 >> 1] = $conv49;
    var $storemerge11 = $conv20 - 16 + $11 | 0;
    var $12 = $conv49;
    __label__ = 10;
    break;
   case 9:
    var $storemerge11 = $3 + $conv20 | 0;
    var $12 = $conv31;
    __label__ = 10;
    break;
   case 10:
    var $12;
    var $storemerge11;
    HEAP32[$bi_valid277 >> 2] = $storemerge11;
    var $dec = $count_1 - 1 | 0;
    if (($dec | 0) == 0) {
      __label__ = 37;
      break;
    } else {
      var $count_1 = $dec;
      var $3 = $storemerge11;
      var $2 = $12;
      __label__ = 7;
      break;
    }
   case 11:
    if (($nextlen_0 | 0) == 0) {
      __label__ = 24;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 12:
    if (($nextlen_0 | 0) == ($prevlen_0_ph | 0)) {
      __label__ = 13;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 13:
    var $count_2 = $inc;
    var $23 = HEAP32[$bi_valid277 >> 2];
    __label__ = 18;
    break;
   case 14:
    var $conv83 = HEAPU16[$s + 2684 + ($nextlen_0 << 2) + 2 >> 1] & 65535;
    var $14 = HEAPU32[$bi_valid277 >> 2];
    var $cmp86 = ($14 | 0) > (16 - $conv83 | 0);
    var $conv96 = HEAPU16[$s + 2684 + ($nextlen_0 << 2) >> 1] & 65535;
    var $or101 = HEAPU16[$bi_buf292 >> 1] & 65535 | $conv96 << $14;
    HEAP16[$bi_buf292 >> 1] = $or101 & 65535;
    if ($cmp86) {
      __label__ = 15;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 15:
    var $conv106 = $or101 & 255;
    var $17 = HEAP32[$pending300 >> 2];
    var $inc108 = $17 + 1 | 0;
    HEAP32[$pending300 >> 2] = $inc108;
    HEAP8[HEAP32[$pending_buf302 >> 2] + $17 | 0] = $conv106;
    var $conv114 = (HEAPU16[$bi_buf292 >> 1] & 65535) >>> 8 & 255;
    var $20 = HEAPU32[$pending300 >> 2];
    HEAP32[$pending300 >> 2] = $20 + 1 | 0;
    HEAP8[HEAP32[$pending_buf302 >> 2] + $20 | 0] = $conv114;
    var $22 = HEAPU32[$bi_valid277 >> 2];
    HEAP16[$bi_buf292 >> 1] = $conv96 >>> ((16 - $22 | 0) >>> 0) & 65535;
    var $storemerge9 = $conv83 - 16 + $22 | 0;
    __label__ = 17;
    break;
   case 16:
    var $storemerge9 = $14 + $conv83 | 0;
    __label__ = 17;
    break;
   case 17:
    var $storemerge9;
    HEAP32[$bi_valid277 >> 2] = $storemerge9;
    var $count_2 = $count_0;
    var $23 = $storemerge9;
    __label__ = 18;
    break;
   case 18:
    var $23;
    var $count_2;
    var $conv151 = HEAPU16[$len150 >> 1] & 65535;
    var $cmp154 = ($23 | 0) > (16 - $conv151 | 0);
    var $conv164 = HEAPU16[$code161 >> 1] & 65535;
    var $or169 = HEAPU16[$bi_buf292 >> 1] & 65535 | $conv164 << $23;
    var $conv170 = $or169 & 65535;
    HEAP16[$bi_buf292 >> 1] = $conv170;
    if ($cmp154) {
      __label__ = 19;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 19:
    var $conv174 = $or169 & 255;
    var $27 = HEAP32[$pending300 >> 2];
    var $inc176 = $27 + 1 | 0;
    HEAP32[$pending300 >> 2] = $inc176;
    HEAP8[HEAP32[$pending_buf302 >> 2] + $27 | 0] = $conv174;
    var $conv182 = (HEAPU16[$bi_buf292 >> 1] & 65535) >>> 8 & 255;
    var $30 = HEAPU32[$pending300 >> 2];
    HEAP32[$pending300 >> 2] = $30 + 1 | 0;
    HEAP8[HEAP32[$pending_buf302 >> 2] + $30 | 0] = $conv182;
    var $32 = HEAPU32[$bi_valid277 >> 2];
    var $conv192 = $conv164 >>> ((16 - $32 | 0) >>> 0) & 65535;
    HEAP16[$bi_buf292 >> 1] = $conv192;
    var $34 = $conv151 - 16 + $32 | 0;
    var $33 = $conv192;
    __label__ = 21;
    break;
   case 20:
    var $34 = $23 + $conv151 | 0;
    var $33 = $conv170;
    __label__ = 21;
    break;
   case 21:
    var $33;
    var $34;
    HEAP32[$bi_valid277 >> 2] = $34;
    var $conv221 = $count_2 + 65533 & 65535;
    var $or226 = $33 & 65535 | $conv221 << $34;
    HEAP16[$bi_buf292 >> 1] = $or226 & 65535;
    if (($34 | 0) > 14) {
      __label__ = 22;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 22:
    var $35 = HEAP32[$pending300 >> 2];
    var $inc233 = $35 + 1 | 0;
    HEAP32[$pending300 >> 2] = $inc233;
    HEAP8[HEAP32[$pending_buf302 >> 2] + $35 | 0] = $or226 & 255;
    var $conv239 = (HEAPU16[$bi_buf292 >> 1] & 65535) >>> 8 & 255;
    var $38 = HEAPU32[$pending300 >> 2];
    HEAP32[$pending300 >> 2] = $38 + 1 | 0;
    HEAP8[HEAP32[$pending_buf302 >> 2] + $38 | 0] = $conv239;
    var $40 = HEAPU32[$bi_valid277 >> 2];
    HEAP16[$bi_buf292 >> 1] = $conv221 >>> ((16 - $40 | 0) >>> 0) & 65535;
    HEAP32[$bi_valid277 >> 2] = $40 - 14 | 0;
    __label__ = 37;
    break;
   case 23:
    HEAP32[$bi_valid277 >> 2] = $34 + 2 | 0;
    __label__ = 37;
    break;
   case 24:
    if (($inc | 0) < 11) {
      __label__ = 25;
      break;
    } else {
      __label__ = 31;
      break;
    }
   case 25:
    var $conv276 = HEAPU16[$len275 >> 1] & 65535;
    var $42 = HEAPU32[$bi_valid277 >> 2];
    var $cmp279 = ($42 | 0) > (16 - $conv276 | 0);
    var $conv289 = HEAPU16[$code286 >> 1] & 65535;
    var $or294 = HEAPU16[$bi_buf292 >> 1] & 65535 | $conv289 << $42;
    var $conv295 = $or294 & 65535;
    HEAP16[$bi_buf292 >> 1] = $conv295;
    if ($cmp279) {
      __label__ = 26;
      break;
    } else {
      __label__ = 27;
      break;
    }
   case 26:
    var $conv299 = $or294 & 255;
    var $45 = HEAP32[$pending300 >> 2];
    var $inc301 = $45 + 1 | 0;
    HEAP32[$pending300 >> 2] = $inc301;
    HEAP8[HEAP32[$pending_buf302 >> 2] + $45 | 0] = $conv299;
    var $conv307 = (HEAPU16[$bi_buf292 >> 1] & 65535) >>> 8 & 255;
    var $48 = HEAPU32[$pending300 >> 2];
    HEAP32[$pending300 >> 2] = $48 + 1 | 0;
    HEAP8[HEAP32[$pending_buf302 >> 2] + $48 | 0] = $conv307;
    var $50 = HEAPU32[$bi_valid277 >> 2];
    var $conv317 = $conv289 >>> ((16 - $50 | 0) >>> 0) & 65535;
    HEAP16[$bi_buf292 >> 1] = $conv317;
    var $52 = $conv276 - 16 + $50 | 0;
    var $51 = $conv317;
    __label__ = 28;
    break;
   case 27:
    var $52 = $42 + $conv276 | 0;
    var $51 = $conv295;
    __label__ = 28;
    break;
   case 28:
    var $51;
    var $52;
    HEAP32[$bi_valid277 >> 2] = $52;
    var $conv346 = $count_0 + 65534 & 65535;
    var $or351 = $51 & 65535 | $conv346 << $52;
    HEAP16[$bi_buf292 >> 1] = $or351 & 65535;
    if (($52 | 0) > 13) {
      __label__ = 29;
      break;
    } else {
      __label__ = 30;
      break;
    }
   case 29:
    var $53 = HEAP32[$pending300 >> 2];
    var $inc358 = $53 + 1 | 0;
    HEAP32[$pending300 >> 2] = $inc358;
    HEAP8[HEAP32[$pending_buf302 >> 2] + $53 | 0] = $or351 & 255;
    var $conv364 = (HEAPU16[$bi_buf292 >> 1] & 65535) >>> 8 & 255;
    var $56 = HEAPU32[$pending300 >> 2];
    HEAP32[$pending300 >> 2] = $56 + 1 | 0;
    HEAP8[HEAP32[$pending_buf302 >> 2] + $56 | 0] = $conv364;
    var $58 = HEAPU32[$bi_valid277 >> 2];
    HEAP16[$bi_buf292 >> 1] = $conv346 >>> ((16 - $58 | 0) >>> 0) & 65535;
    HEAP32[$bi_valid277 >> 2] = $58 - 13 | 0;
    __label__ = 37;
    break;
   case 30:
    HEAP32[$bi_valid277 >> 2] = $52 + 3 | 0;
    __label__ = 37;
    break;
   case 31:
    var $conv398 = HEAPU16[$len397 >> 1] & 65535;
    var $60 = HEAPU32[$bi_valid277 >> 2];
    var $cmp401 = ($60 | 0) > (16 - $conv398 | 0);
    var $conv411 = HEAPU16[$code408 >> 1] & 65535;
    var $or416 = HEAPU16[$bi_buf292 >> 1] & 65535 | $conv411 << $60;
    var $conv417 = $or416 & 65535;
    HEAP16[$bi_buf292 >> 1] = $conv417;
    if ($cmp401) {
      __label__ = 32;
      break;
    } else {
      __label__ = 33;
      break;
    }
   case 32:
    var $conv421 = $or416 & 255;
    var $63 = HEAP32[$pending300 >> 2];
    var $inc423 = $63 + 1 | 0;
    HEAP32[$pending300 >> 2] = $inc423;
    HEAP8[HEAP32[$pending_buf302 >> 2] + $63 | 0] = $conv421;
    var $conv429 = (HEAPU16[$bi_buf292 >> 1] & 65535) >>> 8 & 255;
    var $66 = HEAPU32[$pending300 >> 2];
    HEAP32[$pending300 >> 2] = $66 + 1 | 0;
    HEAP8[HEAP32[$pending_buf302 >> 2] + $66 | 0] = $conv429;
    var $68 = HEAPU32[$bi_valid277 >> 2];
    var $conv439 = $conv411 >>> ((16 - $68 | 0) >>> 0) & 65535;
    HEAP16[$bi_buf292 >> 1] = $conv439;
    var $70 = $conv398 - 16 + $68 | 0;
    var $69 = $conv439;
    __label__ = 34;
    break;
   case 33:
    var $70 = $60 + $conv398 | 0;
    var $69 = $conv417;
    __label__ = 34;
    break;
   case 34:
    var $69;
    var $70;
    HEAP32[$bi_valid277 >> 2] = $70;
    var $conv468 = $count_0 + 65526 & 65535;
    var $or473 = $69 & 65535 | $conv468 << $70;
    HEAP16[$bi_buf292 >> 1] = $or473 & 65535;
    if (($70 | 0) > 9) {
      __label__ = 35;
      break;
    } else {
      __label__ = 36;
      break;
    }
   case 35:
    var $71 = HEAP32[$pending300 >> 2];
    var $inc480 = $71 + 1 | 0;
    HEAP32[$pending300 >> 2] = $inc480;
    HEAP8[HEAP32[$pending_buf302 >> 2] + $71 | 0] = $or473 & 255;
    var $conv486 = (HEAPU16[$bi_buf292 >> 1] & 65535) >>> 8 & 255;
    var $74 = HEAPU32[$pending300 >> 2];
    HEAP32[$pending300 >> 2] = $74 + 1 | 0;
    HEAP8[HEAP32[$pending_buf302 >> 2] + $74 | 0] = $conv486;
    var $76 = HEAPU32[$bi_valid277 >> 2];
    HEAP16[$bi_buf292 >> 1] = $conv468 >>> ((16 - $76 | 0) >>> 0) & 65535;
    HEAP32[$bi_valid277 >> 2] = $76 - 9 | 0;
    __label__ = 37;
    break;
   case 36:
    HEAP32[$bi_valid277 >> 2] = $70 + 7 | 0;
    __label__ = 37;
    break;
   case 37:
    if ($1 << 16 >> 16 == 0) {
      var $min_count_1_ph = 3;
      var $max_count_1_ph = 138;
      var $n_0_ph = $add;
      var $prevlen_0_ph = $nextlen_0;
      var $nextlen_0_ph = $conv7;
      __label__ = 2;
      break;
    } else {
      __label__ = 38;
      break;
    }
   case 38:
    var $_ = $cmp10 ? 6 : 7;
    var $_13 = $cmp10 ? 3 : 4;
    var $min_count_1_ph = $_13;
    var $max_count_1_ph = $_;
    var $n_0_ph = $add;
    var $prevlen_0_ph = $nextlen_0;
    var $nextlen_0_ph = $conv7;
    __label__ = 2;
    break;
   case 39:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_send_tree["X"] = 1;

function _scan_tree($s, $tree, $max_code) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $0 = HEAPU16[$tree + 2 >> 1];
    var $conv = $0 & 65535;
    var $cmp = $0 << 16 >> 16 == 0;
    var $max_count_0 = $cmp ? 138 : 7;
    var $min_count_0 = $cmp ? 3 : 4;
    HEAP16[$tree + ($max_code + 1 << 2) + 2 >> 1] = -1;
    var $freq49 = $s + 2752 | 0;
    var $freq55 = $s + 2756 | 0;
    var $freq40 = $s + 2748 | 0;
    var $min_count_1_ph = $min_count_0;
    var $max_count_1_ph = $max_count_0;
    var $n_0_ph = 0;
    var $prevlen_0_ph = -1;
    var $nextlen_0_ph = $conv;
    __label__ = 2;
    break;
   case 2:
    var $nextlen_0_ph;
    var $prevlen_0_ph;
    var $n_0_ph;
    var $max_count_1_ph;
    var $min_count_1_ph;
    var $count_0 = 0;
    var $n_0 = $n_0_ph;
    var $nextlen_0 = $nextlen_0_ph;
    __label__ = 3;
    break;
   case 3:
    var $nextlen_0;
    var $n_0;
    var $count_0;
    if (($n_0 | 0) > ($max_code | 0)) {
      __label__ = 16;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $add7 = $n_0 + 1 | 0;
    var $1 = HEAPU16[$tree + ($add7 << 2) + 2 >> 1];
    var $conv11 = $1 & 65535;
    var $inc = $count_0 + 1 | 0;
    var $cmp14 = ($nextlen_0 | 0) == ($conv11 | 0);
    if (($inc | 0) < ($max_count_1_ph | 0) & $cmp14) {
      var $count_0 = $inc;
      var $n_0 = $add7;
      var $nextlen_0 = $conv11;
      __label__ = 3;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    if (($inc | 0) < ($min_count_1_ph | 0)) {
      __label__ = 6;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 6:
    var $freq = $s + 2684 + ($nextlen_0 << 2) | 0;
    HEAP16[$freq >> 1] = (HEAPU16[$freq >> 1] & 65535) + $inc & 65535;
    __label__ = 14;
    break;
   case 7:
    if (($nextlen_0 | 0) == 0) {
      __label__ = 11;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    if (($nextlen_0 | 0) == ($prevlen_0_ph | 0)) {
      __label__ = 10;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    var $freq34 = $s + 2684 + ($nextlen_0 << 2) | 0;
    var $inc35 = HEAP16[$freq34 >> 1] + 1 & 65535;
    HEAP16[$freq34 >> 1] = $inc35;
    __label__ = 10;
    break;
   case 10:
    var $inc41 = HEAP16[$freq40 >> 1] + 1 & 65535;
    HEAP16[$freq40 >> 1] = $inc41;
    __label__ = 14;
    break;
   case 11:
    if (($inc | 0) < 11) {
      __label__ = 12;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 12:
    var $inc50 = HEAP16[$freq49 >> 1] + 1 & 65535;
    HEAP16[$freq49 >> 1] = $inc50;
    __label__ = 14;
    break;
   case 13:
    var $inc56 = HEAP16[$freq55 >> 1] + 1 & 65535;
    HEAP16[$freq55 >> 1] = $inc56;
    __label__ = 14;
    break;
   case 14:
    if ($1 << 16 >> 16 == 0) {
      var $min_count_1_ph = 3;
      var $max_count_1_ph = 138;
      var $n_0_ph = $add7;
      var $prevlen_0_ph = $nextlen_0;
      var $nextlen_0_ph = $conv11;
      __label__ = 2;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 15:
    var $_ = $cmp14 ? 6 : 7;
    var $_1 = $cmp14 ? 3 : 4;
    var $min_count_1_ph = $_1;
    var $max_count_1_ph = $_;
    var $n_0_ph = $add7;
    var $prevlen_0_ph = $nextlen_0;
    var $nextlen_0_ph = $conv11;
    __label__ = 2;
    break;
   case 16:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_scan_tree["X"] = 1;

function _pqdownheap($s, $tree, $k) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $0 = HEAPU32[$s + 2908 + ($k << 2) >> 2];
    var $arrayidx69 = $s + ($0 + 5208) | 0;
    var $heap_len = $s + 5200 | 0;
    var $freq44 = $tree + ($0 << 2) | 0;
    var $k_addr_0 = $k;
    __label__ = 2;
    break;
   case 2:
    var $k_addr_0;
    var $j_0 = $k_addr_0 << 1;
    var $1 = HEAP32[$heap_len >> 2];
    if (($j_0 | 0) > ($1 | 0)) {
      __label__ = 12;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    if (($j_0 | 0) < ($1 | 0)) {
      __label__ = 4;
      break;
    } else {
      var $j_1 = $j_0;
      __label__ = 8;
      break;
    }
   case 4:
    var $add1 = $j_0 | 1;
    var $2 = HEAPU32[$s + 2908 + ($add1 << 2) >> 2];
    var $3 = HEAPU16[$tree + ($2 << 2) >> 1];
    var $4 = HEAPU32[$s + 2908 + ($j_0 << 2) >> 2];
    var $5 = HEAPU16[$tree + ($4 << 2) >> 1];
    if (($3 & 65535) < ($5 & 65535)) {
      __label__ = 7;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    if ($3 << 16 >> 16 == $5 << 16 >> 16) {
      __label__ = 6;
      break;
    } else {
      var $j_1 = $j_0;
      __label__ = 8;
      break;
    }
   case 6:
    if ((HEAPU8[$s + ($2 + 5208) | 0] & 255) > (HEAPU8[$s + ($4 + 5208) | 0] & 255)) {
      var $j_1 = $j_0;
      __label__ = 8;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    var $j_1 = $add1;
    __label__ = 8;
    break;
   case 8:
    var $j_1;
    var $8 = HEAPU16[$freq44 >> 1];
    var $9 = HEAPU32[$s + 2908 + ($j_1 << 2) >> 2];
    var $10 = HEAPU16[$tree + ($9 << 2) >> 1];
    if (($8 & 65535) < ($10 & 65535)) {
      __label__ = 12;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    if ($8 << 16 >> 16 == $10 << 16 >> 16) {
      __label__ = 10;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 10:
    if ((HEAPU8[$arrayidx69] & 255) > (HEAPU8[$s + ($9 + 5208) | 0] & 255)) {
      __label__ = 11;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 11:
    HEAP32[$s + 2908 + ($k_addr_0 << 2) >> 2] = $9;
    var $k_addr_0 = $j_1;
    __label__ = 2;
    break;
   case 12:
    HEAP32[$s + 2908 + ($k_addr_0 << 2) >> 2] = $0;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_pqdownheap["X"] = 1;

function _send_all_trees($s, $lcodes, $dcodes, $blcodes) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $bi_valid = $s + 5820 | 0;
    var $0 = HEAPU32[$bi_valid >> 2];
    var $cmp = ($0 | 0) > 11;
    var $conv2 = $lcodes + 65279 & 65535;
    var $bi_buf = $s + 5816 | 0;
    var $or = HEAPU16[$bi_buf >> 1] & 65535 | $conv2 << $0;
    var $conv5 = $or & 65535;
    HEAP16[$bi_buf >> 1] = $conv5;
    if ($cmp) {
      __label__ = 2;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 2:
    var $conv8 = $or & 255;
    var $pending = $s + 20 | 0;
    var $2 = HEAP32[$pending >> 2];
    var $inc = $2 + 1 | 0;
    HEAP32[$pending >> 2] = $inc;
    var $pending_buf = $s + 8 | 0;
    HEAP8[HEAP32[$pending_buf >> 2] + $2 | 0] = $conv8;
    var $conv11 = (HEAPU16[$bi_buf >> 1] & 65535) >>> 8 & 255;
    var $5 = HEAPU32[$pending >> 2];
    HEAP32[$pending >> 2] = $5 + 1 | 0;
    HEAP8[HEAP32[$pending_buf >> 2] + $5 | 0] = $conv11;
    var $7 = HEAPU32[$bi_valid >> 2];
    var $conv21 = $conv2 >>> ((16 - $7 | 0) >>> 0) & 65535;
    HEAP16[$bi_buf >> 1] = $conv21;
    var $9 = $7 - 11 | 0;
    var $8 = $conv21;
    __label__ = 4;
    break;
   case 3:
    var $9 = $0 + 5 | 0;
    var $8 = $conv5;
    __label__ = 4;
    break;
   case 4:
    var $8;
    var $9;
    HEAP32[$bi_valid >> 2] = $9;
    var $sub43 = $dcodes - 1 | 0;
    var $conv45 = $sub43 & 65535;
    var $or50 = $8 & 65535 | $conv45 << $9;
    var $conv51 = $or50 & 65535;
    HEAP16[$bi_buf >> 1] = $conv51;
    if (($9 | 0) > 11) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    var $conv55 = $or50 & 255;
    var $pending56 = $s + 20 | 0;
    var $10 = HEAP32[$pending56 >> 2];
    var $inc57 = $10 + 1 | 0;
    HEAP32[$pending56 >> 2] = $inc57;
    var $pending_buf58 = $s + 8 | 0;
    HEAP8[HEAP32[$pending_buf58 >> 2] + $10 | 0] = $conv55;
    var $conv63 = (HEAPU16[$bi_buf >> 1] & 65535) >>> 8 & 255;
    var $13 = HEAPU32[$pending56 >> 2];
    HEAP32[$pending56 >> 2] = $13 + 1 | 0;
    HEAP8[HEAP32[$pending_buf58 >> 2] + $13 | 0] = $conv63;
    var $15 = HEAPU32[$bi_valid >> 2];
    var $conv73 = $conv45 >>> ((16 - $15 | 0) >>> 0) & 65535;
    HEAP16[$bi_buf >> 1] = $conv73;
    var $17 = $15 - 11 | 0;
    var $16 = $conv73;
    __label__ = 7;
    break;
   case 6:
    var $17 = $9 + 5 | 0;
    var $16 = $conv51;
    __label__ = 7;
    break;
   case 7:
    var $16;
    var $17;
    HEAP32[$bi_valid >> 2] = $17;
    var $conv100 = $blcodes + 65532 & 65535;
    var $or105 = $16 & 65535 | $conv100 << $17;
    var $conv106 = $or105 & 65535;
    HEAP16[$bi_buf >> 1] = $conv106;
    if (($17 | 0) > 12) {
      __label__ = 8;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 8:
    var $conv110 = $or105 & 255;
    var $pending111 = $s + 20 | 0;
    var $18 = HEAP32[$pending111 >> 2];
    var $inc112 = $18 + 1 | 0;
    HEAP32[$pending111 >> 2] = $inc112;
    var $pending_buf113 = $s + 8 | 0;
    HEAP8[HEAP32[$pending_buf113 >> 2] + $18 | 0] = $conv110;
    var $conv118 = (HEAPU16[$bi_buf >> 1] & 65535) >>> 8 & 255;
    var $21 = HEAPU32[$pending111 >> 2];
    HEAP32[$pending111 >> 2] = $21 + 1 | 0;
    HEAP8[HEAP32[$pending_buf113 >> 2] + $21 | 0] = $conv118;
    var $23 = HEAPU32[$bi_valid >> 2];
    var $conv128 = $conv100 >>> ((16 - $23 | 0) >>> 0) & 65535;
    HEAP16[$bi_buf >> 1] = $conv128;
    var $_pr = $23 - 12 | 0;
    var $24 = $conv128;
    __label__ = 10;
    break;
   case 9:
    var $_pr = $17 + 4 | 0;
    var $24 = $conv106;
    __label__ = 10;
    break;
   case 10:
    var $24;
    var $_pr;
    HEAP32[$bi_valid >> 2] = $_pr;
    if (($blcodes | 0) > 0) {
      __label__ = 11;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 11:
    var $pending171 = $s + 20 | 0;
    var $pending_buf173 = $s + 8 | 0;
    var $rank_09 = 0;
    var $26 = $_pr;
    var $25 = $24;
    __label__ = 12;
    break;
   case 12:
    var $25;
    var $26;
    var $rank_09;
    var $arrayidx155 = STRING_TABLE._bl_order + $rank_09 | 0;
    var $conv160 = HEAPU16[$s + 2684 + ((HEAPU8[$arrayidx155] & 255) << 2) + 2 >> 1] & 65535;
    var $or165 = $25 & 65535 | $conv160 << $26;
    var $conv166 = $or165 & 65535;
    HEAP16[$bi_buf >> 1] = $conv166;
    if (($26 | 0) > 13) {
      __label__ = 13;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 13:
    var $conv170 = $or165 & 255;
    var $29 = HEAP32[$pending171 >> 2];
    var $inc172 = $29 + 1 | 0;
    HEAP32[$pending171 >> 2] = $inc172;
    HEAP8[HEAP32[$pending_buf173 >> 2] + $29 | 0] = $conv170;
    var $conv178 = (HEAPU16[$bi_buf >> 1] & 65535) >>> 8 & 255;
    var $32 = HEAPU32[$pending171 >> 2];
    HEAP32[$pending171 >> 2] = $32 + 1 | 0;
    HEAP8[HEAP32[$pending_buf173 >> 2] + $32 | 0] = $conv178;
    var $34 = HEAPU32[$bi_valid >> 2];
    var $conv188 = $conv160 >>> ((16 - $34 | 0) >>> 0) & 65535;
    HEAP16[$bi_buf >> 1] = $conv188;
    var $storemerge3 = $34 - 13 | 0;
    var $35 = $conv188;
    __label__ = 15;
    break;
   case 14:
    var $storemerge3 = $26 + 3 | 0;
    var $35 = $conv166;
    __label__ = 15;
    break;
   case 15:
    var $35;
    var $storemerge3;
    HEAP32[$bi_valid >> 2] = $storemerge3;
    var $inc210 = $rank_09 + 1 | 0;
    if (($inc210 | 0) == ($blcodes | 0)) {
      __label__ = 16;
      break;
    } else {
      var $rank_09 = $inc210;
      var $26 = $storemerge3;
      var $25 = $35;
      __label__ = 12;
      break;
    }
   case 16:
    var $arraydecay = $s + 148 | 0;
    var $sub211 = $lcodes - 1 | 0;
    _send_tree($s, $arraydecay, $sub211);
    var $arraydecay212 = $s + 2440 | 0;
    _send_tree($s, $arraydecay212, $sub43);
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_send_all_trees["X"] = 1;

function _bi_reverse($code, $len) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $code_addr_0 = $code;
    var $len_addr_0 = $len;
    var $res_0 = 0;
    __label__ = 2;
    break;
   case 2:
    var $res_0;
    var $len_addr_0;
    var $code_addr_0;
    var $or = $code_addr_0 & 1 | $res_0;
    var $shl = $or << 1;
    var $dec = $len_addr_0 - 1 | 0;
    if (($dec | 0) > 0) {
      var $code_addr_0 = $code_addr_0 >>> 1;
      var $len_addr_0 = $dec;
      var $res_0 = $shl;
      __label__ = 2;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    return $or & 2147483647;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _zmemcpy($dest, $source, $len) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($len | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      var $dest_addr_0 = $dest;
      var $source_addr_0 = $source;
      var $len_addr_0 = $len;
      __label__ = 2;
      break;
    }
   case 2:
    var $len_addr_0;
    var $source_addr_0;
    var $dest_addr_0;
    var $0 = HEAP8[$source_addr_0];
    HEAP8[$dest_addr_0] = $0;
    var $dec = $len_addr_0 - 1 | 0;
    if (($dec | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      var $dest_addr_0 = $dest_addr_0 + 1 | 0;
      var $source_addr_0 = $source_addr_0 + 1 | 0;
      var $len_addr_0 = $dec;
      __label__ = 2;
      break;
    }
   case 3:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _gen_bitlen($s, $desc_0_0_val, $desc_0_1_val, $desc_0_2_val) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $0 = HEAPU32[$desc_0_2_val >> 2];
    var $1 = HEAP32[$desc_0_2_val + 4 >> 2];
    var $2 = HEAP32[$desc_0_2_val + 8 >> 2];
    var $3 = HEAPU32[$desc_0_2_val + 16 >> 2];
    var $scevgep16 = $s + 2876 | 0;
    _memset($scevgep16, 0, 32, 2);
    var $heap_max = $s + 5204 | 0;
    HEAP16[$desc_0_0_val + (HEAP32[$s + 2908 + (HEAP32[$heap_max >> 2] << 2) >> 2] << 2) + 2 >> 1] = 0;
    var $h_06 = HEAP32[$heap_max >> 2] + 1 | 0;
    if (($h_06 | 0) < 573) {
      __label__ = 2;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 2:
    var $opt_len = $s + 5800 | 0;
    var $tobool = ($0 | 0) == 0;
    var $static_len = $s + 5804 | 0;
    var $overflow_08 = 0;
    var $h_09 = $h_06;
    __label__ = 3;
    break;
   case 3:
    var $h_09;
    var $overflow_08;
    var $7 = HEAPU32[$s + 2908 + ($h_09 << 2) >> 2];
    var $dad = $desc_0_0_val + ($7 << 2) + 2 | 0;
    var $add19 = (HEAPU16[$desc_0_0_val + ((HEAPU16[$dad >> 1] & 65535) << 2) + 2 >> 1] & 65535) + 1 | 0;
    var $cmp20 = ($add19 | 0) > ($3 | 0);
    var $inc22_overflow_0 = ($cmp20 & 1) + $overflow_08 | 0;
    var $bits_1 = $cmp20 ? $3 : $add19;
    HEAP16[$dad >> 1] = $bits_1 & 65535;
    if (($7 | 0) > ($desc_0_1_val | 0)) {
      __label__ = 7;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $arrayidx32 = $s + 2876 + ($bits_1 << 1) | 0;
    var $inc33 = HEAP16[$arrayidx32 >> 1] + 1 & 65535;
    HEAP16[$arrayidx32 >> 1] = $inc33;
    if (($7 | 0) < ($2 | 0)) {
      var $xbits_0 = 0;
      __label__ = 6;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $xbits_0 = HEAP32[$1 + ($7 - $2 << 2) >> 2];
    __label__ = 6;
    break;
   case 6:
    var $xbits_0;
    var $conv40 = HEAPU16[$desc_0_0_val + ($7 << 2) >> 1] & 65535;
    var $add42 = $conv40 * ($xbits_0 + $bits_1) + HEAP32[$opt_len >> 2] | 0;
    HEAP32[$opt_len >> 2] = $add42;
    if ($tobool) {
      __label__ = 7;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 7:
    var $h_0 = $h_09 + 1 | 0;
    if (($h_0 | 0) == 573) {
      __label__ = 9;
      break;
    } else {
      var $overflow_08 = $inc22_overflow_0;
      var $h_09 = $h_0;
      __label__ = 3;
      break;
    }
   case 8:
    var $add51 = ((HEAPU16[$0 + ($7 << 2) + 2 >> 1] & 65535) + $xbits_0) * $conv40 + HEAP32[$static_len >> 2] | 0;
    HEAP32[$static_len >> 2] = $add51;
    __label__ = 7;
    break;
   case 9:
    if (($inc22_overflow_0 | 0) == 0) {
      __label__ = 24;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 10:
    var $arrayidx76 = $s + 2876 + ($3 << 1) | 0;
    var $overflow_2 = $inc22_overflow_0;
    __label__ = 11;
    break;
   case 11:
    var $overflow_2;
    var $bits_2_in = $3;
    __label__ = 12;
    break;
   case 12:
    var $bits_2_in;
    var $bits_2 = $bits_2_in - 1 | 0;
    var $arrayidx62 = $s + 2876 + ($bits_2 << 1) | 0;
    var $16 = HEAP16[$arrayidx62 >> 1];
    if ($16 << 16 >> 16 == 0) {
      var $bits_2_in = $bits_2;
      __label__ = 12;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 13:
    var $dec68 = $16 - 1 & 65535;
    HEAP16[$arrayidx62 >> 1] = $dec68;
    var $arrayidx71 = $s + 2876 + ($bits_2_in << 1) | 0;
    var $add73 = HEAP16[$arrayidx71 >> 1] + 2 & 65535;
    HEAP16[$arrayidx71 >> 1] = $add73;
    var $dec77 = HEAP16[$arrayidx76 >> 1] - 1 & 65535;
    HEAP16[$arrayidx76 >> 1] = $dec77;
    var $sub78 = $overflow_2 - 2 | 0;
    if (($sub78 | 0) > 0) {
      var $overflow_2 = $sub78;
      __label__ = 11;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 14:
    if (($3 | 0) == 0) {
      __label__ = 24;
      break;
    } else {
      var $h_13 = 573;
      var $bits_34 = $3;
      var $19 = $dec77;
      __label__ = 15;
      break;
    }
   case 15:
    var $19;
    var $bits_34;
    var $h_13;
    var $conv118 = $bits_34 & 65535;
    var $n_0_ph = $19 & 65535;
    var $h_2_ph = $h_13;
    __label__ = 16;
    break;
   case 16:
    var $h_2_ph;
    var $n_0_ph;
    var $cmp89 = ($n_0_ph | 0) == 0;
    var $h_2 = $h_2_ph;
    __label__ = 17;
    break;
   case 17:
    var $h_2;
    if ($cmp89) {
      __label__ = 22;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 18:
    var $dec92 = $h_2 - 1 | 0;
    var $20 = HEAPU32[$s + 2908 + ($dec92 << 2) >> 2];
    if (($20 | 0) > ($desc_0_1_val | 0)) {
      var $h_2 = $dec92;
      __label__ = 17;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 19:
    var $len101 = $desc_0_0_val + ($20 << 2) + 2 | 0;
    var $conv102 = HEAPU16[$len101 >> 1] & 65535;
    if (($conv102 | 0) == ($bits_34 | 0)) {
      __label__ = 21;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 20:
    var $add117 = (HEAPU16[$desc_0_0_val + ($20 << 2) >> 1] & 65535) * ($bits_34 - $conv102) + HEAP32[$opt_len >> 2] | 0;
    HEAP32[$opt_len >> 2] = $add117;
    HEAP16[$len101 >> 1] = $conv118;
    __label__ = 21;
    break;
   case 21:
    var $n_0_ph = $n_0_ph - 1 | 0;
    var $h_2_ph = $dec92;
    __label__ = 16;
    break;
   case 22:
    var $dec126 = $bits_34 - 1 | 0;
    if (($dec126 | 0) == 0) {
      __label__ = 24;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 23:
    var $_pre = HEAP16[$s + 2876 + ($dec126 << 1) >> 1];
    var $h_13 = $h_2;
    var $bits_34 = $dec126;
    var $19 = $_pre;
    __label__ = 15;
    break;
   case 24:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_gen_bitlen["X"] = 1;

function _gen_codes($tree, $max_code, $bl_count) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 32;
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $next_code = __stackBase__;
    var $shl = HEAP16[$bl_count >> 1] << 1;
    HEAP16[$next_code + 2 >> 1] = $shl;
    var $shl_1 = (HEAP16[$bl_count + 2 >> 1] + $shl & 65535) << 1;
    HEAP16[$next_code + 4 >> 1] = $shl_1;
    var $shl_2 = (HEAP16[$bl_count + 4 >> 1] + $shl_1 & 65535) << 1;
    HEAP16[$next_code + 6 >> 1] = $shl_2;
    var $shl_3 = (HEAP16[$bl_count + 6 >> 1] + $shl_2 & 65535) << 1;
    HEAP16[$next_code + 8 >> 1] = $shl_3;
    var $shl_4 = (HEAP16[$bl_count + 8 >> 1] + $shl_3 & 65535) << 1;
    HEAP16[$next_code + 10 >> 1] = $shl_4;
    var $shl_5 = (HEAP16[$bl_count + 10 >> 1] + $shl_4 & 65535) << 1;
    HEAP16[$next_code + 12 >> 1] = $shl_5;
    var $shl_6 = (HEAP16[$bl_count + 12 >> 1] + $shl_5 & 65535) << 1;
    HEAP16[$next_code + 14 >> 1] = $shl_6;
    var $shl_7 = (HEAP16[$bl_count + 14 >> 1] + $shl_6 & 65535) << 1;
    HEAP16[$next_code + 16 >> 1] = $shl_7;
    var $shl_8 = (HEAP16[$bl_count + 16 >> 1] + $shl_7 & 65535) << 1;
    HEAP16[$next_code + 18 >> 1] = $shl_8;
    var $shl_9 = (HEAP16[$bl_count + 18 >> 1] + $shl_8 & 65535) << 1;
    HEAP16[$next_code + 20 >> 1] = $shl_9;
    var $shl_10 = (HEAP16[$bl_count + 20 >> 1] + $shl_9 & 65535) << 1;
    HEAP16[$next_code + 22 >> 1] = $shl_10;
    var $shl_11 = (HEAP16[$bl_count + 22 >> 1] + $shl_10 & 65535) << 1;
    HEAP16[$next_code + 24 >> 1] = $shl_11;
    var $shl_12 = (HEAP16[$bl_count + 24 >> 1] + $shl_11 & 65535) << 1;
    HEAP16[$next_code + 26 >> 1] = $shl_12;
    var $shl_13 = (HEAP16[$bl_count + 26 >> 1] + $shl_12 & 65535) << 1;
    HEAP16[$next_code + 28 >> 1] = $shl_13;
    var $shl_14 = (HEAP16[$bl_count + 28 >> 1] + $shl_13 & 65535) << 1;
    HEAP16[$next_code + 30 >> 1] = $shl_14;
    if (($max_code | 0) < 0) {
      __label__ = 6;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $15 = $max_code + 1 | 0;
    var $n_02 = 0;
    __label__ = 3;
    break;
   case 3:
    var $n_02;
    var $16 = HEAPU16[$tree + ($n_02 << 2) + 2 >> 1];
    var $conv10 = $16 & 65535;
    if ($16 << 16 >> 16 == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $arrayidx13 = $next_code + ($conv10 << 1) | 0;
    var $17 = HEAPU16[$arrayidx13 >> 1];
    HEAP16[$arrayidx13 >> 1] = $17 + 1 & 65535;
    var $conv15 = $17 & 65535;
    var $call = _bi_reverse($conv15, $conv10);
    HEAP16[$tree + ($n_02 << 2) >> 1] = $call & 65535;
    __label__ = 5;
    break;
   case 5:
    var $inc20 = $n_02 + 1 | 0;
    if (($inc20 | 0) == ($15 | 0)) {
      __label__ = 6;
      break;
    } else {
      var $n_02 = $inc20;
      __label__ = 3;
      break;
    }
   case 6:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_gen_codes["X"] = 1;

function _zmemzero($dest, $len) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($len | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    _memset($dest, 0, $len, 1);
    __label__ = 3;
    break;
   case 3:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _malloc($bytes) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if ($bytes >>> 0 < 245) {
      __label__ = 2;
      break;
    } else {
      __label__ = 27;
      break;
    }
   case 2:
    if ($bytes >>> 0 < 11) {
      var $cond = 16;
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $cond = $bytes + 11 & -8;
    __label__ = 4;
    break;
   case 4:
    var $cond;
    var $shr = $cond >>> 3;
    var $0 = HEAPU32[__gm_ >> 2];
    var $shr3 = $0 >>> ($shr >>> 0);
    if (($shr3 & 3 | 0) == 0) {
      __label__ = 11;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $add8 = ($shr3 & 1 ^ 1) + $shr | 0;
    var $shl = $add8 << 1;
    var $1 = __gm_ + 40 + ($shl << 2) | 0;
    var $2 = __gm_ + 40 + ($shl + 2 << 2) | 0;
    var $3 = HEAPU32[$2 >> 2];
    var $fd9 = $3 + 8 | 0;
    var $4 = HEAPU32[$fd9 >> 2];
    if (($1 | 0) == ($4 | 0)) {
      __label__ = 6;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 6:
    HEAP32[__gm_ >> 2] = $0 & (1 << $add8 ^ -1);
    __label__ = 10;
    break;
   case 7:
    if ($4 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
      __label__ = 9;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    HEAP32[$2 >> 2] = $4;
    HEAP32[$4 + 12 >> 2] = $1;
    __label__ = 10;
    break;
   case 9:
    _abort();
    throw "Reached an unreachable!";
   case 10:
    var $shl20 = $add8 << 3;
    HEAP32[$3 + 4 >> 2] = $shl20 | 3;
    var $8 = $3 + ($shl20 | 4) | 0;
    var $or24 = HEAP32[$8 >> 2] | 1;
    HEAP32[$8 >> 2] = $or24;
    var $mem_0 = $fd9;
    __label__ = 38;
    break;
   case 11:
    if ($cond >>> 0 > HEAPU32[__gm_ + 8 >> 2] >>> 0) {
      __label__ = 12;
      break;
    } else {
      var $nb_0 = $cond;
      __label__ = 30;
      break;
    }
   case 12:
    if (($shr3 | 0) == 0) {
      __label__ = 25;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 13:
    var $shl37 = 2 << $shr;
    var $and41 = $shr3 << $shr & ($shl37 | -$shl37);
    var $sub44 = ($and41 & -$and41) - 1 | 0;
    var $and46 = $sub44 >>> 12 & 16;
    var $shr47 = $sub44 >>> ($and46 >>> 0);
    var $and49 = $shr47 >>> 5 & 8;
    var $shr51 = $shr47 >>> ($and49 >>> 0);
    var $and53 = $shr51 >>> 2 & 4;
    var $shr55 = $shr51 >>> ($and53 >>> 0);
    var $and57 = $shr55 >>> 1 & 2;
    var $shr59 = $shr55 >>> ($and57 >>> 0);
    var $and61 = $shr59 >>> 1 & 1;
    var $add64 = ($and49 | $and46 | $and53 | $and57 | $and61) + ($shr59 >>> ($and61 >>> 0)) | 0;
    var $shl65 = $add64 << 1;
    var $12 = __gm_ + 40 + ($shl65 << 2) | 0;
    var $13 = __gm_ + 40 + ($shl65 + 2 << 2) | 0;
    var $14 = HEAPU32[$13 >> 2];
    var $fd69 = $14 + 8 | 0;
    var $15 = HEAPU32[$fd69 >> 2];
    if (($12 | 0) == ($15 | 0)) {
      __label__ = 14;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 14:
    HEAP32[__gm_ >> 2] = $0 & (1 << $add64 ^ -1);
    __label__ = 18;
    break;
   case 15:
    if ($15 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
      __label__ = 17;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 16:
    HEAP32[$13 >> 2] = $15;
    HEAP32[$15 + 12 >> 2] = $12;
    __label__ = 18;
    break;
   case 17:
    _abort();
    throw "Reached an unreachable!";
   case 18:
    var $shl87 = $add64 << 3;
    var $sub88 = $shl87 - $cond | 0;
    HEAP32[$14 + 4 >> 2] = $cond | 3;
    var $18 = $14;
    var $19 = $18 + $cond | 0;
    HEAP32[$18 + ($cond | 4) >> 2] = $sub88 | 1;
    HEAP32[$18 + $shl87 >> 2] = $sub88;
    var $21 = HEAPU32[__gm_ + 8 >> 2];
    if (($21 | 0) == 0) {
      __label__ = 24;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 19:
    var $22 = HEAP32[__gm_ + 20 >> 2];
    var $shl100 = $21 >>> 2 & 1073741822;
    var $24 = __gm_ + 40 + ($shl100 << 2) | 0;
    var $25 = HEAPU32[__gm_ >> 2];
    var $shl103 = 1 << ($21 >>> 3);
    if (($25 & $shl103 | 0) == 0) {
      __label__ = 20;
      break;
    } else {
      __label__ = 21;
      break;
    }
   case 20:
    HEAP32[__gm_ >> 2] = $25 | $shl103;
    var $F102_0 = $24;
    var $_pre_phi = __gm_ + 40 + ($shl100 + 2 << 2) | 0;
    __label__ = 23;
    break;
   case 21:
    var $26 = __gm_ + 40 + ($shl100 + 2 << 2) | 0;
    var $27 = HEAPU32[$26 >> 2];
    if ($27 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
      __label__ = 22;
      break;
    } else {
      var $F102_0 = $27;
      var $_pre_phi = $26;
      __label__ = 23;
      break;
    }
   case 22:
    _abort();
    throw "Reached an unreachable!";
   case 23:
    var $_pre_phi;
    var $F102_0;
    HEAP32[$_pre_phi >> 2] = $22;
    HEAP32[$F102_0 + 12 >> 2] = $22;
    var $fd122 = $22 + 8 | 0;
    HEAP32[$fd122 >> 2] = $F102_0;
    var $bk123 = $22 + 12 | 0;
    HEAP32[$bk123 >> 2] = $24;
    __label__ = 24;
    break;
   case 24:
    HEAP32[__gm_ + 8 >> 2] = $sub88;
    HEAP32[__gm_ + 20 >> 2] = $19;
    var $mem_0 = $fd69;
    __label__ = 38;
    break;
   case 25:
    if ((HEAP32[__gm_ + 4 >> 2] | 0) == 0) {
      var $nb_0 = $cond;
      __label__ = 30;
      break;
    } else {
      __label__ = 26;
      break;
    }
   case 26:
    var $call = _tmalloc_small($cond);
    if (($call | 0) == 0) {
      var $nb_0 = $cond;
      __label__ = 30;
      break;
    } else {
      var $mem_0 = $call;
      __label__ = 38;
      break;
    }
   case 27:
    if ($bytes >>> 0 > 4294967231) {
      var $nb_0 = -1;
      __label__ = 30;
      break;
    } else {
      __label__ = 28;
      break;
    }
   case 28:
    var $and143 = $bytes + 11 & -8;
    if ((HEAP32[__gm_ + 4 >> 2] | 0) == 0) {
      var $nb_0 = $and143;
      __label__ = 30;
      break;
    } else {
      __label__ = 29;
      break;
    }
   case 29:
    var $call147 = _tmalloc_large($and143);
    if (($call147 | 0) == 0) {
      var $nb_0 = $and143;
      __label__ = 30;
      break;
    } else {
      var $mem_0 = $call147;
      __label__ = 38;
      break;
    }
   case 30:
    var $nb_0;
    var $33 = HEAPU32[__gm_ + 8 >> 2];
    if ($nb_0 >>> 0 > $33 >>> 0) {
      __label__ = 35;
      break;
    } else {
      __label__ = 31;
      break;
    }
   case 31:
    var $sub158 = $33 - $nb_0 | 0;
    var $34 = HEAPU32[__gm_ + 20 >> 2];
    if ($sub158 >>> 0 > 15) {
      __label__ = 32;
      break;
    } else {
      __label__ = 33;
      break;
    }
   case 32:
    var $35 = $34;
    HEAP32[__gm_ + 20 >> 2] = $35 + $nb_0 | 0;
    HEAP32[__gm_ + 8 >> 2] = $sub158;
    HEAP32[$nb_0 + ($35 + 4) >> 2] = $sub158 | 1;
    HEAP32[$35 + $33 >> 2] = $sub158;
    HEAP32[$34 + 4 >> 2] = $nb_0 | 3;
    __label__ = 34;
    break;
   case 33:
    HEAP32[__gm_ + 8 >> 2] = 0;
    HEAP32[__gm_ + 20 >> 2] = 0;
    HEAP32[$34 + 4 >> 2] = $33 | 3;
    var $39 = $33 + ($34 + 4) | 0;
    var $or178 = HEAP32[$39 >> 2] | 1;
    HEAP32[$39 >> 2] = $or178;
    __label__ = 34;
    break;
   case 34:
    var $mem_0 = $34 + 8 | 0;
    __label__ = 38;
    break;
   case 35:
    var $42 = HEAPU32[__gm_ + 12 >> 2];
    if ($nb_0 >>> 0 < $42 >>> 0) {
      __label__ = 36;
      break;
    } else {
      __label__ = 37;
      break;
    }
   case 36:
    var $sub186 = $42 - $nb_0 | 0;
    HEAP32[__gm_ + 12 >> 2] = $sub186;
    var $43 = HEAPU32[__gm_ + 24 >> 2];
    var $44 = $43;
    HEAP32[__gm_ + 24 >> 2] = $44 + $nb_0 | 0;
    HEAP32[$nb_0 + ($44 + 4) >> 2] = $sub186 | 1;
    HEAP32[$43 + 4 >> 2] = $nb_0 | 3;
    var $mem_0 = $43 + 8 | 0;
    __label__ = 38;
    break;
   case 37:
    var $call198 = _sys_alloc($nb_0);
    var $mem_0 = $call198;
    __label__ = 38;
    break;
   case 38:
    var $mem_0;
    return $mem_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

Module["_malloc"] = _malloc;

_malloc["X"] = 1;

function _tmalloc_small($nb) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $0 = HEAP32[__gm_ + 4 >> 2];
    var $sub2 = ($0 & -$0) - 1 | 0;
    var $and3 = $sub2 >>> 12 & 16;
    var $shr4 = $sub2 >>> ($and3 >>> 0);
    var $and6 = $shr4 >>> 5 & 8;
    var $shr7 = $shr4 >>> ($and6 >>> 0);
    var $and9 = $shr7 >>> 2 & 4;
    var $shr11 = $shr7 >>> ($and9 >>> 0);
    var $and13 = $shr11 >>> 1 & 2;
    var $shr15 = $shr11 >>> ($and13 >>> 0);
    var $and17 = $shr15 >>> 1 & 1;
    var $1 = HEAPU32[__gm_ + 304 + (($and6 | $and3 | $and9 | $and13 | $and17) + ($shr15 >>> ($and17 >>> 0)) << 2) >> 2];
    var $v_0_ph = $1;
    var $rsize_0_ph = (HEAP32[$1 + 4 >> 2] & -8) - $nb | 0;
    __label__ = 2;
    break;
   case 2:
    var $rsize_0_ph;
    var $v_0_ph;
    var $t_0 = $v_0_ph;
    __label__ = 3;
    break;
   case 3:
    var $t_0;
    var $3 = HEAP32[$t_0 + 16 >> 2];
    if (($3 | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      var $cond5 = $3;
      __label__ = 5;
      break;
    }
   case 4:
    var $4 = HEAP32[$t_0 + 20 >> 2];
    if (($4 | 0) == 0) {
      __label__ = 6;
      break;
    } else {
      var $cond5 = $4;
      __label__ = 5;
      break;
    }
   case 5:
    var $cond5;
    var $sub31 = (HEAP32[$cond5 + 4 >> 2] & -8) - $nb | 0;
    if ($sub31 >>> 0 < $rsize_0_ph >>> 0) {
      var $v_0_ph = $cond5;
      var $rsize_0_ph = $sub31;
      __label__ = 2;
      break;
    } else {
      var $t_0 = $cond5;
      __label__ = 3;
      break;
    }
   case 6:
    var $6 = $v_0_ph;
    var $7 = HEAPU32[__gm_ + 16 >> 2];
    if ($6 >>> 0 < $7 >>> 0) {
      __label__ = 49;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    var $add_ptr = $6 + $nb | 0;
    var $8 = $add_ptr;
    if ($6 >>> 0 < $add_ptr >>> 0) {
      __label__ = 8;
      break;
    } else {
      __label__ = 49;
      break;
    }
   case 8:
    var $9 = HEAPU32[$v_0_ph + 24 >> 2];
    var $10 = HEAPU32[$v_0_ph + 12 >> 2];
    if (($10 | 0) == ($v_0_ph | 0)) {
      __label__ = 12;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    var $11 = HEAPU32[$v_0_ph + 8 >> 2];
    if ($11 >>> 0 < $7 >>> 0) {
      __label__ = 11;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 10:
    HEAP32[$11 + 12 >> 2] = $10;
    HEAP32[$10 + 8 >> 2] = $11;
    var $R_1 = $10;
    __label__ = 19;
    break;
   case 11:
    _abort();
    throw "Reached an unreachable!";
   case 12:
    var $arrayidx55 = $v_0_ph + 20 | 0;
    var $13 = HEAP32[$arrayidx55 >> 2];
    if (($13 | 0) == 0) {
      __label__ = 13;
      break;
    } else {
      var $RP_0 = $arrayidx55;
      var $R_0 = $13;
      __label__ = 14;
      break;
    }
   case 13:
    var $arrayidx59 = $v_0_ph + 16 | 0;
    var $14 = HEAP32[$arrayidx59 >> 2];
    if (($14 | 0) == 0) {
      var $R_1 = 0;
      __label__ = 19;
      break;
    } else {
      var $RP_0 = $arrayidx59;
      var $R_0 = $14;
      __label__ = 14;
      break;
    }
   case 14:
    var $R_0;
    var $RP_0;
    var $arrayidx65 = $R_0 + 20 | 0;
    var $15 = HEAP32[$arrayidx65 >> 2];
    if (($15 | 0) == 0) {
      __label__ = 15;
      break;
    } else {
      var $RP_0 = $arrayidx65;
      var $R_0 = $15;
      __label__ = 14;
      break;
    }
   case 15:
    var $arrayidx69 = $R_0 + 16 | 0;
    var $16 = HEAPU32[$arrayidx69 >> 2];
    if (($16 | 0) == 0) {
      __label__ = 16;
      break;
    } else {
      var $RP_0 = $arrayidx69;
      var $R_0 = $16;
      __label__ = 14;
      break;
    }
   case 16:
    if ($RP_0 >>> 0 < $7 >>> 0) {
      __label__ = 18;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 17:
    HEAP32[$RP_0 >> 2] = 0;
    var $R_1 = $R_0;
    __label__ = 19;
    break;
   case 18:
    _abort();
    throw "Reached an unreachable!";
   case 19:
    var $R_1;
    if (($9 | 0) == 0) {
      __label__ = 39;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 20:
    var $index = $v_0_ph + 28 | 0;
    var $arrayidx88 = __gm_ + 304 + (HEAP32[$index >> 2] << 2) | 0;
    if (($v_0_ph | 0) == (HEAP32[$arrayidx88 >> 2] | 0)) {
      __label__ = 21;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 21:
    HEAP32[$arrayidx88 >> 2] = $R_1;
    if (($R_1 | 0) == 0) {
      __label__ = 22;
      break;
    } else {
      __label__ = 29;
      break;
    }
   case 22:
    var $and97 = HEAP32[__gm_ + 4 >> 2] & (1 << HEAP32[$index >> 2] ^ -1);
    HEAP32[__gm_ + 4 >> 2] = $and97;
    __label__ = 39;
    break;
   case 23:
    if ($9 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
      __label__ = 27;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 24:
    var $arrayidx107 = $9 + 16 | 0;
    if ((HEAP32[$arrayidx107 >> 2] | 0) == ($v_0_ph | 0)) {
      __label__ = 25;
      break;
    } else {
      __label__ = 26;
      break;
    }
   case 25:
    HEAP32[$arrayidx107 >> 2] = $R_1;
    __label__ = 28;
    break;
   case 26:
    HEAP32[$9 + 20 >> 2] = $R_1;
    __label__ = 28;
    break;
   case 27:
    _abort();
    throw "Reached an unreachable!";
   case 28:
    if (($R_1 | 0) == 0) {
      __label__ = 39;
      break;
    } else {
      __label__ = 29;
      break;
    }
   case 29:
    if ($R_1 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
      __label__ = 38;
      break;
    } else {
      __label__ = 30;
      break;
    }
   case 30:
    HEAP32[$R_1 + 24 >> 2] = $9;
    var $27 = HEAPU32[$v_0_ph + 16 >> 2];
    if (($27 | 0) == 0) {
      __label__ = 34;
      break;
    } else {
      __label__ = 31;
      break;
    }
   case 31:
    if ($27 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
      __label__ = 33;
      break;
    } else {
      __label__ = 32;
      break;
    }
   case 32:
    HEAP32[$R_1 + 16 >> 2] = $27;
    HEAP32[$27 + 24 >> 2] = $R_1;
    __label__ = 34;
    break;
   case 33:
    _abort();
    throw "Reached an unreachable!";
   case 34:
    var $30 = HEAPU32[$v_0_ph + 20 >> 2];
    if (($30 | 0) == 0) {
      __label__ = 39;
      break;
    } else {
      __label__ = 35;
      break;
    }
   case 35:
    if ($30 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
      __label__ = 37;
      break;
    } else {
      __label__ = 36;
      break;
    }
   case 36:
    HEAP32[$R_1 + 20 >> 2] = $30;
    HEAP32[$30 + 24 >> 2] = $R_1;
    __label__ = 39;
    break;
   case 37:
    _abort();
    throw "Reached an unreachable!";
   case 38:
    _abort();
    throw "Reached an unreachable!";
   case 39:
    if ($rsize_0_ph >>> 0 < 16) {
      __label__ = 40;
      break;
    } else {
      __label__ = 41;
      break;
    }
   case 40:
    var $add171 = $rsize_0_ph + $nb | 0;
    HEAP32[$v_0_ph + 4 >> 2] = $add171 | 3;
    var $33 = $add171 + ($6 + 4) | 0;
    var $or177 = HEAP32[$33 >> 2] | 1;
    HEAP32[$33 >> 2] = $or177;
    __label__ = 48;
    break;
   case 41:
    HEAP32[$v_0_ph + 4 >> 2] = $nb | 3;
    HEAP32[$nb + ($6 + 4) >> 2] = $rsize_0_ph | 1;
    HEAP32[$6 + ($rsize_0_ph + $nb) >> 2] = $rsize_0_ph;
    var $36 = HEAPU32[__gm_ + 8 >> 2];
    if (($36 | 0) == 0) {
      __label__ = 47;
      break;
    } else {
      __label__ = 42;
      break;
    }
   case 42:
    var $37 = HEAPU32[__gm_ + 20 >> 2];
    var $shl189 = $36 >>> 2 & 1073741822;
    var $39 = __gm_ + 40 + ($shl189 << 2) | 0;
    var $40 = HEAPU32[__gm_ >> 2];
    var $shl192 = 1 << ($36 >>> 3);
    if (($40 & $shl192 | 0) == 0) {
      __label__ = 43;
      break;
    } else {
      __label__ = 44;
      break;
    }
   case 43:
    HEAP32[__gm_ >> 2] = $40 | $shl192;
    var $F191_0 = $39;
    var $_pre_phi = __gm_ + 40 + ($shl189 + 2 << 2) | 0;
    __label__ = 46;
    break;
   case 44:
    var $41 = __gm_ + 40 + ($shl189 + 2 << 2) | 0;
    var $42 = HEAPU32[$41 >> 2];
    if ($42 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
      __label__ = 45;
      break;
    } else {
      var $F191_0 = $42;
      var $_pre_phi = $41;
      __label__ = 46;
      break;
    }
   case 45:
    _abort();
    throw "Reached an unreachable!";
   case 46:
    var $_pre_phi;
    var $F191_0;
    HEAP32[$_pre_phi >> 2] = $37;
    HEAP32[$F191_0 + 12 >> 2] = $37;
    HEAP32[$37 + 8 >> 2] = $F191_0;
    HEAP32[$37 + 12 >> 2] = $39;
    __label__ = 47;
    break;
   case 47:
    HEAP32[__gm_ + 8 >> 2] = $rsize_0_ph;
    HEAP32[__gm_ + 20 >> 2] = $8;
    __label__ = 48;
    break;
   case 48:
    return $v_0_ph + 8 | 0;
   case 49:
    _abort();
    throw "Reached an unreachable!";
   default:
    assert(0, "bad label: " + __label__);
  }
}

_tmalloc_small["X"] = 1;

function _tmalloc_large($nb) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $sub = -$nb | 0;
    var $shr = $nb >>> 8;
    if (($shr | 0) == 0) {
      var $idx_0 = 0;
      __label__ = 4;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    if ($nb >>> 0 > 16777215) {
      var $idx_0 = 31;
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $and = ($shr + 1048320 | 0) >>> 16 & 8;
    var $shl = $shr << $and;
    var $and8 = ($shl + 520192 | 0) >>> 16 & 4;
    var $shl9 = $shl << $and8;
    var $and12 = ($shl9 + 245760 | 0) >>> 16 & 2;
    var $add17 = 14 - ($and8 | $and | $and12) + ($shl9 << $and12 >>> 15) | 0;
    var $idx_0 = $nb >>> (($add17 + 7 | 0) >>> 0) & 1 | $add17 << 1;
    __label__ = 4;
    break;
   case 4:
    var $idx_0;
    var $0 = HEAPU32[__gm_ + 304 + ($idx_0 << 2) >> 2];
    if (($0 | 0) == 0) {
      var $v_2 = 0;
      var $rsize_2 = $sub;
      var $t_1 = 0;
      __label__ = 12;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    if (($idx_0 | 0) == 31) {
      var $cond = 0;
      __label__ = 7;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    var $cond = 25 - ($idx_0 >>> 1) | 0;
    __label__ = 7;
    break;
   case 7:
    var $cond;
    var $v_0 = 0;
    var $rsize_0 = $sub;
    var $t_0 = $0;
    var $sizebits_0 = $nb << $cond;
    var $rst_0 = 0;
    __label__ = 8;
    break;
   case 8:
    var $rst_0;
    var $sizebits_0;
    var $t_0;
    var $rsize_0;
    var $v_0;
    var $and32 = HEAP32[$t_0 + 4 >> 2] & -8;
    var $sub33 = $and32 - $nb | 0;
    if ($sub33 >>> 0 < $rsize_0 >>> 0) {
      __label__ = 9;
      break;
    } else {
      var $v_1 = $v_0;
      var $rsize_1 = $rsize_0;
      __label__ = 10;
      break;
    }
   case 9:
    if (($and32 | 0) == ($nb | 0)) {
      var $v_2 = $t_0;
      var $rsize_2 = $sub33;
      var $t_1 = $t_0;
      __label__ = 12;
      break;
    } else {
      var $v_1 = $t_0;
      var $rsize_1 = $sub33;
      __label__ = 10;
      break;
    }
   case 10:
    var $rsize_1;
    var $v_1;
    var $2 = HEAPU32[$t_0 + 20 >> 2];
    var $3 = HEAPU32[$t_0 + 16 + ($sizebits_0 >>> 31 << 2) >> 2];
    var $rst_1 = ($2 | 0) == 0 | ($2 | 0) == ($3 | 0) ? $rst_0 : $2;
    if (($3 | 0) == 0) {
      var $v_2 = $v_1;
      var $rsize_2 = $rsize_1;
      var $t_1 = $rst_1;
      __label__ = 12;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    var $v_0 = $v_1;
    var $rsize_0 = $rsize_1;
    var $t_0 = $3;
    var $sizebits_0 = $sizebits_0 << 1;
    var $rst_0 = $rst_1;
    __label__ = 8;
    break;
   case 12:
    var $t_1;
    var $rsize_2;
    var $v_2;
    if (($t_1 | 0) == 0 & ($v_2 | 0) == 0) {
      __label__ = 13;
      break;
    } else {
      var $t_2_ph = $t_1;
      __label__ = 15;
      break;
    }
   case 13:
    var $shl59 = 2 << $idx_0;
    var $and63 = HEAP32[__gm_ + 4 >> 2] & ($shl59 | -$shl59);
    if (($and63 | 0) == 0) {
      var $t_2_ph = $t_1;
      __label__ = 15;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 14:
    var $sub69 = ($and63 & -$and63) - 1 | 0;
    var $and72 = $sub69 >>> 12 & 16;
    var $shr74 = $sub69 >>> ($and72 >>> 0);
    var $and76 = $shr74 >>> 5 & 8;
    var $shr78 = $shr74 >>> ($and76 >>> 0);
    var $and80 = $shr78 >>> 2 & 4;
    var $shr82 = $shr78 >>> ($and80 >>> 0);
    var $and84 = $shr82 >>> 1 & 2;
    var $shr86 = $shr82 >>> ($and84 >>> 0);
    var $and88 = $shr86 >>> 1 & 1;
    var $t_2_ph = HEAP32[__gm_ + 304 + (($and76 | $and72 | $and80 | $and84 | $and88) + ($shr86 >>> ($and88 >>> 0)) << 2) >> 2];
    __label__ = 15;
    break;
   case 15:
    var $t_2_ph;
    if (($t_2_ph | 0) == 0) {
      var $rsize_3_lcssa = $rsize_2;
      var $v_3_lcssa = $v_2;
      __label__ = 18;
      break;
    } else {
      var $t_221 = $t_2_ph;
      var $rsize_322 = $rsize_2;
      var $v_323 = $v_2;
      __label__ = 16;
      break;
    }
   case 16:
    var $v_323;
    var $rsize_322;
    var $t_221;
    var $sub100 = (HEAP32[$t_221 + 4 >> 2] & -8) - $nb | 0;
    var $cmp101 = $sub100 >>> 0 < $rsize_322 >>> 0;
    var $rsize_4 = $cmp101 ? $sub100 : $rsize_322;
    var $v_4 = $cmp101 ? $t_221 : $v_323;
    var $7 = HEAPU32[$t_221 + 16 >> 2];
    if (($7 | 0) == 0) {
      __label__ = 17;
      break;
    } else {
      var $t_221 = $7;
      var $rsize_322 = $rsize_4;
      var $v_323 = $v_4;
      __label__ = 16;
      break;
    }
   case 17:
    var $8 = HEAPU32[$t_221 + 20 >> 2];
    if (($8 | 0) == 0) {
      var $rsize_3_lcssa = $rsize_4;
      var $v_3_lcssa = $v_4;
      __label__ = 18;
      break;
    } else {
      var $t_221 = $8;
      var $rsize_322 = $rsize_4;
      var $v_323 = $v_4;
      __label__ = 16;
      break;
    }
   case 18:
    var $v_3_lcssa;
    var $rsize_3_lcssa;
    if (($v_3_lcssa | 0) == 0) {
      var $retval_0 = 0;
      __label__ = 81;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 19:
    if ($rsize_3_lcssa >>> 0 < (HEAP32[__gm_ + 8 >> 2] - $nb | 0) >>> 0) {
      __label__ = 20;
      break;
    } else {
      var $retval_0 = 0;
      __label__ = 81;
      break;
    }
   case 20:
    var $10 = $v_3_lcssa;
    var $11 = HEAPU32[__gm_ + 16 >> 2];
    if ($10 >>> 0 < $11 >>> 0) {
      __label__ = 80;
      break;
    } else {
      __label__ = 21;
      break;
    }
   case 21:
    var $add_ptr = $10 + $nb | 0;
    var $12 = $add_ptr;
    if ($10 >>> 0 < $add_ptr >>> 0) {
      __label__ = 22;
      break;
    } else {
      __label__ = 80;
      break;
    }
   case 22:
    var $13 = HEAPU32[$v_3_lcssa + 24 >> 2];
    var $14 = HEAPU32[$v_3_lcssa + 12 >> 2];
    if (($14 | 0) == ($v_3_lcssa | 0)) {
      __label__ = 26;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 23:
    var $15 = HEAPU32[$v_3_lcssa + 8 >> 2];
    if ($15 >>> 0 < $11 >>> 0) {
      __label__ = 25;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 24:
    HEAP32[$15 + 12 >> 2] = $14;
    HEAP32[$14 + 8 >> 2] = $15;
    var $R_1 = $14;
    __label__ = 33;
    break;
   case 25:
    _abort();
    throw "Reached an unreachable!";
   case 26:
    var $arrayidx143 = $v_3_lcssa + 20 | 0;
    var $17 = HEAP32[$arrayidx143 >> 2];
    if (($17 | 0) == 0) {
      __label__ = 27;
      break;
    } else {
      var $RP_0 = $arrayidx143;
      var $R_0 = $17;
      __label__ = 28;
      break;
    }
   case 27:
    var $arrayidx147 = $v_3_lcssa + 16 | 0;
    var $18 = HEAP32[$arrayidx147 >> 2];
    if (($18 | 0) == 0) {
      var $R_1 = 0;
      __label__ = 33;
      break;
    } else {
      var $RP_0 = $arrayidx147;
      var $R_0 = $18;
      __label__ = 28;
      break;
    }
   case 28:
    var $R_0;
    var $RP_0;
    var $arrayidx153 = $R_0 + 20 | 0;
    var $19 = HEAP32[$arrayidx153 >> 2];
    if (($19 | 0) == 0) {
      __label__ = 29;
      break;
    } else {
      var $RP_0 = $arrayidx153;
      var $R_0 = $19;
      __label__ = 28;
      break;
    }
   case 29:
    var $arrayidx157 = $R_0 + 16 | 0;
    var $20 = HEAPU32[$arrayidx157 >> 2];
    if (($20 | 0) == 0) {
      __label__ = 30;
      break;
    } else {
      var $RP_0 = $arrayidx157;
      var $R_0 = $20;
      __label__ = 28;
      break;
    }
   case 30:
    if ($RP_0 >>> 0 < $11 >>> 0) {
      __label__ = 32;
      break;
    } else {
      __label__ = 31;
      break;
    }
   case 31:
    HEAP32[$RP_0 >> 2] = 0;
    var $R_1 = $R_0;
    __label__ = 33;
    break;
   case 32:
    _abort();
    throw "Reached an unreachable!";
   case 33:
    var $R_1;
    if (($13 | 0) == 0) {
      __label__ = 53;
      break;
    } else {
      __label__ = 34;
      break;
    }
   case 34:
    var $index = $v_3_lcssa + 28 | 0;
    var $arrayidx176 = __gm_ + 304 + (HEAP32[$index >> 2] << 2) | 0;
    if (($v_3_lcssa | 0) == (HEAP32[$arrayidx176 >> 2] | 0)) {
      __label__ = 35;
      break;
    } else {
      __label__ = 37;
      break;
    }
   case 35:
    HEAP32[$arrayidx176 >> 2] = $R_1;
    if (($R_1 | 0) == 0) {
      __label__ = 36;
      break;
    } else {
      __label__ = 43;
      break;
    }
   case 36:
    var $and186 = HEAP32[__gm_ + 4 >> 2] & (1 << HEAP32[$index >> 2] ^ -1);
    HEAP32[__gm_ + 4 >> 2] = $and186;
    __label__ = 53;
    break;
   case 37:
    if ($13 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
      __label__ = 41;
      break;
    } else {
      __label__ = 38;
      break;
    }
   case 38:
    var $arrayidx196 = $13 + 16 | 0;
    if ((HEAP32[$arrayidx196 >> 2] | 0) == ($v_3_lcssa | 0)) {
      __label__ = 39;
      break;
    } else {
      __label__ = 40;
      break;
    }
   case 39:
    HEAP32[$arrayidx196 >> 2] = $R_1;
    __label__ = 42;
    break;
   case 40:
    HEAP32[$13 + 20 >> 2] = $R_1;
    __label__ = 42;
    break;
   case 41:
    _abort();
    throw "Reached an unreachable!";
   case 42:
    if (($R_1 | 0) == 0) {
      __label__ = 53;
      break;
    } else {
      __label__ = 43;
      break;
    }
   case 43:
    if ($R_1 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
      __label__ = 52;
      break;
    } else {
      __label__ = 44;
      break;
    }
   case 44:
    HEAP32[$R_1 + 24 >> 2] = $13;
    var $31 = HEAPU32[$v_3_lcssa + 16 >> 2];
    if (($31 | 0) == 0) {
      __label__ = 48;
      break;
    } else {
      __label__ = 45;
      break;
    }
   case 45:
    if ($31 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
      __label__ = 47;
      break;
    } else {
      __label__ = 46;
      break;
    }
   case 46:
    HEAP32[$R_1 + 16 >> 2] = $31;
    HEAP32[$31 + 24 >> 2] = $R_1;
    __label__ = 48;
    break;
   case 47:
    _abort();
    throw "Reached an unreachable!";
   case 48:
    var $34 = HEAPU32[$v_3_lcssa + 20 >> 2];
    if (($34 | 0) == 0) {
      __label__ = 53;
      break;
    } else {
      __label__ = 49;
      break;
    }
   case 49:
    if ($34 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
      __label__ = 51;
      break;
    } else {
      __label__ = 50;
      break;
    }
   case 50:
    HEAP32[$R_1 + 20 >> 2] = $34;
    HEAP32[$34 + 24 >> 2] = $R_1;
    __label__ = 53;
    break;
   case 51:
    _abort();
    throw "Reached an unreachable!";
   case 52:
    _abort();
    throw "Reached an unreachable!";
   case 53:
    if ($rsize_3_lcssa >>> 0 < 16) {
      __label__ = 54;
      break;
    } else {
      __label__ = 55;
      break;
    }
   case 54:
    var $add260 = $rsize_3_lcssa + $nb | 0;
    HEAP32[$v_3_lcssa + 4 >> 2] = $add260 | 3;
    var $37 = $add260 + ($10 + 4) | 0;
    var $or267 = HEAP32[$37 >> 2] | 1;
    HEAP32[$37 >> 2] = $or267;
    __label__ = 79;
    break;
   case 55:
    HEAP32[$v_3_lcssa + 4 >> 2] = $nb | 3;
    HEAP32[$nb + ($10 + 4) >> 2] = $rsize_3_lcssa | 1;
    HEAP32[$10 + ($rsize_3_lcssa + $nb) >> 2] = $rsize_3_lcssa;
    if ($rsize_3_lcssa >>> 0 < 256) {
      __label__ = 56;
      break;
    } else {
      __label__ = 61;
      break;
    }
   case 56:
    var $shl280 = $rsize_3_lcssa >>> 2 & 1073741822;
    var $41 = __gm_ + 40 + ($shl280 << 2) | 0;
    var $42 = HEAPU32[__gm_ >> 2];
    var $shl283 = 1 << ($rsize_3_lcssa >>> 3);
    if (($42 & $shl283 | 0) == 0) {
      __label__ = 57;
      break;
    } else {
      __label__ = 58;
      break;
    }
   case 57:
    HEAP32[__gm_ >> 2] = $42 | $shl283;
    var $F282_0 = $41;
    var $_pre_phi = __gm_ + 40 + ($shl280 + 2 << 2) | 0;
    __label__ = 60;
    break;
   case 58:
    var $43 = __gm_ + 40 + ($shl280 + 2 << 2) | 0;
    var $44 = HEAPU32[$43 >> 2];
    if ($44 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
      __label__ = 59;
      break;
    } else {
      var $F282_0 = $44;
      var $_pre_phi = $43;
      __label__ = 60;
      break;
    }
   case 59:
    _abort();
    throw "Reached an unreachable!";
   case 60:
    var $_pre_phi;
    var $F282_0;
    HEAP32[$_pre_phi >> 2] = $12;
    HEAP32[$F282_0 + 12 >> 2] = $12;
    HEAP32[$nb + ($10 + 8) >> 2] = $F282_0;
    HEAP32[$nb + ($10 + 12) >> 2] = $41;
    __label__ = 79;
    break;
   case 61:
    var $49 = $add_ptr;
    var $shr310 = $rsize_3_lcssa >>> 8;
    if (($shr310 | 0) == 0) {
      var $I308_0 = 0;
      __label__ = 64;
      break;
    } else {
      __label__ = 62;
      break;
    }
   case 62:
    if ($rsize_3_lcssa >>> 0 > 16777215) {
      var $I308_0 = 31;
      __label__ = 64;
      break;
    } else {
      __label__ = 63;
      break;
    }
   case 63:
    var $and323 = ($shr310 + 1048320 | 0) >>> 16 & 8;
    var $shl325 = $shr310 << $and323;
    var $and328 = ($shl325 + 520192 | 0) >>> 16 & 4;
    var $shl330 = $shl325 << $and328;
    var $and333 = ($shl330 + 245760 | 0) >>> 16 & 2;
    var $add338 = 14 - ($and328 | $and323 | $and333) + ($shl330 << $and333 >>> 15) | 0;
    var $I308_0 = $rsize_3_lcssa >>> (($add338 + 7 | 0) >>> 0) & 1 | $add338 << 1;
    __label__ = 64;
    break;
   case 64:
    var $I308_0;
    var $arrayidx347 = __gm_ + 304 + ($I308_0 << 2) | 0;
    HEAP32[$nb + ($10 + 28) >> 2] = $I308_0;
    var $child349 = $nb + ($10 + 16) | 0;
    HEAP32[$nb + ($10 + 20) >> 2] = 0;
    HEAP32[$child349 >> 2] = 0;
    var $52 = HEAP32[__gm_ + 4 >> 2];
    var $shl354 = 1 << $I308_0;
    if (($52 & $shl354 | 0) == 0) {
      __label__ = 65;
      break;
    } else {
      __label__ = 66;
      break;
    }
   case 65:
    var $or360 = $52 | $shl354;
    HEAP32[__gm_ + 4 >> 2] = $or360;
    HEAP32[$arrayidx347 >> 2] = $49;
    HEAP32[$nb + ($10 + 24) >> 2] = $arrayidx347;
    HEAP32[$nb + ($10 + 12) >> 2] = $49;
    HEAP32[$nb + ($10 + 8) >> 2] = $49;
    __label__ = 79;
    break;
   case 66:
    var $57 = HEAP32[$arrayidx347 >> 2];
    if (($I308_0 | 0) == 31) {
      var $cond375 = 0;
      __label__ = 68;
      break;
    } else {
      __label__ = 67;
      break;
    }
   case 67:
    var $cond375 = 25 - ($I308_0 >>> 1) | 0;
    __label__ = 68;
    break;
   case 68:
    var $cond375;
    var $K365_0 = $rsize_3_lcssa << $cond375;
    var $T_0 = $57;
    __label__ = 69;
    break;
   case 69:
    var $T_0;
    var $K365_0;
    if ((HEAP32[$T_0 + 4 >> 2] & -8 | 0) == ($rsize_3_lcssa | 0)) {
      __label__ = 75;
      break;
    } else {
      __label__ = 70;
      break;
    }
   case 70:
    var $arrayidx386 = $T_0 + 16 + ($K365_0 >>> 31 << 2) | 0;
    var $59 = HEAPU32[$arrayidx386 >> 2];
    if (($59 | 0) == 0) {
      __label__ = 72;
      break;
    } else {
      __label__ = 71;
      break;
    }
   case 71:
    var $K365_0 = $K365_0 << 1;
    var $T_0 = $59;
    __label__ = 69;
    break;
   case 72:
    if ($arrayidx386 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
      __label__ = 74;
      break;
    } else {
      __label__ = 73;
      break;
    }
   case 73:
    HEAP32[$arrayidx386 >> 2] = $49;
    HEAP32[$nb + ($10 + 24) >> 2] = $T_0;
    HEAP32[$nb + ($10 + 12) >> 2] = $49;
    HEAP32[$nb + ($10 + 8) >> 2] = $49;
    __label__ = 79;
    break;
   case 74:
    _abort();
    throw "Reached an unreachable!";
   case 75:
    var $fd405 = $T_0 + 8 | 0;
    var $65 = HEAPU32[$fd405 >> 2];
    var $67 = HEAPU32[__gm_ + 16 >> 2];
    if ($T_0 >>> 0 < $67 >>> 0) {
      __label__ = 78;
      break;
    } else {
      __label__ = 76;
      break;
    }
   case 76:
    if ($65 >>> 0 < $67 >>> 0) {
      __label__ = 78;
      break;
    } else {
      __label__ = 77;
      break;
    }
   case 77:
    HEAP32[$65 + 12 >> 2] = $49;
    HEAP32[$fd405 >> 2] = $49;
    HEAP32[$nb + ($10 + 8) >> 2] = $65;
    HEAP32[$nb + ($10 + 12) >> 2] = $T_0;
    HEAP32[$nb + ($10 + 24) >> 2] = 0;
    __label__ = 79;
    break;
   case 78:
    _abort();
    throw "Reached an unreachable!";
   case 79:
    var $retval_0 = $v_3_lcssa + 8 | 0;
    __label__ = 81;
    break;
   case 80:
    _abort();
    throw "Reached an unreachable!";
   case 81:
    var $retval_0;
    return $retval_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_tmalloc_large["X"] = 1;

function _sys_alloc($nb) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if ((HEAP32[_mparams >> 2] | 0) == 0) {
      __label__ = 2;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 2:
    _init_mparams();
    __label__ = 3;
    break;
   case 3:
    if ((HEAP32[__gm_ + 440 >> 2] & 4 | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 4:
    var $2 = HEAP32[__gm_ + 24 >> 2];
    if (($2 | 0) == 0) {
      __label__ = 6;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $3 = $2;
    var $call15 = _segment_holding($3);
    if (($call15 | 0) == 0) {
      __label__ = 6;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 6:
    var $call18 = _sbrk(0);
    if (($call18 | 0) == -1) {
      __label__ = 14;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    var $4 = HEAP32[_mparams + 8 >> 2];
    var $and23 = $4 + ($nb + 47) & -$4;
    var $5 = $call18;
    var $6 = HEAP32[_mparams + 4 >> 2];
    var $sub24 = $6 - 1 | 0;
    if (($sub24 & $5 | 0) == 0) {
      var $asize_0 = $and23;
      __label__ = 9;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    var $asize_0 = $and23 - $5 + ($sub24 + $5 & -$6) | 0;
    __label__ = 9;
    break;
   case 9:
    var $asize_0;
    if ($asize_0 >>> 0 < 2147483647) {
      __label__ = 10;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 10:
    var $call38 = _sbrk($asize_0);
    if (($call38 | 0) == ($call18 | 0)) {
      var $tbase_0 = $call18;
      var $asize_1 = $asize_0;
      var $br_0 = $call38;
      __label__ = 13;
      break;
    } else {
      var $br_07 = $call38;
      var $asize_18 = $asize_0;
      __label__ = 15;
      break;
    }
   case 11:
    var $8 = HEAP32[_mparams + 8 >> 2];
    var $and50 = $nb + 47 - HEAP32[__gm_ + 12 >> 2] + $8 & -$8;
    if ($and50 >>> 0 < 2147483647) {
      __label__ = 12;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 12:
    var $call53 = _sbrk($and50);
    if (($call53 | 0) == (HEAP32[$call15 >> 2] + HEAP32[$call15 + 4 >> 2] | 0)) {
      var $tbase_0 = $call53;
      var $asize_1 = $and50;
      var $br_0 = $call53;
      __label__ = 13;
      break;
    } else {
      var $br_07 = $call53;
      var $asize_18 = $and50;
      __label__ = 15;
      break;
    }
   case 13:
    var $br_0;
    var $asize_1;
    var $tbase_0;
    if (($tbase_0 | 0) == -1) {
      var $br_07 = $br_0;
      var $asize_18 = $asize_1;
      __label__ = 15;
      break;
    } else {
      var $tsize_220 = $asize_1;
      var $tbase_221 = $tbase_0;
      __label__ = 26;
      break;
    }
   case 14:
    var $or31 = HEAP32[__gm_ + 440 >> 2] | 4;
    HEAP32[__gm_ + 440 >> 2] = $or31;
    __label__ = 23;
    break;
   case 15:
    var $asize_18;
    var $br_07;
    var $sub82 = -$asize_18 | 0;
    if (($br_07 | 0) != -1 & $asize_18 >>> 0 < 2147483647) {
      __label__ = 16;
      break;
    } else {
      var $asize_2 = $asize_18;
      __label__ = 21;
      break;
    }
   case 16:
    if ($asize_18 >>> 0 < ($nb + 48 | 0) >>> 0) {
      __label__ = 17;
      break;
    } else {
      var $asize_2 = $asize_18;
      __label__ = 21;
      break;
    }
   case 17:
    var $12 = HEAP32[_mparams + 8 >> 2];
    var $and74 = $nb + 47 - $asize_18 + $12 & -$12;
    if ($and74 >>> 0 < 2147483647) {
      __label__ = 18;
      break;
    } else {
      var $asize_2 = $asize_18;
      __label__ = 21;
      break;
    }
   case 18:
    var $call77 = _sbrk($and74);
    if (($call77 | 0) == -1) {
      __label__ = 20;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 19:
    var $asize_2 = $and74 + $asize_18 | 0;
    __label__ = 21;
    break;
   case 20:
    var $call83 = _sbrk($sub82);
    __label__ = 22;
    break;
   case 21:
    var $asize_2;
    if (($br_07 | 0) == -1) {
      __label__ = 22;
      break;
    } else {
      var $tsize_220 = $asize_2;
      var $tbase_221 = $br_07;
      __label__ = 26;
      break;
    }
   case 22:
    var $or = HEAP32[__gm_ + 440 >> 2] | 4;
    HEAP32[__gm_ + 440 >> 2] = $or;
    __label__ = 23;
    break;
   case 23:
    var $14 = HEAP32[_mparams + 8 >> 2];
    var $and103 = $14 + ($nb + 47) & -$14;
    if ($and103 >>> 0 < 2147483647) {
      __label__ = 24;
      break;
    } else {
      __label__ = 49;
      break;
    }
   case 24:
    var $call108 = _sbrk($and103);
    var $call109 = _sbrk(0);
    if (($call109 | 0) != -1 & ($call108 | 0) != -1 & $call108 >>> 0 < $call109 >>> 0) {
      __label__ = 25;
      break;
    } else {
      __label__ = 49;
      break;
    }
   case 25:
    var $sub_ptr_sub = $call109 - $call108 | 0;
    if ($sub_ptr_sub >>> 0 <= ($nb + 40 | 0) >>> 0 | ($call108 | 0) == -1) {
      __label__ = 49;
      break;
    } else {
      var $tsize_220 = $sub_ptr_sub;
      var $tbase_221 = $call108;
      __label__ = 26;
      break;
    }
   case 26:
    var $tbase_221;
    var $tsize_220;
    var $add125 = HEAP32[__gm_ + 432 >> 2] + $tsize_220 | 0;
    HEAP32[__gm_ + 432 >> 2] = $add125;
    if ($add125 >>> 0 > HEAPU32[__gm_ + 436 >> 2] >>> 0) {
      __label__ = 27;
      break;
    } else {
      __label__ = 28;
      break;
    }
   case 27:
    HEAP32[__gm_ + 436 >> 2] = $add125;
    __label__ = 28;
    break;
   case 28:
    var $17 = HEAPU32[__gm_ + 24 >> 2];
    if (($17 | 0) == 0) {
      __label__ = 29;
      break;
    } else {
      var $sp_0 = __gm_ + 444 | 0;
      __label__ = 32;
      break;
    }
   case 29:
    var $18 = HEAPU32[__gm_ + 16 >> 2];
    if (($18 | 0) == 0 | $tbase_221 >>> 0 < $18 >>> 0) {
      __label__ = 30;
      break;
    } else {
      __label__ = 31;
      break;
    }
   case 30:
    HEAP32[__gm_ + 16 >> 2] = $tbase_221;
    __label__ = 31;
    break;
   case 31:
    HEAP32[__gm_ + 444 >> 2] = $tbase_221;
    HEAP32[__gm_ + 448 >> 2] = $tsize_220;
    HEAP32[__gm_ + 456 >> 2] = 0;
    var $19 = HEAP32[_mparams >> 2];
    HEAP32[__gm_ + 36 >> 2] = $19;
    HEAP32[__gm_ + 32 >> 2] = -1;
    _init_bins();
    _init_top($tbase_221, $tsize_220 - 40 | 0);
    __label__ = 47;
    break;
   case 32:
    var $sp_0;
    if (($sp_0 | 0) == 0) {
      __label__ = 38;
      break;
    } else {
      __label__ = 33;
      break;
    }
   case 33:
    var $21 = HEAPU32[$sp_0 >> 2];
    var $size162 = $sp_0 + 4 | 0;
    var $22 = HEAPU32[$size162 >> 2];
    var $add_ptr163 = $21 + $22 | 0;
    if (($tbase_221 | 0) == ($add_ptr163 | 0)) {
      __label__ = 35;
      break;
    } else {
      __label__ = 34;
      break;
    }
   case 34:
    var $sp_0 = HEAP32[$sp_0 + 8 >> 2];
    __label__ = 32;
    break;
   case 35:
    if ((HEAP32[$sp_0 + 12 >> 2] & 8 | 0) == 0) {
      __label__ = 36;
      break;
    } else {
      __label__ = 38;
      break;
    }
   case 36:
    var $25 = $17;
    if ($25 >>> 0 >= $21 >>> 0 & $25 >>> 0 < $add_ptr163 >>> 0) {
      __label__ = 37;
      break;
    } else {
      __label__ = 38;
      break;
    }
   case 37:
    HEAP32[$size162 >> 2] = $22 + $tsize_220 | 0;
    var $26 = HEAP32[__gm_ + 24 >> 2];
    var $add189 = HEAP32[__gm_ + 12 >> 2] + $tsize_220 | 0;
    _init_top($26, $add189);
    __label__ = 47;
    break;
   case 38:
    if ($tbase_221 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
      __label__ = 39;
      break;
    } else {
      __label__ = 40;
      break;
    }
   case 39:
    HEAP32[__gm_ + 16 >> 2] = $tbase_221;
    __label__ = 40;
    break;
   case 40:
    var $add_ptr201 = $tbase_221 + $tsize_220 | 0;
    var $sp_1 = __gm_ + 444 | 0;
    __label__ = 41;
    break;
   case 41:
    var $sp_1;
    if (($sp_1 | 0) == 0) {
      __label__ = 46;
      break;
    } else {
      __label__ = 42;
      break;
    }
   case 42:
    var $base200 = $sp_1 | 0;
    var $29 = HEAPU32[$base200 >> 2];
    if (($29 | 0) == ($add_ptr201 | 0)) {
      __label__ = 44;
      break;
    } else {
      __label__ = 43;
      break;
    }
   case 43:
    var $sp_1 = HEAP32[$sp_1 + 8 >> 2];
    __label__ = 41;
    break;
   case 44:
    if ((HEAP32[$sp_1 + 12 >> 2] & 8 | 0) == 0) {
      __label__ = 45;
      break;
    } else {
      __label__ = 46;
      break;
    }
   case 45:
    HEAP32[$base200 >> 2] = $tbase_221;
    var $size219 = $sp_1 + 4 | 0;
    var $add220 = HEAP32[$size219 >> 2] + $tsize_220 | 0;
    HEAP32[$size219 >> 2] = $add220;
    var $call221 = _prepend_alloc($tbase_221, $29, $nb);
    var $retval_0 = $call221;
    __label__ = 50;
    break;
   case 46:
    _add_segment($tbase_221, $tsize_220);
    __label__ = 47;
    break;
   case 47:
    var $33 = HEAPU32[__gm_ + 12 >> 2];
    if ($33 >>> 0 > $nb >>> 0) {
      __label__ = 48;
      break;
    } else {
      __label__ = 49;
      break;
    }
   case 48:
    var $sub230 = $33 - $nb | 0;
    HEAP32[__gm_ + 12 >> 2] = $sub230;
    var $34 = HEAPU32[__gm_ + 24 >> 2];
    var $35 = $34;
    HEAP32[__gm_ + 24 >> 2] = $35 + $nb | 0;
    HEAP32[$nb + ($35 + 4) >> 2] = $sub230 | 1;
    HEAP32[$34 + 4 >> 2] = $nb | 3;
    var $retval_0 = $34 + 8 | 0;
    __label__ = 50;
    break;
   case 49:
    var $call242 = ___errno();
    HEAP32[$call242 >> 2] = 12;
    var $retval_0 = 0;
    __label__ = 50;
    break;
   case 50:
    var $retval_0;
    return $retval_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_sys_alloc["X"] = 1;

function _release_unused_segments() {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $sp_01 = HEAP32[__gm_ + 452 >> 2];
    if (($sp_01 | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      var $sp_03 = $sp_01;
      __label__ = 2;
      break;
    }
   case 2:
    var $sp_03;
    var $sp_0 = HEAP32[$sp_03 + 8 >> 2];
    if (($sp_0 | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      var $sp_03 = $sp_0;
      __label__ = 2;
      break;
    }
   case 3:
    HEAP32[__gm_ + 32 >> 2] = -1;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _sys_trim() {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if ((HEAP32[_mparams >> 2] | 0) == 0) {
      __label__ = 2;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 2:
    _init_mparams();
    __label__ = 3;
    break;
   case 3:
    var $1 = HEAPU32[__gm_ + 24 >> 2];
    if (($1 | 0) == 0) {
      __label__ = 12;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $2 = HEAPU32[__gm_ + 12 >> 2];
    if ($2 >>> 0 > 40) {
      __label__ = 5;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 5:
    var $3 = HEAPU32[_mparams + 8 >> 2];
    var $add7 = $2 - 41 + $3 | 0;
    var $div = Math.floor(($add7 >>> 0) / ($3 >>> 0));
    var $mul = ($div - 1) * $3 | 0;
    var $4 = $1;
    var $call10 = _segment_holding($4);
    if ((HEAP32[$call10 + 12 >> 2] & 8 | 0) == 0) {
      __label__ = 6;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 6:
    var $call20 = _sbrk(0);
    var $size = $call10 + 4 | 0;
    if (($call20 | 0) == (HEAP32[$call10 >> 2] + HEAP32[$size >> 2] | 0)) {
      __label__ = 7;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 7:
    var $sub19_mul = $mul >>> 0 > 2147483646 ? -2147483648 - $3 | 0 : $mul;
    var $sub23 = -$sub19_mul | 0;
    var $call24 = _sbrk($sub23);
    var $call25 = _sbrk(0);
    if (($call24 | 0) != -1 & $call25 >>> 0 < $call20 >>> 0) {
      __label__ = 8;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 8:
    var $sub_ptr_sub = $call20 - $call25 | 0;
    if (($call20 | 0) == ($call25 | 0)) {
      __label__ = 10;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    var $sub37 = HEAP32[$size >> 2] - $sub_ptr_sub | 0;
    HEAP32[$size >> 2] = $sub37;
    var $sub38 = HEAP32[__gm_ + 432 >> 2] - $sub_ptr_sub | 0;
    HEAP32[__gm_ + 432 >> 2] = $sub38;
    var $10 = HEAP32[__gm_ + 24 >> 2];
    var $sub41 = HEAP32[__gm_ + 12 >> 2] - $sub_ptr_sub | 0;
    _init_top($10, $sub41);
    __label__ = 12;
    break;
   case 10:
    if (HEAPU32[__gm_ + 12 >> 2] >>> 0 > HEAPU32[__gm_ + 28 >> 2] >>> 0) {
      __label__ = 11;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 11:
    HEAP32[__gm_ + 28 >> 2] = -1;
    __label__ = 12;
    break;
   case 12:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_sys_trim["X"] = 1;

function _free($mem) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if (($mem | 0) == 0) {
      __label__ = 128;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $add_ptr = $mem - 8 | 0;
    var $0 = $add_ptr;
    var $1 = HEAPU32[__gm_ + 16 >> 2];
    if ($add_ptr >>> 0 < $1 >>> 0) {
      __label__ = 127;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $3 = HEAPU32[$mem - 4 >> 2];
    var $and = $3 & 3;
    if (($and | 0) == 1) {
      __label__ = 127;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $and5 = $3 & -8;
    var $add_ptr6 = $mem + ($and5 - 8) | 0;
    var $4 = $add_ptr6;
    if (($3 & 1 | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      var $p_0 = $0;
      var $psize_0 = $and5;
      __label__ = 48;
      break;
    }
   case 5:
    var $5 = HEAPU32[$add_ptr >> 2];
    if (($and | 0) == 0) {
      __label__ = 128;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    var $add_ptr_sum1 = -8 - $5 | 0;
    var $add_ptr16 = $mem + $add_ptr_sum1 | 0;
    var $6 = $add_ptr16;
    var $add17 = $5 + $and5 | 0;
    if ($add_ptr16 >>> 0 < $1 >>> 0) {
      __label__ = 127;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    if (($6 | 0) == (HEAP32[__gm_ + 20 >> 2] | 0)) {
      __label__ = 46;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    var $shr = $5 >>> 3;
    if ($5 >>> 0 < 256) {
      __label__ = 9;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 9:
    var $9 = HEAPU32[$add_ptr_sum1 + ($mem + 8) >> 2];
    var $11 = HEAPU32[$add_ptr_sum1 + ($mem + 12) >> 2];
    if (($9 | 0) == ($11 | 0)) {
      __label__ = 10;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 10:
    var $and32 = HEAP32[__gm_ >> 2] & (1 << $shr ^ -1);
    HEAP32[__gm_ >> 2] = $and32;
    var $p_0 = $6;
    var $psize_0 = $add17;
    __label__ = 48;
    break;
   case 11:
    var $14 = __gm_ + 40 + (($5 >>> 2 & 1073741822) << 2) | 0;
    if (($9 | 0) != ($14 | 0) & $9 >>> 0 < $1 >>> 0) {
      __label__ = 14;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 12:
    if (($11 | 0) == ($14 | 0) | $11 >>> 0 >= $1 >>> 0) {
      __label__ = 13;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 13:
    HEAP32[$9 + 12 >> 2] = $11;
    HEAP32[$11 + 8 >> 2] = $9;
    var $p_0 = $6;
    var $psize_0 = $add17;
    __label__ = 48;
    break;
   case 14:
    _abort();
    throw "Reached an unreachable!";
   case 15:
    var $17 = $add_ptr16;
    var $19 = HEAPU32[$add_ptr_sum1 + ($mem + 24) >> 2];
    var $21 = HEAPU32[$add_ptr_sum1 + ($mem + 12) >> 2];
    if (($21 | 0) == ($17 | 0)) {
      __label__ = 19;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 16:
    var $23 = HEAPU32[$add_ptr_sum1 + ($mem + 8) >> 2];
    if ($23 >>> 0 < $1 >>> 0) {
      __label__ = 18;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 17:
    HEAP32[$23 + 12 >> 2] = $21;
    HEAP32[$21 + 8 >> 2] = $23;
    var $R_1 = $21;
    __label__ = 26;
    break;
   case 18:
    _abort();
    throw "Reached an unreachable!";
   case 19:
    var $25 = $add_ptr_sum1 + ($mem + 20) | 0;
    var $26 = HEAP32[$25 >> 2];
    if (($26 | 0) == 0) {
      __label__ = 20;
      break;
    } else {
      var $RP_0 = $25;
      var $R_0 = $26;
      __label__ = 21;
      break;
    }
   case 20:
    var $arrayidx78 = $add_ptr_sum1 + ($mem + 16) | 0;
    var $27 = HEAP32[$arrayidx78 >> 2];
    if (($27 | 0) == 0) {
      var $R_1 = 0;
      __label__ = 26;
      break;
    } else {
      var $RP_0 = $arrayidx78;
      var $R_0 = $27;
      __label__ = 21;
      break;
    }
   case 21:
    var $R_0;
    var $RP_0;
    var $arrayidx83 = $R_0 + 20 | 0;
    var $28 = HEAP32[$arrayidx83 >> 2];
    if (($28 | 0) == 0) {
      __label__ = 22;
      break;
    } else {
      var $RP_0 = $arrayidx83;
      var $R_0 = $28;
      __label__ = 21;
      break;
    }
   case 22:
    var $arrayidx88 = $R_0 + 16 | 0;
    var $29 = HEAPU32[$arrayidx88 >> 2];
    if (($29 | 0) == 0) {
      __label__ = 23;
      break;
    } else {
      var $RP_0 = $arrayidx88;
      var $R_0 = $29;
      __label__ = 21;
      break;
    }
   case 23:
    if ($RP_0 >>> 0 < $1 >>> 0) {
      __label__ = 25;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 24:
    HEAP32[$RP_0 >> 2] = 0;
    var $R_1 = $R_0;
    __label__ = 26;
    break;
   case 25:
    _abort();
    throw "Reached an unreachable!";
   case 26:
    var $R_1;
    if (($19 | 0) == 0) {
      var $p_0 = $6;
      var $psize_0 = $add17;
      __label__ = 48;
      break;
    } else {
      __label__ = 27;
      break;
    }
   case 27:
    var $31 = $add_ptr_sum1 + ($mem + 28) | 0;
    var $arrayidx104 = __gm_ + 304 + (HEAP32[$31 >> 2] << 2) | 0;
    if (($17 | 0) == (HEAP32[$arrayidx104 >> 2] | 0)) {
      __label__ = 28;
      break;
    } else {
      __label__ = 30;
      break;
    }
   case 28:
    HEAP32[$arrayidx104 >> 2] = $R_1;
    if (($R_1 | 0) == 0) {
      __label__ = 29;
      break;
    } else {
      __label__ = 36;
      break;
    }
   case 29:
    var $and114 = HEAP32[__gm_ + 4 >> 2] & (1 << HEAP32[$31 >> 2] ^ -1);
    HEAP32[__gm_ + 4 >> 2] = $and114;
    var $p_0 = $6;
    var $psize_0 = $add17;
    __label__ = 48;
    break;
   case 30:
    if ($19 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
      __label__ = 34;
      break;
    } else {
      __label__ = 31;
      break;
    }
   case 31:
    var $arrayidx123 = $19 + 16 | 0;
    if ((HEAP32[$arrayidx123 >> 2] | 0) == ($17 | 0)) {
      __label__ = 32;
      break;
    } else {
      __label__ = 33;
      break;
    }
   case 32:
    HEAP32[$arrayidx123 >> 2] = $R_1;
    __label__ = 35;
    break;
   case 33:
    HEAP32[$19 + 20 >> 2] = $R_1;
    __label__ = 35;
    break;
   case 34:
    _abort();
    throw "Reached an unreachable!";
   case 35:
    if (($R_1 | 0) == 0) {
      var $p_0 = $6;
      var $psize_0 = $add17;
      __label__ = 48;
      break;
    } else {
      __label__ = 36;
      break;
    }
   case 36:
    if ($R_1 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
      __label__ = 45;
      break;
    } else {
      __label__ = 37;
      break;
    }
   case 37:
    HEAP32[$R_1 + 24 >> 2] = $19;
    var $41 = HEAPU32[$add_ptr_sum1 + ($mem + 16) >> 2];
    if (($41 | 0) == 0) {
      __label__ = 41;
      break;
    } else {
      __label__ = 38;
      break;
    }
   case 38:
    if ($41 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
      __label__ = 40;
      break;
    } else {
      __label__ = 39;
      break;
    }
   case 39:
    HEAP32[$R_1 + 16 >> 2] = $41;
    HEAP32[$41 + 24 >> 2] = $R_1;
    __label__ = 41;
    break;
   case 40:
    _abort();
    throw "Reached an unreachable!";
   case 41:
    var $45 = HEAPU32[$add_ptr_sum1 + ($mem + 20) >> 2];
    if (($45 | 0) == 0) {
      var $p_0 = $6;
      var $psize_0 = $add17;
      __label__ = 48;
      break;
    } else {
      __label__ = 42;
      break;
    }
   case 42:
    if ($45 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
      __label__ = 44;
      break;
    } else {
      __label__ = 43;
      break;
    }
   case 43:
    HEAP32[$R_1 + 20 >> 2] = $45;
    HEAP32[$45 + 24 >> 2] = $R_1;
    var $p_0 = $6;
    var $psize_0 = $add17;
    __label__ = 48;
    break;
   case 44:
    _abort();
    throw "Reached an unreachable!";
   case 45:
    _abort();
    throw "Reached an unreachable!";
   case 46:
    var $48 = $mem + ($and5 - 4) | 0;
    if ((HEAP32[$48 >> 2] & 3 | 0) == 3) {
      __label__ = 47;
      break;
    } else {
      var $p_0 = $6;
      var $psize_0 = $add17;
      __label__ = 48;
      break;
    }
   case 47:
    HEAP32[__gm_ + 8 >> 2] = $add17;
    var $and189 = HEAP32[$48 >> 2] & -2;
    HEAP32[$48 >> 2] = $and189;
    HEAP32[$add_ptr_sum1 + ($mem + 4) >> 2] = $add17 | 1;
    HEAP32[$add_ptr6 >> 2] = $add17;
    __label__ = 128;
    break;
   case 48:
    var $psize_0;
    var $p_0;
    var $52 = $p_0;
    if ($52 >>> 0 < $add_ptr6 >>> 0) {
      __label__ = 49;
      break;
    } else {
      __label__ = 127;
      break;
    }
   case 49:
    var $53 = $mem + ($and5 - 4) | 0;
    var $54 = HEAPU32[$53 >> 2];
    if (($54 & 1 | 0) == 0) {
      __label__ = 127;
      break;
    } else {
      __label__ = 50;
      break;
    }
   case 50:
    if (($54 & 2 | 0) == 0) {
      __label__ = 51;
      break;
    } else {
      __label__ = 100;
      break;
    }
   case 51:
    if (($4 | 0) == (HEAP32[__gm_ + 24 >> 2] | 0)) {
      __label__ = 52;
      break;
    } else {
      __label__ = 56;
      break;
    }
   case 52:
    var $add217 = HEAP32[__gm_ + 12 >> 2] + $psize_0 | 0;
    HEAP32[__gm_ + 12 >> 2] = $add217;
    HEAP32[__gm_ + 24 >> 2] = $p_0;
    var $or218 = $add217 | 1;
    HEAP32[$p_0 + 4 >> 2] = $or218;
    if (($p_0 | 0) == (HEAP32[__gm_ + 20 >> 2] | 0)) {
      __label__ = 53;
      break;
    } else {
      __label__ = 54;
      break;
    }
   case 53:
    HEAP32[__gm_ + 20 >> 2] = 0;
    HEAP32[__gm_ + 8 >> 2] = 0;
    __label__ = 54;
    break;
   case 54:
    if ($add217 >>> 0 > HEAPU32[__gm_ + 28 >> 2] >>> 0) {
      __label__ = 55;
      break;
    } else {
      __label__ = 128;
      break;
    }
   case 55:
    _sys_trim();
    __label__ = 128;
    break;
   case 56:
    if (($4 | 0) == (HEAP32[__gm_ + 20 >> 2] | 0)) {
      __label__ = 57;
      break;
    } else {
      __label__ = 58;
      break;
    }
   case 57:
    var $add232 = HEAP32[__gm_ + 8 >> 2] + $psize_0 | 0;
    HEAP32[__gm_ + 8 >> 2] = $add232;
    HEAP32[__gm_ + 20 >> 2] = $p_0;
    var $or233 = $add232 | 1;
    HEAP32[$p_0 + 4 >> 2] = $or233;
    var $prev_foot236 = $52 + $add232 | 0;
    HEAP32[$prev_foot236 >> 2] = $add232;
    __label__ = 128;
    break;
   case 58:
    var $add240 = ($54 & -8) + $psize_0 | 0;
    var $shr241 = $54 >>> 3;
    if ($54 >>> 0 < 256) {
      __label__ = 59;
      break;
    } else {
      __label__ = 67;
      break;
    }
   case 59:
    var $62 = HEAPU32[$mem + $and5 >> 2];
    var $64 = HEAPU32[$mem + ($and5 | 4) >> 2];
    if (($62 | 0) == ($64 | 0)) {
      __label__ = 60;
      break;
    } else {
      __label__ = 61;
      break;
    }
   case 60:
    var $and256 = HEAP32[__gm_ >> 2] & (1 << $shr241 ^ -1);
    HEAP32[__gm_ >> 2] = $and256;
    __label__ = 98;
    break;
   case 61:
    var $67 = __gm_ + 40 + (($54 >>> 2 & 1073741822) << 2) | 0;
    if (($62 | 0) == ($67 | 0)) {
      __label__ = 63;
      break;
    } else {
      __label__ = 62;
      break;
    }
   case 62:
    if ($62 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
      __label__ = 66;
      break;
    } else {
      __label__ = 63;
      break;
    }
   case 63:
    if (($64 | 0) == ($67 | 0)) {
      __label__ = 65;
      break;
    } else {
      __label__ = 64;
      break;
    }
   case 64:
    if ($64 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
      __label__ = 66;
      break;
    } else {
      __label__ = 65;
      break;
    }
   case 65:
    HEAP32[$62 + 12 >> 2] = $64;
    HEAP32[$64 + 8 >> 2] = $62;
    __label__ = 98;
    break;
   case 66:
    _abort();
    throw "Reached an unreachable!";
   case 67:
    var $72 = $add_ptr6;
    var $74 = HEAPU32[$and5 + ($mem + 16) >> 2];
    var $76 = HEAPU32[$mem + ($and5 | 4) >> 2];
    if (($76 | 0) == ($72 | 0)) {
      __label__ = 71;
      break;
    } else {
      __label__ = 68;
      break;
    }
   case 68:
    var $78 = HEAPU32[$mem + $and5 >> 2];
    if ($78 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
      __label__ = 70;
      break;
    } else {
      __label__ = 69;
      break;
    }
   case 69:
    HEAP32[$78 + 12 >> 2] = $76;
    HEAP32[$76 + 8 >> 2] = $78;
    var $R288_1 = $76;
    __label__ = 78;
    break;
   case 70:
    _abort();
    throw "Reached an unreachable!";
   case 71:
    var $81 = $and5 + ($mem + 12) | 0;
    var $82 = HEAP32[$81 >> 2];
    if (($82 | 0) == 0) {
      __label__ = 72;
      break;
    } else {
      var $RP306_0 = $81;
      var $R288_0 = $82;
      __label__ = 73;
      break;
    }
   case 72:
    var $arrayidx313 = $and5 + ($mem + 8) | 0;
    var $83 = HEAP32[$arrayidx313 >> 2];
    if (($83 | 0) == 0) {
      var $R288_1 = 0;
      __label__ = 78;
      break;
    } else {
      var $RP306_0 = $arrayidx313;
      var $R288_0 = $83;
      __label__ = 73;
      break;
    }
   case 73:
    var $R288_0;
    var $RP306_0;
    var $arrayidx320 = $R288_0 + 20 | 0;
    var $84 = HEAP32[$arrayidx320 >> 2];
    if (($84 | 0) == 0) {
      __label__ = 74;
      break;
    } else {
      var $RP306_0 = $arrayidx320;
      var $R288_0 = $84;
      __label__ = 73;
      break;
    }
   case 74:
    var $arrayidx325 = $R288_0 + 16 | 0;
    var $85 = HEAPU32[$arrayidx325 >> 2];
    if (($85 | 0) == 0) {
      __label__ = 75;
      break;
    } else {
      var $RP306_0 = $arrayidx325;
      var $R288_0 = $85;
      __label__ = 73;
      break;
    }
   case 75:
    if ($RP306_0 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
      __label__ = 77;
      break;
    } else {
      __label__ = 76;
      break;
    }
   case 76:
    HEAP32[$RP306_0 >> 2] = 0;
    var $R288_1 = $R288_0;
    __label__ = 78;
    break;
   case 77:
    _abort();
    throw "Reached an unreachable!";
   case 78:
    var $R288_1;
    if (($74 | 0) == 0) {
      __label__ = 98;
      break;
    } else {
      __label__ = 79;
      break;
    }
   case 79:
    var $88 = $and5 + ($mem + 20) | 0;
    var $arrayidx345 = __gm_ + 304 + (HEAP32[$88 >> 2] << 2) | 0;
    if (($72 | 0) == (HEAP32[$arrayidx345 >> 2] | 0)) {
      __label__ = 80;
      break;
    } else {
      __label__ = 82;
      break;
    }
   case 80:
    HEAP32[$arrayidx345 >> 2] = $R288_1;
    if (($R288_1 | 0) == 0) {
      __label__ = 81;
      break;
    } else {
      __label__ = 88;
      break;
    }
   case 81:
    var $and355 = HEAP32[__gm_ + 4 >> 2] & (1 << HEAP32[$88 >> 2] ^ -1);
    HEAP32[__gm_ + 4 >> 2] = $and355;
    __label__ = 98;
    break;
   case 82:
    if ($74 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
      __label__ = 86;
      break;
    } else {
      __label__ = 83;
      break;
    }
   case 83:
    var $arrayidx364 = $74 + 16 | 0;
    if ((HEAP32[$arrayidx364 >> 2] | 0) == ($72 | 0)) {
      __label__ = 84;
      break;
    } else {
      __label__ = 85;
      break;
    }
   case 84:
    HEAP32[$arrayidx364 >> 2] = $R288_1;
    __label__ = 87;
    break;
   case 85:
    HEAP32[$74 + 20 >> 2] = $R288_1;
    __label__ = 87;
    break;
   case 86:
    _abort();
    throw "Reached an unreachable!";
   case 87:
    if (($R288_1 | 0) == 0) {
      __label__ = 98;
      break;
    } else {
      __label__ = 88;
      break;
    }
   case 88:
    if ($R288_1 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
      __label__ = 97;
      break;
    } else {
      __label__ = 89;
      break;
    }
   case 89:
    HEAP32[$R288_1 + 24 >> 2] = $74;
    var $98 = HEAPU32[$and5 + ($mem + 8) >> 2];
    if (($98 | 0) == 0) {
      __label__ = 93;
      break;
    } else {
      __label__ = 90;
      break;
    }
   case 90:
    if ($98 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
      __label__ = 92;
      break;
    } else {
      __label__ = 91;
      break;
    }
   case 91:
    HEAP32[$R288_1 + 16 >> 2] = $98;
    HEAP32[$98 + 24 >> 2] = $R288_1;
    __label__ = 93;
    break;
   case 92:
    _abort();
    throw "Reached an unreachable!";
   case 93:
    var $102 = HEAPU32[$and5 + ($mem + 12) >> 2];
    if (($102 | 0) == 0) {
      __label__ = 98;
      break;
    } else {
      __label__ = 94;
      break;
    }
   case 94:
    if ($102 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
      __label__ = 96;
      break;
    } else {
      __label__ = 95;
      break;
    }
   case 95:
    HEAP32[$R288_1 + 20 >> 2] = $102;
    HEAP32[$102 + 24 >> 2] = $R288_1;
    __label__ = 98;
    break;
   case 96:
    _abort();
    throw "Reached an unreachable!";
   case 97:
    _abort();
    throw "Reached an unreachable!";
   case 98:
    HEAP32[$p_0 + 4 >> 2] = $add240 | 1;
    HEAP32[$52 + $add240 >> 2] = $add240;
    if (($p_0 | 0) == (HEAP32[__gm_ + 20 >> 2] | 0)) {
      __label__ = 99;
      break;
    } else {
      var $psize_1 = $add240;
      __label__ = 101;
      break;
    }
   case 99:
    HEAP32[__gm_ + 8 >> 2] = $add240;
    __label__ = 128;
    break;
   case 100:
    HEAP32[$53 >> 2] = $54 & -2;
    HEAP32[$p_0 + 4 >> 2] = $psize_0 | 1;
    HEAP32[$52 + $psize_0 >> 2] = $psize_0;
    var $psize_1 = $psize_0;
    __label__ = 101;
    break;
   case 101:
    var $psize_1;
    if ($psize_1 >>> 0 < 256) {
      __label__ = 102;
      break;
    } else {
      __label__ = 107;
      break;
    }
   case 102:
    var $shl450 = $psize_1 >>> 2 & 1073741822;
    var $107 = __gm_ + 40 + ($shl450 << 2) | 0;
    var $108 = HEAPU32[__gm_ >> 2];
    var $shl453 = 1 << ($psize_1 >>> 3);
    if (($108 & $shl453 | 0) == 0) {
      __label__ = 103;
      break;
    } else {
      __label__ = 104;
      break;
    }
   case 103:
    HEAP32[__gm_ >> 2] = $108 | $shl453;
    var $F452_0 = $107;
    var $_pre_phi = __gm_ + 40 + ($shl450 + 2 << 2) | 0;
    __label__ = 106;
    break;
   case 104:
    var $109 = __gm_ + 40 + ($shl450 + 2 << 2) | 0;
    var $110 = HEAPU32[$109 >> 2];
    if ($110 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
      __label__ = 105;
      break;
    } else {
      var $F452_0 = $110;
      var $_pre_phi = $109;
      __label__ = 106;
      break;
    }
   case 105:
    _abort();
    throw "Reached an unreachable!";
   case 106:
    var $_pre_phi;
    var $F452_0;
    HEAP32[$_pre_phi >> 2] = $p_0;
    HEAP32[$F452_0 + 12 >> 2] = $p_0;
    HEAP32[$p_0 + 8 >> 2] = $F452_0;
    HEAP32[$p_0 + 12 >> 2] = $107;
    __label__ = 128;
    break;
   case 107:
    var $113 = $p_0;
    var $shr477 = $psize_1 >>> 8;
    if (($shr477 | 0) == 0) {
      var $I476_0 = 0;
      __label__ = 110;
      break;
    } else {
      __label__ = 108;
      break;
    }
   case 108:
    if ($psize_1 >>> 0 > 16777215) {
      var $I476_0 = 31;
      __label__ = 110;
      break;
    } else {
      __label__ = 109;
      break;
    }
   case 109:
    var $and487 = ($shr477 + 1048320 | 0) >>> 16 & 8;
    var $shl488 = $shr477 << $and487;
    var $and491 = ($shl488 + 520192 | 0) >>> 16 & 4;
    var $shl493 = $shl488 << $and491;
    var $and496 = ($shl493 + 245760 | 0) >>> 16 & 2;
    var $add501 = 14 - ($and491 | $and487 | $and496) + ($shl493 << $and496 >>> 15) | 0;
    var $I476_0 = $psize_1 >>> (($add501 + 7 | 0) >>> 0) & 1 | $add501 << 1;
    __label__ = 110;
    break;
   case 110:
    var $I476_0;
    var $arrayidx509 = __gm_ + 304 + ($I476_0 << 2) | 0;
    HEAP32[$p_0 + 28 >> 2] = $I476_0;
    HEAP32[$p_0 + 20 >> 2] = 0;
    HEAP32[$p_0 + 16 >> 2] = 0;
    var $115 = HEAP32[__gm_ + 4 >> 2];
    var $shl515 = 1 << $I476_0;
    if (($115 & $shl515 | 0) == 0) {
      __label__ = 111;
      break;
    } else {
      __label__ = 112;
      break;
    }
   case 111:
    var $or520 = $115 | $shl515;
    HEAP32[__gm_ + 4 >> 2] = $or520;
    HEAP32[$arrayidx509 >> 2] = $113;
    HEAP32[$p_0 + 24 >> 2] = $arrayidx509;
    HEAP32[$p_0 + 12 >> 2] = $p_0;
    HEAP32[$p_0 + 8 >> 2] = $p_0;
    __label__ = 125;
    break;
   case 112:
    var $116 = HEAP32[$arrayidx509 >> 2];
    if (($I476_0 | 0) == 31) {
      var $cond = 0;
      __label__ = 114;
      break;
    } else {
      __label__ = 113;
      break;
    }
   case 113:
    var $cond = 25 - ($I476_0 >>> 1) | 0;
    __label__ = 114;
    break;
   case 114:
    var $cond;
    var $K525_0 = $psize_1 << $cond;
    var $T_0 = $116;
    __label__ = 115;
    break;
   case 115:
    var $T_0;
    var $K525_0;
    if ((HEAP32[$T_0 + 4 >> 2] & -8 | 0) == ($psize_1 | 0)) {
      __label__ = 121;
      break;
    } else {
      __label__ = 116;
      break;
    }
   case 116:
    var $arrayidx541 = $T_0 + 16 + ($K525_0 >>> 31 << 2) | 0;
    var $118 = HEAPU32[$arrayidx541 >> 2];
    if (($118 | 0) == 0) {
      __label__ = 118;
      break;
    } else {
      __label__ = 117;
      break;
    }
   case 117:
    var $K525_0 = $K525_0 << 1;
    var $T_0 = $118;
    __label__ = 115;
    break;
   case 118:
    if ($arrayidx541 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
      __label__ = 120;
      break;
    } else {
      __label__ = 119;
      break;
    }
   case 119:
    HEAP32[$arrayidx541 >> 2] = $113;
    HEAP32[$p_0 + 24 >> 2] = $T_0;
    HEAP32[$p_0 + 12 >> 2] = $p_0;
    HEAP32[$p_0 + 8 >> 2] = $p_0;
    __label__ = 125;
    break;
   case 120:
    _abort();
    throw "Reached an unreachable!";
   case 121:
    var $fd559 = $T_0 + 8 | 0;
    var $121 = HEAPU32[$fd559 >> 2];
    var $123 = HEAPU32[__gm_ + 16 >> 2];
    if ($T_0 >>> 0 < $123 >>> 0) {
      __label__ = 124;
      break;
    } else {
      __label__ = 122;
      break;
    }
   case 122:
    if ($121 >>> 0 < $123 >>> 0) {
      __label__ = 124;
      break;
    } else {
      __label__ = 123;
      break;
    }
   case 123:
    HEAP32[$121 + 12 >> 2] = $113;
    HEAP32[$fd559 >> 2] = $113;
    HEAP32[$p_0 + 8 >> 2] = $121;
    HEAP32[$p_0 + 12 >> 2] = $T_0;
    HEAP32[$p_0 + 24 >> 2] = 0;
    __label__ = 125;
    break;
   case 124:
    _abort();
    throw "Reached an unreachable!";
   case 125:
    var $dec = HEAP32[__gm_ + 32 >> 2] - 1 | 0;
    HEAP32[__gm_ + 32 >> 2] = $dec;
    if (($dec | 0) == 0) {
      __label__ = 126;
      break;
    } else {
      __label__ = 128;
      break;
    }
   case 126:
    _release_unused_segments();
    __label__ = 128;
    break;
   case 127:
    _abort();
    throw "Reached an unreachable!";
   case 128:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

Module["_free"] = _free;

_free["X"] = 1;

function _segment_holding($addr) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $sp_0 = __gm_ + 444 | 0;
    __label__ = 2;
    break;
   case 2:
    var $sp_0;
    var $0 = HEAPU32[$sp_0 >> 2];
    if ($0 >>> 0 > $addr >>> 0) {
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    if (($0 + HEAP32[$sp_0 + 4 >> 2] | 0) >>> 0 > $addr >>> 0) {
      var $retval_0 = $sp_0;
      __label__ = 5;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $2 = HEAPU32[$sp_0 + 8 >> 2];
    if (($2 | 0) == 0) {
      var $retval_0 = 0;
      __label__ = 5;
      break;
    } else {
      var $sp_0 = $2;
      __label__ = 2;
      break;
    }
   case 5:
    var $retval_0;
    return $retval_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _init_top($p, $psize) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $0 = $p;
    var $1 = $p + 8 | 0;
    if (($1 & 7 | 0) == 0) {
      var $cond = 0;
      __label__ = 3;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $cond = -$1 & 7;
    __label__ = 3;
    break;
   case 3:
    var $cond;
    var $sub5 = $psize - $cond | 0;
    HEAP32[__gm_ + 24 >> 2] = $0 + $cond | 0;
    HEAP32[__gm_ + 12 >> 2] = $sub5;
    HEAP32[$cond + ($0 + 4) >> 2] = $sub5 | 1;
    HEAP32[$psize + ($0 + 4) >> 2] = 40;
    var $6 = HEAP32[_mparams + 16 >> 2];
    HEAP32[__gm_ + 28 >> 2] = $6;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _init_bins() {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $i_02 = 0;
    __label__ = 2;
    break;
   case 2:
    var $i_02;
    var $shl = $i_02 << 1;
    var $0 = __gm_ + 40 + ($shl << 2) | 0;
    HEAP32[__gm_ + 40 + ($shl + 3 << 2) >> 2] = $0;
    HEAP32[__gm_ + 40 + ($shl + 2 << 2) >> 2] = $0;
    var $inc = $i_02 + 1 | 0;
    if (($inc | 0) == 32) {
      __label__ = 3;
      break;
    } else {
      var $i_02 = $inc;
      __label__ = 2;
      break;
    }
   case 3:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _init_mparams() {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    if ((HEAP32[_mparams >> 2] | 0) == 0) {
      __label__ = 2;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 2:
    var $call = _sysconf(8);
    if (($call - 1 & $call | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    _abort();
    throw "Reached an unreachable!";
   case 4:
    HEAP32[_mparams + 8 >> 2] = $call;
    HEAP32[_mparams + 4 >> 2] = $call;
    HEAP32[_mparams + 12 >> 2] = -1;
    HEAP32[_mparams + 16 >> 2] = 2097152;
    HEAP32[_mparams + 20 >> 2] = 0;
    HEAP32[__gm_ + 440 >> 2] = 0;
    var $call6 = _time(0);
    HEAP32[_mparams >> 2] = $call6 & -16 ^ 1431655768;
    __label__ = 5;
    break;
   case 5:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _prepend_alloc($newbase, $oldbase, $nb) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $0 = $newbase + 8 | 0;
    if (($0 & 7 | 0) == 0) {
      var $cond = 0;
      __label__ = 3;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $cond = -$0 & 7;
    __label__ = 3;
    break;
   case 3:
    var $cond;
    var $add_ptr4 = $newbase + $cond | 0;
    var $2 = $oldbase + 8 | 0;
    if (($2 & 7 | 0) == 0) {
      var $cond15 = 0;
      __label__ = 5;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $cond15 = -$2 & 7;
    __label__ = 5;
    break;
   case 5:
    var $cond15;
    var $add_ptr16 = $oldbase + $cond15 | 0;
    var $4 = $add_ptr16;
    var $add_ptr4_sum = $cond + $nb | 0;
    var $add_ptr17 = $newbase + $add_ptr4_sum | 0;
    var $5 = $add_ptr17;
    var $sub18 = $add_ptr16 - $add_ptr4 - $nb | 0;
    HEAP32[$cond + ($newbase + 4) >> 2] = $nb | 3;
    if (($4 | 0) == (HEAP32[__gm_ + 24 >> 2] | 0)) {
      __label__ = 6;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 6:
    var $add = HEAP32[__gm_ + 12 >> 2] + $sub18 | 0;
    HEAP32[__gm_ + 12 >> 2] = $add;
    HEAP32[__gm_ + 24 >> 2] = $5;
    var $or22 = $add | 1;
    HEAP32[$add_ptr4_sum + ($newbase + 4) >> 2] = $or22;
    __label__ = 75;
    break;
   case 7:
    if (($4 | 0) == (HEAP32[__gm_ + 20 >> 2] | 0)) {
      __label__ = 8;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 8:
    var $add26 = HEAP32[__gm_ + 8 >> 2] + $sub18 | 0;
    HEAP32[__gm_ + 8 >> 2] = $add26;
    HEAP32[__gm_ + 20 >> 2] = $5;
    var $or28 = $add26 | 1;
    HEAP32[$add_ptr4_sum + ($newbase + 4) >> 2] = $or28;
    var $prev_foot = $newbase + ($add26 + $add_ptr4_sum) | 0;
    HEAP32[$prev_foot >> 2] = $add26;
    __label__ = 75;
    break;
   case 9:
    var $14 = HEAPU32[$cond15 + ($oldbase + 4) >> 2];
    if (($14 & 3 | 0) == 1) {
      __label__ = 10;
      break;
    } else {
      var $oldfirst_0 = $4;
      var $qsize_0 = $sub18;
      __label__ = 51;
      break;
    }
   case 10:
    var $and37 = $14 & -8;
    var $shr = $14 >>> 3;
    if ($14 >>> 0 < 256) {
      __label__ = 11;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 11:
    var $16 = HEAPU32[$oldbase + ($cond15 | 8) >> 2];
    var $18 = HEAPU32[$cond15 + ($oldbase + 12) >> 2];
    if (($16 | 0) == ($18 | 0)) {
      __label__ = 12;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 12:
    var $and43 = HEAP32[__gm_ >> 2] & (1 << $shr ^ -1);
    HEAP32[__gm_ >> 2] = $and43;
    __label__ = 50;
    break;
   case 13:
    var $21 = __gm_ + 40 + (($14 >>> 2 & 1073741822) << 2) | 0;
    if (($16 | 0) == ($21 | 0)) {
      __label__ = 15;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 14:
    if ($16 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
      __label__ = 18;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 15:
    if (($18 | 0) == ($21 | 0)) {
      __label__ = 17;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 16:
    if ($18 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
      __label__ = 18;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 17:
    HEAP32[$16 + 12 >> 2] = $18;
    HEAP32[$18 + 8 >> 2] = $16;
    __label__ = 50;
    break;
   case 18:
    _abort();
    throw "Reached an unreachable!";
   case 19:
    var $26 = $add_ptr16;
    var $28 = HEAPU32[$oldbase + ($cond15 | 24) >> 2];
    var $30 = HEAPU32[$cond15 + ($oldbase + 12) >> 2];
    if (($30 | 0) == ($26 | 0)) {
      __label__ = 23;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 20:
    var $32 = HEAPU32[$oldbase + ($cond15 | 8) >> 2];
    if ($32 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
      __label__ = 22;
      break;
    } else {
      __label__ = 21;
      break;
    }
   case 21:
    HEAP32[$32 + 12 >> 2] = $30;
    HEAP32[$30 + 8 >> 2] = $32;
    var $R_1 = $30;
    __label__ = 30;
    break;
   case 22:
    _abort();
    throw "Reached an unreachable!";
   case 23:
    var $add_ptr16_sum56 = $cond15 | 16;
    var $35 = $add_ptr16_sum56 + ($oldbase + 4) | 0;
    var $36 = HEAP32[$35 >> 2];
    if (($36 | 0) == 0) {
      __label__ = 24;
      break;
    } else {
      var $RP_0 = $35;
      var $R_0 = $36;
      __label__ = 25;
      break;
    }
   case 24:
    var $arrayidx81 = $oldbase + $add_ptr16_sum56 | 0;
    var $37 = HEAP32[$arrayidx81 >> 2];
    if (($37 | 0) == 0) {
      var $R_1 = 0;
      __label__ = 30;
      break;
    } else {
      var $RP_0 = $arrayidx81;
      var $R_0 = $37;
      __label__ = 25;
      break;
    }
   case 25:
    var $R_0;
    var $RP_0;
    var $arrayidx86 = $R_0 + 20 | 0;
    var $38 = HEAP32[$arrayidx86 >> 2];
    if (($38 | 0) == 0) {
      __label__ = 26;
      break;
    } else {
      var $RP_0 = $arrayidx86;
      var $R_0 = $38;
      __label__ = 25;
      break;
    }
   case 26:
    var $arrayidx91 = $R_0 + 16 | 0;
    var $39 = HEAPU32[$arrayidx91 >> 2];
    if (($39 | 0) == 0) {
      __label__ = 27;
      break;
    } else {
      var $RP_0 = $arrayidx91;
      var $R_0 = $39;
      __label__ = 25;
      break;
    }
   case 27:
    if ($RP_0 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
      __label__ = 29;
      break;
    } else {
      __label__ = 28;
      break;
    }
   case 28:
    HEAP32[$RP_0 >> 2] = 0;
    var $R_1 = $R_0;
    __label__ = 30;
    break;
   case 29:
    _abort();
    throw "Reached an unreachable!";
   case 30:
    var $R_1;
    if (($28 | 0) == 0) {
      __label__ = 50;
      break;
    } else {
      __label__ = 31;
      break;
    }
   case 31:
    var $42 = $cond15 + ($oldbase + 28) | 0;
    var $arrayidx108 = __gm_ + 304 + (HEAP32[$42 >> 2] << 2) | 0;
    if (($26 | 0) == (HEAP32[$arrayidx108 >> 2] | 0)) {
      __label__ = 32;
      break;
    } else {
      __label__ = 34;
      break;
    }
   case 32:
    HEAP32[$arrayidx108 >> 2] = $R_1;
    if (($R_1 | 0) == 0) {
      __label__ = 33;
      break;
    } else {
      __label__ = 40;
      break;
    }
   case 33:
    var $and118 = HEAP32[__gm_ + 4 >> 2] & (1 << HEAP32[$42 >> 2] ^ -1);
    HEAP32[__gm_ + 4 >> 2] = $and118;
    __label__ = 50;
    break;
   case 34:
    if ($28 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
      __label__ = 38;
      break;
    } else {
      __label__ = 35;
      break;
    }
   case 35:
    var $arrayidx128 = $28 + 16 | 0;
    if ((HEAP32[$arrayidx128 >> 2] | 0) == ($26 | 0)) {
      __label__ = 36;
      break;
    } else {
      __label__ = 37;
      break;
    }
   case 36:
    HEAP32[$arrayidx128 >> 2] = $R_1;
    __label__ = 39;
    break;
   case 37:
    HEAP32[$28 + 20 >> 2] = $R_1;
    __label__ = 39;
    break;
   case 38:
    _abort();
    throw "Reached an unreachable!";
   case 39:
    if (($R_1 | 0) == 0) {
      __label__ = 50;
      break;
    } else {
      __label__ = 40;
      break;
    }
   case 40:
    if ($R_1 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
      __label__ = 49;
      break;
    } else {
      __label__ = 41;
      break;
    }
   case 41:
    HEAP32[$R_1 + 24 >> 2] = $28;
    var $add_ptr16_sum2627 = $cond15 | 16;
    var $52 = HEAPU32[$oldbase + $add_ptr16_sum2627 >> 2];
    if (($52 | 0) == 0) {
      __label__ = 45;
      break;
    } else {
      __label__ = 42;
      break;
    }
   case 42:
    if ($52 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
      __label__ = 44;
      break;
    } else {
      __label__ = 43;
      break;
    }
   case 43:
    HEAP32[$R_1 + 16 >> 2] = $52;
    HEAP32[$52 + 24 >> 2] = $R_1;
    __label__ = 45;
    break;
   case 44:
    _abort();
    throw "Reached an unreachable!";
   case 45:
    var $56 = HEAPU32[$add_ptr16_sum2627 + ($oldbase + 4) >> 2];
    if (($56 | 0) == 0) {
      __label__ = 50;
      break;
    } else {
      __label__ = 46;
      break;
    }
   case 46:
    if ($56 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
      __label__ = 48;
      break;
    } else {
      __label__ = 47;
      break;
    }
   case 47:
    HEAP32[$R_1 + 20 >> 2] = $56;
    HEAP32[$56 + 24 >> 2] = $R_1;
    __label__ = 50;
    break;
   case 48:
    _abort();
    throw "Reached an unreachable!";
   case 49:
    _abort();
    throw "Reached an unreachable!";
   case 50:
    var $oldfirst_0 = $oldbase + ($and37 | $cond15) | 0;
    var $qsize_0 = $and37 + $sub18 | 0;
    __label__ = 51;
    break;
   case 51:
    var $qsize_0;
    var $oldfirst_0;
    var $head193 = $oldfirst_0 + 4 | 0;
    var $and194 = HEAP32[$head193 >> 2] & -2;
    HEAP32[$head193 >> 2] = $and194;
    HEAP32[$add_ptr4_sum + ($newbase + 4) >> 2] = $qsize_0 | 1;
    HEAP32[$newbase + ($qsize_0 + $add_ptr4_sum) >> 2] = $qsize_0;
    if ($qsize_0 >>> 0 < 256) {
      __label__ = 52;
      break;
    } else {
      __label__ = 57;
      break;
    }
   case 52:
    var $shl206 = $qsize_0 >>> 2 & 1073741822;
    var $63 = __gm_ + 40 + ($shl206 << 2) | 0;
    var $64 = HEAPU32[__gm_ >> 2];
    var $shl211 = 1 << ($qsize_0 >>> 3);
    if (($64 & $shl211 | 0) == 0) {
      __label__ = 53;
      break;
    } else {
      __label__ = 54;
      break;
    }
   case 53:
    HEAP32[__gm_ >> 2] = $64 | $shl211;
    var $F209_0 = $63;
    var $_pre_phi = __gm_ + 40 + ($shl206 + 2 << 2) | 0;
    __label__ = 56;
    break;
   case 54:
    var $65 = __gm_ + 40 + ($shl206 + 2 << 2) | 0;
    var $66 = HEAPU32[$65 >> 2];
    if ($66 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
      __label__ = 55;
      break;
    } else {
      var $F209_0 = $66;
      var $_pre_phi = $65;
      __label__ = 56;
      break;
    }
   case 55:
    _abort();
    throw "Reached an unreachable!";
   case 56:
    var $_pre_phi;
    var $F209_0;
    HEAP32[$_pre_phi >> 2] = $5;
    HEAP32[$F209_0 + 12 >> 2] = $5;
    HEAP32[$add_ptr4_sum + ($newbase + 8) >> 2] = $F209_0;
    HEAP32[$add_ptr4_sum + ($newbase + 12) >> 2] = $63;
    __label__ = 75;
    break;
   case 57:
    var $71 = $add_ptr17;
    var $shr238 = $qsize_0 >>> 8;
    if (($shr238 | 0) == 0) {
      var $I237_0 = 0;
      __label__ = 60;
      break;
    } else {
      __label__ = 58;
      break;
    }
   case 58:
    if ($qsize_0 >>> 0 > 16777215) {
      var $I237_0 = 31;
      __label__ = 60;
      break;
    } else {
      __label__ = 59;
      break;
    }
   case 59:
    var $and249 = ($shr238 + 1048320 | 0) >>> 16 & 8;
    var $shl250 = $shr238 << $and249;
    var $and253 = ($shl250 + 520192 | 0) >>> 16 & 4;
    var $shl255 = $shl250 << $and253;
    var $and258 = ($shl255 + 245760 | 0) >>> 16 & 2;
    var $add263 = 14 - ($and253 | $and249 | $and258) + ($shl255 << $and258 >>> 15) | 0;
    var $I237_0 = $qsize_0 >>> (($add263 + 7 | 0) >>> 0) & 1 | $add263 << 1;
    __label__ = 60;
    break;
   case 60:
    var $I237_0;
    var $arrayidx272 = __gm_ + 304 + ($I237_0 << 2) | 0;
    HEAP32[$add_ptr4_sum + ($newbase + 28) >> 2] = $I237_0;
    var $child274 = $add_ptr4_sum + ($newbase + 16) | 0;
    HEAP32[$add_ptr4_sum + ($newbase + 20) >> 2] = 0;
    HEAP32[$child274 >> 2] = 0;
    var $74 = HEAP32[__gm_ + 4 >> 2];
    var $shl279 = 1 << $I237_0;
    if (($74 & $shl279 | 0) == 0) {
      __label__ = 61;
      break;
    } else {
      __label__ = 62;
      break;
    }
   case 61:
    var $or285 = $74 | $shl279;
    HEAP32[__gm_ + 4 >> 2] = $or285;
    HEAP32[$arrayidx272 >> 2] = $71;
    HEAP32[$add_ptr4_sum + ($newbase + 24) >> 2] = $arrayidx272;
    HEAP32[$add_ptr4_sum + ($newbase + 12) >> 2] = $71;
    HEAP32[$add_ptr4_sum + ($newbase + 8) >> 2] = $71;
    __label__ = 75;
    break;
   case 62:
    var $79 = HEAP32[$arrayidx272 >> 2];
    if (($I237_0 | 0) == 31) {
      var $cond300 = 0;
      __label__ = 64;
      break;
    } else {
      __label__ = 63;
      break;
    }
   case 63:
    var $cond300 = 25 - ($I237_0 >>> 1) | 0;
    __label__ = 64;
    break;
   case 64:
    var $cond300;
    var $K290_0 = $qsize_0 << $cond300;
    var $T_0 = $79;
    __label__ = 65;
    break;
   case 65:
    var $T_0;
    var $K290_0;
    if ((HEAP32[$T_0 + 4 >> 2] & -8 | 0) == ($qsize_0 | 0)) {
      __label__ = 71;
      break;
    } else {
      __label__ = 66;
      break;
    }
   case 66:
    var $arrayidx310 = $T_0 + 16 + ($K290_0 >>> 31 << 2) | 0;
    var $81 = HEAPU32[$arrayidx310 >> 2];
    if (($81 | 0) == 0) {
      __label__ = 68;
      break;
    } else {
      __label__ = 67;
      break;
    }
   case 67:
    var $K290_0 = $K290_0 << 1;
    var $T_0 = $81;
    __label__ = 65;
    break;
   case 68:
    if ($arrayidx310 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
      __label__ = 70;
      break;
    } else {
      __label__ = 69;
      break;
    }
   case 69:
    HEAP32[$arrayidx310 >> 2] = $71;
    HEAP32[$add_ptr4_sum + ($newbase + 24) >> 2] = $T_0;
    HEAP32[$add_ptr4_sum + ($newbase + 12) >> 2] = $71;
    HEAP32[$add_ptr4_sum + ($newbase + 8) >> 2] = $71;
    __label__ = 75;
    break;
   case 70:
    _abort();
    throw "Reached an unreachable!";
   case 71:
    var $fd329 = $T_0 + 8 | 0;
    var $87 = HEAPU32[$fd329 >> 2];
    var $89 = HEAPU32[__gm_ + 16 >> 2];
    if ($T_0 >>> 0 < $89 >>> 0) {
      __label__ = 74;
      break;
    } else {
      __label__ = 72;
      break;
    }
   case 72:
    if ($87 >>> 0 < $89 >>> 0) {
      __label__ = 74;
      break;
    } else {
      __label__ = 73;
      break;
    }
   case 73:
    HEAP32[$87 + 12 >> 2] = $71;
    HEAP32[$fd329 >> 2] = $71;
    HEAP32[$add_ptr4_sum + ($newbase + 8) >> 2] = $87;
    HEAP32[$add_ptr4_sum + ($newbase + 12) >> 2] = $T_0;
    HEAP32[$add_ptr4_sum + ($newbase + 24) >> 2] = 0;
    __label__ = 75;
    break;
   case 74:
    _abort();
    throw "Reached an unreachable!";
   case 75:
    return $newbase + ($cond | 8) | 0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_prepend_alloc["X"] = 1;

function _add_segment($tbase, $tsize) {
  var __label__;
  __label__ = 1;
  while (1) switch (__label__) {
   case 1:
    var $0 = HEAPU32[__gm_ + 24 >> 2];
    var $1 = $0;
    var $call = _segment_holding($1);
    var $2 = HEAP32[$call >> 2];
    var $3 = HEAP32[$call + 4 >> 2];
    var $add_ptr = $2 + $3 | 0;
    var $4 = $2 + ($3 - 39) | 0;
    if (($4 & 7 | 0) == 0) {
      var $cond = 0;
      __label__ = 3;
      break;
    } else {
      __label__ = 2;
      break;
    }
   case 2:
    var $cond = -$4 & 7;
    __label__ = 3;
    break;
   case 3:
    var $cond;
    var $add_ptr7 = $2 + ($3 - 47 + $cond) | 0;
    var $cond13 = $add_ptr7 >>> 0 < ($0 + 16 | 0) >>> 0 ? $1 : $add_ptr7;
    var $add_ptr14 = $cond13 + 8 | 0;
    var $7 = $add_ptr14;
    var $8 = $tbase;
    var $sub16 = $tsize - 40 | 0;
    _init_top($8, $sub16);
    var $9 = $cond13 + 4 | 0;
    HEAP32[$9 >> 2] = 27;
    HEAP32[$add_ptr14 >> 2] = HEAP32[__gm_ + 444 >> 2];
    HEAP32[$add_ptr14 + 4 >> 2] = HEAP32[__gm_ + 448 >> 2];
    HEAP32[$add_ptr14 + 8 >> 2] = HEAP32[__gm_ + 452 >> 2];
    HEAP32[$add_ptr14 + 12 >> 2] = HEAP32[__gm_ + 456 >> 2];
    HEAP32[__gm_ + 444 >> 2] = $tbase;
    HEAP32[__gm_ + 448 >> 2] = $tsize;
    HEAP32[__gm_ + 456 >> 2] = 0;
    HEAP32[__gm_ + 452 >> 2] = $7;
    var $10 = $cond13 + 28 | 0;
    HEAP32[$10 >> 2] = 7;
    if (($cond13 + 32 | 0) >>> 0 < $add_ptr >>> 0) {
      var $add_ptr2412 = $10;
      __label__ = 4;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 4:
    var $add_ptr2412;
    var $12 = $add_ptr2412 + 4 | 0;
    HEAP32[$12 >> 2] = 7;
    if (($add_ptr2412 + 8 | 0) >>> 0 < $add_ptr >>> 0) {
      var $add_ptr2412 = $12;
      __label__ = 4;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    if (($cond13 | 0) == ($1 | 0)) {
      __label__ = 30;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    var $sub_ptr_sub = $cond13 - $0 | 0;
    var $add_ptr30 = $1 + $sub_ptr_sub | 0;
    var $15 = $sub_ptr_sub + ($1 + 4) | 0;
    var $and32 = HEAP32[$15 >> 2] & -2;
    HEAP32[$15 >> 2] = $and32;
    var $or33 = $sub_ptr_sub | 1;
    HEAP32[$0 + 4 >> 2] = $or33;
    var $prev_foot = $add_ptr30;
    HEAP32[$prev_foot >> 2] = $sub_ptr_sub;
    if ($sub_ptr_sub >>> 0 < 256) {
      __label__ = 7;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 7:
    var $shl = $sub_ptr_sub >>> 2 & 1073741822;
    var $18 = __gm_ + 40 + ($shl << 2) | 0;
    var $19 = HEAPU32[__gm_ >> 2];
    var $shl39 = 1 << ($sub_ptr_sub >>> 3);
    if (($19 & $shl39 | 0) == 0) {
      __label__ = 8;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 8:
    var $or44 = $19 | $shl39;
    HEAP32[__gm_ >> 2] = $or44;
    var $F_0 = $18;
    var $_pre_phi = __gm_ + 40 + ($shl + 2 << 2) | 0;
    __label__ = 11;
    break;
   case 9:
    var $20 = __gm_ + 40 + ($shl + 2 << 2) | 0;
    var $21 = HEAPU32[$20 >> 2];
    if ($21 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
      __label__ = 10;
      break;
    } else {
      var $F_0 = $21;
      var $_pre_phi = $20;
      __label__ = 11;
      break;
    }
   case 10:
    _abort();
    throw "Reached an unreachable!";
   case 11:
    var $_pre_phi;
    var $F_0;
    HEAP32[$_pre_phi >> 2] = $0;
    HEAP32[$F_0 + 12 >> 2] = $0;
    HEAP32[$0 + 8 >> 2] = $F_0;
    HEAP32[$0 + 12 >> 2] = $18;
    __label__ = 30;
    break;
   case 12:
    var $24 = $0;
    var $shr58 = $sub_ptr_sub >>> 8;
    if (($shr58 | 0) == 0) {
      var $I57_0 = 0;
      __label__ = 15;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 13:
    if ($sub_ptr_sub >>> 0 > 16777215) {
      var $I57_0 = 31;
      __label__ = 15;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 14:
    var $and69 = ($shr58 + 1048320 | 0) >>> 16 & 8;
    var $shl70 = $shr58 << $and69;
    var $and73 = ($shl70 + 520192 | 0) >>> 16 & 4;
    var $shl75 = $shl70 << $and73;
    var $and78 = ($shl75 + 245760 | 0) >>> 16 & 2;
    var $add83 = 14 - ($and73 | $and69 | $and78) + ($shl75 << $and78 >>> 15) | 0;
    var $I57_0 = $sub_ptr_sub >>> (($add83 + 7 | 0) >>> 0) & 1 | $add83 << 1;
    __label__ = 15;
    break;
   case 15:
    var $I57_0;
    var $arrayidx91 = __gm_ + 304 + ($I57_0 << 2) | 0;
    HEAP32[$0 + 28 >> 2] = $I57_0;
    HEAP32[$0 + 20 >> 2] = 0;
    HEAP32[$0 + 16 >> 2] = 0;
    var $26 = HEAP32[__gm_ + 4 >> 2];
    var $shl95 = 1 << $I57_0;
    if (($26 & $shl95 | 0) == 0) {
      __label__ = 16;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 16:
    var $or101 = $26 | $shl95;
    HEAP32[__gm_ + 4 >> 2] = $or101;
    HEAP32[$arrayidx91 >> 2] = $24;
    HEAP32[$0 + 24 >> 2] = $arrayidx91;
    HEAP32[$0 + 12 >> 2] = $0;
    HEAP32[$0 + 8 >> 2] = $0;
    __label__ = 30;
    break;
   case 17:
    var $27 = HEAP32[$arrayidx91 >> 2];
    if (($I57_0 | 0) == 31) {
      var $cond115 = 0;
      __label__ = 19;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 18:
    var $cond115 = 25 - ($I57_0 >>> 1) | 0;
    __label__ = 19;
    break;
   case 19:
    var $cond115;
    var $K105_0 = $sub_ptr_sub << $cond115;
    var $T_0 = $27;
    __label__ = 20;
    break;
   case 20:
    var $T_0;
    var $K105_0;
    if ((HEAP32[$T_0 + 4 >> 2] & -8 | 0) == ($sub_ptr_sub | 0)) {
      __label__ = 26;
      break;
    } else {
      __label__ = 21;
      break;
    }
   case 21:
    var $arrayidx126 = $T_0 + 16 + ($K105_0 >>> 31 << 2) | 0;
    var $29 = HEAPU32[$arrayidx126 >> 2];
    if (($29 | 0) == 0) {
      __label__ = 23;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 22:
    var $K105_0 = $K105_0 << 1;
    var $T_0 = $29;
    __label__ = 20;
    break;
   case 23:
    if ($arrayidx126 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
      __label__ = 25;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 24:
    HEAP32[$arrayidx126 >> 2] = $24;
    HEAP32[$0 + 24 >> 2] = $T_0;
    HEAP32[$0 + 12 >> 2] = $0;
    HEAP32[$0 + 8 >> 2] = $0;
    __label__ = 30;
    break;
   case 25:
    _abort();
    throw "Reached an unreachable!";
   case 26:
    var $fd145 = $T_0 + 8 | 0;
    var $32 = HEAPU32[$fd145 >> 2];
    var $34 = HEAPU32[__gm_ + 16 >> 2];
    if ($T_0 >>> 0 < $34 >>> 0) {
      __label__ = 29;
      break;
    } else {
      __label__ = 27;
      break;
    }
   case 27:
    if ($32 >>> 0 < $34 >>> 0) {
      __label__ = 29;
      break;
    } else {
      __label__ = 28;
      break;
    }
   case 28:
    HEAP32[$32 + 12 >> 2] = $24;
    HEAP32[$fd145 >> 2] = $24;
    HEAP32[$0 + 8 >> 2] = $32;
    HEAP32[$0 + 12 >> 2] = $T_0;
    HEAP32[$0 + 24 >> 2] = 0;
    __label__ = 30;
    break;
   case 29:
    _abort();
    throw "Reached an unreachable!";
   case 30:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_add_segment["X"] = 1;

var i64Math = null;

var ERRNO_CODES = {
  E2BIG: 7,
  EACCES: 13,
  EADDRINUSE: 98,
  EADDRNOTAVAIL: 99,
  EAFNOSUPPORT: 97,
  EAGAIN: 11,
  EALREADY: 114,
  EBADF: 9,
  EBADMSG: 74,
  EBUSY: 16,
  ECANCELED: 125,
  ECHILD: 10,
  ECONNABORTED: 103,
  ECONNREFUSED: 111,
  ECONNRESET: 104,
  EDEADLK: 35,
  EDESTADDRREQ: 89,
  EDOM: 33,
  EDQUOT: 122,
  EEXIST: 17,
  EFAULT: 14,
  EFBIG: 27,
  EHOSTUNREACH: 113,
  EIDRM: 43,
  EILSEQ: 84,
  EINPROGRESS: 115,
  EINTR: 4,
  EINVAL: 22,
  EIO: 5,
  EISCONN: 106,
  EISDIR: 21,
  ELOOP: 40,
  EMFILE: 24,
  EMLINK: 31,
  EMSGSIZE: 90,
  EMULTIHOP: 72,
  ENAMETOOLONG: 36,
  ENETDOWN: 100,
  ENETRESET: 102,
  ENETUNREACH: 101,
  ENFILE: 23,
  ENOBUFS: 105,
  ENODATA: 61,
  ENODEV: 19,
  ENOENT: 2,
  ENOEXEC: 8,
  ENOLCK: 37,
  ENOLINK: 67,
  ENOMEM: 12,
  ENOMSG: 42,
  ENOPROTOOPT: 92,
  ENOSPC: 28,
  ENOSR: 63,
  ENOSTR: 60,
  ENOSYS: 38,
  ENOTCONN: 107,
  ENOTDIR: 20,
  ENOTEMPTY: 39,
  ENOTRECOVERABLE: 131,
  ENOTSOCK: 88,
  ENOTSUP: 95,
  ENOTTY: 25,
  ENXIO: 6,
  EOVERFLOW: 75,
  EOWNERDEAD: 130,
  EPERM: 1,
  EPIPE: 32,
  EPROTO: 71,
  EPROTONOSUPPORT: 93,
  EPROTOTYPE: 91,
  ERANGE: 34,
  EROFS: 30,
  ESPIPE: 29,
  ESRCH: 3,
  ESTALE: 116,
  ETIME: 62,
  ETIMEDOUT: 110,
  ETXTBSY: 26,
  EWOULDBLOCK: 11,
  EXDEV: 18
};

function ___setErrNo(value) {
  if (!___setErrNo.ret) ___setErrNo.ret = allocate([ 0 ], "i32", ALLOC_STATIC);
  HEAP32[___setErrNo.ret >> 2] = value;
  return value;
}

var _stdin = 0;

var _stdout = 0;

var _stderr = 0;

var __impure_ptr = 0;

var FS = {
  currentPath: "/",
  nextInode: 2,
  streams: [ null ],
  ignorePermissions: true,
  absolutePath: (function(relative, base) {
    if (typeof relative !== "string") return null;
    if (base === undefined) base = FS.currentPath;
    if (relative && relative[0] == "/") base = "";
    var full = base + "/" + relative;
    var parts = full.split("/").reverse();
    var absolute = [ "" ];
    while (parts.length) {
      var part = parts.pop();
      if (part == "" || part == ".") {} else if (part == "..") {
        if (absolute.length > 1) absolute.pop();
      } else {
        absolute.push(part);
      }
    }
    return absolute.length == 1 ? "/" : absolute.join("/");
  }),
  analyzePath: (function(path, dontResolveLastLink, linksVisited) {
    var ret = {
      isRoot: false,
      exists: false,
      error: 0,
      name: null,
      path: null,
      object: null,
      parentExists: false,
      parentPath: null,
      parentObject: null
    };
    path = FS.absolutePath(path);
    if (path == "/") {
      ret.isRoot = true;
      ret.exists = ret.parentExists = true;
      ret.name = "/";
      ret.path = ret.parentPath = "/";
      ret.object = ret.parentObject = FS.root;
    } else if (path !== null) {
      linksVisited = linksVisited || 0;
      path = path.slice(1).split("/");
      var current = FS.root;
      var traversed = [ "" ];
      while (path.length) {
        if (path.length == 1 && current.isFolder) {
          ret.parentExists = true;
          ret.parentPath = traversed.length == 1 ? "/" : traversed.join("/");
          ret.parentObject = current;
          ret.name = path[0];
        }
        var target = path.shift();
        if (!current.isFolder) {
          ret.error = ERRNO_CODES.ENOTDIR;
          break;
        } else if (!current.read) {
          ret.error = ERRNO_CODES.EACCES;
          break;
        } else if (!current.contents.hasOwnProperty(target)) {
          ret.error = ERRNO_CODES.ENOENT;
          break;
        }
        current = current.contents[target];
        if (current.link && !(dontResolveLastLink && path.length == 0)) {
          if (linksVisited > 40) {
            ret.error = ERRNO_CODES.ELOOP;
            break;
          }
          var link = FS.absolutePath(current.link, traversed.join("/"));
          ret = FS.analyzePath([ link ].concat(path).join("/"), dontResolveLastLink, linksVisited + 1);
          return ret;
        }
        traversed.push(target);
        if (path.length == 0) {
          ret.exists = true;
          ret.path = traversed.join("/");
          ret.object = current;
        }
      }
    }
    return ret;
  }),
  findObject: (function(path, dontResolveLastLink) {
    FS.ensureRoot();
    var ret = FS.analyzePath(path, dontResolveLastLink);
    if (ret.exists) {
      return ret.object;
    } else {
      ___setErrNo(ret.error);
      return null;
    }
  }),
  createObject: (function(parent, name, properties, canRead, canWrite) {
    if (!parent) parent = "/";
    if (typeof parent === "string") parent = FS.findObject(parent);
    if (!parent) {
      ___setErrNo(ERRNO_CODES.EACCES);
      throw new Error("Parent path must exist.");
    }
    if (!parent.isFolder) {
      ___setErrNo(ERRNO_CODES.ENOTDIR);
      throw new Error("Parent must be a folder.");
    }
    if (!parent.write && !FS.ignorePermissions) {
      ___setErrNo(ERRNO_CODES.EACCES);
      throw new Error("Parent folder must be writeable.");
    }
    if (!name || name == "." || name == "..") {
      ___setErrNo(ERRNO_CODES.ENOENT);
      throw new Error("Name must not be empty.");
    }
    if (parent.contents.hasOwnProperty(name)) {
      ___setErrNo(ERRNO_CODES.EEXIST);
      throw new Error("Can't overwrite object.");
    }
    parent.contents[name] = {
      read: canRead === undefined ? true : canRead,
      write: canWrite === undefined ? false : canWrite,
      timestamp: Date.now(),
      inodeNumber: FS.nextInode++
    };
    for (var key in properties) {
      if (properties.hasOwnProperty(key)) {
        parent.contents[name][key] = properties[key];
      }
    }
    return parent.contents[name];
  }),
  createFolder: (function(parent, name, canRead, canWrite) {
    var properties = {
      isFolder: true,
      isDevice: false,
      contents: {}
    };
    return FS.createObject(parent, name, properties, canRead, canWrite);
  }),
  createPath: (function(parent, path, canRead, canWrite) {
    var current = FS.findObject(parent);
    if (current === null) throw new Error("Invalid parent.");
    path = path.split("/").reverse();
    while (path.length) {
      var part = path.pop();
      if (!part) continue;
      if (!current.contents.hasOwnProperty(part)) {
        FS.createFolder(current, part, canRead, canWrite);
      }
      current = current.contents[part];
    }
    return current;
  }),
  createFile: (function(parent, name, properties, canRead, canWrite) {
    properties.isFolder = false;
    return FS.createObject(parent, name, properties, canRead, canWrite);
  }),
  createDataFile: (function(parent, name, data, canRead, canWrite) {
    if (typeof data === "string") {
      var dataArray = new Array(data.length);
      for (var i = 0, len = data.length; i < len; ++i) dataArray[i] = data.charCodeAt(i);
      data = dataArray;
    }
    var properties = {
      isDevice: false,
      contents: data
    };
    return FS.createFile(parent, name, properties, canRead, canWrite);
  }),
  createLazyFile: (function(parent, name, url, canRead, canWrite) {
    var properties = {
      isDevice: false,
      url: url
    };
    return FS.createFile(parent, name, properties, canRead, canWrite);
  }),
  createLink: (function(parent, name, target, canRead, canWrite) {
    var properties = {
      isDevice: false,
      link: target
    };
    return FS.createFile(parent, name, properties, canRead, canWrite);
  }),
  createDevice: (function(parent, name, input, output) {
    if (!(input || output)) {
      throw new Error("A device must have at least one callback defined.");
    }
    var ops = {
      isDevice: true,
      input: input,
      output: output
    };
    return FS.createFile(parent, name, ops, Boolean(input), Boolean(output));
  }),
  forceLoadFile: (function(obj) {
    if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
    var success = true;
    if (typeof XMLHttpRequest !== "undefined") {
      assert("Cannot do synchronous binary XHRs in modern browsers. Use --embed-file or --preload-file in emcc");
    } else if (Module["read"]) {
      try {
        obj.contents = intArrayFromString(Module["read"](obj.url), true);
      } catch (e) {
        success = false;
      }
    } else {
      throw new Error("Cannot load without read() or XMLHttpRequest.");
    }
    if (!success) ___setErrNo(ERRNO_CODES.EIO);
    return success;
  }),
  ensureRoot: (function() {
    if (FS.root) return;
    FS.root = {
      read: true,
      write: true,
      isFolder: true,
      isDevice: false,
      timestamp: Date.now(),
      inodeNumber: 1,
      contents: {}
    };
  }),
  init: (function(input, output, error) {
    assert(!FS.init.initialized, "FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)");
    FS.init.initialized = true;
    FS.ensureRoot();
    input = input || Module["stdin"];
    output = output || Module["stdout"];
    error = error || Module["stderr"];
    var stdinOverridden = true, stdoutOverridden = true, stderrOverridden = true;
    if (!input) {
      stdinOverridden = false;
      input = (function() {
        if (!input.cache || !input.cache.length) {
          var result;
          if (typeof window != "undefined" && typeof window.prompt == "function") {
            result = window.prompt("Input: ");
          } else if (typeof readline == "function") {
            result = readline();
          }
          if (!result) result = "";
          input.cache = intArrayFromString(result + "\n", true);
        }
        return input.cache.shift();
      });
    }
    function simpleOutput(val) {
      if (val === null || val === "\n".charCodeAt(0)) {
        output.printer(output.buffer.join(""));
        output.buffer = [];
      } else {
        output.buffer.push(String.fromCharCode(val));
      }
    }
    if (!output) {
      stdoutOverridden = false;
      output = simpleOutput;
    }
    if (!output.printer) output.printer = Module["print"];
    if (!output.buffer) output.buffer = [];
    if (!error) {
      stderrOverridden = false;
      error = simpleOutput;
    }
    if (!error.printer) error.printer = Module["print"];
    if (!error.buffer) error.buffer = [];
    FS.createFolder("/", "tmp", true, true);
    var devFolder = FS.createFolder("/", "dev", true, true);
    var stdin = FS.createDevice(devFolder, "stdin", input);
    var stdout = FS.createDevice(devFolder, "stdout", null, output);
    var stderr = FS.createDevice(devFolder, "stderr", null, error);
    FS.createDevice(devFolder, "tty", input, output);
    FS.streams[1] = {
      path: "/dev/stdin",
      object: stdin,
      position: 0,
      isRead: true,
      isWrite: false,
      isAppend: false,
      isTerminal: !stdinOverridden,
      error: false,
      eof: false,
      ungotten: []
    };
    FS.streams[2] = {
      path: "/dev/stdout",
      object: stdout,
      position: 0,
      isRead: false,
      isWrite: true,
      isAppend: false,
      isTerminal: !stdoutOverridden,
      error: false,
      eof: false,
      ungotten: []
    };
    FS.streams[3] = {
      path: "/dev/stderr",
      object: stderr,
      position: 0,
      isRead: false,
      isWrite: true,
      isAppend: false,
      isTerminal: !stderrOverridden,
      error: false,
      eof: false,
      ungotten: []
    };
    _stdin = allocate([ 1 ], "void*", ALLOC_STATIC);
    _stdout = allocate([ 2 ], "void*", ALLOC_STATIC);
    _stderr = allocate([ 3 ], "void*", ALLOC_STATIC);
    FS.createPath("/", "dev/shm/tmp", true, true);
    FS.streams[_stdin] = FS.streams[1];
    FS.streams[_stdout] = FS.streams[2];
    FS.streams[_stderr] = FS.streams[3];
    __impure_ptr = allocate([ allocate([ 0, 0, 0, 0, _stdin, 0, 0, 0, _stdout, 0, 0, 0, _stderr, 0, 0, 0 ], "void*", ALLOC_STATIC) ], "void*", ALLOC_STATIC);
  }),
  quit: (function() {
    if (!FS.init.initialized) return;
    if (FS.streams[2] && FS.streams[2].object.output.buffer.length > 0) FS.streams[2].object.output("\n".charCodeAt(0));
    if (FS.streams[3] && FS.streams[3].object.output.buffer.length > 0) FS.streams[3].object.output("\n".charCodeAt(0));
  }),
  standardizePath: (function(path) {
    if (path.substr(0, 2) == "./") path = path.substr(2);
    return path;
  }),
  deleteFile: (function(path) {
    var path = FS.analyzePath(path);
    if (!path.parentExists || !path.exists) {
      throw "Invalid path " + path;
    }
    delete path.parentObject.contents[path.name];
  })
};

function _pread(fildes, buf, nbyte, offset) {
  var stream = FS.streams[fildes];
  if (!stream || stream.object.isDevice) {
    ___setErrNo(ERRNO_CODES.EBADF);
    return -1;
  } else if (!stream.isRead) {
    ___setErrNo(ERRNO_CODES.EACCES);
    return -1;
  } else if (stream.object.isFolder) {
    ___setErrNo(ERRNO_CODES.EISDIR);
    return -1;
  } else if (nbyte < 0 || offset < 0) {
    ___setErrNo(ERRNO_CODES.EINVAL);
    return -1;
  } else {
    var bytesRead = 0;
    while (stream.ungotten.length && nbyte > 0) {
      HEAP8[buf++] = stream.ungotten.pop();
      nbyte--;
      bytesRead++;
    }
    var contents = stream.object.contents;
    var size = Math.min(contents.length - offset, nbyte);
    for (var i = 0; i < size; i++) {
      HEAP8[buf + i] = contents[offset + i];
      bytesRead++;
    }
    return bytesRead;
  }
}

function _read(fildes, buf, nbyte) {
  var stream = FS.streams[fildes];
  if (!stream) {
    ___setErrNo(ERRNO_CODES.EBADF);
    return -1;
  } else if (!stream.isRead) {
    ___setErrNo(ERRNO_CODES.EACCES);
    return -1;
  } else if (nbyte < 0) {
    ___setErrNo(ERRNO_CODES.EINVAL);
    return -1;
  } else {
    var bytesRead;
    if (stream.object.isDevice) {
      if (stream.object.input) {
        bytesRead = 0;
        while (stream.ungotten.length && nbyte > 0) {
          HEAP8[buf++] = stream.ungotten.pop();
          nbyte--;
          bytesRead++;
        }
        for (var i = 0; i < nbyte; i++) {
          try {
            var result = stream.object.input();
          } catch (e) {
            ___setErrNo(ERRNO_CODES.EIO);
            return -1;
          }
          if (result === null || result === undefined) break;
          bytesRead++;
          HEAP8[buf + i] = result;
        }
        return bytesRead;
      } else {
        ___setErrNo(ERRNO_CODES.ENXIO);
        return -1;
      }
    } else {
      var ungotSize = stream.ungotten.length;
      bytesRead = _pread(fildes, buf, nbyte, stream.position);
      if (bytesRead != -1) {
        stream.position += stream.ungotten.length - ungotSize + bytesRead;
      }
      return bytesRead;
    }
  }
}

function _fread(ptr, size, nitems, stream) {
  var bytesToRead = nitems * size;
  if (bytesToRead == 0) return 0;
  var bytesRead = _read(stream, ptr, bytesToRead);
  var streamObj = FS.streams[stream];
  if (bytesRead == -1) {
    if (streamObj) streamObj.error = true;
    return -1;
  } else {
    if (bytesRead < bytesToRead) streamObj.eof = true;
    return Math.floor(bytesRead / size);
  }
}

function _pwrite(fildes, buf, nbyte, offset) {
  var stream = FS.streams[fildes];
  if (!stream || stream.object.isDevice) {
    ___setErrNo(ERRNO_CODES.EBADF);
    return -1;
  } else if (!stream.isWrite) {
    ___setErrNo(ERRNO_CODES.EACCES);
    return -1;
  } else if (stream.object.isFolder) {
    ___setErrNo(ERRNO_CODES.EISDIR);
    return -1;
  } else if (nbyte < 0 || offset < 0) {
    ___setErrNo(ERRNO_CODES.EINVAL);
    return -1;
  } else {
    var contents = stream.object.contents;
    while (contents.length < offset) contents.push(0);
    for (var i = 0; i < nbyte; i++) {
      contents[offset + i] = HEAPU8[buf + i];
    }
    stream.object.timestamp = Date.now();
    return i;
  }
}

function _write(fildes, buf, nbyte) {
  var stream = FS.streams[fildes];
  if (!stream) {
    ___setErrNo(ERRNO_CODES.EBADF);
    return -1;
  } else if (!stream.isWrite) {
    ___setErrNo(ERRNO_CODES.EACCES);
    return -1;
  } else if (nbyte < 0) {
    ___setErrNo(ERRNO_CODES.EINVAL);
    return -1;
  } else {
    if (stream.object.isDevice) {
      if (stream.object.output) {
        for (var i = 0; i < nbyte; i++) {
          try {
            stream.object.output(HEAP8[buf + i]);
          } catch (e) {
            ___setErrNo(ERRNO_CODES.EIO);
            return -1;
          }
        }
        stream.object.timestamp = Date.now();
        return i;
      } else {
        ___setErrNo(ERRNO_CODES.ENXIO);
        return -1;
      }
    } else {
      var bytesWritten = _pwrite(fildes, buf, nbyte, stream.position);
      if (bytesWritten != -1) stream.position += bytesWritten;
      return bytesWritten;
    }
  }
}

function _fwrite(ptr, size, nitems, stream) {
  var bytesToWrite = nitems * size;
  if (bytesToWrite == 0) return 0;
  var bytesWritten = _write(stream, ptr, bytesToWrite);
  if (bytesWritten == -1) {
    if (FS.streams[stream]) FS.streams[stream].error = true;
    return -1;
  } else {
    return Math.floor(bytesWritten / size);
  }
}

function _memset(ptr, value, num, align) {
  if (num >= 20) {
    var stop = ptr + num;
    while (ptr % 4) {
      HEAP8[ptr++] = value;
    }
    if (value < 0) value += 256;
    var ptr4 = ptr >> 2, stop4 = stop >> 2, value4 = value | value << 8 | value << 16 | value << 24;
    while (ptr4 < stop4) {
      HEAP32[ptr4++] = value4;
    }
    ptr = ptr4 << 2;
    while (ptr < stop) {
      HEAP8[ptr++] = value;
    }
  } else {
    while (num--) {
      HEAP8[ptr++] = value;
    }
  }
}

var _llvm_memset_p0i8_i32 = _memset;

function __formatString(format, varargs) {
  var textIndex = format;
  var argIndex = 0;
  function getNextArg(type) {
    var ret;
    if (type === "double") {
      ret = (tempDoubleI32[0] = HEAP32[varargs + argIndex >> 2], tempDoubleI32[1] = HEAP32[varargs + argIndex + 4 >> 2], tempDoubleF64[0]);
    } else if (type == "i64") {
      ret = [ HEAP32[varargs + argIndex >> 2], HEAP32[varargs + argIndex + 4 >> 2] ];
    } else {
      type = "i32";
      ret = HEAP32[varargs + argIndex >> 2];
    }
    argIndex += Runtime.getNativeFieldSize(type);
    return ret;
  }
  var ret = [];
  var curr, next, currArg;
  while (1) {
    var startTextIndex = textIndex;
    curr = HEAP8[textIndex];
    if (curr === 0) break;
    next = HEAP8[textIndex + 1];
    if (curr == "%".charCodeAt(0)) {
      var flagAlwaysSigned = false;
      var flagLeftAlign = false;
      var flagAlternative = false;
      var flagZeroPad = false;
      flagsLoop : while (1) {
        switch (next) {
         case "+".charCodeAt(0):
          flagAlwaysSigned = true;
          break;
         case "-".charCodeAt(0):
          flagLeftAlign = true;
          break;
         case "#".charCodeAt(0):
          flagAlternative = true;
          break;
         case "0".charCodeAt(0):
          if (flagZeroPad) {
            break flagsLoop;
          } else {
            flagZeroPad = true;
            break;
          }
         default:
          break flagsLoop;
        }
        textIndex++;
        next = HEAP8[textIndex + 1];
      }
      var width = 0;
      if (next == "*".charCodeAt(0)) {
        width = getNextArg("i32");
        textIndex++;
        next = HEAP8[textIndex + 1];
      } else {
        while (next >= "0".charCodeAt(0) && next <= "9".charCodeAt(0)) {
          width = width * 10 + (next - "0".charCodeAt(0));
          textIndex++;
          next = HEAP8[textIndex + 1];
        }
      }
      var precisionSet = false;
      if (next == ".".charCodeAt(0)) {
        var precision = 0;
        precisionSet = true;
        textIndex++;
        next = HEAP8[textIndex + 1];
        if (next == "*".charCodeAt(0)) {
          precision = getNextArg("i32");
          textIndex++;
        } else {
          while (1) {
            var precisionChr = HEAP8[textIndex + 1];
            if (precisionChr < "0".charCodeAt(0) || precisionChr > "9".charCodeAt(0)) break;
            precision = precision * 10 + (precisionChr - "0".charCodeAt(0));
            textIndex++;
          }
        }
        next = HEAP8[textIndex + 1];
      } else {
        var precision = 6;
      }
      var argSize;
      switch (String.fromCharCode(next)) {
       case "h":
        var nextNext = HEAP8[textIndex + 2];
        if (nextNext == "h".charCodeAt(0)) {
          textIndex++;
          argSize = 1;
        } else {
          argSize = 2;
        }
        break;
       case "l":
        var nextNext = HEAP8[textIndex + 2];
        if (nextNext == "l".charCodeAt(0)) {
          textIndex++;
          argSize = 8;
        } else {
          argSize = 4;
        }
        break;
       case "L":
       case "q":
       case "j":
        argSize = 8;
        break;
       case "z":
       case "t":
       case "I":
        argSize = 4;
        break;
       default:
        argSize = null;
      }
      if (argSize) textIndex++;
      next = HEAP8[textIndex + 1];
      if ([ "d", "i", "u", "o", "x", "X", "p" ].indexOf(String.fromCharCode(next)) != -1) {
        var signed = next == "d".charCodeAt(0) || next == "i".charCodeAt(0);
        argSize = argSize || 4;
        var currArg = getNextArg("i" + argSize * 8);
        var origArg = currArg;
        var argText;
        if (argSize == 8) {
          currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == "u".charCodeAt(0));
        }
        if (argSize <= 4) {
          var limit = Math.pow(256, argSize) - 1;
          currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
        }
        var currAbsArg = Math.abs(currArg);
        var prefix = "";
        if (next == "d".charCodeAt(0) || next == "i".charCodeAt(0)) {
          if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1]); else argText = reSign(currArg, 8 * argSize, 1).toString(10);
        } else if (next == "u".charCodeAt(0)) {
          if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else argText = unSign(currArg, 8 * argSize, 1).toString(10);
          currArg = Math.abs(currArg);
        } else if (next == "o".charCodeAt(0)) {
          argText = (flagAlternative ? "0" : "") + currAbsArg.toString(8);
        } else if (next == "x".charCodeAt(0) || next == "X".charCodeAt(0)) {
          prefix = flagAlternative ? "0x" : "";
          if (currArg < 0) {
            currArg = -currArg;
            argText = (currAbsArg - 1).toString(16);
            var buffer = [];
            for (var i = 0; i < argText.length; i++) {
              buffer.push((15 - parseInt(argText[i], 16)).toString(16));
            }
            argText = buffer.join("");
            while (argText.length < argSize * 2) argText = "f" + argText;
          } else {
            argText = currAbsArg.toString(16);
          }
          if (next == "X".charCodeAt(0)) {
            prefix = prefix.toUpperCase();
            argText = argText.toUpperCase();
          }
        } else if (next == "p".charCodeAt(0)) {
          if (currAbsArg === 0) {
            argText = "(nil)";
          } else {
            prefix = "0x";
            argText = currAbsArg.toString(16);
          }
        }
        if (precisionSet) {
          while (argText.length < precision) {
            argText = "0" + argText;
          }
        }
        if (flagAlwaysSigned) {
          if (currArg < 0) {
            prefix = "-" + prefix;
          } else {
            prefix = "+" + prefix;
          }
        }
        while (prefix.length + argText.length < width) {
          if (flagLeftAlign) {
            argText += " ";
          } else {
            if (flagZeroPad) {
              argText = "0" + argText;
            } else {
              prefix = " " + prefix;
            }
          }
        }
        argText = prefix + argText;
        argText.split("").forEach((function(chr) {
          ret.push(chr.charCodeAt(0));
        }));
      } else if ([ "f", "F", "e", "E", "g", "G" ].indexOf(String.fromCharCode(next)) != -1) {
        var currArg = getNextArg("double");
        var argText;
        if (isNaN(currArg)) {
          argText = "nan";
          flagZeroPad = false;
        } else if (!isFinite(currArg)) {
          argText = (currArg < 0 ? "-" : "") + "inf";
          flagZeroPad = false;
        } else {
          var isGeneral = false;
          var effectivePrecision = Math.min(precision, 20);
          if (next == "g".charCodeAt(0) || next == "G".charCodeAt(0)) {
            isGeneral = true;
            precision = precision || 1;
            var exponent = parseInt(currArg.toExponential(effectivePrecision).split("e")[1], 10);
            if (precision > exponent && exponent >= -4) {
              next = (next == "g".charCodeAt(0) ? "f" : "F").charCodeAt(0);
              precision -= exponent + 1;
            } else {
              next = (next == "g".charCodeAt(0) ? "e" : "E").charCodeAt(0);
              precision--;
            }
            effectivePrecision = Math.min(precision, 20);
          }
          if (next == "e".charCodeAt(0) || next == "E".charCodeAt(0)) {
            argText = currArg.toExponential(effectivePrecision);
            if (/[eE][-+]\d$/.test(argText)) {
              argText = argText.slice(0, -1) + "0" + argText.slice(-1);
            }
          } else if (next == "f".charCodeAt(0) || next == "F".charCodeAt(0)) {
            argText = currArg.toFixed(effectivePrecision);
          }
          var parts = argText.split("e");
          if (isGeneral && !flagAlternative) {
            while (parts[0].length > 1 && parts[0].indexOf(".") != -1 && (parts[0].slice(-1) == "0" || parts[0].slice(-1) == ".")) {
              parts[0] = parts[0].slice(0, -1);
            }
          } else {
            if (flagAlternative && argText.indexOf(".") == -1) parts[0] += ".";
            while (precision > effectivePrecision++) parts[0] += "0";
          }
          argText = parts[0] + (parts.length > 1 ? "e" + parts[1] : "");
          if (next == "E".charCodeAt(0)) argText = argText.toUpperCase();
          if (flagAlwaysSigned && currArg >= 0) {
            argText = "+" + argText;
          }
        }
        while (argText.length < width) {
          if (flagLeftAlign) {
            argText += " ";
          } else {
            if (flagZeroPad && (argText[0] == "-" || argText[0] == "+")) {
              argText = argText[0] + "0" + argText.slice(1);
            } else {
              argText = (flagZeroPad ? "0" : " ") + argText;
            }
          }
        }
        if (next < "a".charCodeAt(0)) argText = argText.toUpperCase();
        argText.split("").forEach((function(chr) {
          ret.push(chr.charCodeAt(0));
        }));
      } else if (next == "s".charCodeAt(0)) {
        var arg = getNextArg("i8*");
        var copiedString;
        if (arg) {
          copiedString = String_copy(arg);
          if (precisionSet && copiedString.length > precision) {
            copiedString = copiedString.slice(0, precision);
          }
        } else {
          copiedString = intArrayFromString("(null)", true);
        }
        if (!flagLeftAlign) {
          while (copiedString.length < width--) {
            ret.push(" ".charCodeAt(0));
          }
        }
        ret = ret.concat(copiedString);
        if (flagLeftAlign) {
          while (copiedString.length < width--) {
            ret.push(" ".charCodeAt(0));
          }
        }
      } else if (next == "c".charCodeAt(0)) {
        if (flagLeftAlign) ret.push(getNextArg("i8"));
        while (--width > 0) {
          ret.push(" ".charCodeAt(0));
        }
        if (!flagLeftAlign) ret.push(getNextArg("i8"));
      } else if (next == "n".charCodeAt(0)) {
        var ptr = getNextArg("i32*");
        HEAP32[ptr >> 2] = ret.length;
      } else if (next == "%".charCodeAt(0)) {
        ret.push(curr);
      } else {
        for (var i = startTextIndex; i < textIndex + 2; i++) {
          ret.push(HEAP8[i]);
        }
      }
      textIndex += 2;
    } else {
      ret.push(curr);
      textIndex += 1;
    }
  }
  return ret;
}

function _fprintf(stream, format, varargs) {
  var result = __formatString(format, varargs);
  var stack = Runtime.stackSave();
  var ret = _fwrite(allocate(result, "i8", ALLOC_STACK), 1, result.length, stream);
  Runtime.stackRestore(stack);
  return ret;
}

function _fgetc(stream) {
  if (!(stream in FS.streams)) return -1;
  var streamObj = FS.streams[stream];
  if (streamObj.eof || streamObj.error) return -1;
  var ret = _read(stream, _fgetc.ret, 1);
  if (ret == 0) {
    streamObj.eof = true;
    return -1;
  } else if (ret == -1) {
    streamObj.error = true;
    return -1;
  } else {
    return HEAP8[_fgetc.ret];
  }
}

var _getc = _fgetc;

function _printf(format, varargs) {
  var stdout = HEAP32[_stdout >> 2];
  return _fprintf(stdout, format, varargs);
}

function _strncmp(px, py, n) {
  var i = 0;
  while (i < n) {
    var x = HEAP8[px + i];
    var y = HEAP8[py + i];
    if (x == y && x == 0) return 0;
    if (x == 0) return -1;
    if (y == 0) return 1;
    if (x == y) {
      i++;
      continue;
    } else {
      return x > y ? 1 : -1;
    }
  }
  return 0;
}

function _clock() {
  if (_clock.start === undefined) _clock.start = Date.now();
  return Math.floor((Date.now() - _clock.start) * (1e3 / 1e3));
}

function _strcmp(px, py) {
  return _strncmp(px, py, TOTAL_MEMORY);
}

function _strncpy(pdest, psrc, num) {
  var padding = false, curr;
  for (var i = 0; i < num; i++) {
    curr = padding ? 0 : HEAP8[psrc + i];
    HEAP8[pdest + i] = curr;
    padding = padding || HEAP8[psrc + i] == 0;
  }
  return pdest;
}

function __exit(status) {
  exitRuntime();
  ABORT = true;
  throw "exit(" + status + ") called, at " + (new Error).stack;
}

function _exit(status) {
  __exit(status);
}

function _isspace(chr) {
  return chr in {
    32: 0,
    9: 0,
    10: 0,
    11: 0,
    12: 0,
    13: 0
  };
}

function _isdigit(chr) {
  return chr >= "0".charCodeAt(0) && chr <= "9".charCodeAt(0);
}

function _atoi(s) {
  var c;
  while ((c = HEAP8[s]) && _isspace(c)) s++;
  if (!c || !_isdigit(c)) return 0;
  var e = s;
  while ((c = HEAP8[e]) && _isdigit(c)) e++;
  return Math.floor(Number(Pointer_stringify(s).substr(0, e - s)));
}

function _strlen(ptr) {
  return String_len(ptr);
}

function _strcpy(pdest, psrc) {
  var i = 0;
  do {
    HEAP8[pdest + i] = HEAP8[psrc + i];
    i++;
  } while (HEAP8[psrc + i - 1] != 0);
  return pdest;
}

var ___dirent_struct_layout = null;

function _open(path, oflag, varargs) {
  var mode = HEAP32[varargs >> 2];
  var accessMode = oflag & 3;
  var isWrite = accessMode != 0;
  var isRead = accessMode != 1;
  var isCreate = Boolean(oflag & 512);
  var isExistCheck = Boolean(oflag & 2048);
  var isTruncate = Boolean(oflag & 1024);
  var isAppend = Boolean(oflag & 8);
  var origPath = path;
  path = FS.analyzePath(Pointer_stringify(path));
  if (!path.parentExists) {
    ___setErrNo(path.error);
    return -1;
  }
  var target = path.object || null;
  var finalPath;
  if (target) {
    if (isCreate && isExistCheck) {
      ___setErrNo(ERRNO_CODES.EEXIST);
      return -1;
    }
    if ((isWrite || isCreate || isTruncate) && target.isFolder) {
      ___setErrNo(ERRNO_CODES.EISDIR);
      return -1;
    }
    if (isRead && !target.read || isWrite && !target.write) {
      ___setErrNo(ERRNO_CODES.EACCES);
      return -1;
    }
    if (isTruncate && !target.isDevice) {
      target.contents = [];
    } else {
      if (!FS.forceLoadFile(target)) {
        ___setErrNo(ERRNO_CODES.EIO);
        return -1;
      }
    }
    finalPath = path.path;
  } else {
    if (!isCreate) {
      ___setErrNo(ERRNO_CODES.ENOENT);
      return -1;
    }
    if (!path.parentObject.write) {
      ___setErrNo(ERRNO_CODES.EACCES);
      return -1;
    }
    target = FS.createDataFile(path.parentObject, path.name, [], mode & 256, mode & 128);
    finalPath = path.parentPath + "/" + path.name;
  }
  var id = FS.streams.length;
  if (target.isFolder) {
    var entryBuffer = 0;
    if (___dirent_struct_layout) {
      entryBuffer = _malloc(___dirent_struct_layout.__size__);
    }
    var contents = [];
    for (var key in target.contents) contents.push(key);
    FS.streams[id] = {
      path: finalPath,
      object: target,
      position: -2,
      isRead: true,
      isWrite: false,
      isAppend: false,
      error: false,
      eof: false,
      ungotten: [],
      contents: contents,
      currentEntry: entryBuffer
    };
  } else {
    FS.streams[id] = {
      path: finalPath,
      object: target,
      position: 0,
      isRead: isRead,
      isWrite: isWrite,
      isAppend: isAppend,
      error: false,
      eof: false,
      ungotten: []
    };
  }
  return id;
}

function _fopen(filename, mode) {
  var flags;
  mode = Pointer_stringify(mode);
  if (mode[0] == "r") {
    if (mode.indexOf("+") != -1) {
      flags = 2;
    } else {
      flags = 0;
    }
  } else if (mode[0] == "w") {
    if (mode.indexOf("+") != -1) {
      flags = 2;
    } else {
      flags = 1;
    }
    flags |= 512;
    flags |= 1024;
  } else if (mode[0] == "a") {
    if (mode.indexOf("+") != -1) {
      flags = 2;
    } else {
      flags = 1;
    }
    flags |= 512;
    flags |= 8;
  } else {
    ___setErrNo(ERRNO_CODES.EINVAL);
    return 0;
  }
  var ret = _open(filename, flags, allocate([ 511, 0, 0, 0 ], "i32", ALLOC_STACK));
  return ret == -1 ? 0 : ret;
}

var ___stat_struct_layout = {
  __size__: 72,
  st_dev: 0,
  st_ino: 4,
  st_mode: 8,
  st_nlink: 12,
  st_uid: 16,
  st_gid: 20,
  st_rdev: 24,
  st_size: 28,
  st_atime: 32,
  st_spare1: 36,
  st_mtime: 40,
  st_spare2: 44,
  st_ctime: 48,
  st_spare3: 52,
  st_blksize: 56,
  st_blocks: 60,
  st_spare4: 64
};

function _stat(path, buf, dontResolveLastLink) {
  var obj = FS.findObject(Pointer_stringify(path), dontResolveLastLink);
  if (obj === null || !FS.forceLoadFile(obj)) return -1;
  var offsets = ___stat_struct_layout;
  HEAP32[buf + offsets.st_nlink >> 2] = 1;
  HEAP32[buf + offsets.st_uid >> 2] = 0;
  HEAP32[buf + offsets.st_gid >> 2] = 0;
  HEAP32[buf + offsets.st_blksize >> 2] = 4096;
  HEAP32[buf + offsets.st_ino >> 2] = obj.inodeNumber;
  var time = Math.floor(obj.timestamp / 1e3);
  if (offsets.st_atime === undefined) {
    offsets.st_atime = offsets.st_atim.tv_sec;
    offsets.st_mtime = offsets.st_mtim.tv_sec;
    offsets.st_ctime = offsets.st_ctim.tv_sec;
    var nanosec = obj.timestamp % 1e3 * 1e3;
    HEAP32[buf + offsets.st_atim.tv_nsec >> 2] = nanosec;
    HEAP32[buf + offsets.st_mtim.tv_nsec >> 2] = nanosec;
    HEAP32[buf + offsets.st_ctim.tv_nsec >> 2] = nanosec;
  }
  HEAP32[buf + offsets.st_atime >> 2] = time;
  HEAP32[buf + offsets.st_mtime >> 2] = time;
  HEAP32[buf + offsets.st_ctime >> 2] = time;
  var mode = 0;
  var size = 0;
  var blocks = 0;
  var dev = 0;
  var rdev = 0;
  if (obj.isDevice) {
    dev = rdev = obj.inodeNumber;
    size = blocks = 0;
    mode = 8192;
  } else {
    dev = 1;
    rdev = 0;
    if (obj.isFolder) {
      size = 4096;
      blocks = 1;
      mode = 16384;
    } else {
      var data = obj.contents || obj.link;
      size = data.length;
      blocks = Math.ceil(data.length / 4096);
      mode = obj.link === undefined ? 32768 : 40960;
    }
  }
  HEAP32[buf + offsets.st_dev >> 2] = dev;
  HEAP32[buf + offsets.st_rdev >> 2] = rdev;
  HEAP32[buf + offsets.st_size >> 2] = size;
  HEAP32[buf + offsets.st_blocks >> 2] = blocks;
  if (obj.read) mode |= 365;
  if (obj.write) mode |= 146;
  HEAP32[buf + offsets.st_mode >> 2] = mode;
  return 0;
}

function _mknod(path, mode, dev) {
  if (dev !== 0 || !(mode & 49152)) {
    ___setErrNo(ERRNO_CODES.EINVAL);
    return -1;
  } else {
    var properties = {
      contents: [],
      isFolder: Boolean(mode & 16384)
    };
    path = FS.analyzePath(Pointer_stringify(path));
    try {
      FS.createObject(path.parentObject, path.name, properties, mode & 256, mode & 128);
      return 0;
    } catch (e) {
      return -1;
    }
  }
}

function _mkdir(path, mode) {
  return _mknod(path, 16384 | mode & 384, 0);
}

function _strcat(pdest, psrc) {
  var len = _strlen(pdest);
  var i = 0;
  do {
    HEAP8[pdest + len + i] = HEAP8[psrc + i];
    i++;
  } while (HEAP8[psrc + i - 1] != 0);
  return pdest;
}

function _close(fildes) {
  if (FS.streams[fildes]) {
    if (FS.streams[fildes].currentEntry) {
      _free(FS.streams[fildes].currentEntry);
    }
    delete FS.streams[fildes];
    return 0;
  } else {
    ___setErrNo(ERRNO_CODES.EBADF);
    return -1;
  }
}

function _fsync(fildes) {
  if (FS.streams[fildes]) {
    return 0;
  } else {
    ___setErrNo(ERRNO_CODES.EBADF);
    return -1;
  }
}

function _fclose(stream) {
  _fsync(stream);
  return _close(stream);
}

function _fflush(stream) {
  var flush = (function(filedes) {
    if (filedes in FS.streams && FS.streams[filedes].object.output) {
      if (!FS.streams[filedes].isTerminal) {
        FS.streams[filedes].object.output(null);
      }
    }
  });
  try {
    if (stream === 0) {
      for (var i in FS.streams) flush(i);
    } else {
      flush(stream);
    }
    return 0;
  } catch (e) {
    ___setErrNo(ERRNO_CODES.EIO);
    return -1;
  }
}

var _setjmp;

function _longjmp(env, value) {
  throw {
    longjmp: true,
    label: HEAP32[env >> 2],
    value: value || 1
  };
}

function _memcpy(dest, src, num, align) {
  if (num >= 20 && src % 2 == dest % 2) {
    if (src % 4 == dest % 4) {
      var stop = src + num;
      while (src % 4) {
        HEAP8[dest++] = HEAP8[src++];
      }
      var src4 = src >> 2, dest4 = dest >> 2, stop4 = stop >> 2;
      while (src4 < stop4) {
        HEAP32[dest4++] = HEAP32[src4++];
      }
      src = src4 << 2;
      dest = dest4 << 2;
      while (src < stop) {
        HEAP8[dest++] = HEAP8[src++];
      }
    } else {
      var stop = src + num;
      if (src % 2) {
        HEAP8[dest++] = HEAP8[src++];
      }
      var src2 = src >> 1, dest2 = dest >> 1, stop2 = stop >> 1;
      while (src2 < stop2) {
        HEAP16[dest2++] = HEAP16[src2++];
      }
      src = src2 << 1;
      dest = dest2 << 1;
      if (src < stop) {
        HEAP8[dest++] = HEAP8[src++];
      }
    }
  } else {
    while (num--) {
      HEAP8[dest++] = HEAP8[src++];
    }
  }
}

var _llvm_memcpy_p0i8_p0i8_i32 = _memcpy;

function _memcmp(p1, p2, num) {
  for (var i = 0; i < num; i++) {
    var v1 = HEAP8[p1 + i];
    var v2 = HEAP8[p2 + i];
    if (v1 != v2) return v1 > v2 ? 1 : -1;
  }
  return 0;
}

function _rename(old, new_) {
  var oldObj = FS.analyzePath(Pointer_stringify(old));
  var newObj = FS.analyzePath(Pointer_stringify(new_));
  if (newObj.path == oldObj.path) {
    return 0;
  } else if (!oldObj.exists) {
    ___setErrNo(oldObj.error);
    return -1;
  } else if (oldObj.isRoot || oldObj.path == FS.currentPath) {
    ___setErrNo(ERRNO_CODES.EBUSY);
    return -1;
  } else if (newObj.path && newObj.path.indexOf(oldObj.path) == 0) {
    ___setErrNo(ERRNO_CODES.EINVAL);
    return -1;
  } else if (newObj.exists && newObj.object.isFolder) {
    ___setErrNo(ERRNO_CODES.EISDIR);
    return -1;
  } else {
    delete oldObj.parentObject.contents[oldObj.name];
    newObj.parentObject.contents[newObj.name] = oldObj.object;
    return 0;
  }
}

var ___utimbuf_struct_layout = {
  __size__: 8,
  actime: 0,
  modtime: 4
};

function _utime(path, times) {
  var time;
  if (times) {
    var offset = ___utimbuf_struct_layout.modtime;
    time = HEAP32[times + offset >> 2];
    time *= 1e3;
  } else {
    time = Date.now();
  }
  var file = FS.findObject(Pointer_stringify(path));
  if (file === null) return -1;
  if (!file.write) {
    ___setErrNo(ERRNO_CODES.EPERM);
    return -1;
  }
  file.timestamp = time;
  return 0;
}

function _frexp(x, exp_addr) {
  var sig = 0, exp_ = 0;
  if (x !== 0) {
    var raw_exp = Math.log(x) / Math.log(2);
    exp_ = Math.ceil(raw_exp);
    if (exp_ === raw_exp) exp_ += 1;
    sig = x / Math.pow(2, exp_);
  }
  HEAP32[exp_addr >> 2] = exp_;
  return sig;
}

function _modf(x, intpart) {
  tempDoubleF64[0] = Math.floor(x), HEAP32[intpart >> 2] = tempDoubleI32[0], HEAP32[intpart + 4 >> 2] = tempDoubleI32[1];
  return x - (tempDoubleI32[0] = HEAP32[intpart >> 2], tempDoubleI32[1] = HEAP32[intpart + 4 >> 2], tempDoubleF64[0]);
}

var _floor = Math.floor;

var _llvm_pow_f64 = Math.pow;

function _atof(ptr) {
  var str = Pointer_stringify(ptr);
  var ret = parseFloat(str);
  return isNaN(ret) ? 0 : ret;
}

function _abort() {
  ABORT = true;
  throw "abort() at " + (new Error).stack;
}

function _sysconf(name) {
  switch (name) {
   case 8:
    return PAGE_SIZE;
   case 54:
   case 56:
   case 21:
   case 61:
   case 63:
   case 22:
   case 67:
   case 23:
   case 24:
   case 25:
   case 26:
   case 27:
   case 69:
   case 28:
   case 101:
   case 70:
   case 71:
   case 29:
   case 30:
   case 199:
   case 75:
   case 76:
   case 32:
   case 43:
   case 44:
   case 80:
   case 46:
   case 47:
   case 45:
   case 48:
   case 49:
   case 42:
   case 82:
   case 33:
   case 7:
   case 108:
   case 109:
   case 107:
   case 112:
   case 119:
   case 121:
    return 200809;
   case 13:
   case 104:
   case 94:
   case 95:
   case 34:
   case 35:
   case 77:
   case 81:
   case 83:
   case 84:
   case 85:
   case 86:
   case 87:
   case 88:
   case 89:
   case 90:
   case 91:
   case 94:
   case 95:
   case 110:
   case 111:
   case 113:
   case 114:
   case 115:
   case 116:
   case 117:
   case 118:
   case 120:
   case 40:
   case 16:
   case 79:
   case 19:
    return -1;
   case 92:
   case 93:
   case 5:
   case 72:
   case 6:
   case 74:
   case 92:
   case 93:
   case 96:
   case 97:
   case 98:
   case 99:
   case 102:
   case 103:
   case 105:
    return 1;
   case 38:
   case 66:
   case 50:
   case 51:
   case 4:
    return 1024;
   case 15:
   case 64:
   case 41:
    return 32;
   case 55:
   case 37:
   case 17:
    return 2147483647;
   case 18:
   case 1:
    return 47839;
   case 59:
   case 57:
    return 99;
   case 68:
   case 58:
    return 2048;
   case 0:
    return 2097152;
   case 3:
    return 65536;
   case 14:
    return 32768;
   case 73:
    return 32767;
   case 39:
    return 16384;
   case 60:
    return 1e3;
   case 106:
    return 700;
   case 52:
    return 256;
   case 62:
    return 255;
   case 2:
    return 100;
   case 65:
    return 64;
   case 36:
    return 20;
   case 100:
    return 16;
   case 20:
    return 6;
   case 53:
    return 4;
  }
  ___setErrNo(ERRNO_CODES.EINVAL);
  return -1;
}

function _time(ptr) {
  var ret = Math.floor(Date.now() / 1e3);
  if (ptr) {
    HEAP32[ptr >> 2] = ret;
  }
  return ret;
}

function ___errno_location() {
  return ___setErrNo.ret;
}

var ___errno = ___errno_location;

function _sbrk(bytes) {
  var self = _sbrk;
  if (!self.called) {
    STATICTOP = alignMemoryPage(STATICTOP);
    self.called = true;
  }
  var ret = STATICTOP;
  if (bytes != 0) Runtime.staticAlloc(bytes);
  return ret;
}

function _llvm_bswap_i32(x) {
  x = unSign(x, 32);
  var bytes = [];
  for (var i = 0; i < 4; i++) {
    bytes[i] = x & 255;
    x >>= 8;
  }
  var ret = 0;
  for (i = 0; i < 4; i++) {
    ret <<= 8;
    ret += bytes[i];
  }
  return ret;
}

function _fputc(c, stream) {
  var chr = unSign(c & 255);
  HEAP8[_fputc.ret] = chr;
  var ret = _write(stream, _fputc.ret, 1);
  if (ret == -1) {
    if (stream in FS.streams) FS.streams[stream].error = true;
    return -1;
  } else {
    return chr;
  }
}

function _putchar(c) {
  return _fputc(c, HEAP32[_stdout >> 2]);
}

function _fputs(s, stream) {
  return _write(stream, s, _strlen(s));
}

function _puts(s) {
  var stdout = HEAP32[_stdout >> 2];
  var ret = _fputs(s, stdout);
  if (ret < 0) {
    return ret;
  } else {
    var newlineRet = _fputc("\n".charCodeAt(0), stdout);
    return newlineRet < 0 ? -1 : ret + 1;
  }
}

var _llvm_memset_p0i8_i64 = _memset;

__ATINIT__.unshift({
  func: (function() {
    if (!Module["noFSInit"] && !FS.init.initialized) FS.init();
  })
});

__ATMAIN__.push({
  func: (function() {
    FS.ignorePermissions = false;
  })
});

__ATEXIT__.push({
  func: (function() {
    FS.quit();
  })
});

___setErrNo(0);

_fgetc.ret = allocate([ 0 ], "i8", ALLOC_STATIC);

_fputc.ret = allocate([ 0 ], "i8", ALLOC_STATIC);

Module.callMain = function callMain(args) {
  var argc = args.length + 1;
  function pad() {
    for (var i = 0; i < 4 - 1; i++) {
      argv.push(0);
    }
  }
  var argv = [ allocate(intArrayFromString("/bin/this.program"), "i8", ALLOC_STATIC) ];
  pad();
  for (var i = 0; i < argc - 1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), "i8", ALLOC_STATIC));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, "i32", ALLOC_STATIC);
  return _main(argc, argv, 0);
};

var _current_allocation;

var _maximum_allocation;

var _pinformation;

var _verbose;

var _stdout;

var _pauses;

var _stdin;

var _remove_chunks;

var _first_trial_b;

var _things_have_changed;

var _t_stop;

var _t_start;

var _t_misc;

var _t_decode;

var _t_encode;

var _found_acTL_chunk;

var _prog_string;

var _progname;

var _crushed_idat_size;

var _brute_force_filters;

var _brute_force_levels;

var _brute_force_strategies;

var _found_gAMA_b;

var _fix;

var _intent;

var _iccp_name;

var _buffer;

var _found_any_chunk_b;

var _new_mng;

var _nosave;

var _pplt_string;

var _image_is_immutable_b;

var _all_chunks_are_safe;

var _text_compression;

var _text_where;

var _text_keyword;

var _text_lang;

var _text_lang_key;

var _text_text;

var _trans_in;

var _inname;

var _trns_array;

var _image_specified_gamma_b;

var _out_string;

var _in_string;

var _in_extension;

var _read_ptr;

var _already_crushed;

var _mng_ptr;

var _idat_length;

var _the_exception_context;

var _write_ptr;

var _read_info_ptr;

var _end_info_ptr;

var _write_info_ptr;

var _write_end_info_ptr;

var _input_format_b;

var _found_CgBI;

var _width;

var _height;

var _input_color_type;

var _found_cHRM_b;

var _num_palette;

var _palette;

var _msg;

var _stderr;

var _measured_idat_length;

var __str360;

var _pngcrush_options;

var _pngcrush_legal;

var _png_combine_row_row_mask;

var _png_combine_row_display_mask;

var _png_do_read_interlace_png_pass_inc;

var _crc_table;

var _configuration_table;

var _inflate_order;

var _fixedtables_lenfix1301;

var _fixedtables_distfix1302;

var _inflate_table_lbase;

var _inflate_table_lext;

var _inflate_table_dbase;

var _inflate_table_dext;

var _static_l_desc;

var _static_d_desc;

var _static_bl_desc;

var _static_ltree;

var _static_dtree;

var _extra_lbits;

var _base_length;

var _extra_dbits;

var _base_dist;

var _extra_blbits;

var __gm_;

var _mparams;

_current_allocation = allocate(1, "i32", ALLOC_STATIC);

_maximum_allocation = allocate(1, "i32", ALLOC_STATIC);

_pinformation = allocate(1, "%struct.memory_information*", ALLOC_STATIC);

_verbose = allocate([ 1 ], [ "i32", 0, 0, 0, 0 ], ALLOC_STATIC);

STRING_TABLE.__str2 = allocate([ 80, 111, 105, 110, 116, 101, 114, 32, 37, 108, 117, 120, 32, 97, 108, 108, 111, 99, 97, 116, 101, 100, 32, 37, 108, 117, 32, 98, 121, 116, 101, 115, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str3 = allocate([ 78, 85, 76, 76, 32, 112, 111, 105, 110, 116, 101, 114, 32, 116, 111, 32, 112, 110, 103, 95, 100, 101, 98, 117, 103, 95, 102, 114, 101, 101, 46, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str4 = allocate([ 68, 117, 112, 108, 105, 99, 97, 116, 101, 32, 102, 114, 101, 101, 32, 111, 102, 32, 109, 101, 109, 111, 114, 121, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str5 = allocate([ 80, 111, 105, 110, 116, 101, 114, 32, 37, 108, 117, 120, 32, 102, 114, 101, 101, 100, 32, 37, 108, 117, 32, 98, 121, 116, 101, 115, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str6 = allocate([ 80, 111, 105, 110, 116, 101, 114, 32, 37, 108, 117, 120, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 10, 0 ], "i8", ALLOC_STATIC);

_pauses = allocate(1, "i32", ALLOC_STATIC);

STRING_TABLE.__str7 = allocate([ 80, 114, 101, 115, 115, 32, 91, 69, 78, 84, 69, 82, 93, 32, 107, 101, 121, 32, 116, 111, 32, 99, 111, 110, 116, 105, 110, 117, 101, 46, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str8 = allocate([ 83, 107, 105, 112, 112, 105, 110, 103, 32, 37, 99, 37, 99, 37, 99, 37, 99, 32, 99, 104, 117, 110, 107, 46, 10, 0 ], "i8", ALLOC_STATIC);

_remove_chunks = allocate(1, "i32", ALLOC_STATIC);

STRING_TABLE.__str9 = allocate([ 45, 114, 101, 109, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str10 = allocate([ 97, 108, 108, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str11 = allocate([ 99, 72, 82, 77, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str12 = allocate([ 99, 104, 114, 109, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str13 = allocate([ 100, 83, 73, 71, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str14 = allocate([ 100, 115, 105, 103, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str15 = allocate([ 103, 73, 70, 103, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str16 = allocate([ 103, 105, 102, 103, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str17 = allocate([ 103, 73, 70, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str18 = allocate([ 103, 105, 102, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str19 = allocate([ 103, 73, 70, 120, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str20 = allocate([ 103, 105, 102, 120, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str21 = allocate([ 104, 73, 83, 84, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str22 = allocate([ 104, 105, 115, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str23 = allocate([ 105, 67, 67, 80, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str24 = allocate([ 105, 99, 99, 112, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str25 = allocate([ 112, 67, 65, 76, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str26 = allocate([ 112, 99, 97, 108, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str27 = allocate([ 115, 67, 65, 76, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str28 = allocate([ 115, 99, 97, 108, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str29 = allocate([ 115, 80, 76, 84, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str30 = allocate([ 115, 112, 108, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str31 = allocate([ 116, 73, 77, 69, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str32 = allocate([ 116, 105, 109, 101, 0 ], "i8", ALLOC_STATIC);

_first_trial_b = allocate(1, "i1", ALLOC_STATIC);

STRING_TABLE.__str33 = allocate([ 32, 32, 32, 82, 101, 97, 100, 32, 116, 104, 101, 32, 37, 115, 32, 99, 104, 117, 110, 107, 46, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str34 = allocate([ 32, 32, 32, 32, 32, 67, 104, 101, 99, 107, 32, 102, 111, 114, 32, 114, 101, 109, 111, 118, 97, 108, 32, 111, 102, 32, 116, 104, 101, 32, 37, 115, 32, 99, 104, 117, 110, 107, 46, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str35 = allocate([ 97, 108, 108, 97, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str37 = allocate([ 80, 76, 84, 69, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str38 = allocate([ 112, 108, 116, 101, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str39 = allocate([ 98, 75, 71, 68, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str40 = allocate([ 98, 107, 103, 100, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str41 = allocate([ 103, 65, 77, 65, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str42 = allocate([ 103, 97, 109, 97, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str43 = allocate([ 105, 84, 88, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str44 = allocate([ 105, 116, 120, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str45 = allocate([ 111, 70, 70, 115, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str46 = allocate([ 111, 102, 102, 115, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str47 = allocate([ 112, 72, 89, 115, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str48 = allocate([ 112, 104, 121, 115, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str49 = allocate([ 115, 66, 73, 84, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str50 = allocate([ 115, 98, 105, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str51 = allocate([ 115, 82, 71, 66, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str52 = allocate([ 115, 114, 103, 98, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str53 = allocate([ 115, 84, 69, 82, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str54 = allocate([ 115, 116, 101, 114, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str55 = allocate([ 116, 69, 88, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str56 = allocate([ 116, 82, 78, 83, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str57 = allocate([ 116, 114, 110, 115, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str58 = allocate([ 122, 84, 88, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str59 = allocate([ 122, 116, 120, 116, 0 ], "i8", ALLOC_STATIC);

_things_have_changed = allocate(1, "i32", ALLOC_STATIC);

STRING_TABLE.__str60 = allocate([ 32, 32, 32, 82, 101, 109, 111, 118, 101, 100, 32, 116, 104, 101, 32, 37, 115, 32, 99, 104, 117, 110, 107, 46, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str61 = allocate([ 32, 32, 32, 80, 114, 101, 115, 101, 114, 118, 105, 110, 103, 32, 116, 104, 101, 32, 37, 115, 32, 99, 104, 117, 110, 107, 46, 10, 0 ], "i8", ALLOC_STATIC);

_t_stop = allocate(1, "float", ALLOC_STATIC);

_t_start = allocate(1, "float", ALLOC_STATIC);

_t_misc = allocate(1, "float", ALLOC_STATIC);

STRING_TABLE.__str65 = allocate([ 32, 32, 32, 67, 80, 85, 32, 116, 105, 109, 101, 32, 100, 101, 99, 111, 100, 105, 110, 103, 32, 37, 46, 51, 102, 44, 0 ], "i8", ALLOC_STATIC);

_t_decode = allocate(1, "float", ALLOC_STATIC);

STRING_TABLE.__str66 = allocate([ 32, 101, 110, 99, 111, 100, 105, 110, 103, 32, 37, 46, 51, 102, 44, 0 ], "i8", ALLOC_STATIC);

_t_encode = allocate(1, "float", ALLOC_STATIC);

STRING_TABLE.__str67 = allocate([ 32, 111, 116, 104, 101, 114, 32, 37, 46, 51, 102, 44, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str68 = allocate([ 32, 116, 111, 116, 97, 108, 32, 37, 46, 51, 102, 32, 115, 101, 99, 111, 110, 100, 115, 10, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str69 = allocate([ 77, 69, 77, 79, 82, 89, 32, 69, 82, 82, 79, 82, 58, 32, 37, 100, 32, 98, 121, 116, 101, 115, 32, 115, 116, 105, 108, 108, 32, 97, 108, 108, 111, 99, 97, 116, 101, 100, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str70 = allocate([ 32, 37, 56, 108, 117, 32, 98, 121, 116, 101, 115, 32, 97, 116, 32, 37, 108, 117, 120, 10, 0 ], "i8", ALLOC_STATIC);

_found_acTL_chunk = allocate(1, "i32", ALLOC_STATIC);

STRING_TABLE.__str71 = allocate([ 32, 32, 32, 42, 42, 42, 42, 32, 68, 105, 115, 99, 97, 114, 100, 101, 100, 32, 65, 80, 78, 71, 32, 99, 104, 117, 110, 107, 115, 46, 32, 42, 42, 42, 42, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str72 = allocate([ 49, 46, 53, 46, 49, 48, 0 ], "i8", ALLOC_STATIC);

_prog_string = allocate(256, "i8", ALLOC_STATIC);

_progname = allocate(1, "i8*", ALLOC_STATIC);

STRING_TABLE.__str77 = allocate([ 45, 102, 97, 115, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str78 = allocate([ 45, 104, 117, 102, 102, 109, 97, 110, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str79 = allocate([ 45, 114, 108, 101, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str80 = allocate([ 45, 97, 108, 114, 101, 97, 100, 121, 0 ], "i8", ALLOC_STATIC);

_crushed_idat_size = allocate([ 67108863 ], [ "i32", 0, 0, 0, 0 ], ALLOC_STATIC);

STRING_TABLE.__str82 = allocate([ 45, 98, 107, 103, 100, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str83 = allocate([ 45, 98, 75, 71, 68, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str84 = allocate([ 45, 98, 114, 117, 116, 101, 0 ], "i8", ALLOC_STATIC);

_brute_force_filters = allocate([ 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 ], [ "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);

_brute_force_levels = allocate([ 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 ], [ "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);

_brute_force_strategies = allocate([ 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 ], [ "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);

STRING_TABLE.__str85 = allocate([ 45, 98, 105, 116, 95, 100, 101, 112, 116, 104, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str86 = allocate([ 45, 99, 99, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str87 = allocate([ 45, 110, 111, 95, 99, 99, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str88 = allocate([ 45, 99, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str89 = allocate([ 45, 100, 111, 117, 0 ], "i8", ALLOC_STATIC);

_found_gAMA_b = allocate(1, "i1", ALLOC_STATIC);

STRING_TABLE.__str90 = allocate([ 45, 100, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str91 = allocate([ 45, 101, 120, 105, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str92 = allocate([ 45, 101, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str93 = allocate([ 45, 102, 111, 114, 99, 101, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str94 = allocate([ 45, 102, 105, 120, 0 ], "i8", ALLOC_STATIC);

_fix = allocate(1, "i32", ALLOC_STATIC);

STRING_TABLE.__str95 = allocate([ 45, 102, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str96 = allocate([ 45, 108, 111, 99, 111, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str97 = allocate([ 45, 108, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str98 = allocate([ 45, 103, 0 ], "i8", ALLOC_STATIC);

_intent = allocate([ -1 ], [ "i32", 0, 0, 0, 0 ], ALLOC_STATIC);

STRING_TABLE.__str99 = allocate([ 45, 104, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str100 = allocate([ 45, 105, 99, 99, 112, 0 ], "i8", ALLOC_STATIC);

_iccp_name = allocate(80, "i8", ALLOC_STATIC);

STRING_TABLE.__str101 = allocate([ 114, 98, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str102 = allocate([ 67, 111, 117, 108, 100, 32, 110, 111, 116, 32, 102, 105, 110, 100, 32, 102, 105, 108, 101, 58, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

_buffer = allocate(256, "i8", ALLOC_STATIC);

STRING_TABLE.__str103 = allocate([ 45, 107, 101, 101, 112, 0 ], "i8", ALLOC_STATIC);

_found_any_chunk_b = allocate(1, "i1", ALLOC_STATIC);

STRING_TABLE.__str104 = allocate([ 45, 109, 97, 120, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str105 = allocate([ 45, 109, 110, 103, 0 ], "i8", ALLOC_STATIC);

_new_mng = allocate(1, "i32", ALLOC_STATIC);

STRING_TABLE.__str106 = allocate([ 45, 109, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str107 = allocate([ 10, 32, 32, 73, 103, 110, 111, 114, 105, 110, 103, 32, 105, 110, 118, 97, 108, 105, 100, 32, 109, 101, 116, 104, 111, 100, 58, 32, 37, 100, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str108 = allocate([ 45, 110, 111, 102, 105, 108, 101, 99, 104, 101, 99, 107, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str109 = allocate([ 45, 110, 111, 108, 105, 109, 105, 116, 115, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str110 = allocate([ 45, 110, 111, 115, 97, 118, 101, 0 ], "i8", ALLOC_STATIC);

_nosave = allocate(1, "i32", ALLOC_STATIC);

STRING_TABLE.__str111 = allocate([ 45, 111, 108, 100, 116, 105, 109, 101, 115, 116, 97, 109, 112, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str112 = allocate([ 45, 111, 119, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str113 = allocate([ 45, 112, 114, 101, 109, 117, 108, 116, 105, 112, 108, 121, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str114 = allocate([ 45, 112, 108, 116, 101, 95, 108, 101, 110, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str115 = allocate([ 45, 112, 112, 108, 116, 0 ], "i8", ALLOC_STATIC);

_pplt_string = allocate(1024, "i8", ALLOC_STATIC);

STRING_TABLE.__str116 = allocate([ 45, 112, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str117 = allocate([ 45, 113, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str118 = allocate([ 45, 114, 101, 100, 117, 99, 101, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str119 = allocate([ 45, 114, 101, 112, 108, 97, 99, 101, 95, 103, 97, 109, 109, 97, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str120 = allocate([ 45, 114, 101, 115, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str121 = allocate([ 45, 114, 0 ], "i8", ALLOC_STATIC);

_image_is_immutable_b = allocate(1, "i1", ALLOC_STATIC);

STRING_TABLE.__str122 = allocate([ 45, 115, 97, 118, 101, 0 ], "i8", ALLOC_STATIC);

_all_chunks_are_safe = allocate(1, "i32", ALLOC_STATIC);

STRING_TABLE.__str123 = allocate([ 45, 115, 114, 103, 98, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str124 = allocate([ 45, 115, 82, 71, 66, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str129 = allocate([ 45, 115, 116, 101, 114, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str130 = allocate([ 45, 115, 84, 69, 82, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str131 = allocate([ 45, 115, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str132 = allocate([ 45, 116, 101, 120, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str133 = allocate([ 45, 116, 69, 88, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str134 = allocate([ 45, 105, 116, 120, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str135 = allocate([ 45, 105, 84, 88, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str136 = allocate([ 45, 122, 105, 116, 120, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str137 = allocate([ 45, 122, 105, 84, 88, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str138 = allocate([ 45, 122, 116, 120, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str139 = allocate([ 45, 122, 84, 88, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str140 = allocate([ 45, 122, 105, 0 ], "i8", ALLOC_STATIC);

_text_compression = allocate(40, "i32", ALLOC_STATIC);

STRING_TABLE.__str141 = allocate([ 45, 122, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str142 = allocate([ 45, 116, 0 ], "i8", ALLOC_STATIC);

_text_where = allocate(40, "i32", ALLOC_STATIC);

_text_keyword = allocate(800, "i8", ALLOC_STATIC);

_text_lang = allocate(800, "i8", ALLOC_STATIC);

_text_lang_key = allocate(800, "i8", ALLOC_STATIC);

_text_text = allocate(20480, "i8", ALLOC_STATIC);

STRING_TABLE.__str145 = allocate([ 116, 111, 111, 32, 109, 97, 110, 121, 32, 116, 101, 120, 116, 47, 122, 84, 88, 116, 32, 105, 110, 112, 117, 116, 115, 59, 32, 111, 110, 108, 121, 32, 49, 48, 32, 97, 108, 108, 111, 119, 101, 100, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str146 = allocate([ 107, 101, 121, 119, 111, 114, 100, 32, 101, 120, 99, 101, 101, 100, 115, 32, 55, 57, 32, 99, 104, 97, 114, 97, 99, 116, 101, 114, 115, 32, 111, 114, 32, 116, 101, 120, 116, 32, 101, 120, 99, 101, 101, 100, 115, 32, 50, 48, 52, 55, 32, 99, 104, 97, 114, 97, 99, 116, 101, 114, 115, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str147 = allocate([ 45, 105, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str148 = allocate([ 45, 116, 105, 109, 101, 95, 115, 116, 97, 109, 112, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str149 = allocate([ 45, 110, 101, 119, 116, 105, 109, 101, 115, 116, 97, 109, 112, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str150 = allocate([ 45, 116, 114, 110, 115, 95, 97, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str151 = allocate([ 45, 116, 82, 78, 83, 95, 97, 0 ], "i8", ALLOC_STATIC);

_trans_in = allocate(256, "i8", ALLOC_STATIC);

STRING_TABLE.__str152 = allocate([ 45, 116, 114, 110, 115, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str153 = allocate([ 45, 116, 82, 78, 83, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str154 = allocate([ 45, 118, 101, 114, 115, 105, 111, 110, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str155 = allocate([ 32, 112, 110, 103, 99, 114, 117, 115, 104, 32, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str156 = allocate([ 49, 46, 55, 46, 50, 55, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str157 = allocate([ 44, 32, 117, 115, 101, 115, 32, 108, 105, 98, 112, 110, 103, 32, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str158 = allocate([ 32, 97, 110, 100, 32, 122, 108, 105, 98, 32, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str160 = allocate([ 10, 32, 67, 104, 101, 99, 107, 32, 104, 116, 116, 112, 58, 47, 47, 112, 109, 116, 46, 115, 102, 46, 110, 101, 116, 47, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str161 = allocate([ 32, 102, 111, 114, 32, 116, 104, 101, 32, 109, 111, 115, 116, 32, 114, 101, 99, 101, 110, 116, 32, 118, 101, 114, 115, 105, 111, 110, 46, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str162 = allocate([ 45, 118, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str163 = allocate([ 45, 119, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str164 = allocate([ 45, 122, 109, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str165 = allocate([ 73, 110, 118, 97, 108, 105, 100, 32, 119, 105, 110, 100, 111, 119, 32, 115, 105, 122, 101, 32, 40, 37, 100, 41, 59, 32, 117, 115, 105, 110, 103, 32, 119, 105, 110, 100, 111, 119, 32, 115, 105, 122, 101, 61, 52, 10, 0 ], "i8", ALLOC_STATIC);

_inname = allocate(1, "i8*", ALLOC_STATIC);

_trns_array = allocate(256, "i8", ALLOC_STATIC);

_image_specified_gamma_b = allocate(1, "i1", ALLOC_STATIC);

STRING_TABLE.__str166 = allocate([ 99, 111, 117, 108, 100, 32, 110, 111, 116, 32, 99, 114, 101, 97, 116, 101, 32, 100, 105, 114, 101, 99, 116, 111, 114, 121, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str167 = allocate([ 100, 105, 114, 101, 99, 116, 111, 114, 121, 32, 37, 115, 32, 105, 115, 32, 116, 111, 111, 32, 108, 111, 110, 103, 32, 102, 111, 114, 32, 98, 117, 102, 102, 101, 114, 10, 0 ], "i8", ALLOC_STATIC);

_out_string = allocate(256, "i8", ALLOC_STATIC);

STRING_TABLE.__str170 = allocate([ 102, 105, 108, 101, 110, 97, 109, 101, 32, 37, 115, 32, 105, 115, 32, 116, 111, 111, 32, 108, 111, 110, 103, 32, 102, 111, 114, 32, 98, 117, 102, 102, 101, 114, 10, 0 ], "i8", ALLOC_STATIC);

_in_string = allocate(256, "i8", ALLOC_STATIC);

STRING_TABLE.__str171 = allocate([ 102, 117, 108, 108, 32, 112, 97, 116, 104, 32, 105, 115, 32, 116, 111, 111, 32, 108, 111, 110, 103, 32, 102, 111, 114, 32, 98, 117, 102, 102, 101, 114, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str172 = allocate([ 73, 103, 110, 111, 114, 105, 110, 103, 32, 34, 45, 111, 119, 34, 59, 32, 99, 97, 110, 110, 111, 116, 32, 117, 115, 101, 32, 105, 116, 32, 119, 105, 116, 104, 32, 34, 45, 100, 34, 32, 111, 114, 32, 34, 45, 101, 34, 0 ], "i8", ALLOC_STATIC);

_in_extension = allocate(256, "i8", ALLOC_STATIC);

_read_ptr = allocate(1, "%struct.png_struct_def*", ALLOC_STATIC);

STRING_TABLE.__str173 = allocate([ 80, 114, 101, 109, 117, 108, 116, 105, 112, 108, 105, 101, 100, 32, 97, 108, 112, 104, 97, 32, 105, 115, 32, 110, 111, 116, 32, 115, 117, 112, 112, 111, 114, 116, 101, 100, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str174 = allocate([ 79, 112, 101, 110, 105, 110, 103, 32, 102, 105, 108, 101, 32, 37, 115, 32, 102, 111, 114, 32, 108, 101, 110, 103, 116, 104, 32, 109, 101, 97, 115, 117, 114, 101, 109, 101, 110, 116, 10, 0 ], "i8", ALLOC_STATIC);

_already_crushed = allocate(1, "i32", ALLOC_STATIC);

_mng_ptr = allocate(1, "%struct.png_struct_def*", ALLOC_STATIC);

STRING_TABLE.__str175 = allocate([ 112, 110, 103, 99, 114, 117, 115, 104, 32, 99, 111, 117, 108, 100, 32, 110, 111, 116, 32, 99, 114, 101, 97, 116, 101, 32, 109, 110, 103, 95, 112, 116, 114, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str176 = allocate([ 119, 98, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str177 = allocate([ 67, 111, 117, 108, 100, 32, 110, 111, 116, 32, 111, 112, 101, 110, 32, 111, 117, 116, 112, 117, 116, 32, 102, 105, 108, 101, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

_idat_length = allocate(804, "i32", ALLOC_STATIC);

STRING_TABLE.__str178 = allocate([ 32, 32, 32, 82, 101, 99, 111, 109, 112, 114, 101, 115, 115, 105, 110, 103, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str179 = allocate([ 32, 32, 32, 84, 111, 116, 97, 108, 32, 108, 101, 110, 103, 116, 104, 32, 111, 102, 32, 100, 97, 116, 97, 32, 102, 111, 117, 110, 100, 32, 105, 110, 32, 73, 68, 65, 84, 32, 99, 104, 117, 110, 107, 115, 32, 32, 32, 32, 61, 32, 37, 56, 108, 117, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str180 = allocate([ 32, 32, 32, 70, 105, 108, 101, 32, 37, 115, 32, 104, 97, 115, 32, 97, 108, 114, 101, 97, 100, 121, 32, 98, 101, 101, 110, 32, 99, 114, 117, 115, 104, 101, 100, 46, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str181 = allocate([ 32, 32, 32, 73, 109, 97, 103, 101, 32, 37, 115, 32, 104, 97, 115, 32, 97, 32, 100, 83, 73, 71, 32, 99, 104, 117, 110, 107, 32, 97, 110, 100, 32, 105, 115, 32, 105, 109, 109, 117, 116, 97, 98, 108, 101, 46, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str183 = allocate([ 10, 32, 32, 73, 103, 110, 111, 114, 105, 110, 103, 32, 105, 110, 118, 97, 108, 105, 100, 32, 98, 105, 116, 95, 100, 101, 112, 116, 104, 58, 32, 37, 100, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str184 = allocate([ 10, 32, 32, 73, 103, 110, 111, 114, 105, 110, 103, 32, 105, 110, 118, 97, 108, 105, 100, 32, 99, 111, 108, 111, 114, 95, 116, 121, 112, 101, 58, 32, 37, 100, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str185 = allocate([ 10, 10, 69, 78, 84, 69, 82, 73, 78, 71, 32, 77, 65, 73, 78, 32, 76, 79, 79, 80, 32, 79, 86, 69, 82, 32, 37, 100, 32, 77, 69, 84, 72, 79, 68, 83, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str187 = allocate([ 67, 111, 117, 108, 100, 32, 110, 111, 116, 32, 102, 105, 110, 100, 32, 105, 110, 112, 117, 116, 32, 102, 105, 108, 101, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str188 = allocate([ 99, 111, 112, 121, 105, 110, 103, 32, 105, 110, 112, 117, 116, 32, 116, 111, 32, 111, 117, 116, 112, 117, 116, 46, 46, 46, 32, 116, 99, 61, 37, 100, 32, 46, 46, 46, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str191 = allocate([ 115, 107, 105, 112, 112, 105, 110, 103, 32, 34, 108, 97, 116, 101, 34, 32, 116, 114, 105, 97, 108, 32, 37, 100, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str192 = allocate([ 115, 107, 105, 112, 112, 105, 110, 103, 32, 34, 101, 97, 114, 108, 121, 34, 32, 116, 114, 105, 97, 108, 32, 37, 100, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str193 = allocate([ 10, 10, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 10, 66, 101, 103, 105, 110, 32, 116, 114, 105, 97, 108, 32, 37, 100, 44, 32, 102, 105, 108, 116, 101, 114, 32, 37, 100, 44, 32, 115, 116, 114, 97, 116, 101, 103, 121, 32, 37, 100, 44, 32, 108, 101, 118, 101, 108, 32, 37, 100, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str195 = allocate([ 10, 32, 32, 32, 67, 97, 110, 110, 111, 116, 32, 111, 118, 101, 114, 119, 114, 105, 116, 101, 32, 105, 110, 112, 117, 116, 32, 102, 105, 108, 101, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str196 = allocate([ 32, 32, 32, 115, 116, 95, 105, 110, 111, 61, 37, 100, 44, 32, 115, 116, 95, 115, 105, 122, 101, 61, 37, 100, 10, 10, 0 ], "i8", ALLOC_STATIC);

_the_exception_context = allocate(12, [ "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0 ], ALLOC_STATIC);

STRING_TABLE.__str199 = allocate([ 112, 110, 103, 99, 114, 117, 115, 104, 32, 99, 111, 117, 108, 100, 32, 110, 111, 116, 32, 99, 114, 101, 97, 116, 101, 32, 114, 101, 97, 100, 95, 112, 116, 114, 0 ], "i8", ALLOC_STATIC);

_write_ptr = allocate(1, "%struct.png_struct_def*", ALLOC_STATIC);

STRING_TABLE.__str200 = allocate([ 112, 110, 103, 99, 114, 117, 115, 104, 32, 99, 111, 117, 108, 100, 32, 110, 111, 116, 32, 99, 114, 101, 97, 116, 101, 32, 119, 114, 105, 116, 101, 95, 112, 116, 114, 0 ], "i8", ALLOC_STATIC);

_read_info_ptr = allocate(1, "%struct.png_info_def*", ALLOC_STATIC);

STRING_TABLE.__str202 = allocate([ 112, 110, 103, 99, 114, 117, 115, 104, 32, 99, 111, 117, 108, 100, 32, 110, 111, 116, 32, 99, 114, 101, 97, 116, 101, 32, 114, 101, 97, 100, 95, 105, 110, 102, 111, 95, 112, 116, 114, 0 ], "i8", ALLOC_STATIC);

_end_info_ptr = allocate(1, "%struct.png_info_def*", ALLOC_STATIC);

STRING_TABLE.__str203 = allocate([ 112, 110, 103, 99, 114, 117, 115, 104, 32, 99, 111, 117, 108, 100, 32, 110, 111, 116, 32, 99, 114, 101, 97, 116, 101, 32, 101, 110, 100, 95, 105, 110, 102, 111, 95, 112, 116, 114, 0 ], "i8", ALLOC_STATIC);

_write_info_ptr = allocate(1, "%struct.png_info_def*", ALLOC_STATIC);

STRING_TABLE.__str204 = allocate([ 112, 110, 103, 99, 114, 117, 115, 104, 32, 99, 111, 117, 108, 100, 32, 110, 111, 116, 32, 99, 114, 101, 97, 116, 101, 32, 119, 114, 105, 116, 101, 95, 105, 110, 102, 111, 95, 112, 116, 114, 0 ], "i8", ALLOC_STATIC);

_write_end_info_ptr = allocate(1, "%struct.png_info_def*", ALLOC_STATIC);

STRING_TABLE.__str205 = allocate([ 112, 110, 103, 99, 114, 117, 115, 104, 32, 99, 111, 117, 108, 100, 32, 110, 111, 116, 32, 99, 114, 101, 97, 116, 101, 32, 119, 114, 105, 116, 101, 95, 101, 110, 100, 95, 105, 110, 102, 111, 95, 112, 116, 114, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str209 = allocate([ 97, 99, 84, 76, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str210 = allocate([ 102, 99, 84, 76, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str211 = allocate([ 102, 100, 65, 84, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str212 = allocate([ 97, 108, 108, 98, 0 ], "i8", ALLOC_STATIC);

_input_format_b = allocate(1, "i1", ALLOC_STATIC);

STRING_TABLE.__str214 = allocate([ 78, 111, 116, 32, 97, 32, 80, 78, 71, 32, 102, 105, 108, 101, 33, 0 ], "i8", ALLOC_STATIC);

_found_CgBI = allocate(1, "i32", ALLOC_STATIC);

_width = allocate(1, "i32", ALLOC_STATIC);

_height = allocate(1, "i32", ALLOC_STATIC);

_input_color_type = allocate(1, "i32", ALLOC_STATIC);

STRING_TABLE.__str217 = allocate([ 32, 32, 32, 73, 72, 68, 82, 32, 99, 104, 117, 110, 107, 32, 100, 97, 116, 97, 58, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str218 = allocate([ 32, 32, 32, 32, 32, 32, 87, 105, 100, 116, 104, 61, 37, 108, 117, 44, 32, 104, 101, 105, 103, 104, 116, 61, 37, 108, 117, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str219 = allocate([ 32, 32, 32, 32, 32, 32, 66, 105, 116, 32, 100, 101, 112, 116, 104, 32, 61, 37, 100, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str220 = allocate([ 32, 32, 32, 32, 32, 32, 67, 111, 108, 111, 114, 32, 116, 121, 112, 101, 61, 37, 100, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str221 = allocate([ 32, 32, 32, 32, 32, 32, 79, 117, 116, 112, 117, 116, 32, 99, 111, 108, 111, 114, 32, 116, 121, 112, 101, 61, 37, 100, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str222 = allocate([ 32, 32, 32, 32, 32, 32, 73, 110, 116, 101, 114, 108, 97, 99, 101, 32, 61, 37, 100, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str223 = allocate([ 32, 32, 32, 82, 101, 100, 117, 99, 105, 110, 103, 32, 116, 114, 117, 101, 99, 111, 108, 111, 114, 32, 105, 109, 97, 103, 101, 32, 116, 111, 32, 103, 114, 97, 121, 115, 99, 97, 108, 101, 46, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str225 = allocate([ 32, 32, 32, 83, 116, 114, 105, 112, 112, 105, 110, 103, 32, 101, 120, 105, 115, 116, 105, 110, 103, 32, 97, 108, 112, 104, 97, 32, 99, 104, 97, 110, 110, 101, 108, 46, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str226 = allocate([ 32, 32, 32, 65, 100, 100, 105, 110, 103, 32, 97, 110, 32, 111, 112, 97, 113, 117, 101, 32, 97, 108, 112, 104, 97, 32, 99, 104, 97, 110, 110, 101, 108, 46, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str227 = allocate([ 32, 32, 32, 69, 120, 112, 97, 110, 100, 105, 110, 103, 32, 105, 110, 100, 101, 120, 101, 100, 32, 99, 111, 108, 111, 114, 32, 102, 105, 108, 101, 46, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str228 = allocate([ 32, 32, 32, 112, 110, 103, 99, 114, 117, 115, 104, 32, 119, 105, 108, 108, 32, 111, 110, 108, 121, 32, 115, 97, 118, 101, 32, 65, 80, 78, 71, 32, 99, 104, 117, 110, 107, 115, 32, 105, 110, 32, 97, 110, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str229 = allocate([ 32, 32, 32, 111, 117, 116, 112, 117, 116, 32, 102, 105, 108, 101, 32, 119, 105, 116, 104, 32, 116, 104, 101, 32, 34, 46, 97, 112, 110, 103, 34, 32, 101, 120, 116, 101, 110, 115, 105, 111, 110, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str230 = allocate([ 32, 32, 32, 67, 97, 110, 110, 111, 116, 32, 115, 97, 118, 101, 32, 65, 80, 78, 71, 32, 99, 104, 117, 110, 107, 115, 32, 119, 105, 116, 104, 32, 97, 32, 99, 111, 108, 111, 114, 95, 116, 121, 112, 101, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str231 = allocate([ 32, 32, 32, 100, 105, 102, 102, 101, 114, 101, 110, 116, 32, 102, 114, 111, 109, 32, 116, 104, 97, 116, 32, 111, 102, 32, 116, 104, 101, 32, 109, 97, 105, 110, 32, 105, 109, 97, 103, 101, 46, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str232 = allocate([ 32, 32, 32, 67, 97, 110, 110, 111, 116, 32, 115, 97, 118, 101, 32, 65, 80, 78, 71, 32, 99, 104, 117, 110, 107, 115, 32, 119, 105, 116, 104, 32, 97, 32, 98, 105, 116, 95, 100, 101, 112, 116, 104, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str233 = allocate([ 32, 32, 32, 83, 101, 116, 116, 105, 110, 103, 32, 73, 72, 68, 82, 10, 0 ], "i8", ALLOC_STATIC);

_found_cHRM_b = allocate(1, "i1", ALLOC_STATIC);

STRING_TABLE.__str234 = allocate([ 32, 32, 32, 73, 110, 115, 101, 114, 116, 105, 110, 103, 32, 103, 65, 77, 65, 32, 99, 104, 117, 110, 107, 32, 119, 105, 116, 104, 32, 103, 97, 109, 109, 97, 61, 40, 37, 100, 47, 49, 48, 48, 48, 48, 48, 41, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str235 = allocate([ 32, 32, 32, 103, 97, 109, 109, 97, 61, 40, 37, 100, 47, 49, 48, 48, 48, 48, 48, 41, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str236 = allocate([ 32, 32, 32, 73, 110, 115, 101, 114, 116, 105, 110, 103, 32, 115, 82, 71, 66, 32, 99, 104, 117, 110, 107, 32, 119, 105, 116, 104, 32, 105, 110, 116, 101, 110, 116, 61, 37, 100, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str237 = allocate([ 32, 32, 32, 73, 103, 110, 111, 114, 105, 110, 103, 32, 115, 82, 71, 66, 32, 114, 101, 113, 117, 101, 115, 116, 59, 32, 103, 97, 109, 109, 97, 61, 40, 37, 108, 117, 47, 49, 48, 48, 48, 48, 48, 41, 32, 105, 115, 32, 110, 111, 116, 32, 97, 112, 112, 114, 111, 120, 46, 32, 48, 46, 52, 53, 53, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str238 = allocate([ 71, 111, 116, 32, 105, 67, 67, 80, 32, 99, 104, 117, 110, 107, 44, 32, 112, 114, 111, 102, 108, 101, 110, 61, 37, 108, 117, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str240 = allocate([ 87, 114, 111, 116, 101, 32, 105, 67, 67, 80, 32, 99, 104, 117, 110, 107, 44, 32, 112, 114, 111, 102, 108, 101, 110, 61, 37, 100, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str241 = allocate([ 32, 32, 32, 68, 101, 108, 101, 116, 105, 110, 103, 32, 117, 115, 101, 108, 101, 115, 115, 32, 111, 70, 70, 115, 32, 48, 32, 48, 32, 99, 104, 117, 110, 107, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str242 = allocate([ 32, 32, 32, 68, 101, 108, 101, 116, 105, 110, 103, 32, 117, 115, 101, 108, 101, 115, 115, 32, 112, 72, 89, 115, 32, 48, 32, 48, 32, 99, 104, 117, 110, 107, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str243 = allocate([ 32, 32, 32, 65, 100, 100, 101, 100, 32, 112, 72, 89, 115, 32, 37, 108, 117, 32, 37, 108, 117, 32, 49, 32, 99, 104, 117, 110, 107, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str244 = allocate([ 32, 32, 70, 111, 117, 110, 100, 32, 116, 82, 78, 83, 32, 99, 104, 117, 110, 107, 32, 105, 110, 32, 105, 110, 112, 117, 116, 32, 102, 105, 108, 101, 46, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str246 = allocate([ 32, 32, 32, 68, 101, 108, 101, 116, 105, 110, 103, 32, 97, 108, 108, 45, 111, 112, 97, 113, 117, 101, 32, 116, 82, 78, 83, 32, 99, 104, 117, 110, 107, 46, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str247 = allocate([ 32, 32, 32, 84, 114, 117, 110, 99, 97, 116, 105, 110, 103, 32, 116, 114, 97, 105, 108, 105, 110, 103, 32, 111, 112, 97, 113, 117, 101, 32, 101, 110, 116, 114, 105, 101, 115, 32, 102, 114, 111, 109, 32, 116, 82, 78, 83, 32, 99, 104, 117, 110, 107, 46, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str248 = allocate([ 32, 32, 32, 112, 110, 103, 95, 115, 101, 116, 95, 116, 82, 78, 83, 44, 32, 110, 117, 109, 95, 116, 114, 97, 110, 115, 61, 37, 100, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str249 = allocate([ 72, 97, 118, 101, 95, 116, 82, 78, 83, 44, 32, 110, 117, 109, 95, 116, 114, 97, 110, 115, 61, 37, 100, 10, 0 ], "i8", ALLOC_STATIC);

_num_palette = allocate(1, "i32", ALLOC_STATIC);

STRING_TABLE.__str251 = allocate([ 32, 32, 32, 84, 114, 97, 110, 115, 112, 97, 114, 101, 110, 99, 121, 58, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str252 = allocate([ 32, 32, 32, 32, 32, 32, 37, 52, 100, 32, 37, 52, 100, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str253 = allocate([ 32, 32, 32, 32, 32, 32, 37, 100, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str254 = allocate([ 32, 32, 32, 32, 32, 32, 37, 100, 32, 37, 100, 32, 37, 100, 10, 0 ], "i8", ALLOC_STATIC);

_palette = allocate(1, "%struct.png_color_struct*", ALLOC_STATIC);

STRING_TABLE.__str255 = allocate([ 80, 80, 76, 84, 58, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str257 = allocate([ 32, 32, 32, 80, 97, 108, 101, 116, 116, 101, 58, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str258 = allocate([ 32, 32, 32, 32, 32, 32, 73, 32, 32, 32, 32, 82, 32, 32, 32, 32, 71, 32, 32, 32, 32, 66, 32, 40, 32, 99, 111, 108, 111, 114, 32, 41, 32, 32, 32, 32, 65, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str259 = allocate([ 32, 32, 32, 37, 52, 100, 32, 37, 52, 100, 32, 37, 52, 100, 32, 37, 52, 100, 32, 40, 35, 37, 50, 46, 50, 120, 37, 50, 46, 50, 120, 37, 50, 46, 50, 120, 41, 32, 37, 52, 100, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str260 = allocate([ 72, 97, 110, 100, 108, 105, 110, 103, 32, 37, 100, 32, 116, 69, 88, 116, 47, 122, 84, 88, 116, 32, 99, 104, 117, 110, 107, 115, 32, 98, 101, 102, 111, 114, 101, 32, 73, 68, 65, 84, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str261 = allocate([ 37, 100, 32, 32, 37, 115, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str262 = allocate([ 58, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str263 = allocate([ 32, 40, 37, 115, 58, 32, 37, 115, 41, 58, 32, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str264 = allocate([ 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str266 = allocate([ 84, 101, 120, 116, 32, 99, 104, 117, 110, 107, 32, 98, 101, 102, 111, 114, 101, 32, 73, 68, 65, 84, 44, 32, 99, 111, 109, 112, 114, 101, 115, 115, 105, 111, 110, 61, 37, 100, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str269 = allocate([ 32, 32, 32, 65, 100, 100, 101, 100, 32, 97, 37, 115, 99, 111, 109, 112, 114, 101, 115, 115, 101, 100, 32, 105, 84, 88, 116, 32, 99, 104, 117, 110, 107, 46, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str270 = allocate([ 110, 32, 117, 110, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str271 = allocate([ 32, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str272 = allocate([ 72, 97, 110, 100, 108, 105, 110, 103, 32, 115, 84, 69, 82, 32, 97, 115, 32, 117, 110, 107, 110, 111, 119, 110, 32, 99, 104, 117, 110, 107, 32, 37, 100, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str273 = allocate([ 70, 111, 117, 110, 100, 32, 37, 100, 32, 117, 110, 107, 110, 111, 119, 110, 32, 99, 104, 117, 110, 107, 115, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str274 = allocate([ 109, 97, 108, 108, 111, 99, 32, 102, 111, 114, 32, 37, 100, 32, 117, 110, 107, 110, 111, 119, 110, 32, 99, 104, 117, 110, 107, 115, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str275 = allocate([ 72, 97, 110, 100, 108, 105, 110, 103, 32, 117, 110, 107, 110, 111, 119, 110, 32, 99, 104, 117, 110, 107, 32, 37, 100, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str276 = allocate([ 32, 32, 32, 117, 110, 107, 110, 111, 119, 110, 91, 37, 100, 93, 32, 61, 32, 37, 115, 32, 40, 37, 108, 117, 32, 98, 121, 116, 101, 115, 44, 32, 108, 111, 99, 97, 116, 105, 111, 110, 32, 37, 100, 41, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str277 = allocate([ 75, 101, 101, 112, 105, 110, 103, 32, 37, 100, 32, 117, 110, 107, 110, 111, 119, 110, 32, 99, 104, 117, 110, 107, 115, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE._main_png_MHDR = allocate([ 77, 72, 68, 82, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str280 = allocate([ 32, 32, 87, 114, 105, 116, 105, 110, 103, 32, 97, 32, 77, 78, 71, 32, 102, 105, 108, 101, 32, 119, 105, 116, 104, 32, 97, 32, 46, 112, 110, 103, 32, 101, 120, 116, 101, 110, 115, 105, 111, 110, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str281 = allocate([ 67, 97, 110, 110, 111, 116, 32, 114, 101, 97, 100, 32, 88, 99, 111, 100, 101, 32, 67, 103, 66, 73, 32, 80, 78, 71, 46, 32, 69, 118, 101, 110, 32, 105, 102, 32, 119, 101, 32, 99, 111, 117, 108, 100, 44, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str282 = allocate([ 116, 104, 101, 32, 111, 114, 105, 103, 105, 110, 97, 108, 32, 80, 78, 71, 32, 99, 111, 117, 108, 100, 32, 110, 111, 116, 32, 98, 101, 32, 114, 101, 99, 111, 118, 101, 114, 101, 100, 46, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str284 = allocate([ 114, 101, 105, 110, 105, 116, 105, 97, 108, 105, 122, 105, 110, 103, 32, 119, 114, 105, 116, 101, 32, 122, 98, 117, 102, 32, 116, 111, 32, 37, 108, 117, 46, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str285 = allocate([ 32, 32, 32, 67, 111, 109, 112, 114, 101, 115, 115, 105, 111, 110, 32, 119, 105, 110, 100, 111, 119, 32, 102, 111, 114, 32, 111, 117, 116, 112, 117, 116, 61, 32, 37, 100, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str287 = allocate([ 73, 110, 115, 117, 102, 102, 105, 99, 105, 101, 110, 116, 32, 109, 101, 109, 111, 114, 121, 32, 116, 111, 32, 97, 108, 108, 111, 99, 97, 116, 101, 32, 114, 111, 119, 32, 98, 117, 102, 102, 101, 114, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str289 = allocate([ 10, 66, 101, 103, 105, 110, 32, 105, 110, 116, 101, 114, 108, 97, 99, 101, 32, 112, 97, 115, 115, 32, 37, 100, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str290 = allocate([ 69, 110, 100, 32, 105, 110, 116, 101, 114, 108, 97, 99, 101, 32, 112, 97, 115, 115, 32, 37, 100, 10, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str293 = allocate([ 72, 97, 110, 100, 108, 105, 110, 103, 32, 37, 100, 32, 116, 69, 88, 116, 47, 122, 84, 88, 116, 47, 105, 84, 88, 116, 32, 99, 104, 117, 110, 107, 115, 32, 97, 102, 116, 101, 114, 32, 73, 68, 65, 84, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str294 = allocate([ 84, 101, 120, 116, 32, 99, 104, 117, 110, 107, 32, 97, 102, 116, 101, 114, 32, 73, 68, 65, 84, 44, 32, 99, 111, 109, 112, 114, 101, 115, 115, 105, 111, 110, 61, 37, 100, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str297 = allocate([ 115, 101, 116, 116, 105, 110, 103, 32, 37, 100, 32, 117, 110, 107, 110, 111, 119, 110, 32, 99, 104, 117, 110, 107, 115, 32, 97, 102, 116, 101, 114, 32, 73, 68, 65, 84, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE._main_png_MEND = allocate([ 77, 69, 78, 68, 0 ], "i8", ALLOC_STATIC);

_msg = allocate(1, "i8*", ALLOC_STATIC);

STRING_TABLE.__str299 = allocate([ 87, 104, 105, 108, 101, 32, 99, 111, 110, 118, 101, 114, 116, 105, 110, 103, 32, 37, 115, 32, 116, 111, 32, 37, 115, 58, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str300 = allocate([ 87, 104, 105, 108, 101, 32, 114, 101, 97, 100, 105, 110, 103, 32, 37, 115, 58, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str301 = allocate([ 32, 32, 112, 110, 103, 99, 114, 117, 115, 104, 32, 99, 97, 117, 103, 104, 116, 32, 108, 105, 98, 112, 110, 103, 32, 101, 114, 114, 111, 114, 58, 10, 32, 32, 32, 37, 115, 10, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str302 = allocate([ 114, 101, 116, 117, 114, 110, 105, 110, 103, 32, 97, 102, 116, 101, 114, 32, 99, 108, 101, 97, 110, 117, 112, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str304 = allocate([ 67, 111, 117, 108, 100, 32, 110, 111, 116, 32, 102, 105, 110, 100, 32, 111, 117, 116, 112, 117, 116, 32, 102, 105, 108, 101, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str305 = allocate([ 32, 32, 32, 73, 68, 65, 84, 32, 108, 101, 110, 103, 116, 104, 32, 119, 105, 116, 104, 32, 109, 101, 116, 104, 111, 100, 32, 37, 51, 100, 32, 40, 102, 109, 32, 37, 100, 32, 122, 108, 32, 37, 100, 32, 122, 115, 32, 37, 100, 41, 32, 61, 32, 37, 56, 108, 117, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str306 = allocate([ 10, 10, 70, 73, 78, 73, 83, 72, 69, 68, 32, 77, 65, 73, 78, 32, 76, 79, 79, 80, 32, 79, 86, 69, 82, 32, 37, 100, 32, 77, 69, 84, 72, 79, 68, 83, 10, 10, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str307 = allocate([ 101, 114, 114, 111, 114, 32, 119, 104, 105, 108, 101, 32, 114, 101, 110, 97, 109, 105, 110, 103, 32, 34, 37, 115, 34, 32, 116, 111, 32, 34, 37, 115, 34, 32, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str308 = allocate([ 114, 101, 110, 97, 109, 101, 32, 37, 115, 32, 116, 111, 32, 37, 115, 32, 99, 111, 109, 112, 108, 101, 116, 101, 46, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str309 = allocate([ 32, 32, 32, 66, 101, 115, 116, 32, 112, 110, 103, 99, 114, 117, 115, 104, 32, 109, 101, 116, 104, 111, 100, 32, 61, 32, 48, 32, 40, 115, 101, 116, 116, 105, 110, 103, 115, 32, 117, 110, 100, 101, 116, 101, 114, 109, 105, 110, 101, 100, 41, 32, 102, 111, 114, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str310 = allocate([ 32, 32, 32, 66, 101, 115, 116, 32, 112, 110, 103, 99, 114, 117, 115, 104, 32, 109, 101, 116, 104, 111, 100, 32, 61, 32, 37, 100, 32, 40, 102, 109, 32, 37, 100, 32, 122, 108, 32, 37, 100, 32, 122, 115, 32, 37, 100, 41, 10, 102, 111, 114, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str311 = allocate([ 32, 32, 32, 32, 32, 40, 110, 111, 32, 73, 68, 65, 84, 32, 99, 104, 97, 110, 103, 101, 41, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str312 = allocate([ 32, 32, 32, 32, 32, 40, 37, 52, 46, 50, 102, 37, 37, 32, 73, 68, 65, 84, 32, 114, 101, 100, 117, 99, 116, 105, 111, 110, 41, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str313 = allocate([ 32, 32, 32, 32, 32, 40, 37, 52, 46, 50, 102, 37, 37, 32, 73, 68, 65, 84, 32, 105, 110, 99, 114, 101, 97, 115, 101, 41, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str314 = allocate([ 32, 32, 32, 32, 32, 40, 110, 111, 32, 102, 105, 108, 101, 115, 105, 122, 101, 32, 99, 104, 97, 110, 103, 101, 41, 10, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str315 = allocate([ 32, 32, 32, 32, 32, 40, 37, 52, 46, 50, 102, 37, 37, 32, 102, 105, 108, 101, 115, 105, 122, 101, 32, 114, 101, 100, 117, 99, 116, 105, 111, 110, 41, 10, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str316 = allocate([ 32, 32, 32, 32, 32, 40, 37, 52, 46, 50, 102, 37, 37, 32, 102, 105, 108, 101, 115, 105, 122, 101, 32, 105, 110, 99, 114, 101, 97, 115, 101, 41, 10, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str317 = allocate([ 32, 32, 32, 78, 117, 109, 98, 101, 114, 32, 111, 102, 32, 111, 112, 101, 110, 32, 102, 105, 108, 101, 115, 61, 37, 100, 10, 0 ], "i8", ALLOC_STATIC);

_measured_idat_length = allocate(1, "i32", ALLOC_STATIC);

STRING_TABLE.__str321 = allocate([ 109, 101, 97, 115, 117, 114, 101, 95, 105, 100, 97, 116, 115, 58, 32, 73, 68, 65, 84, 32, 108, 101, 110, 103, 116, 104, 61, 37, 108, 117, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str322 = allocate([ 10, 87, 104, 105, 108, 101, 32, 109, 101, 97, 115, 117, 114, 105, 110, 103, 32, 73, 68, 65, 84, 115, 32, 105, 110, 32, 37, 115, 32, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str323 = allocate([ 112, 110, 103, 99, 114, 117, 115, 104, 32, 99, 97, 117, 103, 104, 116, 32, 108, 105, 98, 112, 110, 103, 32, 101, 114, 114, 111, 114, 58, 10, 32, 32, 32, 37, 115, 10, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE._png_measure_idat_png_MHDR = allocate([ 77, 72, 68, 82, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str325 = allocate([ 82, 101, 97, 100, 105, 110, 103, 32, 37, 99, 37, 99, 37, 99, 37, 99, 32, 99, 104, 117, 110, 107, 46, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str326 = allocate([ 32, 32, 119, 105, 100, 116, 104, 61, 37, 108, 117, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str327 = allocate([ 32, 32, 104, 101, 105, 103, 104, 116, 61, 37, 108, 117, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str328 = allocate([ 32, 32, 116, 105, 99, 107, 115, 112, 115, 61, 37, 108, 117, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str329 = allocate([ 32, 32, 110, 111, 109, 108, 97, 121, 99, 61, 37, 108, 117, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str330 = allocate([ 32, 32, 110, 111, 109, 102, 114, 97, 109, 61, 37, 108, 117, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str331 = allocate([ 32, 32, 110, 111, 109, 112, 108, 97, 121, 61, 37, 108, 117, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str332 = allocate([ 32, 32, 112, 114, 111, 102, 105, 108, 101, 61, 37, 108, 117, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str333 = allocate([ 78, 111, 116, 32, 97, 32, 80, 78, 71, 32, 102, 105, 108, 101, 46, 46, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE._png_measure_idat_png_DHDR = allocate([ 68, 72, 68, 82, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE._png_measure_idat_png_DEFI = allocate([ 68, 69, 70, 73, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE._png_measure_idat_png_FRAM = allocate([ 70, 82, 65, 77, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE._png_measure_idat_png_nEED = allocate([ 110, 69, 69, 68, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str334 = allocate([ 32, 32, 115, 107, 105, 112, 112, 105, 110, 103, 32, 77, 78, 71, 32, 37, 99, 37, 99, 37, 99, 37, 99, 32, 99, 104, 117, 110, 107, 44, 32, 37, 108, 117, 32, 98, 121, 116, 101, 115, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str335 = allocate([ 32, 32, 114, 101, 97, 100, 105, 110, 103, 32, 77, 78, 71, 32, 37, 99, 37, 99, 37, 99, 37, 99, 32, 99, 104, 117, 110, 107, 44, 32, 37, 108, 117, 32, 98, 121, 116, 101, 115, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str336 = allocate([ 32, 32, 112, 110, 103, 95, 109, 97, 108, 108, 111, 99, 32, 37, 108, 117, 32, 98, 121, 116, 101, 115, 46, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str337 = allocate([ 32, 32, 111, 98, 106, 105, 100, 61, 37, 108, 117, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str338 = allocate([ 32, 32, 105, 116, 121, 112, 101, 61, 37, 108, 117, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str339 = allocate([ 32, 32, 100, 116, 121, 112, 101, 61, 37, 108, 117, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str340 = allocate([ 32, 32, 120, 108, 111, 99, 61, 37, 108, 117, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str341 = allocate([ 32, 32, 121, 108, 111, 99, 61, 37, 108, 117, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str342 = allocate([ 32, 32, 100, 111, 95, 110, 111, 116, 95, 115, 104, 111, 119, 61, 37, 108, 117, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str343 = allocate([ 32, 32, 99, 111, 110, 99, 114, 101, 116, 101, 61, 37, 108, 117, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str344 = allocate([ 32, 32, 108, 95, 99, 98, 61, 37, 108, 117, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str345 = allocate([ 32, 32, 114, 95, 99, 98, 61, 37, 108, 117, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str346 = allocate([ 32, 32, 109, 111, 100, 101, 61, 37, 108, 117, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str347 = allocate([ 32, 32, 110, 97, 109, 101, 32, 61, 32, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str349 = allocate([ 82, 101, 97, 100, 105, 110, 103, 32, 37, 115, 32, 99, 104, 117, 110, 107, 44, 32, 108, 101, 110, 103, 116, 104, 32, 61, 32, 37, 108, 117, 46, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str353 = allocate([ 80, 104, 111, 116, 111, 115, 104, 111, 112, 32, 73, 67, 67, 32, 112, 114, 111, 102, 105, 108, 101, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE._png_measure_idat_png_MEND = allocate([ 77, 69, 78, 68, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str355 = allocate([ 10, 32, 124, 32, 112, 110, 103, 99, 114, 117, 115, 104, 32, 37, 115, 10, 32, 124, 32, 32, 32, 32, 67, 111, 112, 121, 114, 105, 103, 104, 116, 32, 40, 67, 41, 32, 49, 57, 57, 56, 45, 50, 48, 48, 50, 44, 50, 48, 48, 54, 45, 50, 48, 49, 50, 32, 71, 108, 101, 110, 110, 32, 82, 97, 110, 100, 101, 114, 115, 45, 80, 101, 104, 114, 115, 111, 110, 10, 32, 124, 32, 32, 32, 32, 80, 111, 114, 116, 105, 111, 110, 115, 32, 99, 111, 112, 121, 114, 105, 103, 104, 116, 32, 40, 67, 41, 32, 50, 48, 48, 53, 32, 32, 32, 32, 32, 32, 32, 71, 114, 101, 103, 32, 82, 111, 101, 108, 111, 102, 115, 10, 32, 124, 32, 84, 104, 105, 115, 32, 105, 115, 32, 97, 32, 102, 114, 101, 101, 44, 32, 111, 112, 101, 110, 45, 115, 111, 117, 114, 99, 101, 32, 112, 114, 111, 103, 114, 97, 109, 46, 32, 32, 80, 101, 114, 109, 105, 115, 115, 105, 111, 110, 32, 105, 115, 32, 105, 114, 114, 101, 118, 111, 99, 97, 98, 108, 121, 10, 32, 124, 32, 103, 114, 97, 110, 116, 101, 100, 32, 116, 111, 32, 101, 118, 101, 114, 121, 111, 110, 101, 32, 116, 111, 32, 117, 115, 101, 32, 116, 104, 105, 115, 32, 118, 101, 114, 115, 105, 111, 110, 32, 111, 102, 32, 112, 110, 103, 99, 114, 117, 115, 104, 32, 119, 105, 116, 104, 111, 117, 116, 10, 32, 124, 32, 112, 97, 121, 109, 101, 110, 116, 32, 111, 102, 32, 97, 110, 121, 32, 102, 101, 101, 46, 10, 32, 124, 32, 69, 120, 101, 99, 117, 116, 97, 98, 108, 101, 32, 110, 97, 109, 101, 32, 105, 115, 32, 37, 115, 10, 32, 124, 32, 73, 116, 32, 119, 97, 115, 32, 98, 117, 105, 108, 116, 32, 119, 105, 116, 104, 32, 108, 105, 98, 112, 110, 103, 32, 118, 101, 114, 115, 105, 111, 110, 32, 37, 115, 44, 32, 97, 110, 100, 32, 105, 115, 10, 32, 124, 32, 114, 117, 110, 110, 105, 110, 103, 32, 119, 105, 116, 104, 32, 37, 115, 32, 124, 32, 32, 32, 32, 67, 111, 112, 121, 114, 105, 103, 104, 116, 32, 40, 67, 41, 32, 49, 57, 57, 56, 45, 50, 48, 48, 52, 44, 32, 50, 48, 48, 54, 45, 50, 48, 49, 50, 32, 71, 108, 101, 110, 110, 32, 82, 97, 110, 100, 101, 114, 115, 45, 80, 101, 104, 114, 115, 111, 110, 44, 10, 32, 124, 32, 32, 32, 32, 67, 111, 112, 121, 114, 105, 103, 104, 116, 32, 40, 67, 41, 32, 49, 57, 57, 54, 44, 32, 49, 57, 57, 55, 32, 65, 110, 100, 114, 101, 97, 115, 32, 68, 105, 108, 103, 101, 114, 44, 10, 32, 124, 32, 32, 32, 32, 67, 111, 112, 121, 114, 105, 103, 104, 116, 32, 40, 67, 41, 32, 49, 57, 57, 53, 44, 32, 71, 117, 121, 32, 69, 114, 105, 99, 32, 83, 99, 104, 97, 108, 110, 97, 116, 44, 32, 71, 114, 111, 117, 112, 32, 52, 50, 32, 73, 110, 99, 46, 44, 10, 32, 124, 32, 97, 110, 100, 32, 122, 108, 105, 98, 32, 118, 101, 114, 115, 105, 111, 110, 32, 37, 115, 44, 32, 67, 111, 112, 121, 114, 105, 103, 104, 116, 32, 40, 67, 41, 32, 49, 57, 57, 53, 45, 50, 48, 49, 48, 32, 40, 111, 114, 32, 108, 97, 116, 101, 114, 41, 44, 10, 32, 124, 32, 32, 32, 32, 74, 101, 97, 110, 45, 108, 111, 117, 112, 32, 71, 97, 105, 108, 108, 121, 32, 97, 110, 100, 32, 77, 97, 114, 107, 32, 65, 100, 108, 101, 114, 46, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str356 = allocate([ 32, 124, 32, 73, 116, 32, 119, 97, 115, 32, 99, 111, 109, 112, 105, 108, 101, 100, 32, 119, 105, 116, 104, 32, 103, 99, 99, 32, 118, 101, 114, 115, 105, 111, 110, 32, 37, 115, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str357 = allocate([ 52, 46, 50, 46, 49, 32, 67, 111, 109, 112, 97, 116, 105, 98, 108, 101, 32, 67, 108, 97, 110, 103, 32, 51, 46, 48, 32, 40, 116, 97, 103, 115, 47, 82, 69, 76, 69, 65, 83, 69, 95, 51, 48, 47, 114, 99, 51, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str358 = allocate([ 46, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str359 = allocate([ 32, 32, 32, 32, 32, 32, 45, 97, 108, 114, 101, 97, 100, 121, 32, 97, 108, 114, 101, 97, 100, 121, 95, 99, 114, 117, 115, 104, 101, 100, 95, 115, 105, 122, 101, 32, 91, 101, 46, 103, 46, 44, 32, 56, 49, 57, 50, 93, 0 ], "i8", ALLOC_STATIC);

__str360 = allocate(1, "i8", ALLOC_STATIC);

STRING_TABLE.__str361 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 73, 102, 32, 102, 105, 108, 101, 32, 104, 97, 115, 32, 97, 110, 32, 73, 68, 65, 84, 32, 103, 114, 101, 97, 116, 101, 114, 32, 116, 104, 97, 110, 32, 116, 104, 105, 115, 32, 115, 105, 122, 101, 44, 32, 105, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str362 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 119, 105, 108, 108, 32, 98, 101, 32, 99, 111, 110, 115, 105, 100, 101, 114, 101, 100, 32, 116, 111, 32, 98, 101, 32, 97, 108, 114, 101, 97, 100, 121, 32, 99, 114, 117, 115, 104, 101, 100, 32, 97, 110, 100, 32, 119, 105, 108, 108, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str363 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 110, 111, 116, 32, 98, 101, 32, 112, 114, 111, 99, 101, 115, 115, 101, 100, 44, 32, 117, 110, 108, 101, 115, 115, 32, 121, 111, 117, 32, 97, 114, 101, 32, 109, 97, 107, 105, 110, 103, 32, 111, 116, 104, 101, 114, 32, 99, 104, 97, 110, 103, 101, 115, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str364 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 111, 114, 32, 116, 104, 101, 32, 34, 45, 102, 111, 114, 99, 101, 34, 32, 111, 112, 116, 105, 111, 110, 32, 105, 115, 32, 112, 114, 101, 115, 101, 110, 116, 46, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str365 = allocate([ 32, 32, 32, 32, 45, 98, 105, 116, 95, 100, 101, 112, 116, 104, 32, 100, 101, 112, 116, 104, 32, 40, 98, 105, 116, 95, 100, 101, 112, 116, 104, 32, 116, 111, 32, 117, 115, 101, 32, 105, 110, 32, 111, 117, 116, 112, 117, 116, 32, 102, 105, 108, 101, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str366 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 101, 102, 97, 117, 108, 116, 32, 111, 117, 116, 112, 117, 116, 32, 100, 101, 112, 116, 104, 32, 105, 115, 32, 115, 97, 109, 101, 32, 97, 115, 32, 105, 110, 112, 117, 116, 32, 100, 101, 112, 116, 104, 46, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str367 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 45, 98, 114, 117, 116, 101, 32, 40, 117, 115, 101, 32, 98, 114, 117, 116, 101, 45, 102, 111, 114, 99, 101, 58, 32, 116, 114, 121, 32, 49, 50, 54, 32, 100, 105, 102, 102, 101, 114, 101, 110, 116, 32, 109, 101, 116, 104, 111, 100, 115, 32, 91, 49, 49, 45, 49, 51, 54, 93, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str368 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 86, 101, 114, 121, 32, 116, 105, 109, 101, 45, 99, 111, 110, 115, 117, 109, 105, 110, 103, 32, 97, 110, 100, 32, 103, 101, 110, 101, 114, 97, 108, 108, 121, 32, 110, 111, 116, 32, 119, 111, 114, 116, 104, 119, 104, 105, 108, 101, 46, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str369 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 89, 111, 117, 32, 99, 97, 110, 32, 114, 101, 115, 116, 114, 105, 99, 116, 32, 116, 104, 105, 115, 32, 111, 112, 116, 105, 111, 110, 32, 116, 111, 32, 99, 101, 114, 116, 97, 105, 110, 32, 102, 105, 108, 116, 101, 114, 32, 116, 121, 112, 101, 115, 44, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str370 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 99, 111, 109, 112, 114, 101, 115, 115, 105, 111, 110, 32, 108, 101, 118, 101, 108, 115, 44, 32, 111, 114, 32, 115, 116, 114, 97, 116, 101, 103, 105, 101, 115, 32, 98, 121, 32, 102, 111, 108, 108, 111, 119, 105, 110, 103, 32, 105, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str371 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 119, 105, 116, 104, 32, 34, 45, 102, 32, 102, 105, 108, 116, 101, 114, 34, 44, 32, 34, 45, 108, 32, 108, 101, 118, 101, 108, 34, 44, 32, 111, 114, 32, 34, 45, 122, 32, 115, 116, 114, 97, 116, 101, 103, 121, 34, 46, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str372 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 45, 99, 32, 99, 111, 108, 111, 114, 95, 116, 121, 112, 101, 32, 111, 102, 32, 111, 117, 116, 112, 117, 116, 32, 102, 105, 108, 101, 32, 91, 48, 44, 32, 50, 44, 32, 52, 44, 32, 111, 114, 32, 54, 93, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str373 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 67, 111, 108, 111, 114, 32, 116, 121, 112, 101, 32, 102, 111, 114, 32, 116, 104, 101, 32, 111, 117, 116, 112, 117, 116, 32, 102, 105, 108, 101, 46, 32, 32, 70, 117, 116, 117, 114, 101, 32, 118, 101, 114, 115, 105, 111, 110, 115, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str374 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 119, 105, 108, 108, 32, 97, 108, 115, 111, 32, 97, 108, 108, 111, 119, 32, 99, 111, 108, 111, 114, 95, 116, 121, 112, 101, 32, 51, 44, 32, 105, 102, 32, 116, 104, 101, 114, 101, 32, 97, 114, 101, 32, 50, 53, 54, 32, 111, 114, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str375 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 101, 119, 101, 114, 32, 99, 111, 108, 111, 114, 115, 32, 112, 114, 101, 115, 101, 110, 116, 32, 105, 110, 32, 116, 104, 101, 32, 105, 110, 112, 117, 116, 32, 102, 105, 108, 101, 46, 32, 32, 67, 111, 108, 111, 114, 32, 116, 121, 112, 101, 115, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str376 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 52, 32, 97, 110, 100, 32, 54, 32, 97, 114, 101, 32, 112, 97, 100, 100, 101, 100, 32, 119, 105, 116, 104, 32, 97, 110, 32, 111, 112, 97, 113, 117, 101, 32, 97, 108, 112, 104, 97, 32, 99, 104, 97, 110, 110, 101, 108, 32, 105, 102, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str377 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 104, 101, 32, 105, 110, 112, 117, 116, 32, 102, 105, 108, 101, 32, 100, 111, 101, 115, 32, 110, 111, 116, 32, 104, 97, 118, 101, 32, 97, 108, 112, 104, 97, 32, 105, 110, 102, 111, 114, 109, 97, 116, 105, 111, 110, 46, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str378 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 89, 111, 117, 32, 99, 97, 110, 32, 117, 115, 101, 32, 48, 32, 111, 114, 32, 52, 32, 116, 111, 32, 99, 111, 110, 118, 101, 114, 116, 32, 99, 111, 108, 111, 114, 32, 116, 111, 32, 103, 114, 97, 121, 115, 99, 97, 108, 101, 46, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str379 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 85, 115, 101, 32, 48, 32, 111, 114, 32, 50, 32, 116, 111, 32, 100, 101, 108, 101, 116, 101, 32, 97, 110, 32, 117, 110, 119, 97, 110, 116, 101, 100, 32, 97, 108, 112, 104, 97, 32, 99, 104, 97, 110, 110, 101, 108, 46, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str380 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 101, 102, 97, 117, 108, 116, 32, 105, 115, 32, 116, 111, 32, 117, 115, 101, 32, 115, 97, 109, 101, 32, 99, 111, 108, 111, 114, 32, 116, 121, 112, 101, 32, 97, 115, 32, 116, 104, 101, 32, 105, 110, 112, 117, 116, 32, 102, 105, 108, 101, 46, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str381 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 45, 100, 32, 100, 105, 114, 101, 99, 116, 111, 114, 121, 95, 110, 97, 109, 101, 47, 32, 40, 119, 104, 101, 114, 101, 32, 111, 117, 116, 112, 117, 116, 32, 102, 105, 108, 101, 115, 32, 119, 105, 108, 108, 32, 103, 111, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str382 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 73, 102, 32, 97, 32, 100, 105, 114, 101, 99, 116, 111, 114, 121, 32, 110, 97, 109, 101, 32, 105, 115, 32, 103, 105, 118, 101, 110, 44, 32, 116, 104, 101, 110, 32, 116, 104, 101, 32, 111, 117, 116, 112, 117, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str383 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 105, 108, 101, 115, 32, 97, 114, 101, 32, 112, 108, 97, 99, 101, 100, 32, 105, 110, 32, 105, 116, 44, 32, 119, 105, 116, 104, 32, 116, 104, 101, 32, 115, 97, 109, 101, 32, 102, 105, 108, 101, 110, 97, 109, 101, 115, 32, 97, 115, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str384 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 104, 111, 115, 101, 32, 111, 102, 32, 116, 104, 101, 32, 111, 114, 105, 103, 105, 110, 97, 108, 32, 102, 105, 108, 101, 115, 46, 32, 70, 111, 114, 32, 101, 120, 97, 109, 112, 108, 101, 44, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str385 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 121, 111, 117, 32, 119, 111, 117, 108, 100, 32, 116, 121, 112, 101, 32, 39, 112, 110, 103, 99, 114, 117, 115, 104, 32, 45, 100, 105, 114, 101, 99, 116, 111, 114, 121, 32, 67, 82, 85, 83, 72, 69, 68, 47, 32, 42, 46, 112, 110, 103, 39, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str386 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 111, 32, 103, 101, 116, 32, 42, 46, 112, 110, 103, 32, 61, 62, 32, 67, 82, 85, 83, 72, 69, 68, 47, 42, 46, 112, 110, 103, 46, 32, 32, 84, 104, 101, 32, 116, 114, 97, 105, 108, 105, 110, 103, 32, 115, 108, 97, 115, 104, 32, 105, 115, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str387 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 111, 112, 116, 105, 111, 110, 97, 108, 44, 32, 98, 117, 116, 32, 105, 102, 32, 112, 110, 103, 99, 114, 117, 115, 104, 32, 97, 112, 112, 101, 110, 100, 115, 32, 116, 104, 101, 32, 119, 114, 111, 110, 103, 32, 107, 105, 110, 100, 32, 111, 102, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str388 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 108, 97, 115, 104, 32, 111, 114, 32, 98, 97, 99, 107, 115, 108, 97, 115, 104, 44, 32, 112, 108, 101, 97, 115, 101, 32, 105, 110, 99, 108, 117, 100, 101, 32, 116, 104, 101, 32, 99, 111, 114, 114, 101, 99, 116, 32, 111, 110, 101, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str389 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 97, 116, 32, 116, 104, 101, 32, 101, 110, 100, 32, 111, 102, 32, 116, 104, 101, 32, 100, 105, 114, 101, 99, 116, 111, 114, 121, 95, 110, 97, 109, 101, 44, 32, 97, 115, 32, 115, 104, 111, 119, 110, 46, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str390 = allocate([ 80, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str391 = allocate([ 32, 45, 100, 111, 117, 98, 108, 101, 95, 103, 97, 109, 109, 97, 32, 40, 117, 115, 101, 100, 32, 102, 111, 114, 32, 102, 105, 120, 105, 110, 103, 32, 103, 97, 109, 109, 97, 32, 105, 110, 32, 80, 104, 111, 116, 111, 83, 104, 111, 112, 32, 53, 46, 48, 47, 53, 46, 48, 50, 32, 102, 105, 108, 101, 115, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str392 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 73, 116, 32, 104, 97, 115, 32, 98, 101, 101, 110, 32, 99, 108, 97, 105, 109, 101, 100, 32, 116, 104, 97, 116, 32, 116, 104, 101, 32, 80, 83, 53, 32, 98, 117, 103, 32, 105, 115, 32, 97, 99, 116, 117, 97, 108, 108, 121, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str393 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 109, 111, 114, 101, 32, 99, 111, 109, 112, 108, 101, 120, 32, 116, 104, 97, 110, 32, 116, 104, 97, 116, 44, 32, 105, 110, 32, 115, 111, 109, 101, 32, 117, 110, 115, 112, 101, 99, 105, 102, 105, 101, 100, 32, 119, 97, 121, 46, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str394 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 45, 101, 32, 101, 120, 116, 101, 110, 115, 105, 111, 110, 32, 32, 40, 117, 115, 101, 100, 32, 102, 111, 114, 32, 99, 114, 101, 97, 116, 105, 110, 103, 32, 111, 117, 116, 112, 117, 116, 32, 102, 105, 108, 101, 110, 97, 109, 101, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str395 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 46, 103, 46, 44, 32, 45, 101, 120, 116, 32, 46, 110, 101, 119, 32, 109, 101, 97, 110, 115, 32, 42, 46, 112, 110, 103, 32, 61, 62, 32, 42, 46, 110, 101, 119, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str396 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 97, 110, 100, 32, 45, 101, 32, 95, 67, 46, 112, 110, 103, 32, 109, 101, 97, 110, 115, 32, 42, 46, 112, 110, 103, 32, 61, 62, 32, 42, 95, 67, 46, 112, 110, 103, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str397 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 45, 102, 32, 117, 115, 101, 114, 95, 102, 105, 108, 116, 101, 114, 32, 91, 48, 45, 53, 93, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str398 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 105, 108, 116, 101, 114, 32, 116, 111, 32, 117, 115, 101, 32, 119, 105, 116, 104, 32, 116, 104, 101, 32, 109, 101, 116, 104, 111, 100, 32, 115, 112, 101, 99, 105, 102, 105, 101, 100, 32, 105, 110, 32, 116, 104, 101, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str399 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 112, 114, 101, 99, 101, 100, 105, 110, 103, 32, 39, 45, 109, 32, 109, 101, 116, 104, 111, 100, 39, 32, 111, 114, 32, 39, 45, 98, 114, 117, 116, 101, 95, 102, 111, 114, 99, 101, 39, 32, 97, 114, 103, 117, 109, 101, 110, 116, 46, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str400 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 48, 58, 32, 110, 111, 110, 101, 59, 32, 49, 45, 52, 58, 32, 117, 115, 101, 32, 115, 112, 101, 99, 105, 102, 105, 101, 100, 32, 102, 105, 108, 116, 101, 114, 59, 32, 53, 58, 32, 97, 100, 97, 112, 116, 105, 118, 101, 46, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str401 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 45, 102, 105, 120, 32, 40, 102, 105, 120, 32, 111, 116, 104, 101, 114, 119, 105, 115, 101, 32, 102, 97, 116, 97, 108, 32, 99, 111, 110, 100, 105, 116, 105, 111, 110, 115, 32, 115, 117, 99, 104, 32, 97, 115, 32, 98, 97, 100, 32, 67, 82, 67, 115, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str402 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 45, 102, 111, 114, 99, 101, 32, 40, 119, 114, 105, 116, 101, 32, 97, 32, 110, 101, 119, 32, 111, 117, 116, 112, 117, 116, 32, 102, 105, 108, 101, 32, 101, 118, 101, 110, 32, 105, 102, 32, 108, 97, 114, 103, 101, 114, 32, 116, 104, 97, 110, 32, 105, 110, 112, 117, 116, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str403 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 79, 116, 104, 101, 114, 119, 105, 115, 101, 32, 116, 104, 101, 32, 105, 110, 112, 117, 116, 32, 102, 105, 108, 101, 32, 119, 105, 108, 108, 32, 98, 101, 32, 99, 111, 112, 105, 101, 100, 32, 116, 111, 32, 111, 117, 116, 112, 117, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str404 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 105, 116, 32, 105, 115, 32, 115, 109, 97, 108, 108, 101, 114, 32, 116, 104, 97, 110, 32, 97, 110, 121, 32, 103, 101, 110, 101, 114, 97, 116, 101, 100, 32, 102, 105, 108, 101, 32, 97, 110, 100, 32, 110, 111, 32, 99, 104, 117, 110, 107, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str405 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 97, 100, 100, 105, 116, 105, 111, 110, 115, 44, 32, 114, 101, 109, 111, 118, 97, 108, 115, 44, 32, 111, 114, 32, 99, 104, 97, 110, 103, 101, 115, 32, 119, 101, 114, 101, 32, 114, 101, 113, 117, 101, 115, 116, 101, 100, 46, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str406 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 45, 103, 32, 103, 97, 109, 109, 97, 32, 40, 102, 108, 111, 97, 116, 32, 111, 114, 32, 102, 105, 120, 101, 100, 42, 49, 48, 48, 48, 48, 48, 44, 32, 101, 46, 103, 46, 44, 32, 48, 46, 52, 53, 52, 53, 53, 32, 111, 114, 32, 52, 53, 52, 53, 53, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str407 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 86, 97, 108, 117, 101, 32, 116, 111, 32, 105, 110, 115, 101, 114, 116, 32, 105, 110, 32, 103, 65, 77, 65, 32, 99, 104, 117, 110, 107, 44, 32, 111, 110, 108, 121, 32, 105, 102, 32, 116, 104, 101, 32, 105, 110, 112, 117, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str408 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 105, 108, 101, 32, 104, 97, 115, 32, 110, 111, 32, 103, 65, 77, 65, 32, 99, 104, 117, 110, 107, 46, 32, 32, 84, 111, 32, 114, 101, 112, 108, 97, 99, 101, 32, 97, 110, 32, 101, 120, 105, 115, 116, 105, 110, 103, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str409 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 103, 65, 77, 65, 32, 99, 104, 117, 110, 107, 44, 32, 117, 115, 101, 32, 116, 104, 101, 32, 39, 45, 114, 101, 112, 108, 97, 99, 101, 95, 103, 97, 109, 109, 97, 39, 32, 111, 112, 116, 105, 111, 110, 46, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str410 = allocate([ 32, 32, 32, 32, 32, 32, 45, 104, 117, 102, 102, 109, 97, 110, 32, 40, 117, 115, 101, 32, 111, 110, 108, 121, 32, 122, 108, 105, 98, 32, 115, 116, 114, 97, 116, 101, 103, 121, 32, 50, 44, 32, 72, 117, 102, 102, 109, 97, 110, 45, 111, 110, 108, 121, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str411 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 70, 97, 115, 116, 44, 32, 98, 117, 116, 32, 97, 108, 109, 111, 115, 116, 32, 110, 101, 118, 101, 114, 32, 118, 101, 114, 121, 32, 101, 102, 102, 101, 99, 116, 105, 118, 101, 32, 101, 120, 99, 101, 112, 116, 32, 102, 111, 114, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str412 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 99, 101, 114, 116, 97, 105, 110, 32, 114, 97, 114, 101, 32, 105, 109, 97, 103, 101, 32, 116, 121, 112, 101, 115, 46, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str413 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 45, 105, 99, 99, 112, 32, 108, 101, 110, 103, 116, 104, 32, 34, 80, 114, 111, 102, 105, 108, 101, 32, 78, 97, 109, 101, 34, 32, 105, 99, 99, 112, 95, 102, 105, 108, 101, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str414 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 105, 108, 101, 32, 119, 105, 116, 104, 32, 73, 67, 67, 32, 112, 114, 111, 102, 105, 108, 101, 32, 116, 111, 32, 105, 110, 115, 101, 114, 116, 32, 105, 110, 32, 97, 110, 32, 105, 67, 67, 80, 32, 99, 104, 117, 110, 107, 46, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str415 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 45, 105, 116, 120, 116, 32, 98, 91, 101, 102, 111, 114, 101, 95, 73, 68, 65, 84, 93, 124, 97, 91, 102, 116, 101, 114, 95, 73, 68, 65, 84, 93, 32, 34, 107, 101, 121, 119, 111, 114, 100, 34, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str416 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 34, 108, 97, 110, 103, 117, 97, 103, 101, 95, 99, 111, 100, 101, 34, 32, 34, 116, 114, 97, 110, 115, 108, 97, 116, 101, 100, 95, 107, 101, 121, 119, 111, 114, 100, 34, 32, 34, 116, 101, 120, 116, 34, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str417 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 85, 110, 99, 111, 109, 112, 114, 101, 115, 115, 101, 100, 32, 105, 84, 88, 116, 32, 99, 104, 117, 110, 107, 32, 116, 111, 32, 105, 110, 115, 101, 114, 116, 32, 40, 115, 101, 101, 32, 45, 116, 101, 120, 116, 41, 46, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str418 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 45, 107, 101, 101, 112, 32, 99, 104, 117, 110, 107, 95, 110, 97, 109, 101, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str419 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 107, 101, 101, 112, 32, 110, 97, 109, 101, 100, 32, 99, 104, 117, 110, 107, 32, 101, 118, 101, 110, 32, 119, 104, 101, 110, 32, 112, 110, 103, 99, 114, 117, 115, 104, 32, 109, 97, 107, 101, 115, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str420 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 99, 104, 97, 110, 103, 101, 115, 32, 116, 111, 32, 116, 104, 101, 32, 80, 78, 71, 32, 100, 97, 116, 97, 115, 116, 114, 101, 97, 109, 32, 116, 104, 97, 116, 32, 99, 97, 117, 115, 101, 32, 105, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str421 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 111, 32, 98, 101, 99, 111, 109, 101, 32, 105, 110, 118, 97, 108, 105, 100, 46, 32, 32, 67, 117, 114, 114, 101, 110, 116, 108, 121, 32, 111, 110, 108, 121, 32, 100, 83, 73, 71, 32, 105, 115, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str422 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 99, 111, 103, 110, 105, 122, 101, 100, 32, 97, 115, 32, 97, 32, 99, 104, 117, 110, 107, 32, 116, 111, 32, 98, 101, 32, 107, 101, 112, 116, 46, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str423 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 45, 108, 32, 122, 108, 105, 98, 95, 99, 111, 109, 112, 114, 101, 115, 115, 105, 111, 110, 95, 108, 101, 118, 101, 108, 32, 91, 48, 45, 57, 93, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str424 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 122, 108, 105, 98, 32, 99, 111, 109, 112, 114, 101, 115, 115, 105, 111, 110, 32, 108, 101, 118, 101, 108, 32, 116, 111, 32, 117, 115, 101, 32, 119, 105, 116, 104, 32, 109, 101, 116, 104, 111, 100, 32, 115, 112, 101, 99, 105, 102, 105, 101, 100, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str425 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 119, 105, 116, 104, 32, 116, 104, 101, 32, 112, 114, 101, 99, 101, 100, 105, 110, 103, 32, 39, 45, 109, 32, 109, 101, 116, 104, 111, 100, 39, 32, 111, 114, 32, 39, 45, 98, 114, 117, 116, 101, 95, 102, 111, 114, 99, 101, 39, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str426 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 97, 114, 103, 117, 109, 101, 110, 116, 46, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str427 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 45, 108, 111, 99, 111, 32, 40, 34, 108, 111, 99, 111, 32, 99, 114, 117, 115, 104, 34, 32, 116, 114, 117, 101, 99, 111, 108, 111, 114, 32, 80, 78, 71, 115, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str428 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 77, 97, 107, 101, 32, 116, 104, 101, 32, 102, 105, 108, 101, 32, 109, 111, 114, 101, 32, 99, 111, 109, 112, 114, 101, 115, 115, 105, 98, 108, 101, 32, 98, 121, 32, 112, 101, 114, 102, 111, 114, 109, 105, 110, 103, 32, 97, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str429 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 108, 111, 115, 115, 108, 101, 115, 115, 44, 32, 114, 101, 118, 101, 114, 115, 105, 98, 108, 101, 44, 32, 99, 111, 108, 111, 114, 32, 116, 114, 97, 110, 115, 102, 111, 114, 109, 97, 116, 105, 111, 110, 46, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str430 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 84, 104, 101, 32, 114, 101, 115, 117, 108, 116, 105, 110, 103, 32, 102, 105, 108, 101, 32, 105, 115, 32, 97, 32, 77, 78, 71, 44, 32, 110, 111, 116, 32, 97, 32, 80, 78, 71, 44, 32, 97, 110, 100, 32, 115, 104, 111, 117, 108, 100, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str431 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 101, 32, 103, 105, 118, 101, 110, 32, 116, 104, 101, 32, 34, 46, 109, 110, 103, 34, 32, 102, 105, 108, 101, 32, 101, 120, 116, 101, 110, 115, 105, 111, 110, 46, 32, 32, 84, 104, 101, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str432 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 34, 108, 111, 99, 111, 34, 32, 111, 112, 116, 105, 111, 110, 32, 104, 97, 115, 32, 110, 111, 32, 101, 102, 102, 101, 99, 116, 32, 111, 110, 32, 103, 114, 97, 121, 115, 99, 97, 108, 101, 32, 111, 114, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str433 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 100, 101, 120, 101, 100, 45, 99, 111, 108, 111, 114, 32, 80, 78, 71, 32, 102, 105, 108, 101, 115, 46, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str434 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 45, 109, 32, 109, 101, 116, 104, 111, 100, 32, 91, 48, 32, 116, 104, 114, 111, 117, 103, 104, 32, 50, 48, 48, 93, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str435 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 112, 110, 103, 99, 114, 117, 115, 104, 32, 109, 101, 116, 104, 111, 100, 32, 116, 111, 32, 116, 114, 121, 32, 40, 48, 32, 109, 101, 97, 110, 115, 32, 116, 114, 121, 32, 97, 108, 108, 32, 111, 102, 32, 49, 45, 49, 48, 41, 46, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str436 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 67, 97, 110, 32, 98, 101, 32, 114, 101, 112, 101, 97, 116, 101, 100, 32, 97, 115, 32, 105, 110, 32, 39, 45, 109, 32, 49, 32, 45, 109, 32, 52, 32, 45, 109, 32, 55, 39, 46, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str437 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 84, 104, 105, 115, 32, 99, 97, 110, 32, 98, 101, 32, 117, 115, 101, 102, 117, 108, 32, 105, 102, 32, 112, 110, 103, 99, 114, 117, 115, 104, 32, 114, 117, 110, 115, 32, 111, 117, 116, 32, 111, 102, 32, 109, 101, 109, 111, 114, 121, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str438 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 119, 104, 101, 110, 32, 105, 116, 32, 116, 114, 105, 101, 115, 32, 109, 101, 116, 104, 111, 100, 115, 32, 50, 44, 32, 51, 44, 32, 53, 44, 32, 54, 44, 32, 56, 44, 32, 57, 44, 32, 111, 114, 32, 49, 48, 32, 119, 104, 105, 99, 104, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str439 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 117, 115, 101, 32, 102, 105, 108, 116, 101, 114, 105, 110, 103, 32, 97, 110, 100, 32, 97, 114, 101, 32, 109, 101, 109, 111, 114, 121, 45, 105, 110, 116, 101, 110, 115, 105, 118, 101, 46, 32, 32, 77, 101, 116, 104, 111, 100, 115, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str440 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 49, 44, 32, 52, 44, 32, 97, 110, 100, 32, 55, 32, 117, 115, 101, 32, 110, 111, 32, 102, 105, 108, 116, 101, 114, 105, 110, 103, 59, 32, 109, 101, 116, 104, 111, 100, 115, 32, 49, 49, 32, 97, 110, 100, 32, 117, 112, 32, 117, 115, 101, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str441 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 112, 101, 99, 105, 102, 105, 101, 100, 32, 102, 105, 108, 116, 101, 114, 44, 32, 99, 111, 109, 112, 114, 101, 115, 115, 105, 111, 110, 32, 108, 101, 118, 101, 108, 44, 32, 97, 110, 100, 32, 115, 116, 114, 97, 116, 101, 103, 121, 46, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str442 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 45, 109, 97, 120, 32, 109, 97, 120, 105, 109, 117, 109, 95, 73, 68, 65, 84, 95, 115, 105, 122, 101, 32, 91, 100, 101, 102, 97, 117, 108, 116, 32, 56, 49, 57, 50, 93, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str443 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 45, 109, 110, 103, 32, 40, 119, 114, 105, 116, 101, 32, 97, 32, 110, 101, 119, 32, 77, 78, 71, 44, 32, 100, 111, 32, 110, 111, 116, 32, 99, 114, 117, 115, 104, 32, 101, 109, 98, 101, 100, 100, 101, 100, 32, 80, 78, 71, 115, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str444 = allocate([ 32, 45, 110, 101, 119, 116, 105, 109, 101, 115, 116, 97, 109, 112, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str445 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 82, 101, 115, 101, 116, 32, 102, 105, 108, 101, 32, 109, 111, 100, 105, 102, 105, 99, 97, 116, 105, 111, 110, 32, 116, 105, 109, 101, 32, 91, 100, 101, 102, 97, 117, 108, 116, 93, 46, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str446 = allocate([ 32, 32, 45, 110, 111, 102, 105, 108, 101, 99, 104, 101, 99, 107, 32, 40, 100, 111, 32, 110, 111, 116, 32, 99, 104, 101, 99, 107, 32, 102, 111, 114, 32, 105, 110, 102, 105, 108, 101, 46, 112, 110, 103, 32, 61, 61, 32, 111, 117, 116, 102, 105, 108, 101, 46, 112, 110, 103, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str447 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 84, 111, 32, 97, 118, 111, 105, 100, 32, 102, 97, 108, 115, 101, 32, 104, 105, 116, 115, 32, 102, 114, 111, 109, 32, 77, 83, 86, 67, 45, 99, 111, 109, 112, 105, 108, 101, 100, 32, 99, 111, 100, 101, 46, 32, 32, 78, 111, 116, 101, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str448 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 104, 97, 116, 32, 105, 102, 32, 121, 111, 117, 32, 117, 115, 101, 32, 116, 104, 105, 115, 32, 111, 112, 116, 105, 111, 110, 44, 32, 121, 111, 117, 32, 97, 114, 101, 32, 114, 101, 115, 112, 111, 110, 115, 105, 98, 108, 101, 32, 102, 111, 114, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str449 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 110, 115, 117, 114, 105, 110, 103, 32, 116, 104, 97, 116, 32, 116, 104, 101, 32, 105, 110, 112, 117, 116, 32, 102, 105, 108, 101, 32, 105, 115, 32, 110, 111, 116, 32, 116, 104, 101, 32, 111, 117, 116, 112, 117, 116, 32, 102, 105, 108, 101, 46, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str450 = allocate([ 32, 32, 32, 32, 32, 45, 110, 111, 108, 105, 109, 105, 116, 115, 32, 40, 116, 117, 114, 110, 115, 32, 111, 102, 102, 32, 108, 105, 109, 105, 116, 115, 32, 111, 110, 32, 119, 105, 100, 116, 104, 44, 32, 104, 101, 105, 103, 104, 116, 44, 32, 99, 97, 99, 104, 101, 44, 32, 109, 97, 108, 108, 111, 99, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str451 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 73, 110, 115, 116, 101, 97, 100, 44, 32, 116, 104, 101, 32, 117, 115, 101, 114, 32, 108, 105, 109, 105, 116, 115, 32, 97, 114, 101, 32, 105, 110, 104, 101, 114, 105, 116, 101, 100, 32, 102, 114, 111, 109, 32, 108, 105, 98, 112, 110, 103, 46, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str452 = allocate([ 32, 45, 111, 108, 100, 116, 105, 109, 101, 115, 116, 97, 109, 112, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str453 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 111, 110, 39, 116, 32, 114, 101, 115, 101, 116, 32, 102, 105, 108, 101, 32, 109, 111, 100, 105, 102, 105, 99, 97, 116, 105, 111, 110, 32, 116, 105, 109, 101, 46, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str454 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 45, 111, 119, 32, 40, 79, 118, 101, 114, 119, 114, 105, 116, 101, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str455 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 79, 118, 101, 114, 119, 114, 105, 116, 101, 32, 116, 104, 101, 32, 105, 110, 112, 117, 116, 32, 102, 105, 108, 101, 46, 32, 32, 84, 104, 101, 32, 105, 110, 112, 117, 116, 32, 102, 105, 108, 101, 32, 105, 115, 32, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str456 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 109, 111, 118, 101, 100, 32, 97, 110, 100, 32, 116, 104, 101, 32, 111, 117, 116, 112, 117, 116, 32, 102, 105, 108, 101, 32, 40, 100, 101, 102, 97, 117, 108, 116, 32, 34, 112, 110, 103, 111, 117, 116, 46, 112, 110, 103, 34, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str457 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 115, 32, 114, 101, 110, 97, 109, 101, 100, 32, 116, 111, 32, 116, 104, 101, 32, 105, 110, 112, 117, 116, 32, 102, 105, 108, 101, 32, 97, 102, 116, 101, 114, 32, 114, 101, 99, 111, 109, 112, 114, 101, 115, 115, 105, 111, 110, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str458 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 97, 110, 100, 32, 116, 104, 101, 114, 101, 102, 111, 114, 101, 32, 116, 104, 101, 121, 32, 109, 117, 115, 116, 32, 114, 101, 115, 105, 100, 101, 32, 111, 110, 32, 116, 104, 101, 32, 115, 97, 109, 101, 32, 102, 105, 108, 101, 115, 121, 115, 116, 101, 109, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str459 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 45, 110, 32, 40, 110, 111, 32, 115, 97, 118, 101, 59, 32, 100, 111, 101, 115, 110, 39, 116, 32, 100, 111, 32, 99, 111, 109, 112, 114, 101, 115, 115, 105, 111, 110, 32, 111, 114, 32, 119, 114, 105, 116, 101, 32, 111, 117, 116, 112, 117, 116, 32, 80, 78, 71, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str460 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 85, 115, 101, 102, 117, 108, 32, 105, 110, 32, 99, 111, 110, 106, 117, 110, 99, 116, 105, 111, 110, 32, 119, 105, 116, 104, 32, 45, 118, 32, 111, 112, 116, 105, 111, 110, 32, 116, 111, 32, 103, 101, 116, 32, 105, 110, 102, 111, 46, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str461 = allocate([ 32, 32, 32, 32, 32, 45, 112, 108, 116, 101, 95, 108, 101, 110, 32, 110, 32, 40, 116, 114, 117, 110, 99, 97, 116, 101, 32, 117, 110, 117, 115, 101, 100, 32, 101, 110, 116, 114, 105, 101, 115, 32, 102, 114, 111, 109, 32, 116, 104, 101, 32, 116, 111, 112, 32, 111, 102, 32, 80, 76, 84, 69, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str462 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 84, 114, 117, 110, 99, 97, 116, 101, 115, 32, 116, 104, 101, 32, 80, 76, 84, 69, 46, 32, 32, 66, 101, 32, 115, 117, 114, 101, 32, 110, 111, 116, 32, 116, 111, 32, 116, 114, 117, 110, 99, 97, 116, 101, 32, 105, 116, 32, 116, 111, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str463 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 108, 101, 115, 115, 32, 116, 104, 97, 110, 32, 116, 104, 101, 32, 103, 114, 101, 97, 116, 101, 115, 116, 32, 105, 110, 100, 101, 120, 32, 112, 114, 101, 115, 101, 110, 116, 32, 105, 110, 32, 73, 68, 65, 84, 46, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str464 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 45, 113, 32, 40, 113, 117, 105, 101, 116, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str465 = allocate([ 32, 32, 32, 32, 32, 32, 32, 45, 114, 101, 100, 117, 99, 101, 32, 40, 100, 111, 32, 108, 111, 115, 115, 108, 101, 115, 115, 32, 99, 111, 108, 111, 114, 45, 116, 121, 112, 101, 32, 111, 114, 32, 98, 105, 116, 45, 100, 101, 112, 116, 104, 32, 114, 101, 100, 117, 99, 116, 105, 111, 110, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str466 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 40, 105, 102, 32, 112, 111, 115, 115, 105, 98, 108, 101, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str467 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 45, 114, 101, 109, 32, 99, 104, 117, 110, 107, 110, 97, 109, 101, 32, 40, 111, 114, 32, 34, 97, 108, 108, 97, 34, 32, 111, 114, 32, 34, 97, 108, 108, 98, 34, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str468 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 78, 97, 109, 101, 32, 111, 102, 32, 97, 110, 32, 97, 110, 99, 105, 108, 108, 97, 114, 121, 32, 99, 104, 117, 110, 107, 32, 111, 114, 32, 111, 112, 116, 105, 111, 110, 97, 108, 32, 80, 76, 84, 69, 32, 116, 111, 32, 98, 101, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str469 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 109, 111, 118, 101, 100, 46, 32, 32, 66, 101, 32, 99, 97, 114, 101, 102, 117, 108, 32, 119, 105, 116, 104, 32, 116, 104, 105, 115, 46, 32, 32, 68, 111, 110, 39, 116, 32, 117, 115, 101, 32, 116, 104, 105, 115, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str470 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 101, 97, 116, 117, 114, 101, 32, 116, 111, 32, 114, 101, 109, 111, 118, 101, 32, 116, 114, 97, 110, 115, 112, 97, 114, 101, 110, 99, 121, 44, 32, 103, 97, 109, 109, 97, 44, 32, 99, 111, 112, 121, 114, 105, 103, 104, 116, 44, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str471 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 111, 114, 32, 111, 116, 104, 101, 114, 32, 118, 97, 108, 117, 97, 98, 108, 101, 32, 105, 110, 102, 111, 114, 109, 97, 116, 105, 111, 110, 46, 32, 32, 84, 111, 32, 114, 101, 109, 111, 118, 101, 32, 115, 101, 118, 101, 114, 97, 108, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str472 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 100, 105, 102, 102, 101, 114, 101, 110, 116, 32, 99, 104, 117, 110, 107, 115, 44, 32, 114, 101, 112, 101, 97, 116, 58, 32, 45, 114, 101, 109, 32, 116, 69, 88, 116, 32, 45, 114, 101, 109, 32, 112, 72, 89, 115, 46, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str473 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 75, 110, 111, 119, 110, 32, 99, 104, 117, 110, 107, 115, 32, 40, 116, 104, 111, 115, 101, 32, 105, 110, 32, 116, 104, 101, 32, 80, 78, 71, 32, 49, 46, 49, 32, 115, 112, 101, 99, 32, 111, 114, 32, 101, 120, 116, 101, 110, 115, 105, 111, 110, 115, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str474 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 100, 111, 99, 117, 109, 101, 110, 116, 41, 32, 99, 97, 110, 32, 98, 101, 32, 110, 97, 109, 101, 100, 32, 119, 105, 116, 104, 32, 97, 108, 108, 32, 108, 111, 119, 101, 114, 45, 99, 97, 115, 101, 32, 108, 101, 116, 116, 101, 114, 115, 44, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str475 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 111, 32, 34, 45, 114, 101, 109, 32, 98, 107, 103, 100, 34, 32, 105, 115, 32, 101, 113, 117, 105, 118, 97, 108, 101, 110, 116, 32, 116, 111, 32, 34, 45, 114, 101, 109, 32, 98, 75, 71, 68, 34, 46, 32, 32, 66, 117, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str476 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 110, 111, 116, 101, 58, 32, 34, 45, 114, 101, 109, 32, 116, 101, 120, 116, 34, 32, 114, 101, 109, 111, 118, 101, 115, 32, 97, 108, 108, 32, 102, 111, 114, 109, 115, 32, 111, 102, 32, 116, 101, 120, 116, 32, 99, 104, 117, 110, 107, 115, 59, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str477 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 69, 120, 97, 99, 116, 32, 99, 97, 115, 101, 32, 105, 115, 32, 114, 101, 113, 117, 105, 114, 101, 100, 32, 116, 111, 32, 114, 101, 109, 111, 118, 101, 32, 117, 110, 107, 110, 111, 119, 110, 32, 99, 104, 117, 110, 107, 115, 46, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str478 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 84, 111, 32, 100, 111, 32, 115, 117, 114, 103, 101, 114, 121, 32, 119, 105, 116, 104, 32, 97, 32, 99, 104, 97, 105, 110, 45, 115, 97, 119, 44, 32, 34, 45, 114, 101, 109, 32, 97, 108, 108, 97, 34, 32, 114, 101, 109, 111, 118, 101, 115, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str479 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 97, 108, 108, 32, 107, 110, 111, 119, 110, 32, 97, 110, 99, 105, 108, 108, 97, 114, 121, 32, 99, 104, 117, 110, 107, 115, 32, 101, 120, 99, 101, 112, 116, 32, 102, 111, 114, 32, 116, 82, 78, 83, 44, 32, 97, 110, 100, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str480 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 34, 45, 114, 101, 109, 32, 97, 108, 108, 98, 34, 32, 114, 101, 109, 111, 118, 101, 115, 32, 97, 108, 108, 32, 98, 117, 116, 32, 116, 82, 78, 83, 32, 97, 110, 100, 32, 103, 65, 77, 65, 46, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str481 = allocate([ 45, 114, 101, 112, 108, 97, 99, 101, 95, 103, 97, 109, 109, 97, 32, 103, 97, 109, 109, 97, 32, 40, 102, 108, 111, 97, 116, 32, 111, 114, 32, 102, 105, 120, 101, 100, 42, 49, 48, 48, 48, 48, 48, 41, 32, 101, 118, 101, 110, 32, 105, 102, 32, 105, 116, 32, 105, 115, 32, 112, 114, 101, 115, 101, 110, 116, 46, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str482 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 45, 114, 101, 115, 32, 100, 112, 105, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str483 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 87, 114, 105, 116, 101, 32, 97, 32, 112, 72, 89, 115, 32, 99, 104, 117, 110, 107, 32, 119, 105, 116, 104, 32, 116, 104, 101, 32, 103, 105, 118, 101, 110, 32, 114, 101, 115, 111, 108, 117, 116, 105, 111, 110, 46, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str484 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 45, 114, 108, 101, 32, 40, 117, 115, 101, 32, 111, 110, 108, 121, 32, 122, 108, 105, 98, 32, 115, 116, 114, 97, 116, 101, 103, 121, 32, 51, 44, 32, 82, 76, 69, 45, 111, 110, 108, 121, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str485 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 65, 32, 114, 101, 108, 97, 116, 105, 118, 101, 108, 121, 32, 102, 97, 115, 116, 32, 115, 117, 98, 115, 101, 116, 32, 111, 102, 32, 116, 104, 101, 32, 34, 45, 98, 114, 117, 116, 101, 34, 32, 109, 101, 116, 104, 111, 100, 115, 44, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str486 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 103, 101, 110, 101, 114, 97, 108, 108, 121, 32, 109, 111, 114, 101, 32, 101, 102, 102, 101, 99, 116, 105, 118, 101, 32, 116, 104, 97, 110, 32, 34, 45, 104, 117, 102, 102, 109, 97, 110, 34, 32, 111, 110, 32, 80, 78, 71, 44, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str487 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 109, 97, 103, 101, 115, 32, 40, 97, 110, 100, 32, 113, 117, 105, 116, 101, 32, 101, 102, 102, 101, 99, 116, 105, 118, 101, 32, 111, 110, 32, 98, 108, 97, 99, 107, 45, 97, 110, 100, 45, 119, 104, 105, 116, 101, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str488 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 109, 97, 103, 101, 115, 41, 32, 98, 117, 116, 32, 110, 111, 116, 32, 110, 101, 99, 101, 115, 115, 97, 114, 105, 108, 121, 32, 119, 111, 114, 116, 104, 32, 116, 104, 101, 32, 98, 111, 116, 104, 101, 114, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str489 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 111, 116, 104, 101, 114, 119, 105, 115, 101, 46, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str490 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 45, 115, 97, 118, 101, 32, 40, 107, 101, 101, 112, 32, 97, 108, 108, 32, 99, 111, 112, 121, 45, 117, 110, 115, 97, 102, 101, 32, 80, 78, 71, 32, 99, 104, 117, 110, 107, 115, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str491 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 83, 97, 118, 101, 32, 111, 116, 104, 101, 114, 119, 105, 115, 101, 32, 117, 110, 107, 110, 111, 119, 110, 32, 97, 110, 99, 105, 108, 108, 97, 114, 121, 32, 99, 104, 117, 110, 107, 115, 32, 116, 104, 97, 116, 32, 119, 111, 117, 108, 100, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str492 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 101, 32, 99, 111, 110, 115, 105, 100, 101, 114, 101, 100, 32, 99, 111, 112, 121, 45, 117, 110, 115, 97, 102, 101, 46, 32, 32, 84, 104, 105, 115, 32, 111, 112, 116, 105, 111, 110, 32, 109, 97, 107, 101, 115, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str493 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 99, 104, 117, 110, 107, 115, 32, 39, 107, 110, 111, 119, 110, 39, 32, 116, 111, 32, 112, 110, 103, 99, 114, 117, 115, 104, 44, 32, 115, 111, 32, 116, 104, 101, 121, 32, 99, 97, 110, 32, 98, 101, 32, 99, 111, 112, 105, 101, 100, 46, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str494 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 73, 116, 32, 97, 108, 115, 111, 32, 99, 97, 117, 115, 101, 115, 32, 116, 104, 101, 32, 100, 83, 73, 71, 32, 99, 104, 117, 110, 107, 32, 116, 111, 32, 98, 101, 32, 115, 97, 118, 101, 100, 44, 32, 101, 118, 101, 110, 32, 119, 104, 101, 110, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str495 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 116, 32, 98, 101, 99, 111, 109, 101, 115, 32, 105, 110, 118, 97, 108, 105, 100, 32, 100, 117, 101, 32, 116, 111, 32, 100, 97, 116, 97, 115, 116, 114, 101, 97, 109, 32, 99, 104, 97, 110, 103, 101, 115, 46, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str496 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 84, 104, 105, 115, 32, 111, 112, 116, 105, 111, 110, 32, 100, 111, 101, 115, 32, 110, 111, 116, 32, 97, 102, 102, 101, 99, 116, 32, 65, 80, 78, 71, 32, 99, 104, 117, 110, 107, 115, 46, 32, 84, 104, 101, 115, 101, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str497 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 99, 104, 117, 110, 107, 115, 32, 40, 97, 99, 84, 76, 44, 32, 102, 99, 84, 76, 44, 32, 97, 110, 100, 32, 102, 100, 65, 84, 41, 32, 119, 105, 108, 108, 32, 98, 101, 32, 115, 97, 118, 101, 100, 32, 111, 110, 108, 121, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str498 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 116, 104, 101, 32, 111, 117, 116, 112, 117, 116, 32, 102, 105, 108, 101, 32, 104, 97, 115, 32, 116, 104, 101, 32, 34, 46, 97, 112, 110, 103, 34, 32, 101, 120, 116, 101, 110, 115, 105, 111, 110, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str499 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 97, 110, 100, 32, 116, 104, 101, 32, 99, 111, 108, 111, 114, 95, 116, 121, 112, 101, 32, 97, 110, 100, 32, 98, 105, 116, 95, 100, 101, 112, 116, 104, 32, 97, 114, 101, 32, 110, 111, 116, 32, 99, 104, 97, 110, 103, 101, 100, 46, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str500 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 45, 115, 114, 103, 98, 32, 91, 48, 44, 32, 49, 44, 32, 50, 44, 32, 111, 114, 32, 51, 93, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str501 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 86, 97, 108, 117, 101, 32, 111, 102, 32, 39, 114, 101, 110, 100, 101, 114, 105, 110, 103, 32, 105, 110, 116, 101, 110, 116, 39, 32, 102, 111, 114, 32, 115, 82, 71, 66, 32, 99, 104, 117, 110, 107, 46, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str502 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 45, 115, 116, 101, 114, 32, 91, 48, 32, 111, 114, 32, 49, 93, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str503 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 86, 97, 108, 117, 101, 32, 111, 102, 32, 39, 115, 116, 101, 114, 101, 111, 32, 109, 111, 100, 101, 39, 32, 102, 111, 114, 32, 115, 84, 69, 82, 32, 99, 104, 117, 110, 107, 46, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str504 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 48, 58, 32, 99, 114, 111, 115, 115, 45, 102, 117, 115, 101, 100, 59, 32, 49, 58, 32, 100, 105, 118, 101, 114, 103, 101, 110, 116, 45, 102, 117, 115, 101, 100, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str505 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 45, 116, 101, 120, 116, 32, 98, 91, 101, 102, 111, 114, 101, 95, 73, 68, 65, 84, 93, 124, 97, 91, 102, 116, 101, 114, 95, 73, 68, 65, 84, 93, 32, 34, 107, 101, 121, 119, 111, 114, 100, 34, 32, 34, 116, 101, 120, 116, 34, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str506 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 69, 88, 116, 32, 99, 104, 117, 110, 107, 32, 116, 111, 32, 105, 110, 115, 101, 114, 116, 46, 32, 32, 107, 101, 121, 119, 111, 114, 100, 32, 60, 32, 56, 48, 32, 99, 104, 97, 114, 115, 44, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str507 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 101, 120, 116, 32, 60, 32, 50, 48, 52, 56, 32, 99, 104, 97, 114, 115, 46, 32, 70, 111, 114, 32, 110, 111, 119, 44, 32, 121, 111, 117, 32, 99, 97, 110, 32, 97, 100, 100, 32, 110, 111, 32, 109, 111, 114, 101, 32, 116, 104, 97, 110, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str508 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 101, 110, 32, 116, 69, 88, 116, 44, 32, 105, 84, 88, 116, 44, 32, 111, 114, 32, 122, 84, 88, 116, 32, 99, 104, 117, 110, 107, 115, 32, 112, 101, 114, 32, 112, 110, 103, 99, 114, 117, 115, 104, 32, 114, 117, 110, 46, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str509 = allocate([ 32, 32, 32, 45, 116, 114, 110, 115, 95, 97, 114, 114, 97, 121, 32, 110, 32, 116, 114, 110, 115, 91, 48, 93, 32, 116, 114, 110, 115, 91, 49, 93, 32, 46, 46, 32, 116, 114, 110, 115, 91, 110, 45, 49, 93, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str510 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 73, 110, 115, 101, 114, 116, 32, 97, 32, 116, 82, 78, 83, 32, 99, 104, 117, 110, 107, 44, 32, 105, 102, 32, 110, 111, 32, 116, 82, 78, 83, 32, 99, 104, 117, 110, 107, 32, 102, 111, 117, 110, 100, 32, 105, 110, 32, 102, 105, 108, 101, 46, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str511 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 86, 97, 108, 117, 101, 115, 32, 97, 114, 101, 32, 102, 111, 114, 32, 116, 104, 101, 32, 116, 82, 78, 83, 32, 97, 114, 114, 97, 121, 32, 105, 110, 32, 105, 110, 100, 101, 120, 101, 100, 45, 99, 111, 108, 111, 114, 32, 80, 78, 71, 46, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str512 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 45, 116, 114, 110, 115, 32, 105, 110, 100, 101, 120, 32, 114, 101, 100, 32, 103, 114, 101, 101, 110, 32, 98, 108, 117, 101, 32, 103, 114, 97, 121, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str513 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 89, 111, 117, 32, 109, 117, 115, 116, 32, 103, 105, 118, 101, 32, 97, 108, 108, 32, 102, 105, 118, 101, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 115, 32, 114, 101, 103, 97, 114, 100, 108, 101, 115, 115, 32, 111, 102, 32, 116, 104, 101, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str514 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 99, 111, 108, 111, 114, 32, 116, 121, 112, 101, 44, 32, 115, 99, 97, 108, 101, 100, 32, 116, 111, 32, 116, 104, 101, 32, 111, 117, 116, 112, 117, 116, 32, 98, 105, 116, 32, 100, 101, 112, 116, 104, 46, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str515 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 45, 118, 32, 40, 100, 105, 115, 112, 108, 97, 121, 32, 109, 111, 114, 101, 32, 100, 101, 116, 97, 105, 108, 101, 100, 32, 105, 110, 102, 111, 114, 109, 97, 116, 105, 111, 110, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str516 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 82, 101, 112, 101, 97, 116, 32, 116, 104, 101, 32, 111, 112, 116, 105, 111, 110, 32, 40, 117, 115, 101, 32, 34, 45, 118, 32, 45, 118, 34, 41, 32, 102, 111, 114, 32, 101, 118, 101, 110, 32, 109, 111, 114, 101, 46, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str517 = allocate([ 32, 32, 32, 32, 32, 32, 45, 118, 101, 114, 115, 105, 111, 110, 32, 40, 100, 105, 115, 112, 108, 97, 121, 32, 116, 104, 101, 32, 112, 110, 103, 99, 114, 117, 115, 104, 32, 118, 101, 114, 115, 105, 111, 110, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str518 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 76, 111, 111, 107, 32, 102, 111, 114, 32, 116, 104, 101, 32, 109, 111, 115, 116, 32, 114, 101, 99, 101, 110, 116, 32, 118, 101, 114, 115, 105, 111, 110, 32, 111, 102, 32, 112, 110, 103, 99, 114, 117, 115, 104, 32, 97, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str519 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 104, 116, 116, 112, 58, 47, 47, 112, 109, 116, 46, 115, 102, 46, 110, 101, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str520 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 45, 119, 32, 99, 111, 109, 112, 114, 101, 115, 115, 105, 111, 110, 95, 119, 105, 110, 100, 111, 119, 95, 115, 105, 122, 101, 32, 91, 51, 50, 44, 32, 49, 54, 44, 32, 56, 44, 32, 52, 44, 32, 50, 44, 32, 49, 44, 32, 53, 49, 50, 93, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str521 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 83, 105, 122, 101, 32, 111, 102, 32, 116, 104, 101, 32, 115, 108, 105, 100, 105, 110, 103, 32, 99, 111, 109, 112, 114, 101, 115, 115, 105, 111, 110, 32, 119, 105, 110, 100, 111, 119, 44, 32, 105, 110, 32, 107, 98, 121, 116, 101, 115, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str522 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 40, 111, 114, 32, 98, 121, 116, 101, 115, 44, 32, 105, 110, 32, 99, 97, 115, 101, 32, 111, 102, 32, 53, 49, 50, 41, 46, 32, 32, 73, 116, 39, 115, 32, 98, 101, 115, 116, 32, 116, 111, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str523 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 117, 115, 101, 32, 116, 104, 101, 32, 100, 101, 102, 97, 117, 108, 116, 32, 40, 51, 50, 41, 32, 117, 110, 108, 101, 115, 115, 32, 121, 111, 117, 32, 114, 117, 110, 32, 111, 117, 116, 32, 111, 102, 32, 109, 101, 109, 111, 114, 121, 46, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str524 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 84, 104, 101, 32, 112, 114, 111, 103, 114, 97, 109, 32, 119, 105, 108, 108, 32, 117, 115, 101, 32, 97, 32, 115, 109, 97, 108, 108, 101, 114, 32, 119, 105, 110, 100, 111, 119, 32, 97, 110, 121, 119, 97, 121, 32, 119, 104, 101, 110, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str525 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 104, 101, 32, 117, 110, 99, 111, 109, 112, 114, 101, 115, 115, 101, 100, 32, 102, 105, 108, 101, 32, 105, 115, 32, 115, 109, 97, 108, 108, 101, 114, 32, 116, 104, 97, 110, 32, 49, 54, 107, 46, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str526 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 45, 122, 32, 122, 108, 105, 98, 95, 115, 116, 114, 97, 116, 101, 103, 121, 32, 91, 48, 44, 32, 49, 44, 32, 50, 44, 32, 111, 114, 32, 51, 93, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str527 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 122, 108, 105, 98, 32, 99, 111, 109, 112, 114, 101, 115, 115, 105, 111, 110, 32, 115, 116, 114, 97, 116, 101, 103, 121, 32, 116, 111, 32, 117, 115, 101, 32, 119, 105, 116, 104, 32, 116, 104, 101, 32, 112, 114, 101, 99, 101, 100, 105, 110, 103, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str528 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 39, 45, 109, 32, 109, 101, 116, 104, 111, 100, 39, 32, 97, 114, 103, 117, 109, 101, 110, 116, 46, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str529 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 45, 122, 109, 101, 109, 32, 122, 108, 105, 98, 95, 99, 111, 109, 112, 114, 101, 115, 115, 105, 111, 110, 95, 109, 101, 109, 95, 108, 101, 118, 101, 108, 32, 91, 49, 45, 57, 44, 32, 100, 101, 102, 97, 117, 108, 116, 32, 57, 93, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str530 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 45, 122, 105, 116, 120, 116, 32, 98, 124, 97, 32, 34, 107, 101, 121, 119, 111, 114, 100, 34, 32, 34, 108, 99, 111, 100, 101, 34, 32, 34, 116, 107, 101, 121, 34, 32, 34, 116, 101, 120, 116, 34, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str531 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 40, 119, 104, 101, 114, 101, 32, 34, 108, 99, 111, 100, 101, 34, 61, 61, 108, 97, 110, 103, 117, 97, 103, 101, 95, 99, 111, 100, 101, 32, 97, 110, 100, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str532 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 34, 116, 107, 101, 121, 34, 61, 61, 116, 114, 97, 110, 115, 108, 97, 116, 101, 100, 95, 107, 101, 121, 119, 111, 114, 100, 41, 34, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str533 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 67, 111, 109, 112, 114, 101, 115, 115, 101, 100, 32, 105, 84, 88, 116, 32, 99, 104, 117, 110, 107, 32, 116, 111, 32, 105, 110, 115, 101, 114, 116, 32, 40, 115, 101, 101, 32, 45, 116, 101, 120, 116, 41, 46, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str534 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 45, 122, 116, 120, 116, 32, 98, 91, 101, 102, 111, 114, 101, 95, 73, 68, 65, 84, 93, 124, 97, 91, 102, 116, 101, 114, 95, 73, 68, 65, 84, 93, 32, 34, 107, 101, 121, 119, 111, 114, 100, 34, 32, 34, 116, 101, 120, 116, 34, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str535 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 122, 84, 88, 116, 32, 99, 104, 117, 110, 107, 32, 116, 111, 32, 105, 110, 115, 101, 114, 116, 32, 40, 115, 101, 101, 32, 45, 116, 101, 120, 116, 41, 46, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str536 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 45, 104, 32, 40, 104, 101, 108, 112, 32, 97, 110, 100, 32, 108, 101, 103, 97, 108, 32, 110, 111, 116, 105, 99, 101, 115, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str537 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 105, 115, 112, 108, 97, 121, 32, 116, 104, 105, 115, 32, 105, 110, 102, 111, 114, 109, 97, 116, 105, 111, 110, 46, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str538 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 45, 112, 32, 40, 112, 97, 117, 115, 101, 41, 0 ], "i8", ALLOC_STATIC);

_pngcrush_options = allocate([ 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0 ], ALLOC_STATIC);

_pngcrush_legal = allocate(128, "*", ALLOC_STATIC);

STRING_TABLE.__str539 = allocate([ 10, 111, 112, 116, 105, 111, 110, 115, 32, 40, 78, 111, 116, 101, 58, 32, 97, 110, 121, 32, 111, 112, 116, 105, 111, 110, 32, 99, 97, 110, 32, 98, 101, 32, 115, 112, 101, 108, 108, 101, 100, 32, 111, 117, 116, 32, 102, 111, 114, 32, 99, 108, 97, 114, 105, 116, 121, 44, 32, 101, 46, 103, 46, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 34, 112, 110, 103, 99, 114, 117, 115, 104, 32, 45, 100, 105, 114, 32, 78, 101, 119, 32, 45, 109, 101, 116, 104, 111, 100, 32, 55, 32, 45, 114, 101, 109, 111, 118, 101, 32, 98, 107, 103, 100, 32, 42, 46, 112, 110, 103, 34, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 115, 32, 116, 104, 101, 32, 115, 97, 109, 101, 32, 97, 115, 32, 34, 112, 110, 103, 99, 114, 117, 115, 104, 32, 45, 100, 32, 78, 101, 119, 47, 32, 45, 109, 32, 55, 32, 45, 114, 101, 109, 32, 98, 107, 103, 100, 32, 42, 46, 112, 110, 103, 34, 41, 58, 10, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str540 = allocate([ 111, 112, 116, 105, 111, 110, 115, 58, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str541 = allocate([ 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 87, 97, 105, 116, 32, 102, 111, 114, 32, 91, 101, 110, 116, 101, 114, 93, 32, 107, 101, 121, 32, 98, 101, 102, 111, 114, 101, 32, 99, 111, 110, 116, 105, 110, 117, 105, 110, 103, 32, 100, 105, 115, 112, 108, 97, 121, 46, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 46, 103, 46, 44, 32, 116, 121, 112, 101, 32, 39, 37, 115, 32, 45, 112, 97, 117, 115, 101, 32, 45, 104, 101, 108, 112, 39, 44, 32, 105, 102, 32, 116, 104, 101, 32, 104, 101, 108, 112, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 99, 114, 101, 101, 110, 32, 115, 99, 114, 111, 108, 108, 115, 32, 111, 117, 116, 32, 111, 102, 32, 115, 105, 103, 104, 116, 46, 10, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str542 = allocate([ 10, 117, 115, 97, 103, 101, 58, 32, 37, 115, 32, 91, 111, 112, 116, 105, 111, 110, 115, 93, 32, 105, 110, 102, 105, 108, 101, 46, 112, 110, 103, 32, 111, 117, 116, 102, 105, 108, 101, 46, 112, 110, 103, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str543 = allocate([ 32, 32, 32, 32, 32, 32, 32, 37, 115, 32, 45, 101, 32, 101, 120, 116, 32, 91, 111, 116, 104, 101, 114, 32, 111, 112, 116, 105, 111, 110, 115, 93, 32, 102, 105, 108, 101, 115, 46, 112, 110, 103, 32, 46, 46, 46, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str544 = allocate([ 32, 32, 32, 32, 32, 32, 32, 37, 115, 32, 45, 100, 32, 100, 105, 114, 47, 32, 91, 111, 116, 104, 101, 114, 32, 111, 112, 116, 105, 111, 110, 115, 93, 32, 102, 105, 108, 101, 115, 46, 112, 110, 103, 32, 46, 46, 46, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str545 = allocate([ 73, 102, 32, 121, 111, 117, 32, 104, 97, 118, 101, 32, 109, 111, 100, 105, 102, 105, 101, 100, 32, 116, 104, 105, 115, 32, 115, 111, 117, 114, 99, 101, 44, 32, 121, 111, 117, 32, 109, 97, 121, 32, 105, 110, 115, 101, 114, 116, 32, 97, 100, 100, 105, 116, 105, 111, 110, 97, 108, 32, 110, 111, 116, 105, 99, 101, 115, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str546 = allocate([ 105, 109, 109, 101, 100, 105, 97, 116, 101, 108, 121, 32, 97, 102, 116, 101, 114, 32, 116, 104, 105, 115, 32, 115, 101, 110, 116, 101, 110, 99, 101, 46, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str547 = allocate([ 67, 111, 112, 121, 114, 105, 103, 104, 116, 32, 40, 67, 41, 32, 49, 57, 57, 56, 45, 50, 48, 48, 50, 44, 50, 48, 48, 54, 45, 50, 48, 49, 50, 32, 71, 108, 101, 110, 110, 32, 82, 97, 110, 100, 101, 114, 115, 45, 80, 101, 104, 114, 115, 111, 110, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str548 = allocate([ 80, 111, 114, 116, 105, 111, 110, 115, 32, 99, 111, 112, 121, 114, 105, 103, 104, 116, 32, 40, 67, 41, 32, 50, 48, 48, 53, 32, 32, 32, 32, 32, 32, 32, 71, 114, 101, 103, 32, 82, 111, 101, 108, 111, 102, 115, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str549 = allocate([ 68, 73, 83, 67, 76, 65, 73, 77, 69, 82, 58, 32, 84, 104, 101, 32, 112, 110, 103, 99, 114, 117, 115, 104, 32, 99, 111, 109, 112, 117, 116, 101, 114, 32, 112, 114, 111, 103, 114, 97, 109, 32, 105, 115, 32, 115, 117, 112, 112, 108, 105, 101, 100, 32, 34, 65, 83, 32, 73, 83, 34, 46, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str550 = allocate([ 84, 104, 101, 32, 65, 117, 116, 104, 111, 114, 32, 100, 105, 115, 99, 108, 97, 105, 109, 115, 32, 97, 108, 108, 32, 119, 97, 114, 114, 97, 110, 116, 105, 101, 115, 44, 32, 101, 120, 112, 114, 101, 115, 115, 101, 100, 32, 111, 114, 32, 105, 109, 112, 108, 105, 101, 100, 44, 32, 105, 110, 99, 108, 117, 100, 105, 110, 103, 44, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str551 = allocate([ 119, 105, 116, 104, 111, 117, 116, 32, 108, 105, 109, 105, 116, 97, 116, 105, 111, 110, 44, 32, 116, 104, 101, 32, 119, 97, 114, 114, 97, 110, 116, 105, 101, 115, 32, 111, 102, 32, 109, 101, 114, 99, 104, 97, 110, 116, 97, 98, 105, 108, 105, 116, 121, 32, 97, 110, 100, 32, 111, 102, 32, 102, 105, 116, 110, 101, 115, 115, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str552 = allocate([ 102, 111, 114, 32, 32, 97, 110, 121, 32, 112, 117, 114, 112, 111, 115, 101, 46, 32, 32, 84, 104, 101, 32, 65, 117, 116, 104, 111, 114, 32, 97, 115, 115, 117, 109, 101, 115, 32, 110, 111, 32, 108, 105, 97, 98, 105, 108, 105, 116, 121, 32, 102, 111, 114, 32, 100, 105, 114, 101, 99, 116, 44, 32, 105, 110, 100, 105, 114, 101, 99, 116, 44, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str553 = allocate([ 105, 110, 99, 105, 100, 101, 110, 116, 97, 108, 44, 32, 115, 112, 101, 99, 105, 97, 108, 44, 32, 101, 120, 101, 109, 112, 108, 97, 114, 121, 44, 32, 111, 114, 32, 99, 111, 110, 115, 101, 113, 117, 101, 110, 116, 105, 97, 108, 32, 100, 97, 109, 97, 103, 101, 115, 44, 32, 119, 104, 105, 99, 104, 32, 109, 97, 121, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str554 = allocate([ 114, 101, 115, 117, 108, 116, 32, 102, 114, 111, 109, 32, 116, 104, 101, 32, 117, 115, 101, 32, 111, 102, 32, 116, 104, 101, 32, 99, 111, 109, 112, 117, 116, 101, 114, 32, 112, 114, 111, 103, 114, 97, 109, 44, 32, 101, 118, 101, 110, 32, 105, 102, 32, 97, 100, 118, 105, 115, 101, 100, 32, 111, 102, 32, 116, 104, 101, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str555 = allocate([ 112, 111, 115, 115, 105, 98, 105, 108, 105, 116, 121, 32, 111, 102, 32, 115, 117, 99, 104, 32, 100, 97, 109, 97, 103, 101, 46, 32, 32, 84, 104, 101, 114, 101, 32, 105, 115, 32, 110, 111, 32, 119, 97, 114, 114, 97, 110, 116, 121, 32, 97, 103, 97, 105, 110, 115, 116, 32, 105, 110, 116, 101, 114, 102, 101, 114, 101, 110, 99, 101, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str556 = allocate([ 119, 105, 116, 104, 32, 121, 111, 117, 114, 32, 101, 110, 106, 111, 121, 109, 101, 110, 116, 32, 111, 102, 32, 116, 104, 101, 32, 99, 111, 109, 112, 117, 116, 101, 114, 32, 112, 114, 111, 103, 114, 97, 109, 32, 111, 114, 32, 97, 103, 97, 105, 110, 115, 116, 32, 105, 110, 102, 114, 105, 110, 103, 101, 109, 101, 110, 116, 46, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str557 = allocate([ 84, 104, 101, 114, 101, 32, 105, 115, 32, 110, 111, 32, 119, 97, 114, 114, 97, 110, 116, 121, 32, 116, 104, 97, 116, 32, 109, 121, 32, 101, 102, 102, 111, 114, 116, 115, 32, 111, 114, 32, 116, 104, 101, 32, 99, 111, 109, 112, 117, 116, 101, 114, 32, 112, 114, 111, 103, 114, 97, 109, 32, 119, 105, 108, 108, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str558 = allocate([ 102, 117, 108, 102, 105, 108, 108, 32, 97, 110, 121, 32, 111, 102, 32, 121, 111, 117, 114, 32, 112, 97, 114, 116, 105, 99, 117, 108, 97, 114, 32, 112, 117, 114, 112, 111, 115, 101, 115, 32, 111, 114, 32, 110, 101, 101, 100, 115, 46, 32, 32, 84, 104, 105, 115, 32, 99, 111, 109, 112, 117, 116, 101, 114, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str559 = allocate([ 112, 114, 111, 103, 114, 97, 109, 32, 105, 115, 32, 112, 114, 111, 118, 105, 100, 101, 100, 32, 119, 105, 116, 104, 32, 97, 108, 108, 32, 102, 97, 117, 108, 116, 115, 44, 32, 97, 110, 100, 32, 116, 104, 101, 32, 101, 110, 116, 105, 114, 101, 32, 114, 105, 115, 107, 32, 111, 102, 32, 115, 97, 116, 105, 115, 102, 97, 99, 116, 111, 114, 121, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str560 = allocate([ 113, 117, 97, 108, 105, 116, 121, 44, 32, 112, 101, 114, 102, 111, 114, 109, 97, 110, 99, 101, 44, 32, 97, 99, 99, 117, 114, 97, 99, 121, 44, 32, 97, 110, 100, 32, 101, 102, 102, 111, 114, 116, 32, 105, 115, 32, 119, 105, 116, 104, 32, 116, 104, 101, 32, 117, 115, 101, 114, 46, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str561 = allocate([ 76, 73, 67, 69, 78, 83, 69, 58, 32, 80, 101, 114, 109, 105, 115, 115, 105, 111, 110, 32, 105, 115, 32, 104, 101, 114, 101, 98, 121, 32, 105, 114, 114, 101, 118, 111, 99, 97, 98, 108, 121, 32, 103, 114, 97, 110, 116, 101, 100, 32, 116, 111, 32, 101, 118, 101, 114, 121, 111, 110, 101, 32, 116, 111, 32, 117, 115, 101, 44, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str562 = allocate([ 99, 111, 112, 121, 44, 32, 109, 111, 100, 105, 102, 121, 44, 32, 97, 110, 100, 32, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 32, 116, 104, 105, 115, 32, 99, 111, 109, 112, 117, 116, 101, 114, 32, 112, 114, 111, 103, 114, 97, 109, 44, 32, 111, 114, 32, 112, 111, 114, 116, 105, 111, 110, 115, 32, 104, 101, 114, 101, 111, 102, 44, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str563 = allocate([ 112, 117, 114, 112, 111, 115, 101, 44, 32, 119, 105, 116, 104, 111, 117, 116, 32, 112, 97, 121, 109, 101, 110, 116, 32, 111, 102, 32, 97, 110, 121, 32, 102, 101, 101, 44, 32, 115, 117, 98, 106, 101, 99, 116, 32, 116, 111, 32, 116, 104, 101, 32, 102, 111, 108, 108, 111, 119, 105, 110, 103, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str564 = allocate([ 114, 101, 115, 116, 114, 105, 99, 116, 105, 111, 110, 115, 58, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str565 = allocate([ 49, 46, 32, 84, 104, 101, 32, 111, 114, 105, 103, 105, 110, 32, 111, 102, 32, 116, 104, 105, 115, 32, 98, 105, 110, 97, 114, 121, 32, 111, 114, 32, 115, 111, 117, 114, 99, 101, 32, 99, 111, 100, 101, 32, 109, 117, 115, 116, 32, 110, 111, 116, 32, 98, 101, 32, 109, 105, 115, 114, 101, 112, 114, 101, 115, 101, 110, 116, 101, 100, 46, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str566 = allocate([ 50, 46, 32, 65, 108, 116, 101, 114, 101, 100, 32, 118, 101, 114, 115, 105, 111, 110, 115, 32, 109, 117, 115, 116, 32, 98, 101, 32, 112, 108, 97, 105, 110, 108, 121, 32, 109, 97, 114, 107, 101, 100, 32, 97, 115, 32, 115, 117, 99, 104, 32, 97, 110, 100, 32, 109, 117, 115, 116, 32, 110, 111, 116, 32, 98, 101, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str567 = allocate([ 109, 105, 115, 114, 101, 112, 114, 101, 115, 101, 110, 116, 101, 100, 32, 97, 115, 32, 98, 101, 105, 110, 103, 32, 116, 104, 101, 32, 111, 114, 105, 103, 105, 110, 97, 108, 32, 98, 105, 110, 97, 114, 121, 32, 111, 114, 32, 115, 111, 117, 114, 99, 101, 46, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str568 = allocate([ 51, 46, 32, 84, 104, 101, 32, 67, 111, 112, 121, 114, 105, 103, 104, 116, 32, 110, 111, 116, 105, 99, 101, 44, 32, 100, 105, 115, 99, 108, 97, 105, 109, 101, 114, 44, 32, 97, 110, 100, 32, 108, 105, 99, 101, 110, 115, 101, 32, 109, 97, 121, 32, 110, 111, 116, 32, 98, 101, 32, 114, 101, 109, 111, 118, 101, 100, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str569 = allocate([ 111, 114, 32, 97, 108, 116, 101, 114, 101, 100, 32, 102, 114, 111, 109, 32, 97, 110, 121, 32, 115, 111, 117, 114, 99, 101, 44, 32, 98, 105, 110, 97, 114, 121, 44, 32, 111, 114, 32, 97, 108, 116, 101, 114, 101, 100, 32, 115, 111, 117, 114, 99, 101, 32, 100, 105, 115, 116, 114, 105, 98, 117, 116, 105, 111, 110, 46, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str570 = allocate([ 84, 111, 111, 32, 109, 97, 110, 121, 32, 73, 68, 65, 84, 39, 115, 32, 102, 111, 117, 110, 100, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str571 = allocate([ 10, 73, 110, 32, 37, 115, 44, 32, 99, 111, 114, 114, 101, 99, 116, 105, 110, 103, 32, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str572 = allocate([ 112, 110, 103, 111, 117, 116, 46, 112, 110, 103, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str573 = allocate([ 112, 110, 103, 116, 101, 115, 116, 46, 112, 110, 103, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str574 = allocate([ 109, 110, 103, 111, 117, 116, 46, 109, 110, 103, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str575 = allocate([ 95, 67, 46, 112, 110, 103, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str576 = allocate([ 112, 110, 103, 99, 114, 117, 115, 104, 46, 98, 97, 107, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str279 = allocate([ 84, 111, 111, 32, 109, 97, 110, 121, 32, 98, 121, 116, 101, 115, 32, 102, 111, 114, 32, 80, 78, 71, 32, 115, 105, 103, 110, 97, 116, 117, 114, 101, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str1280 = allocate([ 80, 111, 116, 101, 110, 116, 105, 97, 108, 32, 111, 118, 101, 114, 102, 108, 111, 119, 32, 105, 110, 32, 112, 110, 103, 95, 122, 97, 108, 108, 111, 99, 40, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str9288 = allocate([ 32, 108, 105, 98, 112, 110, 103, 32, 118, 101, 114, 115, 105, 111, 110, 32, 49, 46, 53, 46, 49, 48, 32, 45, 32, 77, 97, 114, 99, 104, 32, 50, 57, 44, 32, 50, 48, 49, 50, 10, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str10289 = allocate([ 73, 103, 110, 111, 114, 105, 110, 103, 32, 97, 116, 116, 101, 109, 112, 116, 32, 116, 111, 32, 115, 101, 116, 32, 110, 101, 103, 97, 116, 105, 118, 101, 32, 99, 104, 114, 111, 109, 97, 116, 105, 99, 105, 116, 121, 32, 118, 97, 108, 117, 101, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str11290 = allocate([ 73, 110, 118, 97, 108, 105, 100, 32, 99, 72, 82, 77, 32, 119, 104, 105, 116, 101, 32, 112, 111, 105, 110, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str12291 = allocate([ 73, 110, 118, 97, 108, 105, 100, 32, 99, 72, 82, 77, 32, 114, 101, 100, 32, 112, 111, 105, 110, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str13292 = allocate([ 73, 110, 118, 97, 108, 105, 100, 32, 99, 72, 82, 77, 32, 103, 114, 101, 101, 110, 32, 112, 111, 105, 110, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str14293 = allocate([ 73, 110, 118, 97, 108, 105, 100, 32, 99, 72, 82, 77, 32, 98, 108, 117, 101, 32, 112, 111, 105, 110, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str15294 = allocate([ 73, 103, 110, 111, 114, 105, 110, 103, 32, 97, 116, 116, 101, 109, 112, 116, 32, 116, 111, 32, 115, 101, 116, 32, 99, 72, 82, 77, 32, 82, 71, 66, 32, 116, 114, 105, 97, 110, 103, 108, 101, 32, 119, 105, 116, 104, 32, 122, 101, 114, 111, 32, 97, 114, 101, 97, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str16295 = allocate([ 101, 120, 116, 114, 101, 109, 101, 32, 99, 72, 82, 77, 32, 99, 104, 117, 110, 107, 32, 99, 97, 110, 110, 111, 116, 32, 98, 101, 32, 99, 111, 110, 118, 101, 114, 116, 101, 100, 32, 116, 111, 32, 116, 114, 105, 115, 116, 105, 109, 117, 108, 117, 115, 32, 118, 97, 108, 117, 101, 115, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str17296 = allocate([ 105, 110, 116, 101, 114, 110, 97, 108, 32, 101, 114, 114, 111, 114, 32, 105, 110, 32, 112, 110, 103, 95, 88, 89, 90, 95, 102, 114, 111, 109, 95, 120, 121, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str18297 = allocate([ 73, 109, 97, 103, 101, 32, 119, 105, 100, 116, 104, 32, 105, 115, 32, 122, 101, 114, 111, 32, 105, 110, 32, 73, 72, 68, 82, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str19298 = allocate([ 73, 109, 97, 103, 101, 32, 104, 101, 105, 103, 104, 116, 32, 105, 115, 32, 122, 101, 114, 111, 32, 105, 110, 32, 73, 72, 68, 82, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str20299 = allocate([ 73, 109, 97, 103, 101, 32, 119, 105, 100, 116, 104, 32, 101, 120, 99, 101, 101, 100, 115, 32, 117, 115, 101, 114, 32, 108, 105, 109, 105, 116, 32, 105, 110, 32, 73, 72, 68, 82, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str21300 = allocate([ 73, 109, 97, 103, 101, 32, 104, 101, 105, 103, 104, 116, 32, 101, 120, 99, 101, 101, 100, 115, 32, 117, 115, 101, 114, 32, 108, 105, 109, 105, 116, 32, 105, 110, 32, 73, 72, 68, 82, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str22301 = allocate([ 73, 110, 118, 97, 108, 105, 100, 32, 105, 109, 97, 103, 101, 32, 119, 105, 100, 116, 104, 32, 105, 110, 32, 73, 72, 68, 82, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str23302 = allocate([ 73, 110, 118, 97, 108, 105, 100, 32, 105, 109, 97, 103, 101, 32, 104, 101, 105, 103, 104, 116, 32, 105, 110, 32, 73, 72, 68, 82, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str24303 = allocate([ 87, 105, 100, 116, 104, 32, 105, 115, 32, 116, 111, 111, 32, 108, 97, 114, 103, 101, 32, 102, 111, 114, 32, 108, 105, 98, 112, 110, 103, 32, 116, 111, 32, 112, 114, 111, 99, 101, 115, 115, 32, 112, 105, 120, 101, 108, 115, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str25304 = allocate([ 73, 110, 118, 97, 108, 105, 100, 32, 98, 105, 116, 32, 100, 101, 112, 116, 104, 32, 105, 110, 32, 73, 72, 68, 82, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str26305 = allocate([ 73, 110, 118, 97, 108, 105, 100, 32, 99, 111, 108, 111, 114, 32, 116, 121, 112, 101, 32, 105, 110, 32, 73, 72, 68, 82, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str27306 = allocate([ 73, 110, 118, 97, 108, 105, 100, 32, 99, 111, 108, 111, 114, 32, 116, 121, 112, 101, 47, 98, 105, 116, 32, 100, 101, 112, 116, 104, 32, 99, 111, 109, 98, 105, 110, 97, 116, 105, 111, 110, 32, 105, 110, 32, 73, 72, 68, 82, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str28307 = allocate([ 85, 110, 107, 110, 111, 119, 110, 32, 105, 110, 116, 101, 114, 108, 97, 99, 101, 32, 109, 101, 116, 104, 111, 100, 32, 105, 110, 32, 73, 72, 68, 82, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str29308 = allocate([ 85, 110, 107, 110, 111, 119, 110, 32, 99, 111, 109, 112, 114, 101, 115, 115, 105, 111, 110, 32, 109, 101, 116, 104, 111, 100, 32, 105, 110, 32, 73, 72, 68, 82, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str31310 = allocate([ 85, 110, 107, 110, 111, 119, 110, 32, 102, 105, 108, 116, 101, 114, 32, 109, 101, 116, 104, 111, 100, 32, 105, 110, 32, 73, 72, 68, 82, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str32311 = allocate([ 73, 110, 118, 97, 108, 105, 100, 32, 102, 105, 108, 116, 101, 114, 32, 109, 101, 116, 104, 111, 100, 32, 105, 110, 32, 73, 72, 68, 82, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str33312 = allocate([ 73, 110, 118, 97, 108, 105, 100, 32, 73, 72, 68, 82, 32, 100, 97, 116, 97, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str34313 = allocate([ 65, 83, 67, 73, 73, 32, 99, 111, 110, 118, 101, 114, 115, 105, 111, 110, 32, 98, 117, 102, 102, 101, 114, 32, 116, 111, 111, 32, 115, 109, 97, 108, 108, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str36315 = allocate([ 103, 97, 109, 109, 97, 32, 116, 97, 98, 108, 101, 32, 98, 101, 105, 110, 103, 32, 114, 101, 98, 117, 105, 108, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE._png_format_number_digits = allocate([ 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE._png_formatted_warning_valid_parameters = allocate([ 49, 50, 51, 52, 53, 54, 55, 56, 57, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str1578 = allocate([ 108, 105, 98, 112, 110, 103, 32, 119, 97, 114, 110, 105, 110, 103, 58, 32, 37, 115, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str3580 = allocate([ 108, 105, 98, 112, 110, 103, 32, 101, 114, 114, 111, 114, 58, 32, 37, 115, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str4581 = allocate([ 117, 110, 100, 101, 102, 105, 110, 101, 100, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE._png_digit = allocate([ 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str636 = allocate([ 79, 117, 116, 32, 111, 102, 32, 77, 101, 109, 111, 114, 121, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str1675 = allocate([ 122, 108, 105, 98, 32, 109, 101, 109, 111, 114, 121, 32, 101, 114, 114, 111, 114, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str2676 = allocate([ 122, 108, 105, 98, 32, 115, 116, 114, 101, 97, 109, 32, 101, 114, 114, 111, 114, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str3677 = allocate([ 122, 108, 105, 98, 32, 118, 101, 114, 115, 105, 111, 110, 32, 101, 114, 114, 111, 114, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str4678 = allocate([ 85, 110, 107, 110, 111, 119, 110, 32, 122, 108, 105, 98, 32, 101, 114, 114, 111, 114, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str5679 = allocate([ 77, 105, 115, 115, 105, 110, 103, 32, 73, 72, 68, 82, 32, 98, 101, 102, 111, 114, 101, 32, 73, 68, 65, 84, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str6680 = allocate([ 77, 105, 115, 115, 105, 110, 103, 32, 80, 76, 84, 69, 32, 98, 101, 102, 111, 114, 101, 32, 73, 68, 65, 84, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str7681 = allocate([ 73, 110, 118, 97, 108, 105, 100, 32, 97, 116, 116, 101, 109, 112, 116, 32, 116, 111, 32, 114, 101, 97, 100, 32, 114, 111, 119, 32, 100, 97, 116, 97, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str10684 = allocate([ 68, 101, 99, 111, 109, 112, 114, 101, 115, 115, 105, 111, 110, 32, 101, 114, 114, 111, 114, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str11685 = allocate([ 98, 97, 100, 32, 97, 100, 97, 112, 116, 105, 118, 101, 32, 102, 105, 108, 116, 101, 114, 32, 118, 97, 108, 117, 101, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str12686 = allocate([ 115, 101, 113, 117, 101, 110, 116, 105, 97, 108, 32, 114, 111, 119, 32, 111, 118, 101, 114, 102, 108, 111, 119, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str13687 = allocate([ 105, 110, 116, 101, 114, 110, 97, 108, 32, 115, 101, 113, 117, 101, 110, 116, 105, 97, 108, 32, 114, 111, 119, 32, 115, 105, 122, 101, 32, 99, 97, 108, 99, 117, 108, 97, 116, 105, 111, 110, 32, 101, 114, 114, 111, 114, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str15689 = allocate([ 82, 101, 97, 100, 32, 112, 97, 108, 101, 116, 116, 101, 32, 105, 110, 100, 101, 120, 32, 101, 120, 99, 101, 101, 100, 105, 110, 103, 32, 110, 117, 109, 95, 112, 97, 108, 101, 116, 116, 101, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str16690 = allocate([ 84, 111, 111, 32, 109, 97, 110, 121, 32, 73, 68, 65, 84, 115, 32, 102, 111, 117, 110, 100, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str704 = allocate([ 67, 97, 108, 108, 32, 116, 111, 32, 78, 85, 76, 76, 32, 114, 101, 97, 100, 32, 102, 117, 110, 99, 116, 105, 111, 110, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str1705 = allocate([ 82, 101, 97, 100, 32, 69, 114, 114, 111, 114, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str709 = allocate([ 67, 97, 110, 39, 116, 32, 100, 105, 115, 99, 97, 114, 100, 32, 99, 114, 105, 116, 105, 99, 97, 108, 32, 100, 97, 116, 97, 32, 111, 110, 32, 67, 82, 67, 32, 101, 114, 114, 111, 114, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str10719 = allocate([ 108, 105, 98, 112, 110, 103, 32, 100, 111, 101, 115, 32, 110, 111, 116, 32, 115, 117, 112, 112, 111, 114, 116, 32, 103, 97, 109, 109, 97, 43, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 43, 114, 103, 98, 95, 116, 111, 95, 103, 114, 97, 121, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str11720 = allocate([ 105, 110, 118, 97, 108, 105, 100, 32, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 32, 103, 97, 109, 109, 97, 32, 116, 121, 112, 101, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str12721 = allocate([ 78, 85, 76, 76, 32, 114, 111, 119, 32, 98, 117, 102, 102, 101, 114, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str13722 = allocate([ 85, 110, 105, 110, 105, 116, 105, 97, 108, 105, 122, 101, 100, 32, 114, 111, 119, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str14723 = allocate([ 112, 110, 103, 95, 100, 111, 95, 114, 103, 98, 95, 116, 111, 95, 103, 114, 97, 121, 32, 102, 111, 117, 110, 100, 32, 110, 111, 110, 103, 114, 97, 121, 32, 112, 105, 120, 101, 108, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str15724 = allocate([ 112, 110, 103, 95, 100, 111, 95, 113, 117, 97, 110, 116, 105, 122, 101, 32, 114, 101, 116, 117, 114, 110, 101, 100, 32, 114, 111, 119, 98, 121, 116, 101, 115, 61, 48, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str16725 = allocate([ 112, 110, 103, 95, 100, 111, 95, 101, 110, 99, 111, 100, 101, 95, 97, 108, 112, 104, 97, 58, 32, 117, 110, 101, 120, 112, 101, 99, 116, 101, 100, 32, 99, 97, 108, 108, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str749 = allocate([ 80, 78, 71, 32, 117, 110, 115, 105, 103, 110, 101, 100, 32, 105, 110, 116, 101, 103, 101, 114, 32, 111, 117, 116, 32, 111, 102, 32, 114, 97, 110, 103, 101, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str1750 = allocate([ 78, 111, 116, 32, 97, 32, 80, 78, 71, 32, 102, 105, 108, 101, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str2751 = allocate([ 80, 78, 71, 32, 102, 105, 108, 101, 32, 99, 111, 114, 114, 117, 112, 116, 101, 100, 32, 98, 121, 32, 65, 83, 67, 73, 73, 32, 99, 111, 110, 118, 101, 114, 115, 105, 111, 110, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str3752 = allocate([ 67, 82, 67, 32, 101, 114, 114, 111, 114, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str4753 = allocate([ 105, 110, 118, 97, 108, 105, 100, 32, 99, 104, 117, 110, 107, 108, 101, 110, 103, 116, 104, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str5754 = allocate([ 69, 120, 99, 101, 101, 100, 101, 100, 32, 115, 105, 122, 101, 32, 108, 105, 109, 105, 116, 32, 119, 104, 105, 108, 101, 32, 101, 120, 112, 97, 110, 100, 105, 110, 103, 32, 99, 104, 117, 110, 107, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str6755 = allocate([ 112, 110, 103, 95, 105, 110, 102, 108, 97, 116, 101, 32, 108, 111, 103, 105, 99, 32, 101, 114, 114, 111, 114, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str7756 = allocate([ 78, 111, 116, 32, 101, 110, 111, 117, 103, 104, 32, 109, 101, 109, 111, 114, 121, 32, 116, 111, 32, 100, 101, 99, 111, 109, 112, 114, 101, 115, 115, 32, 99, 104, 117, 110, 107, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str9758 = allocate([ 79, 117, 116, 32, 111, 102, 32, 112, 108, 97, 99, 101, 32, 73, 72, 68, 82, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str10759 = allocate([ 73, 110, 118, 97, 108, 105, 100, 32, 73, 72, 68, 82, 32, 99, 104, 117, 110, 107, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str11760 = allocate([ 77, 105, 115, 115, 105, 110, 103, 32, 73, 72, 68, 82, 32, 98, 101, 102, 111, 114, 101, 32, 80, 76, 84, 69, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str12761 = allocate([ 73, 110, 118, 97, 108, 105, 100, 32, 80, 76, 84, 69, 32, 97, 102, 116, 101, 114, 32, 73, 68, 65, 84, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str13762 = allocate([ 68, 117, 112, 108, 105, 99, 97, 116, 101, 32, 80, 76, 84, 69, 32, 99, 104, 117, 110, 107, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str14763 = allocate([ 73, 103, 110, 111, 114, 105, 110, 103, 32, 80, 76, 84, 69, 32, 99, 104, 117, 110, 107, 32, 105, 110, 32, 103, 114, 97, 121, 115, 99, 97, 108, 101, 32, 80, 78, 71, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str15764 = allocate([ 73, 110, 118, 97, 108, 105, 100, 32, 112, 97, 108, 101, 116, 116, 101, 32, 99, 104, 117, 110, 107, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str16765 = allocate([ 84, 114, 117, 110, 99, 97, 116, 105, 110, 103, 32, 105, 110, 99, 111, 114, 114, 101, 99, 116, 32, 116, 82, 78, 83, 32, 99, 104, 117, 110, 107, 32, 108, 101, 110, 103, 116, 104, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str17766 = allocate([ 84, 114, 117, 110, 99, 97, 116, 105, 110, 103, 32, 105, 110, 99, 111, 114, 114, 101, 99, 116, 32, 105, 110, 102, 111, 32, 116, 82, 78, 83, 32, 99, 104, 117, 110, 107, 32, 108, 101, 110, 103, 116, 104, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str18767 = allocate([ 78, 111, 32, 105, 109, 97, 103, 101, 32, 105, 110, 32, 102, 105, 108, 101, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str19768 = allocate([ 73, 110, 99, 111, 114, 114, 101, 99, 116, 32, 73, 69, 78, 68, 32, 99, 104, 117, 110, 107, 32, 108, 101, 110, 103, 116, 104, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str20769 = allocate([ 77, 105, 115, 115, 105, 110, 103, 32, 73, 72, 68, 82, 32, 98, 101, 102, 111, 114, 101, 32, 103, 65, 77, 65, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str21770 = allocate([ 73, 110, 118, 97, 108, 105, 100, 32, 103, 65, 77, 65, 32, 97, 102, 116, 101, 114, 32, 73, 68, 65, 84, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str22771 = allocate([ 79, 117, 116, 32, 111, 102, 32, 112, 108, 97, 99, 101, 32, 103, 65, 77, 65, 32, 99, 104, 117, 110, 107, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str23772 = allocate([ 68, 117, 112, 108, 105, 99, 97, 116, 101, 32, 103, 65, 77, 65, 32, 99, 104, 117, 110, 107, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str24773 = allocate([ 73, 110, 99, 111, 114, 114, 101, 99, 116, 32, 103, 65, 77, 65, 32, 99, 104, 117, 110, 107, 32, 108, 101, 110, 103, 116, 104, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str25774 = allocate([ 73, 103, 110, 111, 114, 105, 110, 103, 32, 103, 65, 77, 65, 32, 99, 104, 117, 110, 107, 32, 119, 105, 116, 104, 32, 111, 117, 116, 32, 111, 102, 32, 114, 97, 110, 103, 101, 32, 103, 97, 109, 109, 97, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str26775 = allocate([ 73, 103, 110, 111, 114, 105, 110, 103, 32, 105, 110, 99, 111, 114, 114, 101, 99, 116, 32, 103, 65, 77, 65, 32, 118, 97, 108, 117, 101, 32, 64, 49, 32, 119, 104, 101, 110, 32, 115, 82, 71, 66, 32, 105, 115, 32, 97, 108, 115, 111, 32, 112, 114, 101, 115, 101, 110, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str27776 = allocate([ 77, 105, 115, 115, 105, 110, 103, 32, 73, 72, 68, 82, 32, 98, 101, 102, 111, 114, 101, 32, 115, 66, 73, 84, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str28777 = allocate([ 73, 110, 118, 97, 108, 105, 100, 32, 115, 66, 73, 84, 32, 97, 102, 116, 101, 114, 32, 73, 68, 65, 84, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str29778 = allocate([ 79, 117, 116, 32, 111, 102, 32, 112, 108, 97, 99, 101, 32, 115, 66, 73, 84, 32, 99, 104, 117, 110, 107, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str30779 = allocate([ 68, 117, 112, 108, 105, 99, 97, 116, 101, 32, 115, 66, 73, 84, 32, 99, 104, 117, 110, 107, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str31780 = allocate([ 73, 110, 99, 111, 114, 114, 101, 99, 116, 32, 115, 66, 73, 84, 32, 99, 104, 117, 110, 107, 32, 108, 101, 110, 103, 116, 104, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str32781 = allocate([ 77, 105, 115, 115, 105, 110, 103, 32, 73, 72, 68, 82, 32, 98, 101, 102, 111, 114, 101, 32, 99, 72, 82, 77, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str33782 = allocate([ 73, 110, 118, 97, 108, 105, 100, 32, 99, 72, 82, 77, 32, 97, 102, 116, 101, 114, 32, 73, 68, 65, 84, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str34783 = allocate([ 79, 117, 116, 32, 111, 102, 32, 112, 108, 97, 99, 101, 32, 99, 72, 82, 77, 32, 99, 104, 117, 110, 107, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str35784 = allocate([ 68, 117, 112, 108, 105, 99, 97, 116, 101, 32, 99, 72, 82, 77, 32, 99, 104, 117, 110, 107, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str36785 = allocate([ 73, 110, 99, 111, 114, 114, 101, 99, 116, 32, 99, 72, 82, 77, 32, 99, 104, 117, 110, 107, 32, 108, 101, 110, 103, 116, 104, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str37786 = allocate([ 73, 103, 110, 111, 114, 105, 110, 103, 32, 99, 72, 82, 77, 32, 99, 104, 117, 110, 107, 32, 119, 105, 116, 104, 32, 110, 101, 103, 97, 116, 105, 118, 101, 32, 99, 104, 114, 111, 109, 97, 116, 105, 99, 105, 116, 105, 101, 115, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str38787 = allocate([ 73, 103, 110, 111, 114, 105, 110, 103, 32, 105, 110, 99, 111, 114, 114, 101, 99, 116, 32, 99, 72, 82, 77, 32, 119, 104, 105, 116, 101, 40, 64, 49, 44, 64, 50, 41, 32, 114, 40, 64, 51, 44, 64, 52, 41, 103, 40, 64, 53, 44, 64, 54, 41, 98, 40, 64, 55, 44, 64, 56, 41, 32, 119, 104, 101, 110, 32, 115, 82, 71, 66, 32, 105, 115, 32, 97, 108, 115, 111, 32, 112, 114, 101, 115, 101, 110, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str39788 = allocate([ 105, 110, 116, 101, 114, 110, 97, 108, 32, 101, 114, 114, 111, 114, 32, 104, 97, 110, 100, 108, 105, 110, 103, 32, 99, 72, 82, 77, 32, 99, 111, 101, 102, 102, 105, 99, 105, 101, 110, 116, 115, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str40789 = allocate([ 105, 110, 116, 101, 114, 110, 97, 108, 32, 101, 114, 114, 111, 114, 32, 104, 97, 110, 100, 108, 105, 110, 103, 32, 99, 72, 82, 77, 45, 62, 88, 89, 90, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str41790 = allocate([ 77, 105, 115, 115, 105, 110, 103, 32, 73, 72, 68, 82, 32, 98, 101, 102, 111, 114, 101, 32, 115, 82, 71, 66, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str42791 = allocate([ 73, 110, 118, 97, 108, 105, 100, 32, 115, 82, 71, 66, 32, 97, 102, 116, 101, 114, 32, 73, 68, 65, 84, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str43792 = allocate([ 79, 117, 116, 32, 111, 102, 32, 112, 108, 97, 99, 101, 32, 115, 82, 71, 66, 32, 99, 104, 117, 110, 107, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str44793 = allocate([ 68, 117, 112, 108, 105, 99, 97, 116, 101, 32, 115, 82, 71, 66, 32, 99, 104, 117, 110, 107, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str45794 = allocate([ 73, 110, 99, 111, 114, 114, 101, 99, 116, 32, 115, 82, 71, 66, 32, 99, 104, 117, 110, 107, 32, 108, 101, 110, 103, 116, 104, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str46795 = allocate([ 85, 110, 107, 110, 111, 119, 110, 32, 115, 82, 71, 66, 32, 105, 110, 116, 101, 110, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str47796 = allocate([ 73, 103, 110, 111, 114, 105, 110, 103, 32, 105, 110, 99, 111, 114, 114, 101, 99, 116, 32, 99, 72, 82, 77, 32, 118, 97, 108, 117, 101, 32, 119, 104, 101, 110, 32, 115, 82, 71, 66, 32, 105, 115, 32, 97, 108, 115, 111, 32, 112, 114, 101, 115, 101, 110, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str48797 = allocate([ 77, 105, 115, 115, 105, 110, 103, 32, 73, 72, 68, 82, 32, 98, 101, 102, 111, 114, 101, 32, 105, 67, 67, 80, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str49798 = allocate([ 73, 110, 118, 97, 108, 105, 100, 32, 105, 67, 67, 80, 32, 97, 102, 116, 101, 114, 32, 73, 68, 65, 84, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str50799 = allocate([ 79, 117, 116, 32, 111, 102, 32, 112, 108, 97, 99, 101, 32, 105, 67, 67, 80, 32, 99, 104, 117, 110, 107, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str51800 = allocate([ 68, 117, 112, 108, 105, 99, 97, 116, 101, 32, 105, 67, 67, 80, 32, 99, 104, 117, 110, 107, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str52801 = allocate([ 77, 97, 108, 102, 111, 114, 109, 101, 100, 32, 105, 67, 67, 80, 32, 99, 104, 117, 110, 107, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str53802 = allocate([ 73, 103, 110, 111, 114, 105, 110, 103, 32, 110, 111, 110, 122, 101, 114, 111, 32, 99, 111, 109, 112, 114, 101, 115, 115, 105, 111, 110, 32, 116, 121, 112, 101, 32, 105, 110, 32, 105, 67, 67, 80, 32, 99, 104, 117, 110, 107, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str54803 = allocate([ 80, 114, 111, 102, 105, 108, 101, 32, 115, 105, 122, 101, 32, 102, 105, 101, 108, 100, 32, 109, 105, 115, 115, 105, 110, 103, 32, 102, 114, 111, 109, 32, 105, 67, 67, 80, 32, 99, 104, 117, 110, 107, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str55804 = allocate([ 73, 103, 110, 111, 114, 105, 110, 103, 32, 105, 67, 67, 80, 32, 99, 104, 117, 110, 107, 32, 119, 105, 116, 104, 32, 100, 101, 99, 108, 97, 114, 101, 100, 32, 115, 105, 122, 101, 32, 61, 32, 64, 49, 32, 97, 110, 100, 32, 97, 99, 116, 117, 97, 108, 32, 108, 101, 110, 103, 116, 104, 32, 61, 32, 64, 50, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str56805 = allocate([ 78, 111, 32, 115, 112, 97, 99, 101, 32, 105, 110, 32, 99, 104, 117, 110, 107, 32, 99, 97, 99, 104, 101, 32, 102, 111, 114, 32, 115, 80, 76, 84, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str57806 = allocate([ 77, 105, 115, 115, 105, 110, 103, 32, 73, 72, 68, 82, 32, 98, 101, 102, 111, 114, 101, 32, 115, 80, 76, 84, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str58807 = allocate([ 73, 110, 118, 97, 108, 105, 100, 32, 115, 80, 76, 84, 32, 97, 102, 116, 101, 114, 32, 73, 68, 65, 84, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str59808 = allocate([ 109, 97, 108, 102, 111, 114, 109, 101, 100, 32, 115, 80, 76, 84, 32, 99, 104, 117, 110, 107, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str60809 = allocate([ 115, 80, 76, 84, 32, 99, 104, 117, 110, 107, 32, 104, 97, 115, 32, 98, 97, 100, 32, 108, 101, 110, 103, 116, 104, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str61810 = allocate([ 115, 80, 76, 84, 32, 99, 104, 117, 110, 107, 32, 116, 111, 111, 32, 108, 111, 110, 103, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str62811 = allocate([ 115, 80, 76, 84, 32, 99, 104, 117, 110, 107, 32, 114, 101, 113, 117, 105, 114, 101, 115, 32, 116, 111, 111, 32, 109, 117, 99, 104, 32, 109, 101, 109, 111, 114, 121, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str63812 = allocate([ 77, 105, 115, 115, 105, 110, 103, 32, 73, 72, 68, 82, 32, 98, 101, 102, 111, 114, 101, 32, 116, 82, 78, 83, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str64813 = allocate([ 73, 110, 118, 97, 108, 105, 100, 32, 116, 82, 78, 83, 32, 97, 102, 116, 101, 114, 32, 73, 68, 65, 84, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str65814 = allocate([ 68, 117, 112, 108, 105, 99, 97, 116, 101, 32, 116, 82, 78, 83, 32, 99, 104, 117, 110, 107, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str66815 = allocate([ 73, 110, 99, 111, 114, 114, 101, 99, 116, 32, 116, 82, 78, 83, 32, 99, 104, 117, 110, 107, 32, 108, 101, 110, 103, 116, 104, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str67816 = allocate([ 77, 105, 115, 115, 105, 110, 103, 32, 80, 76, 84, 69, 32, 98, 101, 102, 111, 114, 101, 32, 116, 82, 78, 83, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str68817 = allocate([ 90, 101, 114, 111, 32, 108, 101, 110, 103, 116, 104, 32, 116, 82, 78, 83, 32, 99, 104, 117, 110, 107, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str69818 = allocate([ 116, 82, 78, 83, 32, 99, 104, 117, 110, 107, 32, 110, 111, 116, 32, 97, 108, 108, 111, 119, 101, 100, 32, 119, 105, 116, 104, 32, 97, 108, 112, 104, 97, 32, 99, 104, 97, 110, 110, 101, 108, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str70819 = allocate([ 77, 105, 115, 115, 105, 110, 103, 32, 73, 72, 68, 82, 32, 98, 101, 102, 111, 114, 101, 32, 98, 75, 71, 68, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str71820 = allocate([ 73, 110, 118, 97, 108, 105, 100, 32, 98, 75, 71, 68, 32, 97, 102, 116, 101, 114, 32, 73, 68, 65, 84, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str72821 = allocate([ 77, 105, 115, 115, 105, 110, 103, 32, 80, 76, 84, 69, 32, 98, 101, 102, 111, 114, 101, 32, 98, 75, 71, 68, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str73822 = allocate([ 68, 117, 112, 108, 105, 99, 97, 116, 101, 32, 98, 75, 71, 68, 32, 99, 104, 117, 110, 107, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str74823 = allocate([ 73, 110, 99, 111, 114, 114, 101, 99, 116, 32, 98, 75, 71, 68, 32, 99, 104, 117, 110, 107, 32, 108, 101, 110, 103, 116, 104, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str75824 = allocate([ 73, 110, 99, 111, 114, 114, 101, 99, 116, 32, 98, 75, 71, 68, 32, 99, 104, 117, 110, 107, 32, 105, 110, 100, 101, 120, 32, 118, 97, 108, 117, 101, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str76825 = allocate([ 77, 105, 115, 115, 105, 110, 103, 32, 73, 72, 68, 82, 32, 98, 101, 102, 111, 114, 101, 32, 104, 73, 83, 84, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str77826 = allocate([ 73, 110, 118, 97, 108, 105, 100, 32, 104, 73, 83, 84, 32, 97, 102, 116, 101, 114, 32, 73, 68, 65, 84, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str78827 = allocate([ 77, 105, 115, 115, 105, 110, 103, 32, 80, 76, 84, 69, 32, 98, 101, 102, 111, 114, 101, 32, 104, 73, 83, 84, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str79828 = allocate([ 68, 117, 112, 108, 105, 99, 97, 116, 101, 32, 104, 73, 83, 84, 32, 99, 104, 117, 110, 107, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str80829 = allocate([ 73, 110, 99, 111, 114, 114, 101, 99, 116, 32, 104, 73, 83, 84, 32, 99, 104, 117, 110, 107, 32, 108, 101, 110, 103, 116, 104, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str81830 = allocate([ 77, 105, 115, 115, 105, 110, 103, 32, 73, 72, 68, 82, 32, 98, 101, 102, 111, 114, 101, 32, 112, 72, 89, 115, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str82831 = allocate([ 73, 110, 118, 97, 108, 105, 100, 32, 112, 72, 89, 115, 32, 97, 102, 116, 101, 114, 32, 73, 68, 65, 84, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str83832 = allocate([ 68, 117, 112, 108, 105, 99, 97, 116, 101, 32, 112, 72, 89, 115, 32, 99, 104, 117, 110, 107, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str84833 = allocate([ 73, 110, 99, 111, 114, 114, 101, 99, 116, 32, 112, 72, 89, 115, 32, 99, 104, 117, 110, 107, 32, 108, 101, 110, 103, 116, 104, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str85834 = allocate([ 77, 105, 115, 115, 105, 110, 103, 32, 73, 72, 68, 82, 32, 98, 101, 102, 111, 114, 101, 32, 111, 70, 70, 115, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str86835 = allocate([ 73, 110, 118, 97, 108, 105, 100, 32, 111, 70, 70, 115, 32, 97, 102, 116, 101, 114, 32, 73, 68, 65, 84, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str87836 = allocate([ 68, 117, 112, 108, 105, 99, 97, 116, 101, 32, 111, 70, 70, 115, 32, 99, 104, 117, 110, 107, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str88837 = allocate([ 73, 110, 99, 111, 114, 114, 101, 99, 116, 32, 111, 70, 70, 115, 32, 99, 104, 117, 110, 107, 32, 108, 101, 110, 103, 116, 104, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str89838 = allocate([ 77, 105, 115, 115, 105, 110, 103, 32, 73, 72, 68, 82, 32, 98, 101, 102, 111, 114, 101, 32, 112, 67, 65, 76, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str90839 = allocate([ 73, 110, 118, 97, 108, 105, 100, 32, 112, 67, 65, 76, 32, 97, 102, 116, 101, 114, 32, 73, 68, 65, 84, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str91840 = allocate([ 68, 117, 112, 108, 105, 99, 97, 116, 101, 32, 112, 67, 65, 76, 32, 99, 104, 117, 110, 107, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str92841 = allocate([ 78, 111, 32, 109, 101, 109, 111, 114, 121, 32, 102, 111, 114, 32, 112, 67, 65, 76, 32, 112, 117, 114, 112, 111, 115, 101, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str93842 = allocate([ 73, 110, 118, 97, 108, 105, 100, 32, 112, 67, 65, 76, 32, 100, 97, 116, 97, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str94843 = allocate([ 73, 110, 118, 97, 108, 105, 100, 32, 112, 67, 65, 76, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 115, 32, 102, 111, 114, 32, 101, 113, 117, 97, 116, 105, 111, 110, 32, 116, 121, 112, 101, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str96845 = allocate([ 78, 111, 32, 109, 101, 109, 111, 114, 121, 32, 102, 111, 114, 32, 112, 67, 65, 76, 32, 112, 97, 114, 97, 109, 115, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str97846 = allocate([ 77, 105, 115, 115, 105, 110, 103, 32, 73, 72, 68, 82, 32, 98, 101, 102, 111, 114, 101, 32, 115, 67, 65, 76, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str98847 = allocate([ 73, 110, 118, 97, 108, 105, 100, 32, 115, 67, 65, 76, 32, 97, 102, 116, 101, 114, 32, 73, 68, 65, 84, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str99848 = allocate([ 68, 117, 112, 108, 105, 99, 97, 116, 101, 32, 115, 67, 65, 76, 32, 99, 104, 117, 110, 107, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str100849 = allocate([ 115, 67, 65, 76, 32, 99, 104, 117, 110, 107, 32, 116, 111, 111, 32, 115, 104, 111, 114, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str101850 = allocate([ 79, 117, 116, 32, 111, 102, 32, 109, 101, 109, 111, 114, 121, 32, 119, 104, 105, 108, 101, 32, 112, 114, 111, 99, 101, 115, 115, 105, 110, 103, 32, 115, 67, 65, 76, 32, 99, 104, 117, 110, 107, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str102851 = allocate([ 73, 110, 118, 97, 108, 105, 100, 32, 115, 67, 65, 76, 32, 105, 103, 110, 111, 114, 101, 100, 58, 32, 105, 110, 118, 97, 108, 105, 100, 32, 117, 110, 105, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str103852 = allocate([ 73, 110, 118, 97, 108, 105, 100, 32, 115, 67, 65, 76, 32, 99, 104, 117, 110, 107, 32, 105, 103, 110, 111, 114, 101, 100, 58, 32, 98, 97, 100, 32, 119, 105, 100, 116, 104, 32, 102, 111, 114, 109, 97, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str104853 = allocate([ 73, 110, 118, 97, 108, 105, 100, 32, 115, 67, 65, 76, 32, 99, 104, 117, 110, 107, 32, 105, 103, 110, 111, 114, 101, 100, 58, 32, 110, 111, 110, 45, 112, 111, 115, 105, 116, 105, 118, 101, 32, 119, 105, 100, 116, 104, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str105854 = allocate([ 73, 110, 118, 97, 108, 105, 100, 32, 115, 67, 65, 76, 32, 99, 104, 117, 110, 107, 32, 105, 103, 110, 111, 114, 101, 100, 58, 32, 98, 97, 100, 32, 104, 101, 105, 103, 104, 116, 32, 102, 111, 114, 109, 97, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str106855 = allocate([ 73, 110, 118, 97, 108, 105, 100, 32, 115, 67, 65, 76, 32, 99, 104, 117, 110, 107, 32, 105, 103, 110, 111, 114, 101, 100, 58, 32, 110, 111, 110, 45, 112, 111, 115, 105, 116, 105, 118, 101, 32, 104, 101, 105, 103, 104, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str107856 = allocate([ 79, 117, 116, 32, 111, 102, 32, 112, 108, 97, 99, 101, 32, 116, 73, 77, 69, 32, 99, 104, 117, 110, 107, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str108857 = allocate([ 68, 117, 112, 108, 105, 99, 97, 116, 101, 32, 116, 73, 77, 69, 32, 99, 104, 117, 110, 107, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str109858 = allocate([ 73, 110, 99, 111, 114, 114, 101, 99, 116, 32, 116, 73, 77, 69, 32, 99, 104, 117, 110, 107, 32, 108, 101, 110, 103, 116, 104, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str110859 = allocate([ 78, 111, 32, 115, 112, 97, 99, 101, 32, 105, 110, 32, 99, 104, 117, 110, 107, 32, 99, 97, 99, 104, 101, 32, 102, 111, 114, 32, 116, 69, 88, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str111860 = allocate([ 77, 105, 115, 115, 105, 110, 103, 32, 73, 72, 68, 82, 32, 98, 101, 102, 111, 114, 101, 32, 116, 69, 88, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str112861 = allocate([ 78, 111, 32, 109, 101, 109, 111, 114, 121, 32, 116, 111, 32, 112, 114, 111, 99, 101, 115, 115, 32, 116, 101, 120, 116, 32, 99, 104, 117, 110, 107, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str113862 = allocate([ 78, 111, 116, 32, 101, 110, 111, 117, 103, 104, 32, 109, 101, 109, 111, 114, 121, 32, 116, 111, 32, 112, 114, 111, 99, 101, 115, 115, 32, 116, 101, 120, 116, 32, 99, 104, 117, 110, 107, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str114863 = allocate([ 73, 110, 115, 117, 102, 102, 105, 99, 105, 101, 110, 116, 32, 109, 101, 109, 111, 114, 121, 32, 116, 111, 32, 112, 114, 111, 99, 101, 115, 115, 32, 116, 101, 120, 116, 32, 99, 104, 117, 110, 107, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str115864 = allocate([ 78, 111, 32, 115, 112, 97, 99, 101, 32, 105, 110, 32, 99, 104, 117, 110, 107, 32, 99, 97, 99, 104, 101, 32, 102, 111, 114, 32, 122, 84, 88, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str116865 = allocate([ 77, 105, 115, 115, 105, 110, 103, 32, 73, 72, 68, 82, 32, 98, 101, 102, 111, 114, 101, 32, 122, 84, 88, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str117866 = allocate([ 79, 117, 116, 32, 111, 102, 32, 109, 101, 109, 111, 114, 121, 32, 112, 114, 111, 99, 101, 115, 115, 105, 110, 103, 32, 122, 84, 88, 116, 32, 99, 104, 117, 110, 107, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str118867 = allocate([ 84, 114, 117, 110, 99, 97, 116, 101, 100, 32, 122, 84, 88, 116, 32, 99, 104, 117, 110, 107, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str119868 = allocate([ 85, 110, 107, 110, 111, 119, 110, 32, 99, 111, 109, 112, 114, 101, 115, 115, 105, 111, 110, 32, 116, 121, 112, 101, 32, 105, 110, 32, 122, 84, 88, 116, 32, 99, 104, 117, 110, 107, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str120869 = allocate([ 78, 111, 116, 32, 101, 110, 111, 117, 103, 104, 32, 109, 101, 109, 111, 114, 121, 32, 116, 111, 32, 112, 114, 111, 99, 101, 115, 115, 32, 122, 84, 88, 116, 32, 99, 104, 117, 110, 107, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str121870 = allocate([ 73, 110, 115, 117, 102, 102, 105, 99, 105, 101, 110, 116, 32, 109, 101, 109, 111, 114, 121, 32, 116, 111, 32, 115, 116, 111, 114, 101, 32, 122, 84, 88, 116, 32, 99, 104, 117, 110, 107, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str122871 = allocate([ 78, 111, 32, 115, 112, 97, 99, 101, 32, 105, 110, 32, 99, 104, 117, 110, 107, 32, 99, 97, 99, 104, 101, 32, 102, 111, 114, 32, 105, 84, 88, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str123872 = allocate([ 77, 105, 115, 115, 105, 110, 103, 32, 73, 72, 68, 82, 32, 98, 101, 102, 111, 114, 101, 32, 105, 84, 88, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str124873 = allocate([ 78, 111, 32, 109, 101, 109, 111, 114, 121, 32, 116, 111, 32, 112, 114, 111, 99, 101, 115, 115, 32, 105, 84, 88, 116, 32, 99, 104, 117, 110, 107, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str125874 = allocate([ 84, 114, 117, 110, 99, 97, 116, 101, 100, 32, 105, 84, 88, 116, 32, 99, 104, 117, 110, 107, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str126875 = allocate([ 85, 110, 107, 110, 111, 119, 110, 32, 105, 84, 88, 116, 32, 99, 111, 109, 112, 114, 101, 115, 115, 105, 111, 110, 32, 116, 121, 112, 101, 32, 111, 114, 32, 109, 101, 116, 104, 111, 100, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str127876 = allocate([ 77, 97, 108, 102, 111, 114, 109, 101, 100, 32, 105, 84, 88, 116, 32, 99, 104, 117, 110, 107, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str128877 = allocate([ 78, 111, 116, 32, 101, 110, 111, 117, 103, 104, 32, 109, 101, 109, 111, 114, 121, 32, 116, 111, 32, 112, 114, 111, 99, 101, 115, 115, 32, 105, 84, 88, 116, 32, 99, 104, 117, 110, 107, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str129878 = allocate([ 73, 110, 115, 117, 102, 102, 105, 99, 105, 101, 110, 116, 32, 109, 101, 109, 111, 114, 121, 32, 116, 111, 32, 115, 116, 111, 114, 101, 32, 105, 84, 88, 116, 32, 99, 104, 117, 110, 107, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str130879 = allocate([ 78, 111, 32, 115, 112, 97, 99, 101, 32, 105, 110, 32, 99, 104, 117, 110, 107, 32, 99, 97, 99, 104, 101, 32, 102, 111, 114, 32, 117, 110, 107, 110, 111, 119, 110, 32, 99, 104, 117, 110, 107, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str131880 = allocate([ 117, 110, 107, 110, 111, 119, 110, 32, 99, 114, 105, 116, 105, 99, 97, 108, 32, 99, 104, 117, 110, 107, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str132881 = allocate([ 101, 114, 114, 111, 114, 32, 105, 110, 32, 117, 115, 101, 114, 32, 99, 104, 117, 110, 107, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str133882 = allocate([ 105, 110, 118, 97, 108, 105, 100, 32, 99, 104, 117, 110, 107, 32, 116, 121, 112, 101, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str134883 = allocate([ 105, 110, 116, 101, 114, 110, 97, 108, 32, 114, 111, 119, 32, 108, 111, 103, 105, 99, 32, 101, 114, 114, 111, 114, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str135884 = allocate([ 105, 110, 116, 101, 114, 110, 97, 108, 32, 114, 111, 119, 32, 115, 105, 122, 101, 32, 99, 97, 108, 99, 117, 108, 97, 116, 105, 111, 110, 32, 101, 114, 114, 111, 114, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str136885 = allocate([ 105, 110, 116, 101, 114, 110, 97, 108, 32, 114, 111, 119, 32, 119, 105, 100, 116, 104, 32, 101, 114, 114, 111, 114, 0 ], "i8", ALLOC_STATIC);

_png_combine_row_row_mask = allocate([ 16843009, 0, 0, 0, 269488144, 0, 0, 0, 286331153, 0, 0, 0, 1145324612, 0, 0, 0, 1431655765, 0, 0, 0, -1431655766, 0, 0, 0, 196611, 0, 0, 0, 50332416, 0, 0, 0, 50529027, 0, 0, 0, 808464432, 0, 0, 0, 858993459, 0, 0, 0, -858993460, 0, 0, 0, 15, 0, 0, 0, 983040, 0, 0, 0, 983055, 0, 0, 0, 251662080, 0, 0, 0, 252645135, 0, 0, 0, -252645136, 0, 0, 0, -2139062144, 0, 0, 0, 134744072, 0, 0, 0, -2004318072, 0, 0, 0, 572662306, 0, 0, 0, -1431655766, 0, 0, 0, 1431655765, 0, 0, 0, 12583104, 0, 0, 0, -1073692672, 0, 0, 0, -1061109568, 0, 0, 0, 202116108, 0, 0, 0, -858993460, 0, 0, 0, 858993459, 0, 0, 0, 240, 0, 0, 0, 15728640, 0, 0, 0, 15728880, 0, 0, 0, -268374016, 0, 0, 0, -252645136, 0, 0, 0, 252645135, 0, 0, 0 ], [ "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);

_png_combine_row_display_mask = allocate([ -252645136, 0, 0, 0, 1145324612, 0, 0, 0, -1431655766, 0, 0, 0, -16711936, 0, 0, 0, 808464432, 0, 0, 0, -858993460, 0, 0, 0, -65536, 0, 0, 0, 251662080, 0, 0, 0, -252645136, 0, 0, 0, 252645135, 0, 0, 0, 572662306, 0, 0, 0, 1431655765, 0, 0, 0, -16711936, 0, 0, 0, 202116108, 0, 0, 0, 858993459, 0, 0, 0, -65536, 0, 0, 0, -268374016, 0, 0, 0, 252645135, 0, 0, 0 ], [ "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);

STRING_TABLE.__str137886 = allocate([ 105, 110, 118, 97, 108, 105, 100, 32, 117, 115, 101, 114, 32, 116, 114, 97, 110, 115, 102, 111, 114, 109, 32, 112, 105, 120, 101, 108, 32, 100, 101, 112, 116, 104, 0 ], "i8", ALLOC_STATIC);

_png_do_read_interlace_png_pass_inc = allocate([ 8, 0, 0, 0, 8, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0 ], [ "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);

STRING_TABLE.__str138887 = allocate([ 78, 111, 116, 32, 101, 110, 111, 117, 103, 104, 32, 105, 109, 97, 103, 101, 32, 100, 97, 116, 97, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str139888 = allocate([ 69, 120, 116, 114, 97, 32, 99, 111, 109, 112, 114, 101, 115, 115, 101, 100, 32, 100, 97, 116, 97, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str140889 = allocate([ 68, 101, 99, 111, 109, 112, 114, 101, 115, 115, 105, 111, 110, 32, 69, 114, 114, 111, 114, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str141890 = allocate([ 69, 120, 116, 114, 97, 32, 99, 111, 109, 112, 114, 101, 115, 115, 105, 111, 110, 32, 100, 97, 116, 97, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str142891 = allocate([ 82, 111, 119, 32, 104, 97, 115, 32, 116, 111, 111, 32, 109, 97, 110, 121, 32, 98, 121, 116, 101, 115, 32, 116, 111, 32, 97, 108, 108, 111, 99, 97, 116, 101, 32, 105, 110, 32, 109, 101, 109, 111, 114, 121, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str144893 = allocate([ 66, 117, 102, 102, 101, 114, 32, 101, 114, 114, 111, 114, 32, 105, 110, 32, 99, 111, 109, 112, 114, 101, 115, 115, 101, 100, 32, 100, 97, 116, 97, 115, 116, 114, 101, 97, 109, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str145894 = allocate([ 68, 97, 116, 97, 32, 101, 114, 114, 111, 114, 32, 105, 110, 32, 99, 111, 109, 112, 114, 101, 115, 115, 101, 100, 32, 100, 97, 116, 97, 115, 116, 114, 101, 97, 109, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str146895 = allocate([ 73, 110, 99, 111, 109, 112, 108, 101, 116, 101, 32, 99, 111, 109, 112, 114, 101, 115, 115, 101, 100, 32, 100, 97, 116, 97, 115, 116, 114, 101, 97, 109, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str10970 = allocate([ 79, 117, 116, 32, 111, 102, 32, 114, 97, 110, 103, 101, 32, 103, 97, 109, 109, 97, 32, 118, 97, 108, 117, 101, 32, 105, 103, 110, 111, 114, 101, 100, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str12972 = allocate([ 73, 110, 118, 97, 108, 105, 100, 32, 112, 97, 108, 101, 116, 116, 101, 32, 115, 105, 122, 101, 44, 32, 104, 73, 83, 84, 32, 97, 108, 108, 111, 99, 97, 116, 105, 111, 110, 32, 115, 107, 105, 112, 112, 101, 100, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str13973 = allocate([ 73, 110, 115, 117, 102, 102, 105, 99, 105, 101, 110, 116, 32, 109, 101, 109, 111, 114, 121, 32, 102, 111, 114, 32, 104, 73, 83, 84, 32, 99, 104, 117, 110, 107, 32, 100, 97, 116, 97, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str14974 = allocate([ 73, 110, 118, 97, 108, 105, 100, 32, 112, 67, 65, 76, 32, 101, 113, 117, 97, 116, 105, 111, 110, 32, 116, 121, 112, 101, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str15975 = allocate([ 73, 110, 118, 97, 108, 105, 100, 32, 102, 111, 114, 109, 97, 116, 32, 102, 111, 114, 32, 112, 67, 65, 76, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str16976 = allocate([ 73, 110, 115, 117, 102, 102, 105, 99, 105, 101, 110, 116, 32, 109, 101, 109, 111, 114, 121, 32, 102, 111, 114, 32, 112, 67, 65, 76, 32, 112, 117, 114, 112, 111, 115, 101, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str17977 = allocate([ 73, 110, 115, 117, 102, 102, 105, 99, 105, 101, 110, 116, 32, 109, 101, 109, 111, 114, 121, 32, 102, 111, 114, 32, 112, 67, 65, 76, 32, 117, 110, 105, 116, 115, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str18978 = allocate([ 73, 110, 115, 117, 102, 102, 105, 99, 105, 101, 110, 116, 32, 109, 101, 109, 111, 114, 121, 32, 102, 111, 114, 32, 112, 67, 65, 76, 32, 112, 97, 114, 97, 109, 115, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str19979 = allocate([ 73, 110, 115, 117, 102, 102, 105, 99, 105, 101, 110, 116, 32, 109, 101, 109, 111, 114, 121, 32, 102, 111, 114, 32, 112, 67, 65, 76, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str20980 = allocate([ 73, 110, 118, 97, 108, 105, 100, 32, 115, 67, 65, 76, 32, 117, 110, 105, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str21981 = allocate([ 73, 110, 118, 97, 108, 105, 100, 32, 115, 67, 65, 76, 32, 119, 105, 100, 116, 104, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str22982 = allocate([ 73, 110, 118, 97, 108, 105, 100, 32, 115, 67, 65, 76, 32, 104, 101, 105, 103, 104, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str23983 = allocate([ 77, 101, 109, 111, 114, 121, 32, 97, 108, 108, 111, 99, 97, 116, 105, 111, 110, 32, 102, 97, 105, 108, 101, 100, 32, 119, 104, 105, 108, 101, 32, 112, 114, 111, 99, 101, 115, 115, 105, 110, 103, 32, 115, 67, 65, 76, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str24984 = allocate([ 73, 110, 118, 97, 108, 105, 100, 32, 115, 67, 65, 76, 32, 119, 105, 100, 116, 104, 32, 105, 103, 110, 111, 114, 101, 100, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str25985 = allocate([ 73, 110, 118, 97, 108, 105, 100, 32, 115, 67, 65, 76, 32, 104, 101, 105, 103, 104, 116, 32, 105, 103, 110, 111, 114, 101, 100, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str26986 = allocate([ 73, 110, 118, 97, 108, 105, 100, 32, 112, 97, 108, 101, 116, 116, 101, 32, 108, 101, 110, 103, 116, 104, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str27987 = allocate([ 73, 110, 115, 117, 102, 102, 105, 99, 105, 101, 110, 116, 32, 109, 101, 109, 111, 114, 121, 32, 116, 111, 32, 112, 114, 111, 99, 101, 115, 115, 32, 105, 67, 67, 80, 32, 99, 104, 117, 110, 107, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str28988 = allocate([ 73, 110, 115, 117, 102, 102, 105, 99, 105, 101, 110, 116, 32, 109, 101, 109, 111, 114, 121, 32, 116, 111, 32, 112, 114, 111, 99, 101, 115, 115, 32, 105, 67, 67, 80, 32, 112, 114, 111, 102, 105, 108, 101, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str29989 = allocate([ 73, 110, 115, 117, 102, 102, 105, 99, 105, 101, 110, 116, 32, 109, 101, 109, 111, 114, 121, 32, 116, 111, 32, 115, 116, 111, 114, 101, 32, 116, 101, 120, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str30990 = allocate([ 116, 101, 120, 116, 32, 99, 111, 109, 112, 114, 101, 115, 115, 105, 111, 110, 32, 109, 111, 100, 101, 32, 105, 115, 32, 111, 117, 116, 32, 111, 102, 32, 114, 97, 110, 103, 101, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str31991 = allocate([ 73, 103, 110, 111, 114, 105, 110, 103, 32, 105, 110, 118, 97, 108, 105, 100, 32, 116, 105, 109, 101, 32, 118, 97, 108, 117, 101, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str32992 = allocate([ 116, 82, 78, 83, 32, 99, 104, 117, 110, 107, 32, 104, 97, 115, 32, 111, 117, 116, 45, 111, 102, 45, 114, 97, 110, 103, 101, 32, 115, 97, 109, 112, 108, 101, 115, 32, 102, 111, 114, 32, 98, 105, 116, 95, 100, 101, 112, 116, 104, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str33993 = allocate([ 78, 111, 32, 109, 101, 109, 111, 114, 121, 32, 102, 111, 114, 32, 115, 80, 76, 84, 32, 112, 97, 108, 101, 116, 116, 101, 115, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str34994 = allocate([ 79, 117, 116, 32, 111, 102, 32, 109, 101, 109, 111, 114, 121, 32, 119, 104, 105, 108, 101, 32, 112, 114, 111, 99, 101, 115, 115, 105, 110, 103, 32, 115, 80, 76, 84, 32, 99, 104, 117, 110, 107, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str35995 = allocate([ 79, 117, 116, 32, 111, 102, 32, 109, 101, 109, 111, 114, 121, 32, 119, 104, 105, 108, 101, 32, 112, 114, 111, 99, 101, 115, 115, 105, 110, 103, 32, 117, 110, 107, 110, 111, 119, 110, 32, 99, 104, 117, 110, 107, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE._onebppswaptable = allocate([ 0, 128, 64, 192, 32, 160, 96, 224, 16, 144, 80, 208, 48, 176, 112, 240, 8, 136, 72, 200, 40, 168, 104, 232, 24, 152, 88, 216, 56, 184, 120, 248, 4, 132, 68, 196, 36, 164, 100, 228, 20, 148, 84, 212, 52, 180, 116, 244, 12, 140, 76, 204, 44, 172, 108, 236, 28, 156, 92, 220, 60, 188, 124, 252, 2, 130, 66, 194, 34, 162, 98, 226, 18, 146, 82, 210, 50, 178, 114, 242, 10, 138, 74, 202, 42, 170, 106, 234, 26, 154, 90, 218, 58, 186, 122, 250, 6, 134, 70, 198, 38, 166, 102, 230, 22, 150, 86, 214, 54, 182, 118, 246, 14, 142, 78, 206, 46, 174, 110, 238, 30, 158, 94, 222, 62, 190, 126, 254, 1, 129, 65, 193, 33, 161, 97, 225, 17, 145, 81, 209, 49, 177, 113, 241, 9, 137, 73, 201, 41, 169, 105, 233, 25, 153, 89, 217, 57, 185, 121, 249, 5, 133, 69, 197, 37, 165, 101, 229, 21, 149, 85, 213, 53, 181, 117, 245, 13, 141, 77, 205, 45, 173, 109, 237, 29, 157, 93, 221, 61, 189, 125, 253, 3, 131, 67, 195, 35, 163, 99, 227, 19, 147, 83, 211, 51, 179, 115, 243, 11, 139, 75, 203, 43, 171, 107, 235, 27, 155, 91, 219, 59, 187, 123, 251, 7, 135, 71, 199, 39, 167, 103, 231, 23, 151, 87, 215, 55, 183, 119, 247, 15, 143, 79, 207, 47, 175, 111, 239, 31, 159, 95, 223, 63, 191, 127, 255 ], "i8", ALLOC_STATIC);

STRING_TABLE._twobppswaptable = allocate([ 0, 64, 128, 192, 16, 80, 144, 208, 32, 96, 160, 224, 48, 112, 176, 240, 4, 68, 132, 196, 20, 84, 148, 212, 36, 100, 164, 228, 52, 116, 180, 244, 8, 72, 136, 200, 24, 88, 152, 216, 40, 104, 168, 232, 56, 120, 184, 248, 12, 76, 140, 204, 28, 92, 156, 220, 44, 108, 172, 236, 60, 124, 188, 252, 1, 65, 129, 193, 17, 81, 145, 209, 33, 97, 161, 225, 49, 113, 177, 241, 5, 69, 133, 197, 21, 85, 149, 213, 37, 101, 165, 229, 53, 117, 181, 245, 9, 73, 137, 201, 25, 89, 153, 217, 41, 105, 169, 233, 57, 121, 185, 249, 13, 77, 141, 205, 29, 93, 157, 221, 45, 109, 173, 237, 61, 125, 189, 253, 2, 66, 130, 194, 18, 82, 146, 210, 34, 98, 162, 226, 50, 114, 178, 242, 6, 70, 134, 198, 22, 86, 150, 214, 38, 102, 166, 230, 54, 118, 182, 246, 10, 74, 138, 202, 26, 90, 154, 218, 42, 106, 170, 234, 58, 122, 186, 250, 14, 78, 142, 206, 30, 94, 158, 222, 46, 110, 174, 238, 62, 126, 190, 254, 3, 67, 131, 195, 19, 83, 147, 211, 35, 99, 163, 227, 51, 115, 179, 243, 7, 71, 135, 199, 23, 87, 151, 215, 39, 103, 167, 231, 55, 119, 183, 247, 11, 75, 139, 203, 27, 91, 155, 219, 43, 107, 171, 235, 59, 123, 187, 251, 15, 79, 143, 207, 31, 95, 159, 223, 47, 111, 175, 239, 63, 127, 191, 255 ], "i8", ALLOC_STATIC);

STRING_TABLE._fourbppswaptable = allocate([ 0, 16, 32, 48, 64, 80, 96, 112, 128, 144, 160, 176, 192, 208, 224, 240, 1, 17, 33, 49, 65, 81, 97, 113, 129, 145, 161, 177, 193, 209, 225, 241, 2, 18, 34, 50, 66, 82, 98, 114, 130, 146, 162, 178, 194, 210, 226, 242, 3, 19, 35, 51, 67, 83, 99, 115, 131, 147, 163, 179, 195, 211, 227, 243, 4, 20, 36, 52, 68, 84, 100, 116, 132, 148, 164, 180, 196, 212, 228, 244, 5, 21, 37, 53, 69, 85, 101, 117, 133, 149, 165, 181, 197, 213, 229, 245, 6, 22, 38, 54, 70, 86, 102, 118, 134, 150, 166, 182, 198, 214, 230, 246, 7, 23, 39, 55, 71, 87, 103, 119, 135, 151, 167, 183, 199, 215, 231, 247, 8, 24, 40, 56, 72, 88, 104, 120, 136, 152, 168, 184, 200, 216, 232, 248, 9, 25, 41, 57, 73, 89, 105, 121, 137, 153, 169, 185, 201, 217, 233, 249, 10, 26, 42, 58, 74, 90, 106, 122, 138, 154, 170, 186, 202, 218, 234, 250, 11, 27, 43, 59, 75, 91, 107, 123, 139, 155, 171, 187, 203, 219, 235, 251, 12, 28, 44, 60, 76, 92, 108, 124, 140, 156, 172, 188, 204, 220, 236, 252, 13, 29, 45, 61, 77, 93, 109, 125, 141, 157, 173, 189, 205, 221, 237, 253, 14, 30, 46, 62, 78, 94, 110, 126, 142, 158, 174, 190, 206, 222, 238, 254, 15, 31, 47, 63, 79, 95, 111, 127, 143, 159, 175, 191, 207, 223, 239, 255 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str1085 = allocate([ 67, 97, 108, 108, 32, 116, 111, 32, 78, 85, 76, 76, 32, 119, 114, 105, 116, 101, 32, 102, 117, 110, 99, 116, 105, 111, 110, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str11086 = allocate([ 87, 114, 105, 116, 101, 32, 69, 114, 114, 111, 114, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str21087 = allocate([ 67, 97, 110, 39, 116, 32, 115, 101, 116, 32, 98, 111, 116, 104, 32, 114, 101, 97, 100, 95, 100, 97, 116, 97, 95, 102, 110, 32, 97, 110, 100, 32, 119, 114, 105, 116, 101, 95, 100, 97, 116, 97, 95, 102, 110, 32, 105, 110, 32, 116, 104, 101, 32, 115, 97, 109, 101, 32, 115, 116, 114, 117, 99, 116, 117, 114, 101, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str1090 = allocate([ 77, 78, 71, 32, 102, 101, 97, 116, 117, 114, 101, 115, 32, 97, 114, 101, 32, 110, 111, 116, 32, 97, 108, 108, 111, 119, 101, 100, 32, 105, 110, 32, 97, 32, 80, 78, 71, 32, 100, 97, 116, 97, 115, 116, 114, 101, 97, 109, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str11091 = allocate([ 87, 114, 105, 116, 105, 110, 103, 32, 122, 101, 114, 111, 45, 108, 101, 110, 103, 116, 104, 32, 117, 110, 107, 110, 111, 119, 110, 32, 99, 104, 117, 110, 107, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str21092 = allocate([ 86, 97, 108, 105, 100, 32, 112, 97, 108, 101, 116, 116, 101, 32, 114, 101, 113, 117, 105, 114, 101, 100, 32, 102, 111, 114, 32, 112, 97, 108, 101, 116, 116, 101, 100, 32, 105, 109, 97, 103, 101, 115, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str31093 = allocate([ 78, 111, 32, 73, 68, 65, 84, 115, 32, 119, 114, 105, 116, 116, 101, 110, 32, 105, 110, 116, 111, 32, 102, 105, 108, 101, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str41094 = allocate([ 87, 114, 111, 116, 101, 32, 112, 97, 108, 101, 116, 116, 101, 32, 105, 110, 100, 101, 120, 32, 101, 120, 99, 101, 101, 100, 105, 110, 103, 32, 110, 117, 109, 95, 112, 97, 108, 101, 116, 116, 101, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str51095 = allocate([ 112, 110, 103, 95, 119, 114, 105, 116, 101, 95, 105, 110, 102, 111, 32, 119, 97, 115, 32, 110, 101, 118, 101, 114, 32, 99, 97, 108, 108, 101, 100, 32, 98, 101, 102, 111, 114, 101, 32, 112, 110, 103, 95, 119, 114, 105, 116, 101, 95, 114, 111, 119, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str61096 = allocate([ 105, 110, 116, 101, 114, 110, 97, 108, 32, 119, 114, 105, 116, 101, 32, 116, 114, 97, 110, 115, 102, 111, 114, 109, 32, 108, 111, 103, 105, 99, 32, 101, 114, 114, 111, 114, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str81098 = allocate([ 85, 110, 107, 110, 111, 119, 110, 32, 114, 111, 119, 32, 102, 105, 108, 116, 101, 114, 32, 102, 111, 114, 32, 109, 101, 116, 104, 111, 100, 32, 48, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str91099 = allocate([ 67, 97, 110, 39, 116, 32, 97, 100, 100, 32, 85, 112, 32, 102, 105, 108, 116, 101, 114, 32, 97, 102, 116, 101, 114, 32, 115, 116, 97, 114, 116, 105, 110, 103, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str101100 = allocate([ 67, 97, 110, 39, 116, 32, 97, 100, 100, 32, 65, 118, 101, 114, 97, 103, 101, 32, 102, 105, 108, 116, 101, 114, 32, 97, 102, 116, 101, 114, 32, 115, 116, 97, 114, 116, 105, 110, 103, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str111101 = allocate([ 67, 97, 110, 39, 116, 32, 97, 100, 100, 32, 80, 97, 101, 116, 104, 32, 102, 105, 108, 116, 101, 114, 32, 97, 102, 116, 101, 114, 32, 115, 116, 97, 114, 116, 105, 110, 103, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str131103 = allocate([ 79, 110, 108, 121, 32, 99, 111, 109, 112, 114, 101, 115, 115, 105, 111, 110, 32, 119, 105, 110, 100, 111, 119, 115, 32, 60, 61, 32, 51, 50, 107, 32, 115, 117, 112, 112, 111, 114, 116, 101, 100, 32, 98, 121, 32, 80, 78, 71, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str141104 = allocate([ 79, 110, 108, 121, 32, 99, 111, 109, 112, 114, 101, 115, 115, 105, 111, 110, 32, 119, 105, 110, 100, 111, 119, 115, 32, 62, 61, 32, 50, 53, 54, 32, 115, 117, 112, 112, 111, 114, 116, 101, 100, 32, 98, 121, 32, 80, 78, 71, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str151105 = allocate([ 67, 111, 109, 112, 114, 101, 115, 115, 105, 111, 110, 32, 119, 105, 110, 100, 111, 119, 32, 105, 115, 32, 98, 101, 105, 110, 103, 32, 114, 101, 115, 101, 116, 32, 116, 111, 32, 53, 49, 50, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str1133 = allocate([ 73, 110, 118, 97, 108, 105, 100, 32, 98, 105, 116, 32, 100, 101, 112, 116, 104, 32, 102, 111, 114, 32, 103, 114, 97, 121, 115, 99, 97, 108, 101, 32, 105, 109, 97, 103, 101, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str11134 = allocate([ 73, 110, 118, 97, 108, 105, 100, 32, 98, 105, 116, 32, 100, 101, 112, 116, 104, 32, 102, 111, 114, 32, 82, 71, 66, 32, 105, 109, 97, 103, 101, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str21135 = allocate([ 73, 110, 118, 97, 108, 105, 100, 32, 98, 105, 116, 32, 100, 101, 112, 116, 104, 32, 102, 111, 114, 32, 112, 97, 108, 101, 116, 116, 101, 100, 32, 105, 109, 97, 103, 101, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str31136 = allocate([ 73, 110, 118, 97, 108, 105, 100, 32, 98, 105, 116, 32, 100, 101, 112, 116, 104, 32, 102, 111, 114, 32, 103, 114, 97, 121, 115, 99, 97, 108, 101, 43, 97, 108, 112, 104, 97, 32, 105, 109, 97, 103, 101, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str41137 = allocate([ 73, 110, 118, 97, 108, 105, 100, 32, 98, 105, 116, 32, 100, 101, 112, 116, 104, 32, 102, 111, 114, 32, 82, 71, 66, 65, 32, 105, 109, 97, 103, 101, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str51138 = allocate([ 73, 110, 118, 97, 108, 105, 100, 32, 105, 109, 97, 103, 101, 32, 99, 111, 108, 111, 114, 32, 116, 121, 112, 101, 32, 115, 112, 101, 99, 105, 102, 105, 101, 100, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str61139 = allocate([ 73, 110, 118, 97, 108, 105, 100, 32, 99, 111, 109, 112, 114, 101, 115, 115, 105, 111, 110, 32, 116, 121, 112, 101, 32, 115, 112, 101, 99, 105, 102, 105, 101, 100, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str71140 = allocate([ 73, 110, 118, 97, 108, 105, 100, 32, 102, 105, 108, 116, 101, 114, 32, 116, 121, 112, 101, 32, 115, 112, 101, 99, 105, 102, 105, 101, 100, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str81141 = allocate([ 73, 110, 118, 97, 108, 105, 100, 32, 105, 110, 116, 101, 114, 108, 97, 99, 101, 32, 116, 121, 112, 101, 32, 115, 112, 101, 99, 105, 102, 105, 101, 100, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str91142 = allocate([ 73, 110, 118, 97, 108, 105, 100, 32, 110, 117, 109, 98, 101, 114, 32, 111, 102, 32, 99, 111, 108, 111, 114, 115, 32, 105, 110, 32, 112, 97, 108, 101, 116, 116, 101, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str101143 = allocate([ 73, 103, 110, 111, 114, 105, 110, 103, 32, 114, 101, 113, 117, 101, 115, 116, 32, 116, 111, 32, 119, 114, 105, 116, 101, 32, 97, 32, 80, 76, 84, 69, 32, 99, 104, 117, 110, 107, 32, 105, 110, 32, 103, 114, 97, 121, 115, 99, 97, 108, 101, 32, 80, 78, 71, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str111144 = allocate([ 73, 110, 118, 97, 108, 105, 100, 32, 122, 108, 105, 98, 32, 99, 111, 109, 112, 114, 101, 115, 115, 105, 111, 110, 32, 109, 101, 116, 104, 111, 100, 32, 111, 114, 32, 102, 108, 97, 103, 115, 32, 105, 110, 32, 73, 68, 65, 84, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str121145 = allocate([ 73, 110, 118, 97, 108, 105, 100, 32, 115, 82, 71, 66, 32, 114, 101, 110, 100, 101, 114, 105, 110, 103, 32, 105, 110, 116, 101, 110, 116, 32, 115, 112, 101, 99, 105, 102, 105, 101, 100, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str141147 = allocate([ 69, 109, 98, 101, 100, 100, 101, 100, 32, 112, 114, 111, 102, 105, 108, 101, 32, 108, 101, 110, 103, 116, 104, 32, 105, 110, 32, 105, 67, 67, 80, 32, 99, 104, 117, 110, 107, 32, 105, 115, 32, 110, 101, 103, 97, 116, 105, 118, 101, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str151148 = allocate([ 69, 109, 98, 101, 100, 100, 101, 100, 32, 112, 114, 111, 102, 105, 108, 101, 32, 108, 101, 110, 103, 116, 104, 32, 116, 111, 111, 32, 108, 97, 114, 103, 101, 32, 105, 110, 32, 105, 67, 67, 80, 32, 99, 104, 117, 110, 107, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str161149 = allocate([ 84, 114, 117, 110, 99, 97, 116, 105, 110, 103, 32, 112, 114, 111, 102, 105, 108, 101, 32, 116, 111, 32, 97, 99, 116, 117, 97, 108, 32, 108, 101, 110, 103, 116, 104, 32, 105, 110, 32, 105, 67, 67, 80, 32, 99, 104, 117, 110, 107, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str171150 = allocate([ 73, 110, 118, 97, 108, 105, 100, 32, 115, 66, 73, 84, 32, 100, 101, 112, 116, 104, 32, 115, 112, 101, 99, 105, 102, 105, 101, 100, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str181151 = allocate([ 73, 110, 118, 97, 108, 105, 100, 32, 110, 117, 109, 98, 101, 114, 32, 111, 102, 32, 116, 114, 97, 110, 115, 112, 97, 114, 101, 110, 116, 32, 99, 111, 108, 111, 114, 115, 32, 115, 112, 101, 99, 105, 102, 105, 101, 100, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str191152 = allocate([ 73, 103, 110, 111, 114, 105, 110, 103, 32, 97, 116, 116, 101, 109, 112, 116, 32, 116, 111, 32, 119, 114, 105, 116, 101, 32, 116, 82, 78, 83, 32, 99, 104, 117, 110, 107, 32, 111, 117, 116, 45, 111, 102, 45, 114, 97, 110, 103, 101, 32, 102, 111, 114, 32, 98, 105, 116, 95, 100, 101, 112, 116, 104, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str201153 = allocate([ 73, 103, 110, 111, 114, 105, 110, 103, 32, 97, 116, 116, 101, 109, 112, 116, 32, 116, 111, 32, 119, 114, 105, 116, 101, 32, 49, 54, 45, 98, 105, 116, 32, 116, 82, 78, 83, 32, 99, 104, 117, 110, 107, 32, 119, 104, 101, 110, 32, 98, 105, 116, 95, 100, 101, 112, 116, 104, 32, 105, 115, 32, 56, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str211154 = allocate([ 67, 97, 110, 39, 116, 32, 119, 114, 105, 116, 101, 32, 116, 82, 78, 83, 32, 119, 105, 116, 104, 32, 97, 110, 32, 97, 108, 112, 104, 97, 32, 99, 104, 97, 110, 110, 101, 108, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str221155 = allocate([ 73, 110, 118, 97, 108, 105, 100, 32, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 32, 112, 97, 108, 101, 116, 116, 101, 32, 105, 110, 100, 101, 120, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str231156 = allocate([ 73, 103, 110, 111, 114, 105, 110, 103, 32, 97, 116, 116, 101, 109, 112, 116, 32, 116, 111, 32, 119, 114, 105, 116, 101, 32, 49, 54, 45, 98, 105, 116, 32, 98, 75, 71, 68, 32, 99, 104, 117, 110, 107, 32, 119, 104, 101, 110, 32, 98, 105, 116, 95, 100, 101, 112, 116, 104, 32, 105, 115, 32, 56, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str241157 = allocate([ 73, 103, 110, 111, 114, 105, 110, 103, 32, 97, 116, 116, 101, 109, 112, 116, 32, 116, 111, 32, 119, 114, 105, 116, 101, 32, 98, 75, 71, 68, 32, 99, 104, 117, 110, 107, 32, 111, 117, 116, 45, 111, 102, 45, 114, 97, 110, 103, 101, 32, 102, 111, 114, 32, 98, 105, 116, 95, 100, 101, 112, 116, 104, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str251158 = allocate([ 73, 110, 118, 97, 108, 105, 100, 32, 110, 117, 109, 98, 101, 114, 32, 111, 102, 32, 104, 105, 115, 116, 111, 103, 114, 97, 109, 32, 101, 110, 116, 114, 105, 101, 115, 32, 115, 112, 101, 99, 105, 102, 105, 101, 100, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str261159 = allocate([ 122, 101, 114, 111, 32, 108, 101, 110, 103, 116, 104, 32, 107, 101, 121, 119, 111, 114, 100, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str271160 = allocate([ 79, 117, 116, 32, 111, 102, 32, 109, 101, 109, 111, 114, 121, 32, 119, 104, 105, 108, 101, 32, 112, 114, 111, 99, 101, 115, 105, 110, 103, 32, 107, 101, 121, 119, 111, 114, 100, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str281161 = allocate([ 105, 110, 118, 97, 108, 105, 100, 32, 107, 101, 121, 119, 111, 114, 100, 32, 99, 104, 97, 114, 97, 99, 116, 101, 114, 32, 48, 120, 64, 49, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str291162 = allocate([ 116, 114, 97, 105, 108, 105, 110, 103, 32, 115, 112, 97, 99, 101, 115, 32, 114, 101, 109, 111, 118, 101, 100, 32, 102, 114, 111, 109, 32, 107, 101, 121, 119, 111, 114, 100, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str301163 = allocate([ 108, 101, 97, 100, 105, 110, 103, 32, 115, 112, 97, 99, 101, 115, 32, 114, 101, 109, 111, 118, 101, 100, 32, 102, 114, 111, 109, 32, 107, 101, 121, 119, 111, 114, 100, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str311164 = allocate([ 101, 120, 116, 114, 97, 32, 105, 110, 116, 101, 114, 105, 111, 114, 32, 115, 112, 97, 99, 101, 115, 32, 114, 101, 109, 111, 118, 101, 100, 32, 102, 114, 111, 109, 32, 107, 101, 121, 119, 111, 114, 100, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str321165 = allocate([ 90, 101, 114, 111, 32, 108, 101, 110, 103, 116, 104, 32, 107, 101, 121, 119, 111, 114, 100, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str331166 = allocate([ 107, 101, 121, 119, 111, 114, 100, 32, 108, 101, 110, 103, 116, 104, 32, 109, 117, 115, 116, 32, 98, 101, 32, 49, 32, 45, 32, 55, 57, 32, 99, 104, 97, 114, 97, 99, 116, 101, 114, 115, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str341167 = allocate([ 69, 109, 112, 116, 121, 32, 108, 97, 110, 103, 117, 97, 103, 101, 32, 102, 105, 101, 108, 100, 32, 105, 110, 32, 105, 84, 88, 116, 32, 99, 104, 117, 110, 107, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str351168 = allocate([ 85, 110, 114, 101, 99, 111, 103, 110, 105, 122, 101, 100, 32, 117, 110, 105, 116, 32, 116, 121, 112, 101, 32, 102, 111, 114, 32, 111, 70, 70, 115, 32, 99, 104, 117, 110, 107, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str361169 = allocate([ 85, 110, 114, 101, 99, 111, 103, 110, 105, 122, 101, 100, 32, 101, 113, 117, 97, 116, 105, 111, 110, 32, 116, 121, 112, 101, 32, 102, 111, 114, 32, 112, 67, 65, 76, 32, 99, 104, 117, 110, 107, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str371170 = allocate([ 67, 97, 110, 39, 116, 32, 119, 114, 105, 116, 101, 32, 115, 67, 65, 76, 32, 40, 98, 117, 102, 102, 101, 114, 32, 116, 111, 111, 32, 115, 109, 97, 108, 108, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str381171 = allocate([ 85, 110, 114, 101, 99, 111, 103, 110, 105, 122, 101, 100, 32, 117, 110, 105, 116, 32, 116, 121, 112, 101, 32, 102, 111, 114, 32, 112, 72, 89, 115, 32, 99, 104, 117, 110, 107, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str391172 = allocate([ 73, 110, 118, 97, 108, 105, 100, 32, 116, 105, 109, 101, 32, 115, 112, 101, 99, 105, 102, 105, 101, 100, 32, 102, 111, 114, 32, 116, 73, 77, 69, 32, 99, 104, 117, 110, 107, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE._png_write_finish_row_png_pass_ystart = allocate([ 0, 0, 4, 0, 2, 0, 1 ], "i8", ALLOC_STATIC);

STRING_TABLE._png_write_finish_row_png_pass_yinc = allocate([ 8, 8, 8, 4, 4, 2, 2 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str401173 = allocate([ 122, 108, 105, 98, 32, 101, 114, 114, 111, 114, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE._png_do_write_interlace_png_pass_start = allocate([ 0, 4, 0, 2, 0, 1, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE._png_do_write_interlace_png_pass_inc = allocate([ 8, 8, 4, 4, 2, 2, 1 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str411174 = allocate([ 118, 101, 114, 115, 105, 111, 110, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str421175 = allocate([ 115, 116, 114, 101, 97, 109, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str431176 = allocate([ 109, 101, 109, 111, 114, 121, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str441177 = allocate([ 117, 110, 107, 110, 111, 119, 110, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str451178 = allocate([ 91, 110, 111, 32, 122, 108, 105, 98, 32, 109, 101, 115, 115, 97, 103, 101, 93, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str461179 = allocate([ 122, 108, 105, 98, 32, 102, 97, 105, 108, 101, 100, 32, 116, 111, 32, 114, 101, 115, 101, 116, 32, 99, 111, 109, 112, 114, 101, 115, 115, 111, 114, 58, 32, 64, 49, 40, 64, 50, 41, 58, 32, 64, 51, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str471180 = allocate([ 122, 115, 116, 114, 101, 97, 109, 32, 110, 111, 116, 32, 105, 110, 32, 117, 115, 101, 32, 40, 105, 110, 116, 101, 114, 110, 97, 108, 32, 101, 114, 114, 111, 114, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str491182 = allocate([ 101, 110, 100, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str501183 = allocate([ 49, 46, 50, 46, 54, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str511184 = allocate([ 116, 101, 120, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str521185 = allocate([ 73, 68, 65, 84, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str531186 = allocate([ 105, 110, 118, 97, 108, 105, 100, 32, 122, 108, 105, 98, 32, 115, 116, 97, 116, 101, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str541187 = allocate([ 122, 108, 105, 98, 32, 102, 97, 105, 108, 101, 100, 32, 116, 111, 32, 105, 110, 105, 116, 105, 97, 108, 105, 122, 101, 32, 99, 111, 109, 112, 114, 101, 115, 115, 111, 114, 32, 40, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str551188 = allocate([ 41, 32, 118, 101, 114, 115, 105, 111, 110, 32, 101, 114, 114, 111, 114, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str561189 = allocate([ 41, 32, 115, 116, 114, 101, 97, 109, 32, 101, 114, 114, 111, 114, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str571190 = allocate([ 41, 32, 109, 101, 109, 111, 114, 121, 32, 101, 114, 114, 111, 114, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str581191 = allocate([ 41, 32, 117, 110, 107, 110, 111, 119, 110, 32, 101, 114, 114, 111, 114, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str591192 = allocate([ 122, 115, 116, 114, 101, 97, 109, 32, 97, 108, 114, 101, 97, 100, 121, 32, 105, 110, 32, 117, 115, 101, 32, 40, 105, 110, 116, 101, 114, 110, 97, 108, 32, 101, 114, 114, 111, 114, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str601193 = allocate([ 73, 110, 118, 97, 108, 105, 100, 32, 122, 108, 105, 98, 32, 99, 111, 109, 112, 114, 101, 115, 115, 105, 111, 110, 32, 109, 101, 116, 104, 111, 100, 32, 111, 114, 32, 102, 108, 97, 103, 115, 32, 105, 110, 32, 110, 111, 110, 45, 73, 68, 65, 84, 32, 99, 104, 117, 110, 107, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str611194 = allocate([ 85, 110, 107, 110, 111, 119, 110, 32, 99, 111, 109, 112, 114, 101, 115, 115, 105, 111, 110, 32, 116, 121, 112, 101, 32, 64, 49, 0 ], "i8", ALLOC_STATIC);

_crc_table = allocate([ 0, 0, 0, 0, 1996959894, 0, 0, 0, -301047508, 0, 0, 0, -1727442502, 0, 0, 0, 124634137, 0, 0, 0, 1886057615, 0, 0, 0, -379345611, 0, 0, 0, -1637575261, 0, 0, 0, 249268274, 0, 0, 0, 2044508324, 0, 0, 0, -522852066, 0, 0, 0, -1747789432, 0, 0, 0, 162941995, 0, 0, 0, 2125561021, 0, 0, 0, -407360249, 0, 0, 0, -1866523247, 0, 0, 0, 498536548, 0, 0, 0, 1789927666, 0, 0, 0, -205950648, 0, 0, 0, -2067906082, 0, 0, 0, 450548861, 0, 0, 0, 1843258603, 0, 0, 0, -187386543, 0, 0, 0, -2083289657, 0, 0, 0, 325883990, 0, 0, 0, 1684777152, 0, 0, 0, -43845254, 0, 0, 0, -1973040660, 0, 0, 0, 335633487, 0, 0, 0, 1661365465, 0, 0, 0, -99664541, 0, 0, 0, -1928851979, 0, 0, 0, 997073096, 0, 0, 0, 1281953886, 0, 0, 0, -715111964, 0, 0, 0, -1570279054, 0, 0, 0, 1006888145, 0, 0, 0, 1258607687, 0, 0, 0, -770865667, 0, 0, 0, -1526024853, 0, 0, 0, 901097722, 0, 0, 0, 1119000684, 0, 0, 0, -608450090, 0, 0, 0, -1396901568, 0, 0, 0, 853044451, 0, 0, 0, 1172266101, 0, 0, 0, -589951537, 0, 0, 0, -1412350631, 0, 0, 0, 651767980, 0, 0, 0, 1373503546, 0, 0, 0, -925412992, 0, 0, 0, -1076862698, 0, 0, 0, 565507253, 0, 0, 0, 1454621731, 0, 0, 0, -809855591, 0, 0, 0, -1195530993, 0, 0, 0, 671266974, 0, 0, 0, 1594198024, 0, 0, 0, -972236366, 0, 0, 0, -1324619484, 0, 0, 0, 795835527, 0, 0, 0, 1483230225, 0, 0, 0, -1050600021, 0, 0, 0, -1234817731, 0, 0, 0, 1994146192, 0, 0, 0, 31158534, 0, 0, 0, -1731059524, 0, 0, 0, -271249366, 0, 0, 0, 1907459465, 0, 0, 0, 112637215, 0, 0, 0, -1614814043, 0, 0, 0, -390540237, 0, 0, 0, 2013776290, 0, 0, 0, 251722036, 0, 0, 0, -1777751922, 0, 0, 0, -519137256, 0, 0, 0, 2137656763, 0, 0, 0, 141376813, 0, 0, 0, -1855689577, 0, 0, 0, -429695999, 0, 0, 0, 1802195444, 0, 0, 0, 476864866, 0, 0, 0, -2056965928, 0, 0, 0, -228458418, 0, 0, 0, 1812370925, 0, 0, 0, 453092731, 0, 0, 0, -2113342271, 0, 0, 0, -183516073, 0, 0, 0, 1706088902, 0, 0, 0, 314042704, 0, 0, 0, -1950435094, 0, 0, 0, -54949764, 0, 0, 0, 1658658271, 0, 0, 0, 366619977, 0, 0, 0, -1932296973, 0, 0, 0, -69972891, 0, 0, 0, 1303535960, 0, 0, 0, 984961486, 0, 0, 0, -1547960204, 0, 0, 0, -725929758, 0, 0, 0, 1256170817, 0, 0, 0, 1037604311, 0, 0, 0, -1529756563, 0, 0, 0, -740887301, 0, 0, 0, 1131014506, 0, 0, 0, 879679996, 0, 0, 0, -1385723834, 0, 0, 0, -631195440, 0, 0, 0, 1141124467, 0, 0, 0, 855842277, 0, 0, 0, -1442165665, 0, 0, 0, -586318647, 0, 0, 0, 1342533948, 0, 0, 0, 654459306, 0, 0, 0, -1106571248, 0, 0, 0, -921952122, 0, 0, 0, 1466479909, 0, 0, 0, 544179635, 0, 0, 0, -1184443383, 0, 0, 0, -832445281, 0, 0, 0, 1591671054, 0, 0, 0, 702138776, 0, 0, 0, -1328506846, 0, 0, 0, -942167884, 0, 0, 0, 1504918807, 0, 0, 0, 783551873, 0, 0, 0, -1212326853, 0, 0, 0, -1061524307, 0, 0, 0, -306674912, 0, 0, 0, -1698712650, 0, 0, 0, 62317068, 0, 0, 0, 1957810842, 0, 0, 0, -355121351, 0, 0, 0, -1647151185, 0, 0, 0, 81470997, 0, 0, 0, 1943803523, 0, 0, 0, -480048366, 0, 0, 0, -1805370492, 0, 0, 0, 225274430, 0, 0, 0, 2053790376, 0, 0, 0, -468791541, 0, 0, 0, -1828061283, 0, 0, 0, 167816743, 0, 0, 0, 2097651377, 0, 0, 0, -267414716, 0, 0, 0, -2029476910, 0, 0, 0, 503444072, 0, 0, 0, 1762050814, 0, 0, 0, -144550051, 0, 0, 0, -2140837941, 0, 0, 0, 426522225, 0, 0, 0, 1852507879, 0, 0, 0, -19653770, 0, 0, 0, -1982649376, 0, 0, 0, 282753626, 0, 0, 0, 1742555852, 0, 0, 0, -105259153, 0, 0, 0, -1900089351, 0, 0, 0, 397917763, 0, 0, 0, 1622183637, 0, 0, 0, -690576408, 0, 0, 0, -1580100738, 0, 0, 0, 953729732, 0, 0, 0, 1340076626, 0, 0, 0, -776247311, 0, 0, 0, -1497606297, 0, 0, 0, 1068828381, 0, 0, 0, 1219638859, 0, 0, 0, -670225446, 0, 0, 0, -1358292148, 0, 0, 0, 906185462, 0, 0, 0, 1090812512, 0, 0, 0, -547295293, 0, 0, 0, -1469587627, 0, 0, 0, 829329135, 0, 0, 0, 1181335161, 0, 0, 0, -882789492, 0, 0, 0, -1134132454, 0, 0, 0, 628085408, 0, 0, 0, 1382605366, 0, 0, 0, -871598187, 0, 0, 0, -1156888829, 0, 0, 0, 570562233, 0, 0, 0, 1426400815, 0, 0, 0, -977650754, 0, 0, 0, -1296233688, 0, 0, 0, 733239954, 0, 0, 0, 1555261956, 0, 0, 0, -1026031705, 0, 0, 0, -1244606671, 0, 0, 0, 752459403, 0, 0, 0, 1541320221, 0, 0, 0, -1687895376, 0, 0, 0, -328994266, 0, 0, 0, 1969922972, 0, 0, 0, 40735498, 0, 0, 0, -1677130071, 0, 0, 0, -351390145, 0, 0, 0, 1913087877, 0, 0, 0, 83908371, 0, 0, 0, -1782625662, 0, 0, 0, -491226604, 0, 0, 0, 2075208622, 0, 0, 0, 213261112, 0, 0, 0, -1831694693, 0, 0, 0, -438977011, 0, 0, 0, 2094854071, 0, 0, 0, 198958881, 0, 0, 0, -2032938284, 0, 0, 0, -237706686, 0, 0, 0, 1759359992, 0, 0, 0, 534414190, 0, 0, 0, -2118248755, 0, 0, 0, -155638181, 0, 0, 0, 1873836001, 0, 0, 0, 414664567, 0, 0, 0, -2012718362, 0, 0, 0, -15766928, 0, 0, 0, 1711684554, 0, 0, 0, 285281116, 0, 0, 0, -1889165569, 0, 0, 0, -127750551, 0, 0, 0, 1634467795, 0, 0, 0, 376229701, 0, 0, 0, -1609899400, 0, 0, 0, -686959890, 0, 0, 0, 1308918612, 0, 0, 0, 956543938, 0, 0, 0, -1486412191, 0, 0, 0, -799009033, 0, 0, 0, 1231636301, 0, 0, 0, 1047427035, 0, 0, 0, -1362007478, 0, 0, 0, -640263460, 0, 0, 0, 1088359270, 0, 0, 0, 936918e3, 0, 0, 0, -1447252397, 0, 0, 0, -558129467, 0, 0, 0, 1202900863, 0, 0, 0, 817233897, 0, 0, 0, -1111625188, 0, 0, 0, -893730166, 0, 0, 0, 1404277552, 0, 0, 0, 615818150, 0, 0, 0, -1160759803, 0, 0, 0, -841546093, 0, 0, 0, 1423857449, 0, 0, 0, 601450431, 0, 0, 0, -1285129682, 0, 0, 0, -1000256840, 0, 0, 0, 1567103746, 0, 0, 0, 711928724, 0, 0, 0, -1274298825, 0, 0, 0, -1022587231, 0, 0, 0, 1510334235, 0, 0, 0, 755167117, 0, 0, 0, 0, 0, 0, 0, 421212481, 0, 0, 0, 842424962, 0, 0, 0, 724390851, 0, 0, 0, 1684849924, 0, 0, 0, 2105013317, 0, 0, 0, 1448781702, 0, 0, 0, 1329698503, 0, 0, 0, -925267448, 0, 0, 0, -775767223, 0, 0, 0, -84940662, 0, 0, 0, -470492725, 0, 0, 0, -1397403892, 0, 0, 0, -1246855603, 0, 0, 0, -1635570290, 0, 0, 0, -2020074289, 0, 0, 0, 1254232657, 0, 0, 0, 1406739216, 0, 0, 0, 2029285587, 0, 0, 0, 1643069842, 0, 0, 0, 783210325, 0, 0, 0, 934667796, 0, 0, 0, 479770071, 0, 0, 0, 92505238, 0, 0, 0, -2112120743, 0, 0, 0, -1694455528, 0, 0, 0, -1339163941, 0, 0, 0, -1456026726, 0, 0, 0, -428384931, 0, 0, 0, -9671652, 0, 0, 0, -733921313, 0, 0, 0, -849736034, 0, 0, 0, -1786501982, 0, 0, 0, -1935731229, 0, 0, 0, -1481488864, 0, 0, 0, -1096190111, 0, 0, 0, -236396122, 0, 0, 0, -386674457, 0, 0, 0, -1008827612, 0, 0, 0, -624577947, 0, 0, 0, 1566420650, 0, 0, 0, 1145479147, 0, 0, 0, 1869335592, 0, 0, 0, 1987116393, 0, 0, 0, 959540142, 0, 0, 0, 539646703, 0, 0, 0, 185010476, 0, 0, 0, 303839341, 0, 0, 0, -549046541, 0, 0, 0, -966981710, 0, 0, 0, -311405455, 0, 0, 0, -194288336, 0, 0, 0, -1154812937, 0, 0, 0, -1573797194, 0, 0, 0, -1994616459, 0, 0, 0, -1878548428, 0, 0, 0, 396344571, 0, 0, 0, 243568058, 0, 0, 0, 631889529, 0, 0, 0, 1018359608, 0, 0, 0, 1945336319, 0, 0, 0, 1793607870, 0, 0, 0, 1103436669, 0, 0, 0, 1490954812, 0, 0, 0, -260485371, 0, 0, 0, -379421116, 0, 0, 0, -1034998393, 0, 0, 0, -615244602, 0, 0, 0, -1810527743, 0, 0, 0, -1928414400, 0, 0, 0, -1507596157, 0, 0, 0, -1086793278, 0, 0, 0, 950060301, 0, 0, 0, 565965900, 0, 0, 0, 177645455, 0, 0, 0, 328046286, 0, 0, 0, 1556873225, 0, 0, 0, 1171730760, 0, 0, 0, 1861902987, 0, 0, 0, 2011255754, 0, 0, 0, -1162125996, 0, 0, 0, -1549767659, 0, 0, 0, -2004009002, 0, 0, 0, -1852436841, 0, 0, 0, -556296112, 0, 0, 0, -942888687, 0, 0, 0, -320734510, 0, 0, 0, -168113261, 0, 0, 0, 1919080284, 0, 0, 0, 1803150877, 0, 0, 0, 1079293406, 0, 0, 0, 1498383519, 0, 0, 0, 370020952, 0, 0, 0, 253043481, 0, 0, 0, 607678682, 0, 0, 0, 1025720731, 0, 0, 0, 1711106983, 0, 0, 0, 2095471334, 0, 0, 0, 1472923941, 0, 0, 0, 1322268772, 0, 0, 0, 26324643, 0, 0, 0, 411738082, 0, 0, 0, 866634785, 0, 0, 0, 717028704, 0, 0, 0, -1390091857, 0, 0, 0, -1270886162, 0, 0, 0, -1626176723, 0, 0, 0, -2046184852, 0, 0, 0, -918018901, 0, 0, 0, -799861270, 0, 0, 0, -75610583, 0, 0, 0, -496666776, 0, 0, 0, 792689142, 0, 0, 0, 908347575, 0, 0, 0, 487136116, 0, 0, 0, 68299317, 0, 0, 0, 1263779058, 0, 0, 0, 1380486579, 0, 0, 0, 2036719216, 0, 0, 0, 1618931505, 0, 0, 0, -404294658, 0, 0, 0, -16923969, 0, 0, 0, -707751556, 0, 0, 0, -859070403, 0, 0, 0, -2088093958, 0, 0, 0, -1701771333, 0, 0, 0, -1313057672, 0, 0, 0, -1465424583, 0, 0, 0, 998479947, 0, 0, 0, 580430090, 0, 0, 0, 162921161, 0, 0, 0, 279890824, 0, 0, 0, 1609522511, 0, 0, 0, 1190423566, 0, 0, 0, 1842954189, 0, 0, 0, 1958874764, 0, 0, 0, -212200893, 0, 0, 0, -364829950, 0, 0, 0, -1049857855, 0, 0, 0, -663273088, 0, 0, 0, -1758013625, 0, 0, 0, -1909594618, 0, 0, 0, -1526680123, 0, 0, 0, -1139047292, 0, 0, 0, 1900120602, 0, 0, 0, 1750776667, 0, 0, 0, 1131931800, 0, 0, 0, 1517083097, 0, 0, 0, 355290910, 0, 0, 0, 204897887, 0, 0, 0, 656092572, 0, 0, 0, 1040194781, 0, 0, 0, -1181220846, 0, 0, 0, -1602014893, 0, 0, 0, -1951505776, 0, 0, 0, -1833610287, 0, 0, 0, -571161322, 0, 0, 0, -990907305, 0, 0, 0, -272455788, 0, 0, 0, -153512235, 0, 0, 0, -1375224599, 0, 0, 0, -1222865496, 0, 0, 0, -1674453397, 0, 0, 0, -2060783830, 0, 0, 0, -898926099, 0, 0, 0, -747616084, 0, 0, 0, -128115857, 0, 0, 0, -515495378, 0, 0, 0, 1725839073, 0, 0, 0, 2143618976, 0, 0, 0, 1424512099, 0, 0, 0, 1307796770, 0, 0, 0, 45282277, 0, 0, 0, 464110244, 0, 0, 0, 813994343, 0, 0, 0, 698327078, 0, 0, 0, -456806728, 0, 0, 0, -35741703, 0, 0, 0, -688665542, 0, 0, 0, -806814341, 0, 0, 0, -2136380484, 0, 0, 0, -1716364547, 0, 0, 0, -1298200258, 0, 0, 0, -1417398145, 0, 0, 0, 740041904, 0, 0, 0, 889656817, 0, 0, 0, 506086962, 0, 0, 0, 120682355, 0, 0, 0, 1215357364, 0, 0, 0, 1366020341, 0, 0, 0, 2051441462, 0, 0, 0, 1667084919, 0, 0, 0, -872753330, 0, 0, 0, -756947441, 0, 0, 0, -104024628, 0, 0, 0, -522746739, 0, 0, 0, -1349119414, 0, 0, 0, -1232264437, 0, 0, 0, -1650429752, 0, 0, 0, -2068102775, 0, 0, 0, 52649286, 0, 0, 0, 439905287, 0, 0, 0, 823476164, 0, 0, 0, 672009861, 0, 0, 0, 1733269570, 0, 0, 0, 2119477507, 0, 0, 0, 1434057408, 0, 0, 0, 1281543041, 0, 0, 0, -2126985953, 0, 0, 0, -1742474146, 0, 0, 0, -1290885219, 0, 0, 0, -1441425700, 0, 0, 0, -447479781, 0, 0, 0, -61918886, 0, 0, 0, -681418087, 0, 0, 0, -830909480, 0, 0, 0, 1239502615, 0, 0, 0, 1358593622, 0, 0, 0, 2077699477, 0, 0, 0, 1657543892, 0, 0, 0, 764250643, 0, 0, 0, 882293586, 0, 0, 0, 532408465, 0, 0, 0, 111204816, 0, 0, 0, 1585378284, 0, 0, 0, 1197851309, 0, 0, 0, 1816695150, 0, 0, 0, 1968414767, 0, 0, 0, 974272232, 0, 0, 0, 587794345, 0, 0, 0, 136598634, 0, 0, 0, 289367339, 0, 0, 0, -1767409180, 0, 0, 0, -1883486043, 0, 0, 0, -1533994138, 0, 0, 0, -1115018713, 0, 0, 0, -221528864, 0, 0, 0, -338653791, 0, 0, 0, -1057104286, 0, 0, 0, -639176925, 0, 0, 0, 347922877, 0, 0, 0, 229101820, 0, 0, 0, 646611775, 0, 0, 0, 1066513022, 0, 0, 0, 1892689081, 0, 0, 0, 1774917112, 0, 0, 0, 1122387515, 0, 0, 0, 1543337850, 0, 0, 0, -597333067, 0, 0, 0, -981574924, 0, 0, 0, -296548041, 0, 0, 0, -146261898, 0, 0, 0, -1207325007, 0, 0, 0, -1592614928, 0, 0, 0, -1975530445, 0, 0, 0, -1826292366, 0, 0, 0, 0, 0, 0, 0, 29518391, 0, 0, 0, 59036782, 0, 0, 0, 38190681, 0, 0, 0, 118073564, 0, 0, 0, 114017003, 0, 0, 0, 76381362, 0, 0, 0, 89069189, 0, 0, 0, 236147128, 0, 0, 0, 265370511, 0, 0, 0, 228034006, 0, 0, 0, 206958561, 0, 0, 0, 152762724, 0, 0, 0, 148411219, 0, 0, 0, 178138378, 0, 0, 0, 190596925, 0, 0, 0, 472294256, 0, 0, 0, 501532999, 0, 0, 0, 530741022, 0, 0, 0, 509615401, 0, 0, 0, 456068012, 0, 0, 0, 451764635, 0, 0, 0, 413917122, 0, 0, 0, 426358261, 0, 0, 0, 305525448, 0, 0, 0, 334993663, 0, 0, 0, 296822438, 0, 0, 0, 275991697, 0, 0, 0, 356276756, 0, 0, 0, 352202787, 0, 0, 0, 381193850, 0, 0, 0, 393929805, 0, 0, 0, 944588512, 0, 0, 0, 965684439, 0, 0, 0, 1003065998, 0, 0, 0, 973863097, 0, 0, 0, 1061482044, 0, 0, 0, 1049003019, 0, 0, 0, 1019230802, 0, 0, 0, 1023561829, 0, 0, 0, 912136024, 0, 0, 0, 933002607, 0, 0, 0, 903529270, 0, 0, 0, 874031361, 0, 0, 0, 827834244, 0, 0, 0, 815125939, 0, 0, 0, 852716522, 0, 0, 0, 856752605, 0, 0, 0, 611050896, 0, 0, 0, 631869351, 0, 0, 0, 669987326, 0, 0, 0, 640506825, 0, 0, 0, 593644876, 0, 0, 0, 580921211, 0, 0, 0, 551983394, 0, 0, 0, 556069653, 0, 0, 0, 712553512, 0, 0, 0, 733666847, 0, 0, 0, 704405574, 0, 0, 0, 675154545, 0, 0, 0, 762387700, 0, 0, 0, 749958851, 0, 0, 0, 787859610, 0, 0, 0, 792175277, 0, 0, 0, 1889177024, 0, 0, 0, 1901651959, 0, 0, 0, 1931368878, 0, 0, 0, 1927033753, 0, 0, 0, 2006131996, 0, 0, 0, 1985040171, 0, 0, 0, 1947726194, 0, 0, 0, 1976933189, 0, 0, 0, 2122964088, 0, 0, 0, 2135668303, 0, 0, 0, 2098006038, 0, 0, 0, 2093965857, 0, 0, 0, 2038461604, 0, 0, 0, 2017599123, 0, 0, 0, 2047123658, 0, 0, 0, 2076625661, 0, 0, 0, 1824272048, 0, 0, 0, 1836991623, 0, 0, 0, 1866005214, 0, 0, 0, 1861914857, 0, 0, 0, 1807058540, 0, 0, 0, 1786244187, 0, 0, 0, 1748062722, 0, 0, 0, 1777547317, 0, 0, 0, 1655668488, 0, 0, 0, 1668093247, 0, 0, 0, 1630251878, 0, 0, 0, 1625932113, 0, 0, 0, 1705433044, 0, 0, 0, 1684323811, 0, 0, 0, 1713505210, 0, 0, 0, 1742760333, 0, 0, 0, 1222101792, 0, 0, 0, 1226154263, 0, 0, 0, 1263738702, 0, 0, 0, 1251046777, 0, 0, 0, 1339974652, 0, 0, 0, 1310460363, 0, 0, 0, 1281013650, 0, 0, 0, 1301863845, 0, 0, 0, 1187289752, 0, 0, 0, 1191637167, 0, 0, 0, 1161842422, 0, 0, 0, 1149379777, 0, 0, 0, 1103966788, 0, 0, 0, 1074747507, 0, 0, 0, 1112139306, 0, 0, 0, 1133218845, 0, 0, 0, 1425107024, 0, 0, 0, 1429406311, 0, 0, 0, 1467333694, 0, 0, 0, 1454888457, 0, 0, 0, 1408811148, 0, 0, 0, 1379576507, 0, 0, 0, 1350309090, 0, 0, 0, 1371438805, 0, 0, 0, 1524775400, 0, 0, 0, 1528845279, 0, 0, 0, 1499917702, 0, 0, 0, 1487177649, 0, 0, 0, 1575719220, 0, 0, 0, 1546255107, 0, 0, 0, 1584350554, 0, 0, 0, 1605185389, 0, 0, 0, -516613248, 0, 0, 0, -520654409, 0, 0, 0, -491663378, 0, 0, 0, -478960167, 0, 0, 0, -432229540, 0, 0, 0, -402728597, 0, 0, 0, -440899790, 0, 0, 0, -461763323, 0, 0, 0, -282703304, 0, 0, 0, -287039473, 0, 0, 0, -324886954, 0, 0, 0, -312413087, 0, 0, 0, -399514908, 0, 0, 0, -370308909, 0, 0, 0, -341100918, 0, 0, 0, -362193731, 0, 0, 0, -49039120, 0, 0, 0, -53357881, 0, 0, 0, -23630690, 0, 0, 0, -11204951, 0, 0, 0, -98955220, 0, 0, 0, -69699045, 0, 0, 0, -107035582, 0, 0, 0, -128143755, 0, 0, 0, -218044088, 0, 0, 0, -222133377, 0, 0, 0, -259769050, 0, 0, 0, -247048431, 0, 0, 0, -200719980, 0, 0, 0, -171234397, 0, 0, 0, -141715974, 0, 0, 0, -162529331, 0, 0, 0, -646423200, 0, 0, 0, -658884777, 0, 0, 0, -620984050, 0, 0, 0, -616635591, 0, 0, 0, -562956868, 0, 0, 0, -541876341, 0, 0, 0, -571137582, 0, 0, 0, -600355867, 0, 0, 0, -680850216, 0, 0, 0, -693541137, 0, 0, 0, -722478922, 0, 0, 0, -718425471, 0, 0, 0, -798841852, 0, 0, 0, -777990605, 0, 0, 0, -739872662, 0, 0, 0, -769385891, 0, 0, 0, -983630320, 0, 0, 0, -996371417, 0, 0, 0, -958780802, 0, 0, 0, -954711991, 0, 0, 0, -1034463540, 0, 0, 0, -1013629701, 0, 0, 0, -1043103070, 0, 0, 0, -1072568171, 0, 0, 0, -884101208, 0, 0, 0, -896547425, 0, 0, 0, -926319674, 0, 0, 0, -922021391, 0, 0, 0, -867956876, 0, 0, 0, -846828221, 0, 0, 0, -809446630, 0, 0, 0, -838682323, 0, 0, 0, -1850763712, 0, 0, 0, -1871840137, 0, 0, 0, -1842658770, 0, 0, 0, -1813436391, 0, 0, 0, -1767489892, 0, 0, 0, -1755032405, 0, 0, 0, -1792873742, 0, 0, 0, -1797226299, 0, 0, 0, -1615017992, 0, 0, 0, -1635865137, 0, 0, 0, -1674046570, 0, 0, 0, -1644529247, 0, 0, 0, -1732939996, 0, 0, 0, -1720253165, 0, 0, 0, -1691239606, 0, 0, 0, -1695297155, 0, 0, 0, -1920387792, 0, 0, 0, -1941217529, 0, 0, 0, -1911692962, 0, 0, 0, -1882223767, 0, 0, 0, -1971282452, 0, 0, 0, -1958545445, 0, 0, 0, -1996207742, 0, 0, 0, -2000280651, 0, 0, 0, -2087033720, 0, 0, 0, -2108158273, 0, 0, 0, -2145472282, 0, 0, 0, -2116232495, 0, 0, 0, -2070688684, 0, 0, 0, -2058246557, 0, 0, 0, -2028529606, 0, 0, 0, -2032831987, 0, 0, 0, -1444753248, 0, 0, 0, -1474250089, 0, 0, 0, -1436154674, 0, 0, 0, -1415287047, 0, 0, 0, -1360299908, 0, 0, 0, -1356262837, 0, 0, 0, -1385190382, 0, 0, 0, -1397897691, 0, 0, 0, -1477345e3, 0, 0, 0, -1506546897, 0, 0, 0, -1535814282, 0, 0, 0, -1514717375, 0, 0, 0, -1594349116, 0, 0, 0, -1590017037, 0, 0, 0, -1552089686, 0, 0, 0, -1564567651, 0, 0, 0, -1245416496, 0, 0, 0, -1274668569, 0, 0, 0, -1237276738, 0, 0, 0, -1216164471, 0, 0, 0, -1295131892, 0, 0, 0, -1290817221, 0, 0, 0, -1320611998, 0, 0, 0, -1333041835, 0, 0, 0, -1143528856, 0, 0, 0, -1173010337, 0, 0, 0, -1202457082, 0, 0, 0, -1181639631, 0, 0, 0, -1126266188, 0, 0, 0, -1122180989, 0, 0, 0, -1084596518, 0, 0, 0, -1097321235, 0, 0, 0, 0, 0, 0, 0, -1195612315, 0, 0, 0, -1442199413, 0, 0, 0, 313896942, 0, 0, 0, -1889364137, 0, 0, 0, 937357362, 0, 0, 0, 627793884, 0, 0, 0, -1646839623, 0, 0, 0, -978048785, 0, 0, 0, 2097696650, 0, 0, 0, 1874714724, 0, 0, 0, -687765759, 0, 0, 0, 1255587768, 0, 0, 0, -227878691, 0, 0, 0, -522225869, 0, 0, 0, 1482887254, 0, 0, 0, 1343838111, 0, 0, 0, -391827206, 0, 0, 0, -99573996, 0, 0, 0, 1118632049, 0, 0, 0, -545537848, 0, 0, 0, 1741137837, 0, 0, 0, 1970407491, 0, 0, 0, -842109146, 0, 0, 0, -1783791760, 0, 0, 0, 756094997, 0, 0, 0, 1067759611, 0, 0, 0, -2028416866, 0, 0, 0, 449832999, 0, 0, 0, -1569484990, 0, 0, 0, -1329192788, 0, 0, 0, 142231497, 0, 0, 0, -1607291074, 0, 0, 0, 412010587, 0, 0, 0, 171665333, 0, 0, 0, -1299775280, 0, 0, 0, 793786473, 0, 0, 0, -1746116852, 0, 0, 0, -2057703198, 0, 0, 0, 1038456711, 0, 0, 0, 1703315409, 0, 0, 0, -583343948, 0, 0, 0, -812691622, 0, 0, 0, 1999841343, 0, 0, 0, -354152314, 0, 0, 0, 1381529571, 0, 0, 0, 1089329165, 0, 0, 0, -128860312, 0, 0, 0, -265553759, 0, 0, 0, 1217896388, 0, 0, 0, 1512189994, 0, 0, 0, -492939441, 0, 0, 0, 2135519222, 0, 0, 0, -940242797, 0, 0, 0, -717183107, 0, 0, 0, 1845280792, 0, 0, 0, 899665998, 0, 0, 0, -1927039189, 0, 0, 0, -1617553211, 0, 0, 0, 657096608, 0, 0, 0, -1157806311, 0, 0, 0, 37822588, 0, 0, 0, 284462994, 0, 0, 0, -1471616777, 0, 0, 0, -1693165507, 0, 0, 0, 598228824, 0, 0, 0, 824021174, 0, 0, 0, -1985873965, 0, 0, 0, 343330666, 0, 0, 0, -1396004849, 0, 0, 0, -1098971167, 0, 0, 0, 113467524, 0, 0, 0, 1587572946, 0, 0, 0, -434366537, 0, 0, 0, -190203815, 0, 0, 0, 1276501820, 0, 0, 0, -775755899, 0, 0, 0, 1769898208, 0, 0, 0, 2076913422, 0, 0, 0, -1015592853, 0, 0, 0, -888336478, 0, 0, 0, 1941006535, 0, 0, 0, 1627703081, 0, 0, 0, -642211764, 0, 0, 0, 1148164341, 0, 0, 0, -53215344, 0, 0, 0, -295284610, 0, 0, 0, 1457141531, 0, 0, 0, 247015245, 0, 0, 0, -1241169880, 0, 0, 0, -1531908154, 0, 0, 0, 470583459, 0, 0, 0, -2116308966, 0, 0, 0, 963106687, 0, 0, 0, 735213713, 0, 0, 0, -1821499404, 0, 0, 0, 992409347, 0, 0, 0, -2087022490, 0, 0, 0, -1859174520, 0, 0, 0, 697522413, 0, 0, 0, -1270587308, 0, 0, 0, 217581361, 0, 0, 0, 508405983, 0, 0, 0, -1494102086, 0, 0, 0, -23928852, 0, 0, 0, 1177467017, 0, 0, 0, 1419450215, 0, 0, 0, -332959742, 0, 0, 0, 1911572667, 0, 0, 0, -917753890, 0, 0, 0, -604405712, 0, 0, 0, 1665525589, 0, 0, 0, 1799331996, 0, 0, 0, -746338311, 0, 0, 0, -1053399017, 0, 0, 0, 2039091058, 0, 0, 0, -463652917, 0, 0, 0, 1558270126, 0, 0, 0, 1314193216, 0, 0, 0, -152528859, 0, 0, 0, -1366587277, 0, 0, 0, 372764438, 0, 0, 0, 75645176, 0, 0, 0, -1136777315, 0, 0, 0, 568925988, 0, 0, 0, -1722451903, 0, 0, 0, -1948198993, 0, 0, 0, 861712586, 0, 0, 0, -312887749, 0, 0, 0, 1441124702, 0, 0, 0, 1196457648, 0, 0, 0, -1304107, 0, 0, 0, 1648042348, 0, 0, 0, -628668919, 0, 0, 0, -936187417, 0, 0, 0, 1888390786, 0, 0, 0, 686661332, 0, 0, 0, -1873675855, 0, 0, 0, -2098964897, 0, 0, 0, 978858298, 0, 0, 0, -1483798141, 0, 0, 0, 523464422, 0, 0, 0, 226935048, 0, 0, 0, -1254447507, 0, 0, 0, -1119821404, 0, 0, 0, 100435649, 0, 0, 0, 390670639, 0, 0, 0, -1342878134, 0, 0, 0, 841119475, 0, 0, 0, -1969352298, 0, 0, 0, -1741963656, 0, 0, 0, 546822429, 0, 0, 0, 2029308235, 0, 0, 0, -1068978642, 0, 0, 0, -755170880, 0, 0, 0, 1782671013, 0, 0, 0, -141140452, 0, 0, 0, 1328167289, 0, 0, 0, 1570739863, 0, 0, 0, -450629134, 0, 0, 0, 1298864389, 0, 0, 0, -170426784, 0, 0, 0, -412954226, 0, 0, 0, 1608431339, 0, 0, 0, -1039561134, 0, 0, 0, 2058742071, 0, 0, 0, 1744848601, 0, 0, 0, -792976964, 0, 0, 0, -1998638614, 0, 0, 0, 811816591, 0, 0, 0, 584513889, 0, 0, 0, -1704288764, 0, 0, 0, 129869501, 0, 0, 0, -1090403880, 0, 0, 0, -1380684234, 0, 0, 0, 352848211, 0, 0, 0, 494030490, 0, 0, 0, -1513215489, 0, 0, 0, -1216641519, 0, 0, 0, 264757620, 0, 0, 0, -1844389427, 0, 0, 0, 715964072, 0, 0, 0, 941166918, 0, 0, 0, -2136639965, 0, 0, 0, -658086283, 0, 0, 0, 1618608400, 0, 0, 0, 1926213374, 0, 0, 0, -898381413, 0, 0, 0, 1470427426, 0, 0, 0, -283601337, 0, 0, 0, -38979159, 0, 0, 0, 1158766284, 0, 0, 0, 1984818694, 0, 0, 0, -823031453, 0, 0, 0, -599513459, 0, 0, 0, 1693991400, 0, 0, 0, -114329263, 0, 0, 0, 1100160564, 0, 0, 0, 1395044826, 0, 0, 0, -342174017, 0, 0, 0, -1275476247, 0, 0, 0, 189112716, 0, 0, 0, 435162722, 0, 0, 0, -1588827897, 0, 0, 0, 1016811966, 0, 0, 0, -2077804837, 0, 0, 0, -1768777419, 0, 0, 0, 774831696, 0, 0, 0, 643086745, 0, 0, 0, -1628905732, 0, 0, 0, -1940033262, 0, 0, 0, 887166583, 0, 0, 0, -1456066866, 0, 0, 0, 294275499, 0, 0, 0, 54519365, 0, 0, 0, -1149009632, 0, 0, 0, -471821962, 0, 0, 0, 1532818963, 0, 0, 0, 1240029693, 0, 0, 0, -246071656, 0, 0, 0, 1820460577, 0, 0, 0, -734109372, 0, 0, 0, -963916118, 0, 0, 0, 2117577167, 0, 0, 0, -696303304, 0, 0, 0, 1858283101, 0, 0, 0, 2088143283, 0, 0, 0, -993333546, 0, 0, 0, 1495127663, 0, 0, 0, -509497078, 0, 0, 0, -216785180, 0, 0, 0, 1269332353, 0, 0, 0, 332098007, 0, 0, 0, -1418260814, 0, 0, 0, -1178427044, 0, 0, 0, 25085497, 0, 0, 0, -1666580864, 0, 0, 0, 605395429, 0, 0, 0, 916469259, 0, 0, 0, -1910746770, 0, 0, 0, -2040129881, 0, 0, 0, 1054503362, 0, 0, 0, 745528876, 0, 0, 0, -1798063799, 0, 0, 0, 151290352, 0, 0, 0, -1313282411, 0, 0, 0, -1559410309, 0, 0, 0, 464596510, 0, 0, 0, 1137851976, 0, 0, 0, -76654291, 0, 0, 0, -371460413, 0, 0, 0, 1365741990, 0, 0, 0, -860837601, 0, 0, 0, 1946996346, 0, 0, 0, 1723425172, 0, 0, 0, -570095887, 0, 0, 0, 0, 0, 0, 0, -1775237257, 0, 0, 0, 744558318, 0, 0, 0, -1169094247, 0, 0, 0, 432303367, 0, 0, 0, -1879807376, 0, 0, 0, 900031465, 0, 0, 0, -1550490466, 0, 0, 0, 847829774, 0, 0, 0, -1531388807, 0, 0, 0, 518641120, 0, 0, 0, -1998990697, 0, 0, 0, 726447625, 0, 0, 0, -1115901570, 0, 0, 0, 120436967, 0, 0, 0, -1860321392, 0, 0, 0, 1678817053, 0, 0, 0, -232738710, 0, 0, 0, 1215412723, 0, 0, 0, -566116732, 0, 0, 0, 2111101466, 0, 0, 0, -337322643, 0, 0, 0, 1370871028, 0, 0, 0, -947530877, 0, 0, 0, 1452829715, 0, 0, 0, -1062704284, 0, 0, 0, 2063164157, 0, 0, 0, -322345590, 0, 0, 0, 1331429652, 0, 0, 0, -647231901, 0, 0, 0, 1664946170, 0, 0, 0, -183695219, 0, 0, 0, -937398725, 0, 0, 0, 1578133836, 0, 0, 0, -465477419, 0, 0, 0, 1920034722, 0, 0, 0, -773586116, 0, 0, 0, 1205077067, 0, 0, 0, -41611822, 0, 0, 0, 1807026853, 0, 0, 0, -89606859, 0, 0, 0, 1821946434, 0, 0, 0, -691422245, 0, 0, 0, 1090108588, 0, 0, 0, -479406030, 0, 0, 0, 1969020741, 0, 0, 0, -821176612, 0, 0, 0, 1497223595, 0, 0, 0, -1406084826, 0, 0, 0, 973135441, 0, 0, 0, -2142119992, 0, 0, 0, 375509183, 0, 0, 0, -1242254303, 0, 0, 0, 600093526, 0, 0, 0, -1718240561, 0, 0, 0, 262520248, 0, 0, 0, -1632107992, 0, 0, 0, 143131999, 0, 0, 0, -1294398266, 0, 0, 0, 619252657, 0, 0, 0, -2021888209, 0, 0, 0, 290220120, 0, 0, 0, -1424137791, 0, 0, 0, 1026385590, 0, 0, 0, -1874731914, 0, 0, 0, 108124929, 0, 0, 0, -1138699624, 0, 0, 0, 705746415, 0, 0, 0, -1987726991, 0, 0, 0, 532002310, 0, 0, 0, -1511735393, 0, 0, 0, 869578984, 0, 0, 0, -1563883656, 0, 0, 0, 888733711, 0, 0, 0, -1901590122, 0, 0, 0, 412618465, 0, 0, 0, -1156748673, 0, 0, 0, 759000328, 0, 0, 0, -1754504047, 0, 0, 0, 22832102, 0, 0, 0, -195990677, 0, 0, 0, 1650551836, 0, 0, 0, -667916923, 0, 0, 0, 1308648178, 0, 0, 0, -309000596, 0, 0, 0, 2074411291, 0, 0, 0, -1040971646, 0, 0, 0, 1472466933, 0, 0, 0, -958812059, 0, 0, 0, 1357494034, 0, 0, 0, -356991349, 0, 0, 0, 2089335292, 0, 0, 0, -551690910, 0, 0, 0, 1227741717, 0, 0, 0, -209923188, 0, 0, 0, 1699534075, 0, 0, 0, 1482797645, 0, 0, 0, -833505990, 0, 0, 0, 1946205347, 0, 0, 0, -500122668, 0, 0, 0, 1101389642, 0, 0, 0, -678045635, 0, 0, 0, 1841615268, 0, 0, 0, -67840301, 0, 0, 0, 1793681731, 0, 0, 0, -52859340, 0, 0, 0, 1183344557, 0, 0, 0, -793222950, 0, 0, 0, 1932330052, 0, 0, 0, -451083469, 0, 0, 0, 1598818986, 0, 0, 0, -914616867, 0, 0, 0, 1014039888, 0, 0, 0, -1438580185, 0, 0, 0, 269487038, 0, 0, 0, -2044719927, 0, 0, 0, 632645719, 0, 0, 0, -1283100896, 0, 0, 0, 164914873, 0, 0, 0, -1612422706, 0, 0, 0, 251256414, 0, 0, 0, -1731602135, 0, 0, 0, 580440240, 0, 0, 0, -1264003129, 0, 0, 0, 389919577, 0, 0, 0, -2129808338, 0, 0, 0, 995933623, 0, 0, 0, -1385383232, 0, 0, 0, 545503469, 0, 0, 0, -1229733990, 0, 0, 0, 216184323, 0, 0, 0, -1697468044, 0, 0, 0, 961009130, 0, 0, 0, -1351101795, 0, 0, 0, 354867972, 0, 0, 0, -2095653773, 0, 0, 0, 302736355, 0, 0, 0, -2076482412, 0, 0, 0, 1047162125, 0, 0, 0, -1470469510, 0, 0, 0, 198119140, 0, 0, 0, -1644230253, 0, 0, 0, 665714698, 0, 0, 0, -1315043459, 0, 0, 0, 1150488560, 0, 0, 0, -761067385, 0, 0, 0, 1760690462, 0, 0, 0, -20838807, 0, 0, 0, 1566008055, 0, 0, 0, -882416256, 0, 0, 0, 1899392025, 0, 0, 0, -419009682, 0, 0, 0, 1981535486, 0, 0, 0, -533998711, 0, 0, 0, 1518000656, 0, 0, 0, -867508889, 0, 0, 0, 1876933113, 0, 0, 0, -101728626, 0, 0, 0, 1136572183, 0, 0, 0, -712069024, 0, 0, 0, -391915818, 0, 0, 0, 2123616673, 0, 0, 0, -993863624, 0, 0, 0, 1391648591, 0, 0, 0, -244859951, 0, 0, 0, 1733803174, 0, 0, 0, -586762945, 0, 0, 0, 1261875784, 0, 0, 0, -634712616, 0, 0, 0, 1276840623, 0, 0, 0, -162921674, 0, 0, 0, 1618609217, 0, 0, 0, -1007722273, 0, 0, 0, 1440704424, 0, 0, 0, -275878351, 0, 0, 0, 2042521926, 0, 0, 0, -1934401077, 0, 0, 0, 444819132, 0, 0, 0, -1596821723, 0, 0, 0, 920807506, 0, 0, 0, -1787360052, 0, 0, 0, 54987707, 0, 0, 0, -1189739998, 0, 0, 0, 791020885, 0, 0, 0, -1103381819, 0, 0, 0, 671858098, 0, 0, 0, -1839549397, 0, 0, 0, 74101596, 0, 0, 0, -1476405310, 0, 0, 0, 835702965, 0, 0, 0, -1952523988, 0, 0, 0, 497999451, 0, 0, 0, -1329437541, 0, 0, 0, 653419500, 0, 0, 0, -1667011979, 0, 0, 0, 177433858, 0, 0, 0, -1459222116, 0, 0, 0, 1060507371, 0, 0, 0, -2056845454, 0, 0, 0, 324468741, 0, 0, 0, -2109030507, 0, 0, 0, 343587042, 0, 0, 0, -1372868229, 0, 0, 0, 941340172, 0, 0, 0, -1685138798, 0, 0, 0, 230610405, 0, 0, 0, -1209017220, 0, 0, 0, 568318731, 0, 0, 0, -724380794, 0, 0, 0, 1122161905, 0, 0, 0, -122430104, 0, 0, 0, 1854134815, 0, 0, 0, -854147455, 0, 0, 0, 1529264630, 0, 0, 0, -512249745, 0, 0, 0, 2001188632, 0, 0, 0, -430307192, 0, 0, 0, 1885999103, 0, 0, 0, -902101402, 0, 0, 0, 1544225041, 0, 0, 0, -6396529, 0, 0, 0, 1773036280, 0, 0, 0, -738235551, 0, 0, 0, 1171221526, 0, 0, 0, 2028079776, 0, 0, 0, -288223785, 0, 0, 0, 1417872462, 0, 0, 0, -1028455623, 0, 0, 0, 1629906855, 0, 0, 0, -149528368, 0, 0, 0, 1296525641, 0, 0, 0, -612929986, 0, 0, 0, 1248514478, 0, 0, 0, -598026535, 0, 0, 0, 1712054080, 0, 0, 0, -264513481, 0, 0, 0, 1403960489, 0, 0, 0, -979452962, 0, 0, 0, 2144318023, 0, 0, 0, -369117904, 0, 0, 0, 485670333, 0, 0, 0, -1966949686, 0, 0, 0, 814986067, 0, 0, 0, -1499220956, 0, 0, 0, 87478458, 0, 0, 0, -1828268083, 0, 0, 0, 693624404, 0, 0, 0, -1083713245, 0, 0, 0, 779773619, 0, 0, 0, -1203084860, 0, 0, 0, 35350621, 0, 0, 0, -1809092822, 0, 0, 0, 935201716, 0, 0, 0, -1584526141, 0, 0, 0, 467600730, 0, 0, 0, -1913716179, 0, 0, 0, 0, 0, 0, 0, 1093737241, 0, 0, 0, -2107492814, 0, 0, 0, -1017959125, 0, 0, 0, 80047204, 0, 0, 0, 1173649277, 0, 0, 0, -2035852714, 0, 0, 0, -946454193, 0, 0, 0, 143317448, 0, 0, 0, 1237041873, 0, 0, 0, -1964445702, 0, 0, 0, -874908445, 0, 0, 0, 206550444, 0, 0, 0, 1300147893, 0, 0, 0, -1909619810, 0, 0, 0, -820209529, 0, 0, 0, 1360183882, 0, 0, 0, 270784851, 0, 0, 0, -747572104, 0, 0, 0, -1841172639, 0, 0, 0, 1440198190, 0, 0, 0, 350663991, 0, 0, 0, -675964900, 0, 0, 0, -1769700603, 0, 0, 0, 1503140738, 0, 0, 0, 413728923, 0, 0, 0, -604361296, 0, 0, 0, -1697958231, 0, 0, 0, 1566406630, 0, 0, 0, 476867839, 0, 0, 0, -549502508, 0, 0, 0, -1643226419, 0, 0, 0, -1574665067, 0, 0, 0, -485122164, 0, 0, 0, 541504167, 0, 0, 0, 1635232190, 0, 0, 0, -1495144207, 0, 0, 0, -405736472, 0, 0, 0, 612622019, 0, 0, 0, 1706214874, 0, 0, 0, -1431413411, 0, 0, 0, -341883324, 0, 0, 0, 684485487, 0, 0, 0, 1778217078, 0, 0, 0, -1368706759, 0, 0, 0, -279303648, 0, 0, 0, 738789131, 0, 0, 0, 1832393746, 0, 0, 0, -214546721, 0, 0, 0, -1308140090, 0, 0, 0, 1901359341, 0, 0, 0, 811953140, 0, 0, 0, -135058757, 0, 0, 0, -1228787294, 0, 0, 0, 1972444297, 0, 0, 0, 882902928, 0, 0, 0, -71524585, 0, 0, 0, -1165130738, 0, 0, 0, 2044635429, 0, 0, 0, 955232828, 0, 0, 0, -8785037, 0, 0, 0, -1102518166, 0, 0, 0, 2098971969, 0, 0, 0, 1009442392, 0, 0, 0, 89094640, 0, 0, 0, 1149133545, 0, 0, 0, -2027073598, 0, 0, 0, -971221797, 0, 0, 0, 25826708, 0, 0, 0, 1086000781, 0, 0, 0, -2081938522, 0, 0, 0, -1025951553, 0, 0, 0, 231055416, 0, 0, 0, 1291107105, 0, 0, 0, -1884842486, 0, 0, 0, -828994285, 0, 0, 0, 151047260, 0, 0, 0, 1211225925, 0, 0, 0, -1956447634, 0, 0, 0, -900472457, 0, 0, 0, 1415429050, 0, 0, 0, 359440547, 0, 0, 0, -700478072, 0, 0, 0, -1760651631, 0, 0, 0, 1352194014, 0, 0, 0, 296340679, 0, 0, 0, -755310100, 0, 0, 0, -1815348491, 0, 0, 0, 1557619314, 0, 0, 0, 501643627, 0, 0, 0, -558541760, 0, 0, 0, -1618718887, 0, 0, 0, 1477578262, 0, 0, 0, 421729551, 0, 0, 0, -630179804, 0, 0, 0, -1690229955, 0, 0, 0, -1486095003, 0, 0, 0, -430250372, 0, 0, 0, 621398871, 0, 0, 0, 1681444942, 0, 0, 0, -1548840703, 0, 0, 0, -492860904, 0, 0, 0, 567060275, 0, 0, 0, 1627241514, 0, 0, 0, -1344199507, 0, 0, 0, -288342092, 0, 0, 0, 763564703, 0, 0, 0, 1823607174, 0, 0, 0, -1423685431, 0, 0, 0, -367701040, 0, 0, 0, 692485883, 0, 0, 0, 1752655330, 0, 0, 0, -159826129, 0, 0, 0, -1220008906, 0, 0, 0, 1947928861, 0, 0, 0, 891949572, 0, 0, 0, -222538933, 0, 0, 0, -1282586542, 0, 0, 0, 1893623161, 0, 0, 0, 837779040, 0, 0, 0, -17570073, 0, 0, 0, -1077740034, 0, 0, 0, 2089930965, 0, 0, 0, 1033948108, 0, 0, 0, -97088893, 0, 0, 0, -1157131878, 0, 0, 0, 2018819249, 0, 0, 0, 962963368, 0, 0, 0, 1268286267, 0, 0, 0, 178886690, 0, 0, 0, -906316535, 0, 0, 0, -1999917552, 0, 0, 0, 1331556191, 0, 0, 0, 242021446, 0, 0, 0, -851453587, 0, 0, 0, -1945189772, 0, 0, 0, 1125276403, 0, 0, 0, 35865066, 0, 0, 0, -1049596735, 0, 0, 0, -2143193128, 0, 0, 0, 1205286551, 0, 0, 0, 115748238, 0, 0, 0, -977993563, 0, 0, 0, -2071716932, 0, 0, 0, 445268337, 0, 0, 0, 1539005032, 0, 0, 0, -1729595581, 0, 0, 0, -640062374, 0, 0, 0, 508505365, 0, 0, 0, 1602106892, 0, 0, 0, -1674765529, 0, 0, 0, -585367490, 0, 0, 0, 302028985, 0, 0, 0, 1395753888, 0, 0, 0, -1872580981, 0, 0, 0, -783043182, 0, 0, 0, 382072029, 0, 0, 0, 1475669956, 0, 0, 0, -1800944913, 0, 0, 0, -711534090, 0, 0, 0, -373553234, 0, 0, 0, -1467147081, 0, 0, 0, 1809723804, 0, 0, 0, 720317061, 0, 0, 0, -310809654, 0, 0, 0, -1404538669, 0, 0, 0, 1864064504, 0, 0, 0, 774522593, 0, 0, 0, -516497818, 0, 0, 0, -1610103425, 0, 0, 0, 1666508884, 0, 0, 0, 577106765, 0, 0, 0, -437014014, 0, 0, 0, -1530746597, 0, 0, 0, 1737589808, 0, 0, 0, 648060713, 0, 0, 0, -1196505628, 0, 0, 0, -106963203, 0, 0, 0, 986510294, 0, 0, 0, 2080237775, 0, 0, 0, -1133794944, 0, 0, 0, -44387687, 0, 0, 0, 1040818098, 0, 0, 0, 2134410411, 0, 0, 0, -1339810772, 0, 0, 0, -250280139, 0, 0, 0, 843459102, 0, 0, 0, 1937191175, 0, 0, 0, -1260294072, 0, 0, 0, -170890415, 0, 0, 0, 914572922, 0, 0, 0, 2008178019, 0, 0, 0, 1322777291, 0, 0, 0, 266789330, 0, 0, 0, -860500743, 0, 0, 0, -1920673824, 0, 0, 0, 1242732207, 0, 0, 0, 186879414, 0, 0, 0, -932142947, 0, 0, 0, -1992180860, 0, 0, 0, 1180508931, 0, 0, 0, 124532762, 0, 0, 0, -1002498767, 0, 0, 0, -2062676440, 0, 0, 0, 1117278055, 0, 0, 0, 61428862, 0, 0, 0, -1057326763, 0, 0, 0, -2117377460, 0, 0, 0, 533018753, 0, 0, 0, 1593058200, 0, 0, 0, -1649996109, 0, 0, 0, -594143830, 0, 0, 0, 453006565, 0, 0, 0, 1513181180, 0, 0, 0, -1721605417, 0, 0, 0, -665617970, 0, 0, 0, 391110985, 0, 0, 0, 1451162192, 0, 0, 0, -1792157829, 0, 0, 0, -736310174, 0, 0, 0, 327847213, 0, 0, 0, 1388025396, 0, 0, 0, -1847018721, 0, 0, 0, -791044090, 0, 0, 0, -319586722, 0, 0, 0, -1379769017, 0, 0, 0, 1855015020, 0, 0, 0, 799036277, 0, 0, 0, -399109574, 0, 0, 0, -1459156701, 0, 0, 0, 1783899144, 0, 0, 0, 728055569, 0, 0, 0, -461789290, 0, 0, 0, -1521959793, 0, 0, 0, 1713082788, 0, 0, 0, 657099453, 0, 0, 0, -524497934, 0, 0, 0, -1584541461, 0, 0, 0, 1658781120, 0, 0, 0, 602924761, 0, 0, 0, -1109279724, 0, 0, 0, -53434611, 0, 0, 0, 1065585190, 0, 0, 0, 2125631807, 0, 0, 0, -1188769680, 0, 0, 0, -132789399, 0, 0, 0, 994502210, 0, 0, 0, 2054683995, 0, 0, 0, -1251252772, 0, 0, 0, -195395899, 0, 0, 0, 923358190, 0, 0, 0, 1983400183, 0, 0, 0, -1313994312, 0, 0, 0, -258010463, 0, 0, 0, 869023626, 0, 0, 0, 1929192595, 0, 0, 0, 0, 0, 0, 0, 929743361, 0, 0, 0, 1859421187, 0, 0, 0, 1505641986, 0, 0, 0, -592967417, 0, 0, 0, -339555578, 0, 0, 0, -1300460284, 0, 0, 0, -2062135547, 0, 0, 0, -1202646258, 0, 0, 0, -1891905265, 0, 0, 0, -695888115, 0, 0, 0, -504408820, 0, 0, 0, 1694046729, 0, 0, 0, 1402198024, 0, 0, 0, 170761738, 0, 0, 0, 1028086795, 0, 0, 0, 1889740316, 0, 0, 0, 1204413469, 0, 0, 0, 511156767, 0, 0, 0, 689791006, 0, 0, 0, -1408553189, 0, 0, 0, -1688081126, 0, 0, 0, -1025529064, 0, 0, 0, -172660455, 0, 0, 0, -923650798, 0, 0, 0, -6752493, 0, 0, 0, -1507413743, 0, 0, 0, -1857260784, 0, 0, 0, 341457941, 0, 0, 0, 590413332, 0, 0, 0, 2056173590, 0, 0, 0, 1306819095, 0, 0, 0, -532263624, 0, 0, 0, -684945607, 0, 0, 0, -1902982853, 0, 0, 0, -1174926534, 0, 0, 0, 1022247999, 0, 0, 0, 193234494, 0, 0, 0, 1379582012, 0, 0, 0, 1699742269, 0, 0, 0, 1477926454, 0, 0, 0, 1870502967, 0, 0, 0, 918805045, 0, 0, 0, 27858996, 0, 0, 0, -2067835087, 0, 0, 0, -1277848272, 0, 0, 0, -362032334, 0, 0, 0, -587132621, 0, 0, 0, -1864013020, 0, 0, 0, -1483757275, 0, 0, 0, -30281945, 0, 0, 0, -916771546, 0, 0, 0, 1280139811, 0, 0, 0, 2066194466, 0, 0, 0, 580511264, 0, 0, 0, 368256033, 0, 0, 0, 682915882, 0, 0, 0, 534690347, 0, 0, 0, 1180761129, 0, 0, 0, 1896496680, 0, 0, 0, -199462611, 0, 0, 0, -1015631060, 0, 0, 0, -1698106066, 0, 0, 0, -1381877969, 0, 0, 0, -1064461712, 0, 0, 0, -135833487, 0, 0, 0, -1369891213, 0, 0, 0, -1724654478, 0, 0, 0, 472224631, 0, 0, 0, 726618486, 0, 0, 0, 1928402804, 0, 0, 0, 1167840629, 0, 0, 0, 2027719038, 0, 0, 0, 1337346943, 0, 0, 0, 369626493, 0, 0, 0, 560123772, 0, 0, 0, -1535868807, 0, 0, 0, -1826733448, 0, 0, 0, -895482758, 0, 0, 0, -37042565, 0, 0, 0, -1339114388, 0, 0, 0, -2025554323, 0, 0, 0, -554026897, 0, 0, 0, -376374674, 0, 0, 0, 1820767595, 0, 0, 0, 1542223722, 0, 0, 0, 38941032, 0, 0, 0, 892924777, 0, 0, 0, 142585698, 0, 0, 0, 1058368867, 0, 0, 0, 1722493793, 0, 0, 0, 1371662688, 0, 0, 0, -724064667, 0, 0, 0, -474127260, 0, 0, 0, -1174199706, 0, 0, 0, -1922441113, 0, 0, 0, 550229832, 0, 0, 0, 396432713, 0, 0, 0, 1310675787, 0, 0, 0, 2037748042, 0, 0, 0, -60563889, 0, 0, 0, -888595378, 0, 0, 0, -1833477556, 0, 0, 0, -1512204211, 0, 0, 0, -1734687674, 0, 0, 0, -1343224249, 0, 0, 0, -162643899, 0, 0, 0, -1054571964, 0, 0, 0, 1144180033, 0, 0, 0, 1935150912, 0, 0, 0, 719735106, 0, 0, 0, 495749955, 0, 0, 0, 1349054804, 0, 0, 0, 1728197461, 0, 0, 0, 1052538199, 0, 0, 0, 165066582, 0, 0, 0, -1933510573, 0, 0, 0, -1146471854, 0, 0, 0, -501973936, 0, 0, 0, -713114031, 0, 0, 0, -398859686, 0, 0, 0, -548200357, 0, 0, 0, -2031262119, 0, 0, 0, -1316510632, 0, 0, 0, 881978205, 0, 0, 0, 66791772, 0, 0, 0, 1514499934, 0, 0, 0, 1831841119, 0, 0, 0, -2145700383, 0, 0, 0, -1217267744, 0, 0, 0, -288378398, 0, 0, 0, -643468317, 0, 0, 0, 1555250406, 0, 0, 0, 1809448679, 0, 0, 0, 845658341, 0, 0, 0, 84769508, 0, 0, 0, 944383727, 0, 0, 0, 253813998, 0, 0, 0, 1453236972, 0, 0, 0, 1643405549, 0, 0, 0, -454938648, 0, 0, 0, -746000919, 0, 0, 0, -1976128533, 0, 0, 0, -1118017046, 0, 0, 0, -256371715, 0, 0, 0, -942484996, 0, 0, 0, -1637050370, 0, 0, 0, -1459202561, 0, 0, 0, 739252986, 0, 0, 0, 461035771, 0, 0, 0, 1120182009, 0, 0, 0, 1974361336, 0, 0, 0, 1223229683, 0, 0, 0, 2139341554, 0, 0, 0, 641565936, 0, 0, 0, 290932465, 0, 0, 0, -1807676940, 0, 0, 0, -1557410827, 0, 0, 0, -90862089, 0, 0, 0, -838905866, 0, 0, 0, 1616738521, 0, 0, 0, 1463270104, 0, 0, 0, 243924186, 0, 0, 0, 971194075, 0, 0, 0, -1124765218, 0, 0, 0, -1952468001, 0, 0, 0, -769526307, 0, 0, 0, -448055332, 0, 0, 0, -670274601, 0, 0, 0, -278484522, 0, 0, 0, -1227296812, 0, 0, 0, -2119029291, 0, 0, 0, 77882064, 0, 0, 0, 869179601, 0, 0, 0, 1785784019, 0, 0, 0, 1561994450, 0, 0, 0, 285105861, 0, 0, 0, 664050884, 0, 0, 0, 2116737734, 0, 0, 0, 1228937415, 0, 0, 0, -866756670, 0, 0, 0, -79915581, 0, 0, 0, -1568484415, 0, 0, 0, -1779953216, 0, 0, 0, -1464906293, 0, 0, 0, -1614442550, 0, 0, 0, -964965944, 0, 0, 0, -250541111, 0, 0, 0, 1946633420, 0, 0, 0, 1131251405, 0, 0, 0, 450085071, 0, 0, 0, 767099598, 0, 0, 0, 1083617169, 0, 0, 0, 2013031824, 0, 0, 0, 776088466, 0, 0, 0, 422111635, 0, 0, 0, -1673615722, 0, 0, 0, -1420532585, 0, 0, 0, -219536747, 0, 0, 0, -981409644, 0, 0, 0, -121127777, 0, 0, 0, -810713442, 0, 0, 0, -1777125220, 0, 0, 0, -1585841507, 0, 0, 0, 611300760, 0, 0, 0, 319125401, 0, 0, 0, 1253781915, 0, 0, 0, 2110911386, 0, 0, 0, 808814989, 0, 0, 0, 123685772, 0, 0, 0, 1591807374, 0, 0, 0, 1770770319, 0, 0, 0, -325222262, 0, 0, 0, -604552565, 0, 0, 0, -2109143927, 0, 0, 0, -1255946616, 0, 0, 0, -2006672765, 0, 0, 0, -1089578878, 0, 0, 0, -424665472, 0, 0, 0, -774185855, 0, 0, 0, 1422693252, 0, 0, 0, 1671844229, 0, 0, 0, 974657415, 0, 0, 0, 225629574, 0, 0, 0, -1596923223, 0, 0, 0, -1749409624, 0, 0, 0, -838572374, 0, 0, 0, -110189397, 0, 0, 0, 2088299438, 0, 0, 0, 1259481519, 0, 0, 0, 313290669, 0, 0, 0, 633777580, 0, 0, 0, 411169191, 0, 0, 0, 803943334, 0, 0, 0, 1985312164, 0, 0, 0, 1094694821, 0, 0, 0, -1003882336, 0, 0, 0, -213697887, 0, 0, 0, -1426228061, 0, 0, 0, -1650999646, 0, 0, 0, -797719371, 0, 0, 0, -417790284, 0, 0, 0, -1096335178, 0, 0, 0, -1983020361, 0, 0, 0, 215731634, 0, 0, 0, 1001459635, 0, 0, 0, 1645169073, 0, 0, 0, 1432718256, 0, 0, 0, 1747113915, 0, 0, 0, 1598559674, 0, 0, 0, 116806584, 0, 0, 0, 832344505, 0, 0, 0, -1265967428, 0, 0, 0, -2082464579, 0, 0, 0, -631350593, 0, 0, 0, -315320130, 0, 0, 0, 0, 0, 0, 0, 1701297336, 0, 0, 0, -1949824598, 0, 0, 0, -290474734, 0, 0, 0, 1469538959, 0, 0, 0, 854646327, 0, 0, 0, -597726427, 0, 0, 0, -1187457123, 0, 0, 0, -282544955, 0, 0, 0, -1974531971, 0, 0, 0, 1692450159, 0, 0, 0, 25625047, 0, 0, 0, -1195387318, 0, 0, 0, -573019406, 0, 0, 0, 863494112, 0, 0, 0, 1443914584, 0, 0, 0, -1621681840, 0, 0, 0, -97475096, 0, 0, 0, 345968890, 0, 0, 0, 1912122434, 0, 0, 0, -926909473, 0, 0, 0, -1381513369, 0, 0, 0, 1124627061, 0, 0, 0, 644861645, 0, 0, 0, 1887415701, 0, 0, 0, 353898797, 0, 0, 0, -71850945, 0, 0, 0, -1630529401, 0, 0, 0, 669568794, 0, 0, 0, 1116697506, 0, 0, 0, -1407138128, 0, 0, 0, -918062584, 0, 0, 0, 1051669152, 0, 0, 0, 1539870232, 0, 0, 0, -1251525878, 0, 0, 0, -805271630, 0, 0, 0, 1765298223, 0, 0, 0, 207613079, 0, 0, 0, -487564923, 0, 0, 0, -2020088515, 0, 0, 0, -779647387, 0, 0, 0, -1260373283, 0, 0, 0, 1515163599, 0, 0, 0, 1059599223, 0, 0, 0, -2045713174, 0, 0, 0, -478717870, 0, 0, 0, 232320320, 0, 0, 0, 1757368824, 0, 0, 0, -1577571344, 0, 0, 0, -996174008, 0, 0, 0, 707797594, 0, 0, 0, 1331142370, 0, 0, 0, -160478849, 0, 0, 0, -1828129337, 0, 0, 0, 2108113109, 0, 0, 0, 415300717, 0, 0, 0, 1322295093, 0, 0, 0, 733422477, 0, 0, 0, -988244321, 0, 0, 0, -1602278873, 0, 0, 0, 424148410, 0, 0, 0, 2082488578, 0, 0, 0, -1836059632, 0, 0, 0, -135771992, 0, 0, 0, 1029182619, 0, 0, 0, 1480566819, 0, 0, 0, -1232069327, 0, 0, 0, -738745975, 0, 0, 0, 1791981076, 0, 0, 0, 262720172, 0, 0, 0, -519602242, 0, 0, 0, -2074033402, 0, 0, 0, -764370850, 0, 0, 0, -1223222042, 0, 0, 0, 1505274356, 0, 0, 0, 1021252940, 0, 0, 0, -2048408879, 0, 0, 0, -528449943, 0, 0, 0, 238013307, 0, 0, 0, 1799911363, 0, 0, 0, -1576071733, 0, 0, 0, -949440141, 0, 0, 0, 700908641, 0, 0, 0, 1285601497, 0, 0, 0, -174559420, 0, 0, 0, -1862282244, 0, 0, 0, 2119198446, 0, 0, 0, 456645206, 0, 0, 0, 1294448910, 0, 0, 0, 675284406, 0, 0, 0, -957370204, 0, 0, 0, -1551365092, 0, 0, 0, 447798145, 0, 0, 0, 2144823097, 0, 0, 0, -1854352853, 0, 0, 0, -199266669, 0, 0, 0, 66528827, 0, 0, 0, 1720752771, 0, 0, 0, -2009124975, 0, 0, 0, -312962263, 0, 0, 0, 1415595188, 0, 0, 0, 822605836, 0, 0, 0, -542618338, 0, 0, 0, -1160777306, 0, 0, 0, -320892162, 0, 0, 0, -1984418234, 0, 0, 0, 1729600340, 0, 0, 0, 40904684, 0, 0, 0, -1152847759, 0, 0, 0, -567325495, 0, 0, 0, 813758939, 0, 0, 0, 1441219939, 0, 0, 0, -1667219605, 0, 0, 0, -104365101, 0, 0, 0, 392705729, 0, 0, 0, 1913621113, 0, 0, 0, -885563932, 0, 0, 0, -1370431140, 0, 0, 0, 1090475086, 0, 0, 0, 630778102, 0, 0, 0, 1938328494, 0, 0, 0, 384775958, 0, 0, 0, -129990140, 0, 0, 0, -1658372420, 0, 0, 0, 606071073, 0, 0, 0, 1098405273, 0, 0, 0, -1344806773, 0, 0, 0, -894411725, 0, 0, 0, 1001806317, 0, 0, 0, 1590814037, 0, 0, 0, -1333899193, 0, 0, 0, -719721217, 0, 0, 0, 1814117218, 0, 0, 0, 155617242, 0, 0, 0, -404147512, 0, 0, 0, -2104586640, 0, 0, 0, -727782104, 0, 0, 0, -1309060720, 0, 0, 0, 1599530114, 0, 0, 0, 976312378, 0, 0, 0, -2096525401, 0, 0, 0, -428985569, 0, 0, 0, 146900493, 0, 0, 0, 1839610549, 0, 0, 0, -1528741699, 0, 0, 0, -1048118267, 0, 0, 0, 791234839, 0, 0, 0, 1246688687, 0, 0, 0, -210361806, 0, 0, 0, -1777230198, 0, 0, 0, 2025728920, 0, 0, 0, 500799264, 0, 0, 0, 1271526520, 0, 0, 0, 783173824, 0, 0, 0, -1073611310, 0, 0, 0, -1520025238, 0, 0, 0, 475961079, 0, 0, 0, 2033789519, 0, 0, 0, -1751736483, 0, 0, 0, -219077659, 0, 0, 0, 85551949, 0, 0, 0, 1618925557, 0, 0, 0, -1898880281, 0, 0, 0, -340337057, 0, 0, 0, 1385040322, 0, 0, 0, 938063226, 0, 0, 0, -649723800, 0, 0, 0, -1138639664, 0, 0, 0, -365830264, 0, 0, 0, -1890163920, 0, 0, 0, 1643763234, 0, 0, 0, 77490842, 0, 0, 0, -1113146105, 0, 0, 0, -658439745, 0, 0, 0, 913224877, 0, 0, 0, 1393100821, 0, 0, 0, -1706135011, 0, 0, 0, -14037339, 0, 0, 0, 294026167, 0, 0, 0, 1960953615, 0, 0, 0, -841412462, 0, 0, 0, -1463899094, 0, 0, 0, 1175525688, 0, 0, 0, 594978176, 0, 0, 0, 1969669848, 0, 0, 0, 268532320, 0, 0, 0, -22098062, 0, 0, 0, -1681296438, 0, 0, 0, 586261591, 0, 0, 0, 1201019119, 0, 0, 0, -1455837699, 0, 0, 0, -866250427, 0, 0, 0, 116280694, 0, 0, 0, 1669984718, 0, 0, 0, -1926871844, 0, 0, 0, -398329756, 0, 0, 0, 1366896633, 0, 0, 0, 874419009, 0, 0, 0, -625924525, 0, 0, 0, -1076454677, 0, 0, 0, -372835917, 0, 0, 0, -1935588085, 0, 0, 0, 1645146137, 0, 0, 0, 124341409, 0, 0, 0, -1101948100, 0, 0, 0, -617207932, 0, 0, 0, 899256982, 0, 0, 0, 1358835246, 0, 0, 0, -1715907546, 0, 0, 0, -52500322, 0, 0, 0, 309419404, 0, 0, 0, 1997988148, 0, 0, 0, -835832151, 0, 0, 0, -1421243887, 0, 0, 0, 1172717315, 0, 0, 0, 545358779, 0, 0, 0, 1989271779, 0, 0, 0, 334912603, 0, 0, 0, -44439223, 0, 0, 0, -1740745231, 0, 0, 0, 554074732, 0, 0, 0, 1147223764, 0, 0, 0, -1429304378, 0, 0, 0, -810993794, 0, 0, 0, 943816662, 0, 0, 0, 1562821486, 0, 0, 0, -1282836868, 0, 0, 0, -688993596, 0, 0, 0, 1876303193, 0, 0, 0, 179413473, 0, 0, 0, -467790605, 0, 0, 0, -2122733493, 0, 0, 0, -680932589, 0, 0, 0, -1307674709, 0, 0, 0, 1554105017, 0, 0, 0, 969309697, 0, 0, 0, -2130794084, 0, 0, 0, -442952412, 0, 0, 0, 188129334, 0, 0, 0, 1850809486, 0, 0, 0, -1491704186, 0, 0, 0, -1032725954, 0, 0, 0, 752774956, 0, 0, 0, 1236915092, 0, 0, 0, -259980279, 0, 0, 0, -1780041551, 0, 0, 0, 2068385187, 0, 0, 0, 506376475, 0, 0, 0, 1212076611, 0, 0, 0, 760835835, 0, 0, 0, -1007232023, 0, 0, 0, -1500420271, 0, 0, 0, 531214540, 0, 0, 0, 2060323956, 0, 0, 0, -1805534874, 0, 0, 0, -251263522, 0, 0, 0 ], [ "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);

_configuration_table = allocate([ 0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, 0, 4, 0, 4, 0, 8, 0, 4, 0, 32, 0, 0, 0, 4, 0, 5, 0, 16, 0, 8, 0, 32, 0, 0, 0, 4, 0, 6, 0, 32, 0, 32, 0, 32, 0, 0, 0, 4, 0, 4, 0, 16, 0, 16, 0, 34, 0, 0, 0, 8, 0, 16, 0, 32, 0, 32, 0, 34, 0, 0, 0, 8, 0, 16, 0, 128, 0, 128, 0, 34, 0, 0, 0, 8, 0, 32, 0, 128, 0, 256, 0, 34, 0, 0, 0, 32, 0, 128, 0, 258, 0, 1024, 0, 34, 0, 0, 0, 32, 0, 258, 0, 258, 0, 4096, 0, 34, 0, 0, 0 ], [ "i16", 0, "i16", 0, "i16", 0, "i16", 0, "*", 0, 0, 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "*", 0, 0, 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "*", 0, 0, 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "*", 0, 0, 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "*", 0, 0, 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "*", 0, 0, 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "*", 0, 0, 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "*", 0, 0, 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "*", 0, 0, 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "*", 0, 0, 0 ], ALLOC_STATIC);

_inflate_order = allocate([ 16, 0, 17, 0, 18, 0, 0, 0, 8, 0, 7, 0, 9, 0, 6, 0, 10, 0, 5, 0, 11, 0, 4, 0, 12, 0, 3, 0, 13, 0, 2, 0, 14, 0, 1, 0, 15, 0 ], [ "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0 ], ALLOC_STATIC);

STRING_TABLE.__str11283 = allocate([ 105, 110, 99, 111, 114, 114, 101, 99, 116, 32, 104, 101, 97, 100, 101, 114, 32, 99, 104, 101, 99, 107, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str21284 = allocate([ 117, 110, 107, 110, 111, 119, 110, 32, 99, 111, 109, 112, 114, 101, 115, 115, 105, 111, 110, 32, 109, 101, 116, 104, 111, 100, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str31285 = allocate([ 105, 110, 118, 97, 108, 105, 100, 32, 119, 105, 110, 100, 111, 119, 32, 115, 105, 122, 101, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str41286 = allocate([ 117, 110, 107, 110, 111, 119, 110, 32, 104, 101, 97, 100, 101, 114, 32, 102, 108, 97, 103, 115, 32, 115, 101, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str51287 = allocate([ 104, 101, 97, 100, 101, 114, 32, 99, 114, 99, 32, 109, 105, 115, 109, 97, 116, 99, 104, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str61288 = allocate([ 105, 110, 118, 97, 108, 105, 100, 32, 98, 108, 111, 99, 107, 32, 116, 121, 112, 101, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str71289 = allocate([ 105, 110, 118, 97, 108, 105, 100, 32, 115, 116, 111, 114, 101, 100, 32, 98, 108, 111, 99, 107, 32, 108, 101, 110, 103, 116, 104, 115, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str81290 = allocate([ 116, 111, 111, 32, 109, 97, 110, 121, 32, 108, 101, 110, 103, 116, 104, 32, 111, 114, 32, 100, 105, 115, 116, 97, 110, 99, 101, 32, 115, 121, 109, 98, 111, 108, 115, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str91291 = allocate([ 105, 110, 118, 97, 108, 105, 100, 32, 99, 111, 100, 101, 32, 108, 101, 110, 103, 116, 104, 115, 32, 115, 101, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str101292 = allocate([ 105, 110, 118, 97, 108, 105, 100, 32, 98, 105, 116, 32, 108, 101, 110, 103, 116, 104, 32, 114, 101, 112, 101, 97, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str111293 = allocate([ 105, 110, 118, 97, 108, 105, 100, 32, 99, 111, 100, 101, 32, 45, 45, 32, 109, 105, 115, 115, 105, 110, 103, 32, 101, 110, 100, 45, 111, 102, 45, 98, 108, 111, 99, 107, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str121294 = allocate([ 105, 110, 118, 97, 108, 105, 100, 32, 108, 105, 116, 101, 114, 97, 108, 47, 108, 101, 110, 103, 116, 104, 115, 32, 115, 101, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str131295 = allocate([ 105, 110, 118, 97, 108, 105, 100, 32, 100, 105, 115, 116, 97, 110, 99, 101, 115, 32, 115, 101, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str141296 = allocate([ 105, 110, 118, 97, 108, 105, 100, 32, 108, 105, 116, 101, 114, 97, 108, 47, 108, 101, 110, 103, 116, 104, 32, 99, 111, 100, 101, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str151297 = allocate([ 105, 110, 118, 97, 108, 105, 100, 32, 100, 105, 115, 116, 97, 110, 99, 101, 32, 99, 111, 100, 101, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str161298 = allocate([ 105, 110, 118, 97, 108, 105, 100, 32, 100, 105, 115, 116, 97, 110, 99, 101, 32, 116, 111, 111, 32, 102, 97, 114, 32, 98, 97, 99, 107, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str171299 = allocate([ 105, 110, 99, 111, 114, 114, 101, 99, 116, 32, 100, 97, 116, 97, 32, 99, 104, 101, 99, 107, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str181300 = allocate([ 105, 110, 99, 111, 114, 114, 101, 99, 116, 32, 108, 101, 110, 103, 116, 104, 32, 99, 104, 101, 99, 107, 0 ], "i8", ALLOC_STATIC);

_fixedtables_lenfix1301 = allocate([ 96, 7, 0, 0, 0, 8, 80, 0, 0, 8, 16, 0, 20, 8, 115, 0, 18, 7, 31, 0, 0, 8, 112, 0, 0, 8, 48, 0, 0, 9, 192, 0, 16, 7, 10, 0, 0, 8, 96, 0, 0, 8, 32, 0, 0, 9, 160, 0, 0, 8, 0, 0, 0, 8, 128, 0, 0, 8, 64, 0, 0, 9, 224, 0, 16, 7, 6, 0, 0, 8, 88, 0, 0, 8, 24, 0, 0, 9, 144, 0, 19, 7, 59, 0, 0, 8, 120, 0, 0, 8, 56, 0, 0, 9, 208, 0, 17, 7, 17, 0, 0, 8, 104, 0, 0, 8, 40, 0, 0, 9, 176, 0, 0, 8, 8, 0, 0, 8, 136, 0, 0, 8, 72, 0, 0, 9, 240, 0, 16, 7, 4, 0, 0, 8, 84, 0, 0, 8, 20, 0, 21, 8, 227, 0, 19, 7, 43, 0, 0, 8, 116, 0, 0, 8, 52, 0, 0, 9, 200, 0, 17, 7, 13, 0, 0, 8, 100, 0, 0, 8, 36, 0, 0, 9, 168, 0, 0, 8, 4, 0, 0, 8, 132, 0, 0, 8, 68, 0, 0, 9, 232, 0, 16, 7, 8, 0, 0, 8, 92, 0, 0, 8, 28, 0, 0, 9, 152, 0, 20, 7, 83, 0, 0, 8, 124, 0, 0, 8, 60, 0, 0, 9, 216, 0, 18, 7, 23, 0, 0, 8, 108, 0, 0, 8, 44, 0, 0, 9, 184, 0, 0, 8, 12, 0, 0, 8, 140, 0, 0, 8, 76, 0, 0, 9, 248, 0, 16, 7, 3, 0, 0, 8, 82, 0, 0, 8, 18, 0, 21, 8, 163, 0, 19, 7, 35, 0, 0, 8, 114, 0, 0, 8, 50, 0, 0, 9, 196, 0, 17, 7, 11, 0, 0, 8, 98, 0, 0, 8, 34, 0, 0, 9, 164, 0, 0, 8, 2, 0, 0, 8, 130, 0, 0, 8, 66, 0, 0, 9, 228, 0, 16, 7, 7, 0, 0, 8, 90, 0, 0, 8, 26, 0, 0, 9, 148, 0, 20, 7, 67, 0, 0, 8, 122, 0, 0, 8, 58, 0, 0, 9, 212, 0, 18, 7, 19, 0, 0, 8, 106, 0, 0, 8, 42, 0, 0, 9, 180, 0, 0, 8, 10, 0, 0, 8, 138, 0, 0, 8, 74, 0, 0, 9, 244, 0, 16, 7, 5, 0, 0, 8, 86, 0, 0, 8, 22, 0, 64, 8, 0, 0, 19, 7, 51, 0, 0, 8, 118, 0, 0, 8, 54, 0, 0, 9, 204, 0, 17, 7, 15, 0, 0, 8, 102, 0, 0, 8, 38, 0, 0, 9, 172, 0, 0, 8, 6, 0, 0, 8, 134, 0, 0, 8, 70, 0, 0, 9, 236, 0, 16, 7, 9, 0, 0, 8, 94, 0, 0, 8, 30, 0, 0, 9, 156, 0, 20, 7, 99, 0, 0, 8, 126, 0, 0, 8, 62, 0, 0, 9, 220, 0, 18, 7, 27, 0, 0, 8, 110, 0, 0, 8, 46, 0, 0, 9, 188, 0, 0, 8, 14, 0, 0, 8, 142, 0, 0, 8, 78, 0, 0, 9, 252, 0, 96, 7, 0, 0, 0, 8, 81, 0, 0, 8, 17, 0, 21, 8, 131, 0, 18, 7, 31, 0, 0, 8, 113, 0, 0, 8, 49, 0, 0, 9, 194, 0, 16, 7, 10, 0, 0, 8, 97, 0, 0, 8, 33, 0, 0, 9, 162, 0, 0, 8, 1, 0, 0, 8, 129, 0, 0, 8, 65, 0, 0, 9, 226, 0, 16, 7, 6, 0, 0, 8, 89, 0, 0, 8, 25, 0, 0, 9, 146, 0, 19, 7, 59, 0, 0, 8, 121, 0, 0, 8, 57, 0, 0, 9, 210, 0, 17, 7, 17, 0, 0, 8, 105, 0, 0, 8, 41, 0, 0, 9, 178, 0, 0, 8, 9, 0, 0, 8, 137, 0, 0, 8, 73, 0, 0, 9, 242, 0, 16, 7, 4, 0, 0, 8, 85, 0, 0, 8, 21, 0, 16, 8, 258, 0, 19, 7, 43, 0, 0, 8, 117, 0, 0, 8, 53, 0, 0, 9, 202, 0, 17, 7, 13, 0, 0, 8, 101, 0, 0, 8, 37, 0, 0, 9, 170, 0, 0, 8, 5, 0, 0, 8, 133, 0, 0, 8, 69, 0, 0, 9, 234, 0, 16, 7, 8, 0, 0, 8, 93, 0, 0, 8, 29, 0, 0, 9, 154, 0, 20, 7, 83, 0, 0, 8, 125, 0, 0, 8, 61, 0, 0, 9, 218, 0, 18, 7, 23, 0, 0, 8, 109, 0, 0, 8, 45, 0, 0, 9, 186, 0, 0, 8, 13, 0, 0, 8, 141, 0, 0, 8, 77, 0, 0, 9, 250, 0, 16, 7, 3, 0, 0, 8, 83, 0, 0, 8, 19, 0, 21, 8, 195, 0, 19, 7, 35, 0, 0, 8, 115, 0, 0, 8, 51, 0, 0, 9, 198, 0, 17, 7, 11, 0, 0, 8, 99, 0, 0, 8, 35, 0, 0, 9, 166, 0, 0, 8, 3, 0, 0, 8, 131, 0, 0, 8, 67, 0, 0, 9, 230, 0, 16, 7, 7, 0, 0, 8, 91, 0, 0, 8, 27, 0, 0, 9, 150, 0, 20, 7, 67, 0, 0, 8, 123, 0, 0, 8, 59, 0, 0, 9, 214, 0, 18, 7, 19, 0, 0, 8, 107, 0, 0, 8, 43, 0, 0, 9, 182, 0, 0, 8, 11, 0, 0, 8, 139, 0, 0, 8, 75, 0, 0, 9, 246, 0, 16, 7, 5, 0, 0, 8, 87, 0, 0, 8, 23, 0, 64, 8, 0, 0, 19, 7, 51, 0, 0, 8, 119, 0, 0, 8, 55, 0, 0, 9, 206, 0, 17, 7, 15, 0, 0, 8, 103, 0, 0, 8, 39, 0, 0, 9, 174, 0, 0, 8, 7, 0, 0, 8, 135, 0, 0, 8, 71, 0, 0, 9, 238, 0, 16, 7, 9, 0, 0, 8, 95, 0, 0, 8, 31, 0, 0, 9, 158, 0, 20, 7, 99, 0, 0, 8, 127, 0, 0, 8, 63, 0, 0, 9, 222, 0, 18, 7, 27, 0, 0, 8, 111, 0, 0, 8, 47, 0, 0, 9, 190, 0, 0, 8, 15, 0, 0, 8, 143, 0, 0, 8, 79, 0, 0, 9, 254, 0, 96, 7, 0, 0, 0, 8, 80, 0, 0, 8, 16, 0, 20, 8, 115, 0, 18, 7, 31, 0, 0, 8, 112, 0, 0, 8, 48, 0, 0, 9, 193, 0, 16, 7, 10, 0, 0, 8, 96, 0, 0, 8, 32, 0, 0, 9, 161, 0, 0, 8, 0, 0, 0, 8, 128, 0, 0, 8, 64, 0, 0, 9, 225, 0, 16, 7, 6, 0, 0, 8, 88, 0, 0, 8, 24, 0, 0, 9, 145, 0, 19, 7, 59, 0, 0, 8, 120, 0, 0, 8, 56, 0, 0, 9, 209, 0, 17, 7, 17, 0, 0, 8, 104, 0, 0, 8, 40, 0, 0, 9, 177, 0, 0, 8, 8, 0, 0, 8, 136, 0, 0, 8, 72, 0, 0, 9, 241, 0, 16, 7, 4, 0, 0, 8, 84, 0, 0, 8, 20, 0, 21, 8, 227, 0, 19, 7, 43, 0, 0, 8, 116, 0, 0, 8, 52, 0, 0, 9, 201, 0, 17, 7, 13, 0, 0, 8, 100, 0, 0, 8, 36, 0, 0, 9, 169, 0, 0, 8, 4, 0, 0, 8, 132, 0, 0, 8, 68, 0, 0, 9, 233, 0, 16, 7, 8, 0, 0, 8, 92, 0, 0, 8, 28, 0, 0, 9, 153, 0, 20, 7, 83, 0, 0, 8, 124, 0, 0, 8, 60, 0, 0, 9, 217, 0, 18, 7, 23, 0, 0, 8, 108, 0, 0, 8, 44, 0, 0, 9, 185, 0, 0, 8, 12, 0, 0, 8, 140, 0, 0, 8, 76, 0, 0, 9, 249, 0, 16, 7, 3, 0, 0, 8, 82, 0, 0, 8, 18, 0, 21, 8, 163, 0, 19, 7, 35, 0, 0, 8, 114, 0, 0, 8, 50, 0, 0, 9, 197, 0, 17, 7, 11, 0, 0, 8, 98, 0, 0, 8, 34, 0, 0, 9, 165, 0, 0, 8, 2, 0, 0, 8, 130, 0, 0, 8, 66, 0, 0, 9, 229, 0, 16, 7, 7, 0, 0, 8, 90, 0, 0, 8, 26, 0, 0, 9, 149, 0, 20, 7, 67, 0, 0, 8, 122, 0, 0, 8, 58, 0, 0, 9, 213, 0, 18, 7, 19, 0, 0, 8, 106, 0, 0, 8, 42, 0, 0, 9, 181, 0, 0, 8, 10, 0, 0, 8, 138, 0, 0, 8, 74, 0, 0, 9, 245, 0, 16, 7, 5, 0, 0, 8, 86, 0, 0, 8, 22, 0, 64, 8, 0, 0, 19, 7, 51, 0, 0, 8, 118, 0, 0, 8, 54, 0, 0, 9, 205, 0, 17, 7, 15, 0, 0, 8, 102, 0, 0, 8, 38, 0, 0, 9, 173, 0, 0, 8, 6, 0, 0, 8, 134, 0, 0, 8, 70, 0, 0, 9, 237, 0, 16, 7, 9, 0, 0, 8, 94, 0, 0, 8, 30, 0, 0, 9, 157, 0, 20, 7, 99, 0, 0, 8, 126, 0, 0, 8, 62, 0, 0, 9, 221, 0, 18, 7, 27, 0, 0, 8, 110, 0, 0, 8, 46, 0, 0, 9, 189, 0, 0, 8, 14, 0, 0, 8, 142, 0, 0, 8, 78, 0, 0, 9, 253, 0, 96, 7, 0, 0, 0, 8, 81, 0, 0, 8, 17, 0, 21, 8, 131, 0, 18, 7, 31, 0, 0, 8, 113, 0, 0, 8, 49, 0, 0, 9, 195, 0, 16, 7, 10, 0, 0, 8, 97, 0, 0, 8, 33, 0, 0, 9, 163, 0, 0, 8, 1, 0, 0, 8, 129, 0, 0, 8, 65, 0, 0, 9, 227, 0, 16, 7, 6, 0, 0, 8, 89, 0, 0, 8, 25, 0, 0, 9, 147, 0, 19, 7, 59, 0, 0, 8, 121, 0, 0, 8, 57, 0, 0, 9, 211, 0, 17, 7, 17, 0, 0, 8, 105, 0, 0, 8, 41, 0, 0, 9, 179, 0, 0, 8, 9, 0, 0, 8, 137, 0, 0, 8, 73, 0, 0, 9, 243, 0, 16, 7, 4, 0, 0, 8, 85, 0, 0, 8, 21, 0, 16, 8, 258, 0, 19, 7, 43, 0, 0, 8, 117, 0, 0, 8, 53, 0, 0, 9, 203, 0, 17, 7, 13, 0, 0, 8, 101, 0, 0, 8, 37, 0, 0, 9, 171, 0, 0, 8, 5, 0, 0, 8, 133, 0, 0, 8, 69, 0, 0, 9, 235, 0, 16, 7, 8, 0, 0, 8, 93, 0, 0, 8, 29, 0, 0, 9, 155, 0, 20, 7, 83, 0, 0, 8, 125, 0, 0, 8, 61, 0, 0, 9, 219, 0, 18, 7, 23, 0, 0, 8, 109, 0, 0, 8, 45, 0, 0, 9, 187, 0, 0, 8, 13, 0, 0, 8, 141, 0, 0, 8, 77, 0, 0, 9, 251, 0, 16, 7, 3, 0, 0, 8, 83, 0, 0, 8, 19, 0, 21, 8, 195, 0, 19, 7, 35, 0, 0, 8, 115, 0, 0, 8, 51, 0, 0, 9, 199, 0, 17, 7, 11, 0, 0, 8, 99, 0, 0, 8, 35, 0, 0, 9, 167, 0, 0, 8, 3, 0, 0, 8, 131, 0, 0, 8, 67, 0, 0, 9, 231, 0, 16, 7, 7, 0, 0, 8, 91, 0, 0, 8, 27, 0, 0, 9, 151, 0, 20, 7, 67, 0, 0, 8, 123, 0, 0, 8, 59, 0, 0, 9, 215, 0, 18, 7, 19, 0, 0, 8, 107, 0, 0, 8, 43, 0, 0, 9, 183, 0, 0, 8, 11, 0, 0, 8, 139, 0, 0, 8, 75, 0, 0, 9, 247, 0, 16, 7, 5, 0, 0, 8, 87, 0, 0, 8, 23, 0, 64, 8, 0, 0, 19, 7, 51, 0, 0, 8, 119, 0, 0, 8, 55, 0, 0, 9, 207, 0, 17, 7, 15, 0, 0, 8, 103, 0, 0, 8, 39, 0, 0, 9, 175, 0, 0, 8, 7, 0, 0, 8, 135, 0, 0, 8, 71, 0, 0, 9, 239, 0, 16, 7, 9, 0, 0, 8, 95, 0, 0, 8, 31, 0, 0, 9, 159, 0, 20, 7, 99, 0, 0, 8, 127, 0, 0, 8, 63, 0, 0, 9, 223, 0, 18, 7, 27, 0, 0, 8, 111, 0, 0, 8, 47, 0, 0, 9, 191, 0, 0, 8, 15, 0, 0, 8, 143, 0, 0, 8, 79, 0, 0, 9, 255, 0 ], [ "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0 ], ALLOC_STATIC);

_fixedtables_distfix1302 = allocate([ 16, 5, 1, 0, 23, 5, 257, 0, 19, 5, 17, 0, 27, 5, 4097, 0, 17, 5, 5, 0, 25, 5, 1025, 0, 21, 5, 65, 0, 29, 5, 16385, 0, 16, 5, 3, 0, 24, 5, 513, 0, 20, 5, 33, 0, 28, 5, 8193, 0, 18, 5, 9, 0, 26, 5, 2049, 0, 22, 5, 129, 0, 64, 5, 0, 0, 16, 5, 2, 0, 23, 5, 385, 0, 19, 5, 25, 0, 27, 5, 6145, 0, 17, 5, 7, 0, 25, 5, 1537, 0, 21, 5, 97, 0, 29, 5, 24577, 0, 16, 5, 4, 0, 24, 5, 769, 0, 20, 5, 49, 0, 28, 5, 12289, 0, 18, 5, 13, 0, 26, 5, 3073, 0, 22, 5, 193, 0, 64, 5, 0, 0 ], [ "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0, "i8", "i8", "i16", 0 ], ALLOC_STATIC);

_inflate_table_lbase = allocate([ 3, 0, 4, 0, 5, 0, 6, 0, 7, 0, 8, 0, 9, 0, 10, 0, 11, 0, 13, 0, 15, 0, 17, 0, 19, 0, 23, 0, 27, 0, 31, 0, 35, 0, 43, 0, 51, 0, 59, 0, 67, 0, 83, 0, 99, 0, 115, 0, 131, 0, 163, 0, 195, 0, 227, 0, 258, 0, 0, 0, 0, 0 ], [ "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0 ], ALLOC_STATIC);

_inflate_table_lext = allocate([ 16, 0, 16, 0, 16, 0, 16, 0, 16, 0, 16, 0, 16, 0, 16, 0, 17, 0, 17, 0, 17, 0, 17, 0, 18, 0, 18, 0, 18, 0, 18, 0, 19, 0, 19, 0, 19, 0, 19, 0, 20, 0, 20, 0, 20, 0, 20, 0, 21, 0, 21, 0, 21, 0, 21, 0, 16, 0, 203, 0, 69, 0 ], [ "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0 ], ALLOC_STATIC);

_inflate_table_dbase = allocate([ 1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 7, 0, 9, 0, 13, 0, 17, 0, 25, 0, 33, 0, 49, 0, 65, 0, 97, 0, 129, 0, 193, 0, 257, 0, 385, 0, 513, 0, 769, 0, 1025, 0, 1537, 0, 2049, 0, 3073, 0, 4097, 0, 6145, 0, 8193, 0, 12289, 0, 16385, 0, 24577, 0, 0, 0, 0, 0 ], [ "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0 ], ALLOC_STATIC);

_inflate_table_dext = allocate([ 16, 0, 16, 0, 16, 0, 16, 0, 17, 0, 17, 0, 18, 0, 18, 0, 19, 0, 19, 0, 20, 0, 20, 0, 21, 0, 21, 0, 22, 0, 22, 0, 23, 0, 23, 0, 24, 0, 24, 0, 25, 0, 25, 0, 26, 0, 26, 0, 27, 0, 27, 0, 28, 0, 28, 0, 29, 0, 29, 0, 64, 0, 64, 0 ], [ "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0 ], ALLOC_STATIC);

STRING_TABLE.__dist_code = allocate([ 0, 1, 2, 3, 4, 4, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 16, 17, 18, 18, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29 ], "i8", ALLOC_STATIC);

STRING_TABLE.__length_code = allocate([ 0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 28 ], "i8", ALLOC_STATIC);

_static_l_desc = allocate([ 0, 0, 0, 0, 0, 0, 0, 0, 257, 0, 0, 0, 286, 0, 0, 0, 15, 0, 0, 0 ], [ "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);

_static_d_desc = allocate([ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, 0, 15, 0, 0, 0 ], [ "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);

_static_bl_desc = allocate([ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 7, 0, 0, 0 ], [ "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);

_static_ltree = allocate([ 12, 0, 8, 0, 140, 0, 8, 0, 76, 0, 8, 0, 204, 0, 8, 0, 44, 0, 8, 0, 172, 0, 8, 0, 108, 0, 8, 0, 236, 0, 8, 0, 28, 0, 8, 0, 156, 0, 8, 0, 92, 0, 8, 0, 220, 0, 8, 0, 60, 0, 8, 0, 188, 0, 8, 0, 124, 0, 8, 0, 252, 0, 8, 0, 2, 0, 8, 0, 130, 0, 8, 0, 66, 0, 8, 0, 194, 0, 8, 0, 34, 0, 8, 0, 162, 0, 8, 0, 98, 0, 8, 0, 226, 0, 8, 0, 18, 0, 8, 0, 146, 0, 8, 0, 82, 0, 8, 0, 210, 0, 8, 0, 50, 0, 8, 0, 178, 0, 8, 0, 114, 0, 8, 0, 242, 0, 8, 0, 10, 0, 8, 0, 138, 0, 8, 0, 74, 0, 8, 0, 202, 0, 8, 0, 42, 0, 8, 0, 170, 0, 8, 0, 106, 0, 8, 0, 234, 0, 8, 0, 26, 0, 8, 0, 154, 0, 8, 0, 90, 0, 8, 0, 218, 0, 8, 0, 58, 0, 8, 0, 186, 0, 8, 0, 122, 0, 8, 0, 250, 0, 8, 0, 6, 0, 8, 0, 134, 0, 8, 0, 70, 0, 8, 0, 198, 0, 8, 0, 38, 0, 8, 0, 166, 0, 8, 0, 102, 0, 8, 0, 230, 0, 8, 0, 22, 0, 8, 0, 150, 0, 8, 0, 86, 0, 8, 0, 214, 0, 8, 0, 54, 0, 8, 0, 182, 0, 8, 0, 118, 0, 8, 0, 246, 0, 8, 0, 14, 0, 8, 0, 142, 0, 8, 0, 78, 0, 8, 0, 206, 0, 8, 0, 46, 0, 8, 0, 174, 0, 8, 0, 110, 0, 8, 0, 238, 0, 8, 0, 30, 0, 8, 0, 158, 0, 8, 0, 94, 0, 8, 0, 222, 0, 8, 0, 62, 0, 8, 0, 190, 0, 8, 0, 126, 0, 8, 0, 254, 0, 8, 0, 1, 0, 8, 0, 129, 0, 8, 0, 65, 0, 8, 0, 193, 0, 8, 0, 33, 0, 8, 0, 161, 0, 8, 0, 97, 0, 8, 0, 225, 0, 8, 0, 17, 0, 8, 0, 145, 0, 8, 0, 81, 0, 8, 0, 209, 0, 8, 0, 49, 0, 8, 0, 177, 0, 8, 0, 113, 0, 8, 0, 241, 0, 8, 0, 9, 0, 8, 0, 137, 0, 8, 0, 73, 0, 8, 0, 201, 0, 8, 0, 41, 0, 8, 0, 169, 0, 8, 0, 105, 0, 8, 0, 233, 0, 8, 0, 25, 0, 8, 0, 153, 0, 8, 0, 89, 0, 8, 0, 217, 0, 8, 0, 57, 0, 8, 0, 185, 0, 8, 0, 121, 0, 8, 0, 249, 0, 8, 0, 5, 0, 8, 0, 133, 0, 8, 0, 69, 0, 8, 0, 197, 0, 8, 0, 37, 0, 8, 0, 165, 0, 8, 0, 101, 0, 8, 0, 229, 0, 8, 0, 21, 0, 8, 0, 149, 0, 8, 0, 85, 0, 8, 0, 213, 0, 8, 0, 53, 0, 8, 0, 181, 0, 8, 0, 117, 0, 8, 0, 245, 0, 8, 0, 13, 0, 8, 0, 141, 0, 8, 0, 77, 0, 8, 0, 205, 0, 8, 0, 45, 0, 8, 0, 173, 0, 8, 0, 109, 0, 8, 0, 237, 0, 8, 0, 29, 0, 8, 0, 157, 0, 8, 0, 93, 0, 8, 0, 221, 0, 8, 0, 61, 0, 8, 0, 189, 0, 8, 0, 125, 0, 8, 0, 253, 0, 8, 0, 19, 0, 9, 0, 275, 0, 9, 0, 147, 0, 9, 0, 403, 0, 9, 0, 83, 0, 9, 0, 339, 0, 9, 0, 211, 0, 9, 0, 467, 0, 9, 0, 51, 0, 9, 0, 307, 0, 9, 0, 179, 0, 9, 0, 435, 0, 9, 0, 115, 0, 9, 0, 371, 0, 9, 0, 243, 0, 9, 0, 499, 0, 9, 0, 11, 0, 9, 0, 267, 0, 9, 0, 139, 0, 9, 0, 395, 0, 9, 0, 75, 0, 9, 0, 331, 0, 9, 0, 203, 0, 9, 0, 459, 0, 9, 0, 43, 0, 9, 0, 299, 0, 9, 0, 171, 0, 9, 0, 427, 0, 9, 0, 107, 0, 9, 0, 363, 0, 9, 0, 235, 0, 9, 0, 491, 0, 9, 0, 27, 0, 9, 0, 283, 0, 9, 0, 155, 0, 9, 0, 411, 0, 9, 0, 91, 0, 9, 0, 347, 0, 9, 0, 219, 0, 9, 0, 475, 0, 9, 0, 59, 0, 9, 0, 315, 0, 9, 0, 187, 0, 9, 0, 443, 0, 9, 0, 123, 0, 9, 0, 379, 0, 9, 0, 251, 0, 9, 0, 507, 0, 9, 0, 7, 0, 9, 0, 263, 0, 9, 0, 135, 0, 9, 0, 391, 0, 9, 0, 71, 0, 9, 0, 327, 0, 9, 0, 199, 0, 9, 0, 455, 0, 9, 0, 39, 0, 9, 0, 295, 0, 9, 0, 167, 0, 9, 0, 423, 0, 9, 0, 103, 0, 9, 0, 359, 0, 9, 0, 231, 0, 9, 0, 487, 0, 9, 0, 23, 0, 9, 0, 279, 0, 9, 0, 151, 0, 9, 0, 407, 0, 9, 0, 87, 0, 9, 0, 343, 0, 9, 0, 215, 0, 9, 0, 471, 0, 9, 0, 55, 0, 9, 0, 311, 0, 9, 0, 183, 0, 9, 0, 439, 0, 9, 0, 119, 0, 9, 0, 375, 0, 9, 0, 247, 0, 9, 0, 503, 0, 9, 0, 15, 0, 9, 0, 271, 0, 9, 0, 143, 0, 9, 0, 399, 0, 9, 0, 79, 0, 9, 0, 335, 0, 9, 0, 207, 0, 9, 0, 463, 0, 9, 0, 47, 0, 9, 0, 303, 0, 9, 0, 175, 0, 9, 0, 431, 0, 9, 0, 111, 0, 9, 0, 367, 0, 9, 0, 239, 0, 9, 0, 495, 0, 9, 0, 31, 0, 9, 0, 287, 0, 9, 0, 159, 0, 9, 0, 415, 0, 9, 0, 95, 0, 9, 0, 351, 0, 9, 0, 223, 0, 9, 0, 479, 0, 9, 0, 63, 0, 9, 0, 319, 0, 9, 0, 191, 0, 9, 0, 447, 0, 9, 0, 127, 0, 9, 0, 383, 0, 9, 0, 255, 0, 9, 0, 511, 0, 9, 0, 0, 0, 7, 0, 64, 0, 7, 0, 32, 0, 7, 0, 96, 0, 7, 0, 16, 0, 7, 0, 80, 0, 7, 0, 48, 0, 7, 0, 112, 0, 7, 0, 8, 0, 7, 0, 72, 0, 7, 0, 40, 0, 7, 0, 104, 0, 7, 0, 24, 0, 7, 0, 88, 0, 7, 0, 56, 0, 7, 0, 120, 0, 7, 0, 4, 0, 7, 0, 68, 0, 7, 0, 36, 0, 7, 0, 100, 0, 7, 0, 20, 0, 7, 0, 84, 0, 7, 0, 52, 0, 7, 0, 116, 0, 7, 0, 3, 0, 8, 0, 131, 0, 8, 0, 67, 0, 8, 0, 195, 0, 8, 0, 35, 0, 8, 0, 163, 0, 8, 0, 99, 0, 8, 0, 227, 0, 8, 0 ], [ "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0 ], ALLOC_STATIC);

_static_dtree = allocate([ 0, 0, 5, 0, 16, 0, 5, 0, 8, 0, 5, 0, 24, 0, 5, 0, 4, 0, 5, 0, 20, 0, 5, 0, 12, 0, 5, 0, 28, 0, 5, 0, 2, 0, 5, 0, 18, 0, 5, 0, 10, 0, 5, 0, 26, 0, 5, 0, 6, 0, 5, 0, 22, 0, 5, 0, 14, 0, 5, 0, 30, 0, 5, 0, 1, 0, 5, 0, 17, 0, 5, 0, 9, 0, 5, 0, 25, 0, 5, 0, 5, 0, 5, 0, 21, 0, 5, 0, 13, 0, 5, 0, 29, 0, 5, 0, 3, 0, 5, 0, 19, 0, 5, 0, 11, 0, 5, 0, 27, 0, 5, 0, 7, 0, 5, 0, 23, 0, 5, 0 ], [ "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0 ], ALLOC_STATIC);

_extra_lbits = allocate([ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0 ], [ "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);

_base_length = allocate([ 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 10, 0, 0, 0, 12, 0, 0, 0, 14, 0, 0, 0, 16, 0, 0, 0, 20, 0, 0, 0, 24, 0, 0, 0, 28, 0, 0, 0, 32, 0, 0, 0, 40, 0, 0, 0, 48, 0, 0, 0, 56, 0, 0, 0, 64, 0, 0, 0, 80, 0, 0, 0, 96, 0, 0, 0, 112, 0, 0, 0, 128, 0, 0, 0, 160, 0, 0, 0, 192, 0, 0, 0, 224, 0, 0, 0, 0, 0, 0, 0 ], [ "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);

_extra_dbits = allocate([ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 9, 0, 0, 0, 10, 0, 0, 0, 10, 0, 0, 0, 11, 0, 0, 0, 11, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 13, 0, 0, 0, 13, 0, 0, 0 ], [ "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);

_base_dist = allocate([ 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 6, 0, 0, 0, 8, 0, 0, 0, 12, 0, 0, 0, 16, 0, 0, 0, 24, 0, 0, 0, 32, 0, 0, 0, 48, 0, 0, 0, 64, 0, 0, 0, 96, 0, 0, 0, 128, 0, 0, 0, 192, 0, 0, 0, 256, 0, 0, 0, 384, 0, 0, 0, 512, 0, 0, 0, 768, 0, 0, 0, 1024, 0, 0, 0, 1536, 0, 0, 0, 2048, 0, 0, 0, 3072, 0, 0, 0, 4096, 0, 0, 0, 6144, 0, 0, 0, 8192, 0, 0, 0, 12288, 0, 0, 0, 16384, 0, 0, 0, 24576, 0, 0, 0 ], [ "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);

STRING_TABLE._bl_order = allocate([ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ], "i8", ALLOC_STATIC);

_extra_blbits = allocate([ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 7, 0, 0, 0 ], [ "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);

STRING_TABLE.__str41333 = allocate([ 115, 116, 114, 101, 97, 109, 32, 101, 114, 114, 111, 114, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str61335 = allocate([ 105, 110, 115, 117, 102, 102, 105, 99, 105, 101, 110, 116, 32, 109, 101, 109, 111, 114, 121, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str71336 = allocate([ 98, 117, 102, 102, 101, 114, 32, 101, 114, 114, 111, 114, 0 ], "i8", ALLOC_STATIC);

__gm_ = allocate(468, [ "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);

_mparams = allocate(24, "i32", ALLOC_STATIC);

STRING_TABLE._str = allocate([ 32, 84, 104, 105, 115, 32, 105, 115, 32, 97, 110, 32, 88, 99, 111, 100, 101, 32, 67, 71, 66, 73, 32, 102, 105, 108, 101, 44, 32, 110, 111, 116, 32, 97, 32, 80, 78, 71, 32, 102, 105, 108, 101, 46, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE._str1 = allocate([ 32, 82, 101, 109, 111, 118, 105, 110, 103, 32, 116, 104, 101, 32, 67, 103, 66, 73, 32, 99, 104, 117, 110, 107, 46, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE._str2 = allocate([ 32, 84, 114, 121, 32, 34, 112, 110, 103, 99, 114, 117, 115, 104, 32, 45, 102, 105, 120, 32, 46, 46, 46, 34, 32, 116, 111, 32, 97, 116, 116, 101, 109, 112, 116, 32, 116, 111, 32, 114, 101, 97, 100, 32, 105, 116, 46, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE._str3 = allocate([ 32, 32, 32, 82, 101, 112, 108, 97, 99, 105, 110, 103, 32, 98, 97, 100, 32, 80, 104, 111, 116, 111, 115, 104, 111, 112, 32, 73, 67, 67, 80, 32, 99, 104, 117, 110, 107, 32, 119, 105, 116, 104, 32, 97, 110, 32, 115, 82, 71, 66, 32, 99, 104, 117, 110, 107, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE._str4 = allocate([ 10, 109, 101, 97, 115, 117, 114, 101, 95, 105, 100, 97, 116, 115, 58, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE._str5 = allocate([ 65, 108, 108, 111, 99, 97, 116, 105, 110, 103, 32, 114, 101, 97, 100, 32, 115, 116, 114, 117, 99, 116, 117, 114, 101, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE._str6 = allocate([ 65, 108, 108, 111, 99, 97, 116, 105, 110, 103, 32, 114, 101, 97, 100, 95, 105, 110, 102, 111, 44, 32, 32, 101, 110, 100, 95, 105, 110, 102, 111, 32, 115, 116, 114, 117, 99, 116, 117, 114, 101, 115, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE._str7 = allocate([ 68, 101, 115, 116, 114, 111, 121, 105, 110, 103, 32, 100, 97, 116, 97, 32, 115, 116, 114, 117, 99, 116, 115, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE._str8 = allocate([ 68, 101, 115, 116, 114, 111, 121, 101, 100, 32, 100, 97, 116, 97, 32, 115, 116, 114, 117, 99, 116, 115, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE._str9 = allocate([ 105, 110, 115, 117, 102, 102, 105, 99, 105, 101, 110, 116, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 115, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE._str10 = allocate([ 105, 110, 115, 117, 102, 102, 105, 99, 105, 101, 110, 116, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 115, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE._str11 = allocate([ 105, 110, 115, 117, 102, 102, 105, 99, 105, 101, 110, 116, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 115, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE._str12 = allocate([ 105, 110, 115, 117, 102, 102, 105, 99, 105, 101, 110, 116, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 115, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE._str13 = allocate([ 105, 110, 115, 117, 102, 102, 105, 99, 105, 101, 110, 116, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 115, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE._str14 = allocate([ 105, 110, 115, 117, 102, 102, 105, 99, 105, 101, 110, 116, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 115, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE._str15 = allocate([ 105, 110, 115, 117, 102, 102, 105, 99, 105, 101, 110, 116, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 115, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE._str16 = allocate([ 105, 110, 115, 117, 102, 102, 105, 99, 105, 101, 110, 116, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 115, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE._str17 = allocate([ 105, 110, 115, 117, 102, 102, 105, 99, 105, 101, 110, 116, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 115, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE._str18 = allocate([ 105, 110, 115, 117, 102, 102, 105, 99, 105, 101, 110, 116, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 115, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE._str19 = allocate([ 105, 110, 115, 117, 102, 102, 105, 99, 105, 101, 110, 116, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 115, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE._str20 = allocate([ 105, 110, 115, 117, 102, 102, 105, 99, 105, 101, 110, 116, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 115, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE._str21 = allocate([ 105, 110, 115, 117, 102, 102, 105, 99, 105, 101, 110, 116, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 115, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE._str22 = allocate([ 105, 110, 115, 117, 102, 102, 105, 99, 105, 101, 110, 116, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 115, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE._str23 = allocate([ 105, 110, 115, 117, 102, 102, 105, 99, 105, 101, 110, 116, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 115, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE._str24 = allocate([ 105, 110, 115, 117, 102, 102, 105, 99, 105, 101, 110, 116, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 115, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE._str25 = allocate([ 105, 110, 115, 117, 102, 102, 105, 99, 105, 101, 110, 116, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 115, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE._str26 = allocate([ 105, 110, 115, 117, 102, 102, 105, 99, 105, 101, 110, 116, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 115, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE._str27 = allocate([ 105, 110, 115, 117, 102, 102, 105, 99, 105, 101, 110, 116, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 115, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE._str28 = allocate([ 105, 110, 115, 117, 102, 102, 105, 99, 105, 101, 110, 116, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 115, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE._str29 = allocate([ 32, 32, 32, 99, 111, 108, 111, 114, 32, 99, 111, 117, 110, 116, 105, 110, 103, 32, 40, 45, 99, 99, 32, 111, 112, 116, 105, 111, 110, 41, 32, 105, 115, 32, 110, 111, 116, 32, 115, 117, 112, 112, 111, 114, 116, 101, 100, 46, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE._str30 = allocate([ 112, 114, 101, 112, 97, 114, 101, 32, 116, 111, 32, 99, 111, 112, 121, 32, 105, 110, 112, 117, 116, 32, 116, 111, 32, 111, 117, 116, 112, 117, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE._str31 = allocate([ 99, 111, 112, 121, 32, 101, 114, 114, 111, 114, 46, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE._str32 = allocate([ 99, 111, 112, 121, 32, 99, 111, 109, 112, 108, 101, 116, 101, 46, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE._str33 = allocate([ 112, 114, 101, 112, 97, 114, 101, 32, 116, 111, 32, 111, 112, 101, 110, 32, 102, 105, 108, 101, 115, 46, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE._str34 = allocate([ 102, 105, 108, 101, 115, 32, 97, 114, 101, 32, 111, 112, 101, 110, 101, 100, 46, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE._str35 = allocate([ 65, 108, 108, 111, 99, 97, 116, 105, 110, 103, 32, 114, 101, 97, 100, 32, 97, 110, 100, 32, 119, 114, 105, 116, 101, 32, 115, 116, 114, 117, 99, 116, 117, 114, 101, 115, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE._str36 = allocate([ 65, 108, 108, 111, 99, 97, 116, 105, 110, 103, 32, 114, 101, 97, 100, 95, 105, 110, 102, 111, 44, 32, 119, 114, 105, 116, 101, 95, 105, 110, 102, 111, 44, 32, 101, 110, 100, 95, 105, 110, 102, 111, 32, 115, 116, 114, 117, 99, 116, 117, 114, 101, 115, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE._str37 = allocate([ 115, 116, 114, 117, 99, 116, 117, 114, 101, 115, 32, 99, 114, 101, 97, 116, 101, 100, 46, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE._str38 = allocate([ 73, 110, 105, 116, 105, 97, 108, 105, 122, 105, 110, 103, 32, 105, 110, 112, 117, 116, 32, 97, 110, 100, 32, 111, 117, 116, 112, 117, 116, 32, 115, 116, 114, 101, 97, 109, 115, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE._str39 = allocate([ 105, 111, 32, 104, 97, 115, 32, 98, 101, 101, 110, 32, 105, 110, 105, 116, 105, 97, 108, 105, 122, 101, 100, 46, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE._str40 = allocate([ 82, 101, 97, 100, 105, 110, 103, 32, 105, 110, 102, 111, 32, 115, 116, 114, 117, 99, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE._str41 = allocate([ 84, 114, 97, 110, 115, 102, 101, 114, 114, 105, 110, 103, 32, 105, 110, 102, 111, 32, 115, 116, 114, 117, 99, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE._str42 = allocate([ 32, 32, 67, 97, 110, 110, 111, 116, 32, 99, 104, 97, 110, 103, 101, 32, 116, 111, 32, 105, 110, 100, 101, 120, 101, 100, 32, 99, 111, 108, 111, 114, 32, 40, 99, 111, 108, 111, 114, 95, 116, 121, 112, 101, 32, 51, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE._str43 = allocate([ 87, 105, 108, 108, 32, 110, 111, 116, 32, 114, 101, 112, 108, 97, 99, 101, 32, 101, 120, 105, 115, 116, 105, 110, 103, 32, 105, 67, 67, 80, 32, 99, 104, 117, 110, 107, 46, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE._str44 = allocate([ 32, 32, 87, 105, 108, 108, 32, 110, 111, 116, 32, 111, 118, 101, 114, 119, 114, 105, 116, 101, 32, 101, 120, 105, 115, 116, 105, 110, 103, 32, 116, 82, 78, 83, 32, 99, 104, 117, 110, 107, 46, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE._str45 = allocate([ 32, 32, 65, 100, 100, 105, 110, 103, 32, 97, 32, 116, 82, 78, 83, 32, 99, 104, 117, 110, 107, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE._str46 = allocate([ 83, 111, 114, 114, 121, 44, 32, 80, 80, 76, 84, 32, 105, 115, 32, 110, 111, 116, 32, 105, 109, 112, 108, 101, 109, 101, 110, 116, 101, 100, 32, 121, 101, 116, 46, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE._str47 = allocate([ 32, 32, 32, 65, 100, 100, 101, 100, 32, 97, 32, 116, 69, 88, 116, 32, 99, 104, 117, 110, 107, 46, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE._str48 = allocate([ 32, 32, 32, 65, 100, 100, 101, 100, 32, 97, 32, 122, 84, 88, 116, 32, 99, 104, 117, 110, 107, 46, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE._str49 = allocate([ 117, 110, 107, 110, 111, 119, 110, 32, 99, 104, 117, 110, 107, 32, 104, 97, 110, 100, 108, 105, 110, 103, 32, 100, 111, 110, 101, 46, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE._str50 = allocate([ 10, 87, 114, 105, 116, 105, 110, 103, 32, 105, 110, 102, 111, 32, 115, 116, 114, 117, 99, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE._str51 = allocate([ 10, 87, 114, 111, 116, 101, 32, 105, 110, 102, 111, 32, 115, 116, 114, 117, 99, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE._str52 = allocate([ 97, 108, 108, 111, 99, 97, 116, 101, 100, 32, 114, 111, 119, 98, 117, 102, 46, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE._str53 = allocate([ 32, 32, 32, 42, 42, 42, 42, 32, 67, 111, 110, 118, 101, 114, 116, 101, 100, 32, 110, 111, 110, 45, 103, 114, 97, 121, 32, 105, 109, 97, 103, 101, 32, 116, 111, 32, 103, 114, 97, 121, 46, 32, 42, 42, 42, 42, 32, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE._str54 = allocate([ 82, 101, 97, 100, 105, 110, 103, 32, 97, 110, 100, 32, 119, 114, 105, 116, 105, 110, 103, 32, 101, 110, 100, 95, 105, 110, 102, 111, 32, 100, 97, 116, 97, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE._str55 = allocate([ 32, 32, 32, 65, 100, 100, 101, 100, 32, 97, 32, 116, 69, 88, 116, 32, 99, 104, 117, 110, 107, 46, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE._str56 = allocate([ 32, 32, 32, 65, 100, 100, 101, 100, 32, 97, 32, 122, 84, 88, 116, 32, 99, 104, 117, 110, 107, 46, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE._str57 = allocate([ 32, 32, 32, 65, 100, 100, 101, 100, 32, 97, 110, 32, 117, 110, 99, 111, 109, 112, 114, 101, 115, 115, 101, 100, 32, 105, 84, 88, 116, 32, 99, 104, 117, 110, 107, 46, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE._str58 = allocate([ 32, 32, 32, 65, 100, 100, 101, 100, 32, 97, 32, 99, 111, 109, 112, 114, 101, 115, 115, 101, 100, 32, 105, 84, 88, 116, 32, 99, 104, 117, 110, 107, 46, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE._str59 = allocate([ 68, 101, 115, 116, 114, 111, 121, 105, 110, 103, 32, 100, 97, 116, 97, 32, 115, 116, 114, 117, 99, 116, 115, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE._str60 = allocate([ 79, 112, 101, 110, 105, 110, 103, 32, 102, 105, 108, 101, 32, 102, 111, 114, 32, 108, 101, 110, 103, 116, 104, 32, 109, 101, 97, 115, 117, 114, 101, 109, 101, 110, 116, 0 ], "i8", ALLOC_STATIC);

HEAP32[_inname >> 2] = STRING_TABLE.__str573 | 0;

HEAP32[_pngcrush_options + 4 >> 2] = STRING_TABLE.__str359 | 0;

HEAP32[_pngcrush_options + 12 >> 2] = __str360 | 0;

HEAP32[_pngcrush_options + 20 >> 2] = STRING_TABLE.__str361 | 0;

HEAP32[_pngcrush_options + 28 >> 2] = STRING_TABLE.__str362 | 0;

HEAP32[_pngcrush_options + 36 >> 2] = STRING_TABLE.__str363 | 0;

HEAP32[_pngcrush_options + 44 >> 2] = STRING_TABLE.__str364 | 0;

HEAP32[_pngcrush_options + 52 >> 2] = __str360 | 0;

HEAP32[_pngcrush_options + 60 >> 2] = STRING_TABLE.__str365 | 0;

HEAP32[_pngcrush_options + 68 >> 2] = __str360 | 0;

HEAP32[_pngcrush_options + 76 >> 2] = STRING_TABLE.__str366 | 0;

HEAP32[_pngcrush_options + 84 >> 2] = __str360 | 0;

HEAP32[_pngcrush_options + 92 >> 2] = STRING_TABLE.__str367 | 0;

HEAP32[_pngcrush_options + 100 >> 2] = __str360 | 0;

HEAP32[_pngcrush_options + 108 >> 2] = STRING_TABLE.__str368 | 0;

HEAP32[_pngcrush_options + 116 >> 2] = STRING_TABLE.__str369 | 0;

HEAP32[_pngcrush_options + 124 >> 2] = STRING_TABLE.__str370 | 0;

HEAP32[_pngcrush_options + 132 >> 2] = STRING_TABLE.__str371 | 0;

HEAP32[_pngcrush_options + 140 >> 2] = __str360 | 0;

HEAP32[_pngcrush_options + 148 >> 2] = STRING_TABLE.__str372 | 0;

HEAP32[_pngcrush_options + 156 >> 2] = __str360 | 0;

HEAP32[_pngcrush_options + 164 >> 2] = STRING_TABLE.__str373 | 0;

HEAP32[_pngcrush_options + 172 >> 2] = STRING_TABLE.__str374 | 0;

HEAP32[_pngcrush_options + 180 >> 2] = STRING_TABLE.__str375 | 0;

HEAP32[_pngcrush_options + 188 >> 2] = STRING_TABLE.__str376 | 0;

HEAP32[_pngcrush_options + 196 >> 2] = STRING_TABLE.__str377 | 0;

HEAP32[_pngcrush_options + 204 >> 2] = STRING_TABLE.__str378 | 0;

HEAP32[_pngcrush_options + 212 >> 2] = STRING_TABLE.__str379 | 0;

HEAP32[_pngcrush_options + 220 >> 2] = STRING_TABLE.__str380 | 0;

HEAP32[_pngcrush_options + 228 >> 2] = __str360 | 0;

HEAP32[_pngcrush_options + 236 >> 2] = STRING_TABLE.__str381 | 0;

HEAP32[_pngcrush_options + 244 >> 2] = __str360 | 0;

HEAP32[_pngcrush_options + 252 >> 2] = STRING_TABLE.__str382 | 0;

HEAP32[_pngcrush_options + 260 >> 2] = STRING_TABLE.__str383 | 0;

HEAP32[_pngcrush_options + 268 >> 2] = STRING_TABLE.__str384 | 0;

HEAP32[_pngcrush_options + 276 >> 2] = STRING_TABLE.__str385 | 0;

HEAP32[_pngcrush_options + 284 >> 2] = STRING_TABLE.__str386 | 0;

HEAP32[_pngcrush_options + 292 >> 2] = STRING_TABLE.__str387 | 0;

HEAP32[_pngcrush_options + 300 >> 2] = STRING_TABLE.__str388 | 0;

HEAP32[_pngcrush_options + 308 >> 2] = STRING_TABLE.__str389 | 0;

HEAP32[_pngcrush_options + 316 >> 2] = __str360 | 0;

HEAP32[_pngcrush_options + 324 >> 2] = STRING_TABLE.__str390 | 0;

HEAP32[_pngcrush_options + 332 >> 2] = STRING_TABLE.__str391 | 0;

HEAP32[_pngcrush_options + 340 >> 2] = __str360 | 0;

HEAP32[_pngcrush_options + 348 >> 2] = STRING_TABLE.__str392 | 0;

HEAP32[_pngcrush_options + 356 >> 2] = STRING_TABLE.__str393 | 0;

HEAP32[_pngcrush_options + 364 >> 2] = __str360 | 0;

HEAP32[_pngcrush_options + 372 >> 2] = STRING_TABLE.__str394 | 0;

HEAP32[_pngcrush_options + 380 >> 2] = __str360 | 0;

HEAP32[_pngcrush_options + 388 >> 2] = STRING_TABLE.__str395 | 0;

HEAP32[_pngcrush_options + 396 >> 2] = STRING_TABLE.__str396 | 0;

HEAP32[_pngcrush_options + 404 >> 2] = __str360 | 0;

HEAP32[_pngcrush_options + 412 >> 2] = STRING_TABLE.__str397 | 0;

HEAP32[_pngcrush_options + 420 >> 2] = __str360 | 0;

HEAP32[_pngcrush_options + 428 >> 2] = STRING_TABLE.__str398 | 0;

HEAP32[_pngcrush_options + 436 >> 2] = STRING_TABLE.__str399 | 0;

HEAP32[_pngcrush_options + 444 >> 2] = STRING_TABLE.__str400 | 0;

HEAP32[_pngcrush_options + 452 >> 2] = __str360 | 0;

HEAP32[_pngcrush_options + 460 >> 2] = STRING_TABLE.__str401 | 0;

HEAP32[_pngcrush_options + 468 >> 2] = __str360 | 0;

HEAP32[_pngcrush_options + 476 >> 2] = STRING_TABLE.__str402 | 0;

HEAP32[_pngcrush_options + 484 >> 2] = __str360 | 0;

HEAP32[_pngcrush_options + 492 >> 2] = STRING_TABLE.__str403 | 0;

HEAP32[_pngcrush_options + 500 >> 2] = STRING_TABLE.__str404 | 0;

HEAP32[_pngcrush_options + 508 >> 2] = STRING_TABLE.__str405 | 0;

HEAP32[_pngcrush_options + 516 >> 2] = __str360 | 0;

HEAP32[_pngcrush_options + 524 >> 2] = STRING_TABLE.__str406 | 0;

HEAP32[_pngcrush_options + 532 >> 2] = __str360 | 0;

HEAP32[_pngcrush_options + 540 >> 2] = STRING_TABLE.__str407 | 0;

HEAP32[_pngcrush_options + 548 >> 2] = STRING_TABLE.__str408 | 0;

HEAP32[_pngcrush_options + 556 >> 2] = STRING_TABLE.__str409 | 0;

HEAP32[_pngcrush_options + 564 >> 2] = __str360 | 0;

HEAP32[_pngcrush_options + 572 >> 2] = STRING_TABLE.__str390 | 0;

HEAP32[_pngcrush_options + 580 >> 2] = STRING_TABLE.__str410 | 0;

HEAP32[_pngcrush_options + 588 >> 2] = __str360 | 0;

HEAP32[_pngcrush_options + 596 >> 2] = STRING_TABLE.__str411 | 0;

HEAP32[_pngcrush_options + 604 >> 2] = STRING_TABLE.__str412 | 0;

HEAP32[_pngcrush_options + 612 >> 2] = __str360 | 0;

HEAP32[_pngcrush_options + 620 >> 2] = STRING_TABLE.__str413 | 0;

HEAP32[_pngcrush_options + 628 >> 2] = __str360 | 0;

HEAP32[_pngcrush_options + 636 >> 2] = STRING_TABLE.__str414 | 0;

HEAP32[_pngcrush_options + 644 >> 2] = __str360 | 0;

HEAP32[_pngcrush_options + 652 >> 2] = STRING_TABLE.__str415 | 0;

HEAP32[_pngcrush_options + 660 >> 2] = STRING_TABLE.__str416 | 0;

HEAP32[_pngcrush_options + 668 >> 2] = __str360 | 0;

HEAP32[_pngcrush_options + 676 >> 2] = STRING_TABLE.__str417 | 0;

HEAP32[_pngcrush_options + 684 >> 2] = __str360 | 0;

HEAP32[_pngcrush_options + 692 >> 2] = STRING_TABLE.__str418 | 0;

HEAP32[_pngcrush_options + 700 >> 2] = __str360 | 0;

HEAP32[_pngcrush_options + 708 >> 2] = STRING_TABLE.__str419 | 0;

HEAP32[_pngcrush_options + 716 >> 2] = STRING_TABLE.__str420 | 0;

HEAP32[_pngcrush_options + 724 >> 2] = STRING_TABLE.__str421 | 0;

HEAP32[_pngcrush_options + 732 >> 2] = STRING_TABLE.__str422 | 0;

HEAP32[_pngcrush_options + 740 >> 2] = __str360 | 0;

HEAP32[_pngcrush_options + 748 >> 2] = STRING_TABLE.__str423 | 0;

HEAP32[_pngcrush_options + 756 >> 2] = __str360 | 0;

HEAP32[_pngcrush_options + 764 >> 2] = STRING_TABLE.__str424 | 0;

HEAP32[_pngcrush_options + 772 >> 2] = STRING_TABLE.__str425 | 0;

HEAP32[_pngcrush_options + 780 >> 2] = STRING_TABLE.__str426 | 0;

HEAP32[_pngcrush_options + 788 >> 2] = __str360 | 0;

HEAP32[_pngcrush_options + 796 >> 2] = STRING_TABLE.__str427 | 0;

HEAP32[_pngcrush_options + 804 >> 2] = __str360 | 0;

HEAP32[_pngcrush_options + 812 >> 2] = STRING_TABLE.__str428 | 0;

HEAP32[_pngcrush_options + 820 >> 2] = STRING_TABLE.__str429 | 0;

HEAP32[_pngcrush_options + 828 >> 2] = STRING_TABLE.__str430 | 0;

HEAP32[_pngcrush_options + 836 >> 2] = STRING_TABLE.__str431 | 0;

HEAP32[_pngcrush_options + 844 >> 2] = STRING_TABLE.__str432 | 0;

HEAP32[_pngcrush_options + 852 >> 2] = STRING_TABLE.__str433 | 0;

HEAP32[_pngcrush_options + 860 >> 2] = __str360 | 0;

HEAP32[_pngcrush_options + 868 >> 2] = STRING_TABLE.__str434 | 0;

HEAP32[_pngcrush_options + 876 >> 2] = __str360 | 0;

HEAP32[_pngcrush_options + 884 >> 2] = STRING_TABLE.__str435 | 0;

HEAP32[_pngcrush_options + 892 >> 2] = STRING_TABLE.__str436 | 0;

HEAP32[_pngcrush_options + 900 >> 2] = STRING_TABLE.__str437 | 0;

HEAP32[_pngcrush_options + 908 >> 2] = STRING_TABLE.__str438 | 0;

HEAP32[_pngcrush_options + 916 >> 2] = STRING_TABLE.__str439 | 0;

HEAP32[_pngcrush_options + 924 >> 2] = STRING_TABLE.__str440 | 0;

HEAP32[_pngcrush_options + 932 >> 2] = STRING_TABLE.__str441 | 0;

HEAP32[_pngcrush_options + 940 >> 2] = __str360 | 0;

HEAP32[_pngcrush_options + 948 >> 2] = STRING_TABLE.__str390 | 0;

HEAP32[_pngcrush_options + 956 >> 2] = STRING_TABLE.__str442 | 0;

HEAP32[_pngcrush_options + 964 >> 2] = __str360 | 0;

HEAP32[_pngcrush_options + 972 >> 2] = STRING_TABLE.__str443 | 0;

HEAP32[_pngcrush_options + 980 >> 2] = __str360 | 0;

HEAP32[_pngcrush_options + 988 >> 2] = STRING_TABLE.__str444 | 0;

HEAP32[_pngcrush_options + 996 >> 2] = __str360 | 0;

HEAP32[_pngcrush_options + 1004 >> 2] = STRING_TABLE.__str445 | 0;

HEAP32[_pngcrush_options + 1012 >> 2] = __str360 | 0;

HEAP32[_pngcrush_options + 1020 >> 2] = STRING_TABLE.__str446 | 0;

HEAP32[_pngcrush_options + 1028 >> 2] = __str360 | 0;

HEAP32[_pngcrush_options + 1036 >> 2] = STRING_TABLE.__str447 | 0;

HEAP32[_pngcrush_options + 1044 >> 2] = STRING_TABLE.__str448 | 0;

HEAP32[_pngcrush_options + 1052 >> 2] = STRING_TABLE.__str449 | 0;

HEAP32[_pngcrush_options + 1060 >> 2] = __str360 | 0;

HEAP32[_pngcrush_options + 1068 >> 2] = STRING_TABLE.__str450 | 0;

HEAP32[_pngcrush_options + 1076 >> 2] = __str360 | 0;

HEAP32[_pngcrush_options + 1084 >> 2] = STRING_TABLE.__str451 | 0;

HEAP32[_pngcrush_options + 1092 >> 2] = __str360 | 0;

HEAP32[_pngcrush_options + 1100 >> 2] = STRING_TABLE.__str452 | 0;

HEAP32[_pngcrush_options + 1108 >> 2] = __str360 | 0;

HEAP32[_pngcrush_options + 1116 >> 2] = STRING_TABLE.__str453 | 0;

HEAP32[_pngcrush_options + 1124 >> 2] = __str360 | 0;

HEAP32[_pngcrush_options + 1132 >> 2] = STRING_TABLE.__str454 | 0;

HEAP32[_pngcrush_options + 1140 >> 2] = __str360 | 0;

HEAP32[_pngcrush_options + 1148 >> 2] = STRING_TABLE.__str455 | 0;

HEAP32[_pngcrush_options + 1156 >> 2] = STRING_TABLE.__str456 | 0;

HEAP32[_pngcrush_options + 1164 >> 2] = STRING_TABLE.__str457 | 0;

HEAP32[_pngcrush_options + 1172 >> 2] = STRING_TABLE.__str458 | 0;

HEAP32[_pngcrush_options + 1180 >> 2] = __str360 | 0;

HEAP32[_pngcrush_options + 1188 >> 2] = STRING_TABLE.__str459 | 0;

HEAP32[_pngcrush_options + 1196 >> 2] = __str360 | 0;

HEAP32[_pngcrush_options + 1204 >> 2] = STRING_TABLE.__str460 | 0;

HEAP32[_pngcrush_options + 1212 >> 2] = __str360 | 0;

HEAP32[_pngcrush_options + 1220 >> 2] = STRING_TABLE.__str461 | 0;

HEAP32[_pngcrush_options + 1228 >> 2] = __str360 | 0;

HEAP32[_pngcrush_options + 1236 >> 2] = STRING_TABLE.__str462 | 0;

HEAP32[_pngcrush_options + 1244 >> 2] = STRING_TABLE.__str463 | 0;

HEAP32[_pngcrush_options + 1252 >> 2] = __str360 | 0;

HEAP32[_pngcrush_options + 1260 >> 2] = STRING_TABLE.__str464 | 0;

HEAP32[_pngcrush_options + 1268 >> 2] = __str360 | 0;

HEAP32[_pngcrush_options + 1276 >> 2] = STRING_TABLE.__str465 | 0;

HEAP32[_pngcrush_options + 1284 >> 2] = __str360 | 0;

HEAP32[_pngcrush_options + 1292 >> 2] = STRING_TABLE.__str466 | 0;

HEAP32[_pngcrush_options + 1300 >> 2] = __str360 | 0;

HEAP32[_pngcrush_options + 1308 >> 2] = STRING_TABLE.__str467 | 0;

HEAP32[_pngcrush_options + 1316 >> 2] = __str360 | 0;

HEAP32[_pngcrush_options + 1324 >> 2] = STRING_TABLE.__str468 | 0;

HEAP32[_pngcrush_options + 1332 >> 2] = STRING_TABLE.__str469 | 0;

HEAP32[_pngcrush_options + 1340 >> 2] = STRING_TABLE.__str470 | 0;

HEAP32[_pngcrush_options + 1348 >> 2] = STRING_TABLE.__str471 | 0;

HEAP32[_pngcrush_options + 1356 >> 2] = STRING_TABLE.__str472 | 0;

HEAP32[_pngcrush_options + 1364 >> 2] = STRING_TABLE.__str473 | 0;

HEAP32[_pngcrush_options + 1372 >> 2] = STRING_TABLE.__str474 | 0;

HEAP32[_pngcrush_options + 1380 >> 2] = STRING_TABLE.__str475 | 0;

HEAP32[_pngcrush_options + 1388 >> 2] = STRING_TABLE.__str476 | 0;

HEAP32[_pngcrush_options + 1396 >> 2] = STRING_TABLE.__str477 | 0;

HEAP32[_pngcrush_options + 1404 >> 2] = STRING_TABLE.__str478 | 0;

HEAP32[_pngcrush_options + 1412 >> 2] = STRING_TABLE.__str479 | 0;

HEAP32[_pngcrush_options + 1420 >> 2] = STRING_TABLE.__str480 | 0;

HEAP32[_pngcrush_options + 1428 >> 2] = __str360 | 0;

HEAP32[_pngcrush_options + 1436 >> 2] = STRING_TABLE.__str390 | 0;

HEAP32[_pngcrush_options + 1444 >> 2] = STRING_TABLE.__str481 | 0;

HEAP32[_pngcrush_options + 1452 >> 2] = __str360 | 0;

HEAP32[_pngcrush_options + 1460 >> 2] = STRING_TABLE.__str482 | 0;

HEAP32[_pngcrush_options + 1468 >> 2] = __str360 | 0;

HEAP32[_pngcrush_options + 1476 >> 2] = STRING_TABLE.__str483 | 0;

HEAP32[_pngcrush_options + 1484 >> 2] = __str360 | 0;

HEAP32[_pngcrush_options + 1492 >> 2] = STRING_TABLE.__str484 | 0;

HEAP32[_pngcrush_options + 1500 >> 2] = __str360 | 0;

HEAP32[_pngcrush_options + 1508 >> 2] = STRING_TABLE.__str485 | 0;

HEAP32[_pngcrush_options + 1516 >> 2] = STRING_TABLE.__str486 | 0;

HEAP32[_pngcrush_options + 1524 >> 2] = STRING_TABLE.__str487 | 0;

HEAP32[_pngcrush_options + 1532 >> 2] = STRING_TABLE.__str488 | 0;

HEAP32[_pngcrush_options + 1540 >> 2] = STRING_TABLE.__str489 | 0;

HEAP32[_pngcrush_options + 1548 >> 2] = __str360 | 0;

HEAP32[_pngcrush_options + 1556 >> 2] = STRING_TABLE.__str490 | 0;

HEAP32[_pngcrush_options + 1564 >> 2] = __str360 | 0;

HEAP32[_pngcrush_options + 1572 >> 2] = STRING_TABLE.__str491 | 0;

HEAP32[_pngcrush_options + 1580 >> 2] = STRING_TABLE.__str492 | 0;

HEAP32[_pngcrush_options + 1588 >> 2] = STRING_TABLE.__str493 | 0;

HEAP32[_pngcrush_options + 1596 >> 2] = STRING_TABLE.__str494 | 0;

HEAP32[_pngcrush_options + 1604 >> 2] = STRING_TABLE.__str495 | 0;

HEAP32[_pngcrush_options + 1612 >> 2] = STRING_TABLE.__str496 | 0;

HEAP32[_pngcrush_options + 1620 >> 2] = STRING_TABLE.__str497 | 0;

HEAP32[_pngcrush_options + 1628 >> 2] = STRING_TABLE.__str498 | 0;

HEAP32[_pngcrush_options + 1636 >> 2] = STRING_TABLE.__str499 | 0;

HEAP32[_pngcrush_options + 1644 >> 2] = __str360 | 0;

HEAP32[_pngcrush_options + 1652 >> 2] = STRING_TABLE.__str390 | 0;

HEAP32[_pngcrush_options + 1660 >> 2] = STRING_TABLE.__str500 | 0;

HEAP32[_pngcrush_options + 1668 >> 2] = __str360 | 0;

HEAP32[_pngcrush_options + 1676 >> 2] = STRING_TABLE.__str501 | 0;

HEAP32[_pngcrush_options + 1684 >> 2] = __str360 | 0;

HEAP32[_pngcrush_options + 1692 >> 2] = STRING_TABLE.__str502 | 0;

HEAP32[_pngcrush_options + 1700 >> 2] = __str360 | 0;

HEAP32[_pngcrush_options + 1708 >> 2] = STRING_TABLE.__str503 | 0;

HEAP32[_pngcrush_options + 1716 >> 2] = STRING_TABLE.__str504 | 0;

HEAP32[_pngcrush_options + 1724 >> 2] = __str360 | 0;

HEAP32[_pngcrush_options + 1732 >> 2] = STRING_TABLE.__str505 | 0;

HEAP32[_pngcrush_options + 1740 >> 2] = __str360 | 0;

HEAP32[_pngcrush_options + 1748 >> 2] = STRING_TABLE.__str506 | 0;

HEAP32[_pngcrush_options + 1756 >> 2] = STRING_TABLE.__str507 | 0;

HEAP32[_pngcrush_options + 1764 >> 2] = STRING_TABLE.__str508 | 0;

HEAP32[_pngcrush_options + 1772 >> 2] = __str360 | 0;

HEAP32[_pngcrush_options + 1780 >> 2] = STRING_TABLE.__str509 | 0;

HEAP32[_pngcrush_options + 1788 >> 2] = __str360 | 0;

HEAP32[_pngcrush_options + 1796 >> 2] = STRING_TABLE.__str510 | 0;

HEAP32[_pngcrush_options + 1804 >> 2] = STRING_TABLE.__str511 | 0;

HEAP32[_pngcrush_options + 1812 >> 2] = __str360 | 0;

HEAP32[_pngcrush_options + 1820 >> 2] = STRING_TABLE.__str512 | 0;

HEAP32[_pngcrush_options + 1828 >> 2] = __str360 | 0;

HEAP32[_pngcrush_options + 1836 >> 2] = STRING_TABLE.__str510 | 0;

HEAP32[_pngcrush_options + 1844 >> 2] = STRING_TABLE.__str513 | 0;

HEAP32[_pngcrush_options + 1852 >> 2] = STRING_TABLE.__str514 | 0;

HEAP32[_pngcrush_options + 1860 >> 2] = __str360 | 0;

HEAP32[_pngcrush_options + 1868 >> 2] = STRING_TABLE.__str515 | 0;

HEAP32[_pngcrush_options + 1876 >> 2] = __str360 | 0;

HEAP32[_pngcrush_options + 1884 >> 2] = STRING_TABLE.__str516 | 0;

HEAP32[_pngcrush_options + 1892 >> 2] = __str360 | 0;

HEAP32[_pngcrush_options + 1900 >> 2] = STRING_TABLE.__str517 | 0;

HEAP32[_pngcrush_options + 1908 >> 2] = __str360 | 0;

HEAP32[_pngcrush_options + 1916 >> 2] = STRING_TABLE.__str518 | 0;

HEAP32[_pngcrush_options + 1924 >> 2] = STRING_TABLE.__str519 | 0;

HEAP32[_pngcrush_options + 1932 >> 2] = __str360 | 0;

HEAP32[_pngcrush_options + 1940 >> 2] = STRING_TABLE.__str520 | 0;

HEAP32[_pngcrush_options + 1948 >> 2] = __str360 | 0;

HEAP32[_pngcrush_options + 1956 >> 2] = STRING_TABLE.__str521 | 0;

HEAP32[_pngcrush_options + 1964 >> 2] = STRING_TABLE.__str522 | 0;

HEAP32[_pngcrush_options + 1972 >> 2] = STRING_TABLE.__str523 | 0;

HEAP32[_pngcrush_options + 1980 >> 2] = STRING_TABLE.__str524 | 0;

HEAP32[_pngcrush_options + 1988 >> 2] = STRING_TABLE.__str525 | 0;

HEAP32[_pngcrush_options + 1996 >> 2] = __str360 | 0;

HEAP32[_pngcrush_options + 2004 >> 2] = STRING_TABLE.__str526 | 0;

HEAP32[_pngcrush_options + 2012 >> 2] = __str360 | 0;

HEAP32[_pngcrush_options + 2020 >> 2] = STRING_TABLE.__str527 | 0;

HEAP32[_pngcrush_options + 2028 >> 2] = STRING_TABLE.__str528 | 0;

HEAP32[_pngcrush_options + 2036 >> 2] = __str360 | 0;

HEAP32[_pngcrush_options + 2044 >> 2] = STRING_TABLE.__str529 | 0;

HEAP32[_pngcrush_options + 2052 >> 2] = __str360 | 0;

HEAP32[_pngcrush_options + 2060 >> 2] = STRING_TABLE.__str530 | 0;

HEAP32[_pngcrush_options + 2068 >> 2] = __str360 | 0;

HEAP32[_pngcrush_options + 2076 >> 2] = STRING_TABLE.__str531 | 0;

HEAP32[_pngcrush_options + 2084 >> 2] = STRING_TABLE.__str532 | 0;

HEAP32[_pngcrush_options + 2092 >> 2] = STRING_TABLE.__str533 | 0;

HEAP32[_pngcrush_options + 2100 >> 2] = __str360 | 0;

HEAP32[_pngcrush_options + 2108 >> 2] = STRING_TABLE.__str534 | 0;

HEAP32[_pngcrush_options + 2116 >> 2] = __str360 | 0;

HEAP32[_pngcrush_options + 2124 >> 2] = STRING_TABLE.__str535 | 0;

HEAP32[_pngcrush_options + 2132 >> 2] = __str360 | 0;

HEAP32[_pngcrush_options + 2140 >> 2] = STRING_TABLE.__str390 | 0;

HEAP32[_pngcrush_options + 2148 >> 2] = STRING_TABLE.__str536 | 0;

HEAP32[_pngcrush_options + 2156 >> 2] = __str360 | 0;

HEAP32[_pngcrush_options + 2164 >> 2] = STRING_TABLE.__str537 | 0;

HEAP32[_pngcrush_options + 2172 >> 2] = __str360 | 0;

HEAP32[_pngcrush_options + 2180 >> 2] = STRING_TABLE.__str538 | 0;

HEAP32[_pngcrush_legal >> 2] = __str360 | 0;

HEAP32[_pngcrush_legal + 4 >> 2] = STRING_TABLE.__str545 | 0;

HEAP32[_pngcrush_legal + 8 >> 2] = STRING_TABLE.__str546 | 0;

HEAP32[_pngcrush_legal + 12 >> 2] = STRING_TABLE.__str547 | 0;

HEAP32[_pngcrush_legal + 16 >> 2] = STRING_TABLE.__str548 | 0;

HEAP32[_pngcrush_legal + 20 >> 2] = __str360 | 0;

HEAP32[_pngcrush_legal + 24 >> 2] = STRING_TABLE.__str549 | 0;

HEAP32[_pngcrush_legal + 28 >> 2] = STRING_TABLE.__str550 | 0;

HEAP32[_pngcrush_legal + 32 >> 2] = STRING_TABLE.__str551 | 0;

HEAP32[_pngcrush_legal + 36 >> 2] = STRING_TABLE.__str552 | 0;

HEAP32[_pngcrush_legal + 40 >> 2] = STRING_TABLE.__str553 | 0;

HEAP32[_pngcrush_legal + 44 >> 2] = STRING_TABLE.__str554 | 0;

HEAP32[_pngcrush_legal + 48 >> 2] = STRING_TABLE.__str555 | 0;

HEAP32[_pngcrush_legal + 52 >> 2] = STRING_TABLE.__str556 | 0;

HEAP32[_pngcrush_legal + 56 >> 2] = STRING_TABLE.__str557 | 0;

HEAP32[_pngcrush_legal + 60 >> 2] = STRING_TABLE.__str558 | 0;

HEAP32[_pngcrush_legal + 64 >> 2] = STRING_TABLE.__str559 | 0;

HEAP32[_pngcrush_legal + 68 >> 2] = STRING_TABLE.__str560 | 0;

HEAP32[_pngcrush_legal + 72 >> 2] = __str360 | 0;

HEAP32[_pngcrush_legal + 76 >> 2] = STRING_TABLE.__str561 | 0;

HEAP32[_pngcrush_legal + 80 >> 2] = STRING_TABLE.__str562 | 0;

HEAP32[_pngcrush_legal + 84 >> 2] = STRING_TABLE.__str563 | 0;

HEAP32[_pngcrush_legal + 88 >> 2] = STRING_TABLE.__str564 | 0;

HEAP32[_pngcrush_legal + 92 >> 2] = __str360 | 0;

HEAP32[_pngcrush_legal + 96 >> 2] = STRING_TABLE.__str565 | 0;

HEAP32[_pngcrush_legal + 100 >> 2] = __str360 | 0;

HEAP32[_pngcrush_legal + 104 >> 2] = STRING_TABLE.__str566 | 0;

HEAP32[_pngcrush_legal + 108 >> 2] = STRING_TABLE.__str567 | 0;

HEAP32[_pngcrush_legal + 112 >> 2] = __str360 | 0;

HEAP32[_pngcrush_legal + 116 >> 2] = STRING_TABLE.__str568 | 0;

HEAP32[_pngcrush_legal + 120 >> 2] = STRING_TABLE.__str569 | 0;

HEAP32[_pngcrush_legal + 124 >> 2] = __str360 | 0;

HEAP32[_static_l_desc >> 2] = _static_ltree | 0;

HEAP32[_static_l_desc + 4 >> 2] = _extra_lbits | 0;

HEAP32[_static_d_desc >> 2] = _static_dtree | 0;

HEAP32[_static_d_desc + 4 >> 2] = _extra_dbits | 0;

HEAP32[_static_bl_desc + 4 >> 2] = _extra_blbits | 0;

FUNCTION_TABLE = [ 0, 0, _png_debug_malloc, 0, _png_debug_free, 0, _longjmp, 0, _png_cexcept_error, 0, _png_zalloc, 0, _png_zfree, 0, _png_default_read_data, 0, _png_read_filter_row_sub, 0, _png_read_filter_row_up, 0, _png_read_filter_row_avg, 0, _png_read_filter_row_paeth_1byte_pixel, 0, _png_read_filter_row_paeth_multibyte_pixel, 0, _png_default_write_data, 0, _png_default_flush, 0, _deflate_stored, 0, _deflate_fast, 0, _deflate_slow, 0 ];

Module["FUNCTION_TABLE"] = FUNCTION_TABLE;

function run(args) {
  args = args || Module["arguments"];
  if (Module["setStatus"]) {
    Module["setStatus"]("");
  }
  if (Module["preRun"]) {
    Module["preRun"]();
  }
  var ret = null;
  if (Module["_main"]) {
    preMain();
    ret = Module.callMain(args);
    if (!Module["noExitRuntime"]) {
      exitRuntime();
    }
  }
  if (Module["postRun"]) {
    Module["postRun"]();
  }
  return ret;
}

Module["run"] = run;

initRuntime();

if (Module["noInitialRun"]) {
  addRunDependency();
}

if (runDependencies == 0) {
  var ret = run();
}
// EMSCRIPTEN_GENERATED_FUNCTIONS: ["_pngcrush_default_read_data","_png_defaultwrite_data","_png_debug_malloc","_png_debug_free","_pngcrush_pause","_png_skip_chunk","_keep_unknown_chunk","_keep_chunk","_show_result","_main","_print_version_info","_measure_idats","_print_usage","_png_cexcept_error","_png_measure_idat","_png_set_sig_bytes","_png_sig_cmp","_png_zalloc","_png_zfree","_png_reset_crc","_png_calculate_crc","_png_create_info_struct","_png_64bit_product","_png_get_io_ptr","_png_init_io","_png_info_init_3","_png_destroy_info_struct","_png_info_destroy","_png_free_data","_png_handle_as_unknown","_png_chunk_unknown_handling","_png_check_cHRM_fixed","_png_muldiv","_png_XYZ_from_xy","_png_reciprocal","_png_XYZ_from_xy_checked","_png_pow10","_png_check_fp_number","_png_check_IHDR","_png_check_fp_string","_png_ascii_from_fp","_png_reciprocal2","_png_gamma_8bit_correct","_png_gamma_16bit_correct","_png_gamma_significant","_png_safecat","_png_format_number","_png_gamma_correct","_png_destroy_gamma_table","_png_build_gamma_table","_png_build_8bit_table","_png_build_16to8_table","_png_product2","_png_build_16bit_table","_png_error","_png_default_error","_png_warning","_png_default_warning","_png_warning_parameter","_png_warning_parameter_unsigned","_png_warning_parameter_signed","_png_formatted_warning","_png_benign_error","_png_chunk_error","_png_format_buffer","_png_set_longjmp_fn","_png_set_error_fn","_png_get_rowbytes","_png_get_bKGD","_png_get_cHRM_fixed","_png_get_gAMA_fixed","_png_get_sRGB","_png_get_iCCP","_png_get_sPLT","_png_get_hIST","_png_get_oFFs","_png_get_pCAL","_png_get_pHYs","_png_get_PLTE","_png_get_sBIT","_png_get_text","_png_get_tIME","_png_chunk_warning","_png_chunk_benign_error","_png_longjmp","_png_get_IHDR","_png_get_sCAL","_png_get_tRNS","_png_get_unknown_chunks","_png_get_rgb_to_gray_status","_png_get_compression_buffer_size","_png_set_mem_fn","_png_create_struct_2","_png_destroy_struct_2","_png_calloc","_png_malloc","_png_malloc_default","_png_free","_png_free_default","_png_malloc_warn","_png_create_read_struct","_png_create_read_struct_2","_png_read_info","_png_read_row","_png_read_end","_png_destroy_read_struct","_png_read_destroy","_png_read_data","_png_default_read_data","_png_set_read_fn","_png_set_crc_action","_png_set_strip_alpha","_png_set_expand","_png_set_expand_gray_1_2_4_to_8","_png_set_rgb_to_gray_fixed","_png_set_gray_to_rgb","_png_init_read_transformations","_png_init_palette_transformations","_png_init_rgb_transformations","_png_gamma_threshold","_png_read_transform_info","_png_do_expand_palette","_png_do_read_transformations","_png_do_expand","_png_do_rgb_to_gray","_png_do_gray_to_rgb","_png_do_compose","_png_do_gamma","_png_do_scale_16_to_8","_png_do_chop","_png_do_quantize","_png_do_expand_16","_png_do_encode_alpha","_png_do_unshift","_png_do_unpack","_png_do_read_filler","_png_do_read_invert_alpha","_png_do_read_swap_alpha","_png_do_read_intrapixel","_png_get_uint_31","_png_read_sig","_png_read_chunk_header","_png_check_chunk_name","_png_crc_read","_png_crc_finish","_png_crc_error","_png_decompress_chunk","_png_inflate","_png_handle_IHDR","_png_handle_PLTE","_png_handle_IEND","_png_get_fixed_point","_png_handle_gAMA","_png_handle_sBIT","_png_handle_cHRM","_png_handle_sRGB","_png_handle_iCCP","_png_handle_sPLT","_png_handle_tRNS","_png_handle_bKGD","_png_handle_hIST","_png_handle_pHYs","_png_handle_oFFs","_png_handle_pCAL","_png_handle_sCAL","_png_handle_tIME","_png_handle_tEXt","_png_handle_zTXt","_png_handle_iTXt","_png_handle_unknown","_png_init_filter_functions","_png_combine_row","_png_do_read_interlace","_png_read_filter_row","_png_read_filter_row_sub","_png_read_filter_row_up","_png_read_filter_row_avg","_png_read_filter_row_paeth_1byte_pixel","_png_read_filter_row_paeth_multibyte_pixel","_png_read_finish_row","_png_read_start_row","_png_set_bKGD","_png_set_cHRM_fixed","_png_set_gAMA_fixed","_png_set_oFFs","_png_set_pHYs","_png_set_sRGB","_png_set_hIST","_png_set_IHDR","_png_set_pCAL","_png_set_sCAL_s","_png_set_sCAL","_png_set_PLTE","_png_set_sBIT","_png_set_sRGB_gAMA_and_cHRM","_png_set_iCCP","_png_set_text","_png_set_text_2","_png_set_unknown_chunk_location","_png_permit_mng_features","_png_set_user_limits","_png_set_chunk_cache_max","_png_set_chunk_malloc_max","_png_set_packing","_png_set_interlace_handling","_png_set_filler","_png_do_invert","_png_do_swap","_png_do_packswap","_png_set_tIME","_png_set_tRNS","_png_set_sPLT","_png_set_unknown_chunks","_png_set_keep_unknown_chunks","_png_set_compression_buffer_size","_png_set_shift","_png_do_strip_channel","_png_do_bgr","_png_do_check_palette_indexes","_png_write_data","_png_default_write_data","_png_flush","_png_default_flush","_png_set_write_fn","_png_write_info_before_PLTE","_png_write_info","_png_write_end","_png_create_write_struct_2","_png_reset_filter_heuristics","_png_set_compression_level","_png_set_compression_mem_level","_png_set_compression_strategy","_png_write_row","_png_write_flush","_png_destroy_write_struct","_png_write_destroy","_png_set_filter","_png_set_compression_window_bits","_png_do_write_transformations","_png_do_pack","_png_do_shift","_png_do_write_swap_alpha","_png_do_write_invert_alpha","_png_do_write_intrapixel","_png_save_uint_32","_png_save_int_32","_png_save_uint_16","_png_write_sig","_png_write_chunk_header","_png_write_chunk_data","_png_write_chunk_end","_png_write_chunk","_png_write_complete_chunk","_png_write_IHDR","_png_write_PLTE","_png_write_IDAT","_png_write_IEND","_png_write_gAMA_fixed","_png_write_sRGB","_png_write_iCCP","_png_check_keyword","_png_text_compress","_png_write_compressed_data_out","_png_write_sPLT","_png_write_sBIT","_png_write_cHRM_fixed","_png_write_tRNS","_png_write_bKGD","_png_write_hIST","_png_write_tEXt","_png_write_zTXt","_png_write_iTXt","_png_write_oFFs","_png_write_pCAL","_png_write_sCAL_s","_png_write_pHYs","_png_write_tIME","_png_write_start_row","_png_zlib_claim","_png_write_finish_row","_png_zlib_release","_png_do_write_interlace","_png_write_find_filter","_adler32","_crc32_little","_png_write_filtered_row","_crc32","_deflateInit2_","_deflateEnd","_deflateReset","_fill_window","_deflateResetKeep","_lm_init","_deflate","_putShortMSB","_flush_pending","_deflate_huff","_deflate_rle","_read_buf","_deflate_stored","_deflate_fast","_deflate_slow","_longest_match","_inflate_fast","_inflateResetKeep","_inflateReset","_inflateReset2","_inflateInit2_","_inflateInit_","_inflate","_fixedtables1309","_init_block","_bi_flush","_updatewindow","_inflateEnd","_inflate_table","__tr_init","__tr_stored_block","_copy_block","__tr_flush_bits","_detect_data_type","_compress_block","__tr_align","__tr_flush_block","_build_tree","_build_bl_tree","_bi_windup","_send_tree","_scan_tree","_pqdownheap","_send_all_trees","_bi_reverse","_zmemcpy","_gen_bitlen","_gen_codes","_zmemzero","_malloc","_tmalloc_small","_tmalloc_large","_sys_alloc","_release_unused_segments","_sys_trim","_free","_segment_holding","_init_top","_init_bins","_init_mparams","_prepend_alloc","_add_segment"]
