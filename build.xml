<?xml version="1.0"?>
<project name="Sakai 3 UX" default="finish" basedir=".">

    <description>Sakai 3 UX Build Script</description>

    <!-- Target: Init -->
    <target name="init">

        <echo message="Sakai 3 UX Build: Initialising..." />

        <!-- SETUP - Source and target paths -->
        <property name="SRC_DIR" value="dev" description="Core source folder" />
        <property name="QUNIT_SRC_DIR" value="tests" description="QUnit test folder" />
        <property name="INSTRUMENTED_DIR" value="${SRC_DIR}-i" description="Instrumented source folder" />
        <property name="TARGET" value="target" description="Core target folder" />
        <property name="TARGET_RESOURCES" value="${TARGET}/processed-resources" description="Top directory for JARs, archives" />
        <property name="TARGET_COMPRESSED_DIR" value="${TARGET}/compressed" description="Core compressed folder" />

        <property name="TARGET_DIR" value="${TARGET_RESOURCES}/dev" description="Core target folder" />
        <property name="TARGET_QUNIT_DIR" value="${TARGET_RESOURCES}/tests" description="QUnit target folder" />
        <property name="TARGET_DOCUMENTATION_DIR" value="${TARGET_RESOURCES}/jsdoc" description="JSDoc documentation folder" />
        <property name="TARGET_REPORTS_DIR" value="${TARGET_RESOURCES}/reports" description="Core reports folder" />

        <property name="SRC_DIR_W" value="devwidgets" description="Source folder for widgets" />
        <property name="TARGET_DIR_W" value="${TARGET_RESOURCES}/devwidgets" description="Target folder for widgets" />

        <property name="SRC_DIR_VAR" value="var" description="Source folder for content under /var that needs to be stored in JCR" />
        <property name="TARGET_DIR_VAR" value="${TARGET_RESOURCES}/var" description="Target folder for content under /var that needs to be stored in JCR" />

        <property name="SRC_DIR_APPS" value="apps" description="Source folder for content under /apps that needs to be stored in JCR" />
        <property name="TARGET_DIR_APPS" value="${TARGET_RESOURCES}/apps" description="Target folder for content under /apps that needs to be stored in JCR" />

        <property name="SRC_DIR_ROOT" value="root" description="Source folder for content under / that needs to be stored in JCR" />
        <property name="TARGET_DIR_ROOT" value="${TARGET_RESOURCES}/root" description="Target folder for content under / that needs to be stored in JCR" />

        <!-- SETUP - Processed output file names -->
        <property name="TARGET_JAR_FILE" value="${TARGET_COMPRESSED_DIR}/sakai3-ux.jar" description="Target JAR file" />
        <property name="TARGET_ZIP_FILE" value="${TARGET_COMPRESSED_DIR}/sakai3-ux.zip" description="Target ZIP file" />
        <property name="TARGET_TAR_FILE" value="${TARGET_COMPRESSED_DIR}/sakai3-ux.tar.gz" description="Target TAR file" />

        <!-- SETUP - Tools -->
        <property name="YUI_COMPRESSOR" value="tools/yuicompressor/yuicompressor-2.4.2.jar" description="YUI Compressor 2.4.2" />
        <property name="JSDOCTOOLKIT_DIR" value="tools/jsdoc-toolkit" description="JSDoc-Toolkit" />

        <!-- Define a patternset for core JS files (from ${TARGET_DIR}) -->
        <patternset id="js.corefiles">
            <include name="javascript/**/*.js"/>
            <include name="configuration/**/*.js"/>
            <include name="lib/sakai_util/**/*.js"/>
        </patternset>

        <!-- Define patternset for widget JS files (from ${TARGET_DIR_W}) -->
        <patternset id="js.widgetfiles">
            <include name="**/javascript/*.js"/>
            <exclude name="**/javascript/*.min.*"/>
        </patternset>

        <!-- Define patternset for core CSS files (from ${TARGET_DIR}) -->
        <patternset id="css.corefiles">
            <include name="css/sakai/**/*.css"/>
            <include name="skins/**/*.css"/>
        </patternset>

        <!-- Define patternset for widget CSS files (from ${TARGET_DIR_W}) -->
        <patternset id="css.widgetfiles">
            <include name="**/css/*.css"/>
        </patternset>

    </target>

    <!-- Target: Create target folders, set up logging -->
    <target name="create_target_folders" depends="init" description="Creating target forlders">

        <echo message="Sakai 3 UX Build: Creating target folders..." />

        <mkdir dir="${TARGET_DIR}"/>
        <mkdir dir="${TARGET_DIR_W}"/>
        <mkdir dir="${TARGET_DIR_VAR}"/>
        <mkdir dir="${TARGET_DIR_APPS}"/>
        <mkdir dir="${TARGET_DIR_ROOT}"/>
        <mkdir dir="${TARGET_COMPRESSED_DIR}"/>
        <mkdir dir="${TARGET_DOCUMENTATION_DIR}"/>
        <mkdir dir="${TARGET_REPORTS_DIR}"/>

        <!-- Set up build logging -->
        <record name="${TARGET_REPORTS_DIR}/build.log" loglevel="verbose"/>

    </target>

    <!-- Target: Copy source tree -->
    <target name="copy_prod" depends="create_target_folders" description="Copy source files to target folders">

        <echo message="Making a copy of core source files..." />
        <copy todir="${TARGET_DIR}">
            <fileset dir="${SRC_DIR}" />
        </copy>

        <echo message="Making a copy of widget source files..." />
        <copy todir="${TARGET_DIR_W}">
            <fileset dir="${SRC_DIR_W}" />
        </copy>

        <echo message="Making a copy of var content files..." />
        <copy todir="${TARGET_DIR_VAR}" filtering="true">
            <filterset begintoken="@" endtoken="@">
              <filtersfile file="${TARGET}/scm-version.properties" />
            </filterset>
            <fileset dir="${SRC_DIR_VAR}" />
        </copy>

        <echo message="Making a copy of apps content files..." />
        <copy todir="${TARGET_DIR_APPS}">
            <fileset dir="${SRC_DIR_APPS}" />
        </copy>

        <echo message="Making a copy of root content files..." />
        <copy todir="${TARGET_DIR_ROOT}">
            <fileset dir="${SRC_DIR_ROOT}" />
        </copy>

    </target>

     <!-- Target: Copy source tree -->
    <target name="copy_test" depends="copy_prod" description="Copy qunit files to target folders">

        <echo message="Making a copy of QUnit test files..." />
        <copy todir="${TARGET_QUNIT_DIR}">
            <fileset dir="${QUNIT_SRC_DIR}" />
        </copy>

    </target>

    <!-- Target: Normalise permissions -->
    <target name="permissions">

        <echo message="Normalising permissions..." />
        <chmod dir="${TARGET}" perm="744" type="both"/>

    </target>

    <!-- Target: Check whitespace, tabs, line ending -->
    <target name="formatting" depends="create_target_folders">

        <echo message="Fixing encoding, EOL, tabs and EOF..." />
        <fixcrlf srcdir="${TARGET_DIR}" includes="*.html,*.js,*.css,*.json" outputencoding="utf-8" eol="lf" tab="remove" tablength="4" eof="remove" />

    </target>

    <!-- Target: Minfy CSS files -->
    <target name="minify_css" depends="create_target_folders">

        <echo message="Minifying core CSS files..." />
        <apply executable="java" parallel="false" dest="${TARGET_DIR}" force="true">
            <fileset dir="${TARGET_DIR}">
                <patternset refid="css.corefiles"/>
            </fileset>
            <arg value="-jar"/>
            <arg path="${YUI_COMPRESSOR}"/>
            <srcfile/>
            <arg value="-o"/>
            <mapper type="identity"/>
            <targetfile/>
        </apply>

        <echo message="Minifying widget CSS files..." />
        <apply executable="java" parallel="false" dest="${TARGET_DIR_W}" force="true">
            <fileset dir="${TARGET_DIR_W}">
                <patternset refid="css.widgetfiles"/>
            </fileset>
            <arg value="-jar"/>
            <arg path="${YUI_COMPRESSOR}"/>
            <srcfile/>
            <arg value="-o"/>
            <mapper type="identity"/>
            <targetfile/>
        </apply>

    </target>

    <!-- Target: Minify Javascript -->
    <target name="minify_js" depends="create_target_folders">

        <echo message="Minifying core Javascript files..." />
        <apply executable="java" parallel="false" dest="${TARGET_DIR}" force="true">
            <fileset dir="${TARGET_DIR}">
                <patternset refid="js.corefiles"/>
            </fileset>
            <arg value="-jar"/>
            <arg path="${YUI_COMPRESSOR}"/>
            <srcfile/>
            <arg value="-o"/>
            <mapper type="identity"/>
            <targetfile/>
        </apply>

        <echo message="Minifying widget Javascript files..." />
        <apply executable="java" parallel="false" dest="${TARGET_DIR_W}" force="true">
            <fileset dir="${TARGET_DIR_W}">
                <patternset refid="js.widgetfiles"/>
            </fileset>
            <arg value="-jar"/>
            <arg path="${YUI_COMPRESSOR}"/>
            <srcfile/>
            <arg value="-o"/>
            <mapper type="identity"/>
            <targetfile/>
        </apply>

    </target>

    <!-- Target: Create archives -->
    <target name="compress" depends="create_target_folders">

        <echo message="Creating ZIP file..." />
        <zip destfile="${TARGET_ZIP_FILE}" basedir="${TARGET_RESOURCES}" encoding="UTF-8"/>

        <echo message="Creating gzipped TAR file..." />
        <tar destfile="${TARGET_TAR_FILE}" basedir="${TARGET_RESOURCES}" compression="gzip"/>

    </target>

    <!-- Create documentation -->
    <target name="documentation" depends="create_target_folders">

        <echo message="Creating documentation..."/>
        <property name="jsdoc.output" location="${TARGET_DOCUMENTATION_DIR}"/>
        <property name="jsdoc.defaulttemplate" location="${JSDOCTOOLKIT_DIR}/templates/jsdoc"/>
        <property name="jsdoc.logfile" location="${TARGET_REPORTS_DIR}/documentation.log"/>

        <apply executable="java" parallel="true">
            <arg value="-jar"/>
            <arg path="${JSDOCTOOLKIT_DIR}/jsrun.jar"/>
            <arg path="${JSDOCTOOLKIT_DIR}/app/run.js"/>
            <arg value="-d=${jsdoc.output}"/>
            <arg value="-t=${jsdoc.defaulttemplate}"/>
            <arg value="-o=${jsdoc.logfile}"/>
            <filelist dir="${SRC_DIR}/lib/sakai">
                <file name="sakai.api.core.js" />
                <file name="sakai.api.util.js" />
                <file name="sakai.api.i18n.js" />
                <file name="sakai.api.l10n.js" />
                <file name="sakai.api.user.js" />
                <file name="sakai.api.widgets.js" />
                <file name="sakai.api.groups.js" />
                <file name="sakai.api.communication.js" />
                <file name="sakai.api.content.js" />
            </filelist>
            <fileset dir="${SRC_DIR_W}">
                <patternset refid="js.widgetfiles"/>
            </fileset>
        </apply>
    </target>

    <!-- Target: Instrument with JSCoverage -->
    <target name="instrument" depends="init">
        <delete dir="${INSTRUMENTED_DIR}" includeemptydirs="true" />
        <exec executable="jscoverage">
            <arg value="--no-instrument" />
            <arg value="lib${file.separator}google" />
            <arg value="--no-instrument" />
            <arg value="lib${file.separator}Fluid" />
            <arg value="--no-instrument" />
            <arg value="lib${file.separator}jquery" />
            <arg value="--no-instrument" />
            <arg value="lib${file.separator}sakai_util${file.separator}trimpath.template.js" />
            <arg value="${SRC_DIR}" />
            <arg value="${INSTRUMENTED_DIR}" />
        </exec>
    </target>

    <!-- Target: Release Builds-->
    <target name="release" depends="init, create_target_folders, copy_prod, permissions, formatting, minify_css, minify_js, compress, documentation">
        <echo message="Sakai 3 UX Build: Build complete." />
    </target>

    <!-- Target: Development Builds -->
    <target name="development" depends="copy_test, documentation">
        <echo message="Sakai 3 UX Development Build: Build complete." />
    </target>

    <!-- Target: Remove the build folder -->
    <target name="clean" depends="init" description="Remove the build folder">
        <delete dir="${TARGET}" includeemptydirs="true" />
        <delete dir="${INSTRUMENTED_DIR}" includeemptydirs="true" />
    </target>

</project>
